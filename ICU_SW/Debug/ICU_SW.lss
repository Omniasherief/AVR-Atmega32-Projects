
ICU_SW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004262  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c8  00800060  00004262  000042f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001b  00800128  00800128  000043be  2**0
                  ALLOC
  3 .stab         00003084  00000000  00000000  000043c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011a7  00000000  00000000  00007444  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000085eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000872b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000889b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a4e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b3cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c17c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c2dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c569  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cd37  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 61 1e 	jmp	0x3cc2	; 0x3cc2 <__vector_1>
       8:	0c 94 94 1e 	jmp	0x3d28	; 0x3d28 <__vector_2>
       c:	0c 94 c7 1e 	jmp	0x3d8e	; 0x3d8e <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 07 20 	jmp	0x400e	; 0x400e <__vector_10>
      2c:	0c 94 d4 1f 	jmp	0x3fa8	; 0x3fa8 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e6       	ldi	r30, 0x62	; 98
      68:	f2 e4       	ldi	r31, 0x42	; 66
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 32       	cpi	r26, 0x28	; 40
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e2       	ldi	r26, 0x28	; 40
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 34       	cpi	r26, 0x43	; 67
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3a 20 	call	0x4074	; 0x4074 <main>
      8a:	0c 94 2f 21 	jmp	0x425e	; 0x425e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f8 20 	jmp	0x41f0	; 0x41f0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 ea       	ldi	r26, 0xA7	; 167
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 14 21 	jmp	0x4228	; 0x4228 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 04 21 	jmp	0x4208	; 0x4208 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 20 21 	jmp	0x4240	; 0x4240 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 04 21 	jmp	0x4208	; 0x4208 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 20 21 	jmp	0x4240	; 0x4240 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f8 20 	jmp	0x41f0	; 0x41f0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 ea       	ldi	r24, 0xA7	; 167
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 14 21 	jmp	0x4228	; 0x4228 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 04 21 	jmp	0x4208	; 0x4208 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 20 21 	jmp	0x4240	; 0x4240 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 04 21 	jmp	0x4208	; 0x4208 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 20 21 	jmp	0x4240	; 0x4240 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 04 21 	jmp	0x4208	; 0x4208 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 20 21 	jmp	0x4240	; 0x4240 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 08 21 	jmp	0x4210	; 0x4210 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 24 21 	jmp	0x4248	; 0x4248 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <voidSetHalfDataPort>:
#include"CLCD_interface.h"
#include"CLCD_prv.h"
#include"CLCD_cfg.h"
#if CLCD_u8BIT_MODE ==FOUR_BIT
static void voidSetHalfDataPort(uint8 Copy_u8Data)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	89 83       	std	Y+1, r24	; 0x01
DIO_u8SetPinValue(CLCD_u8DATA_PORT,CLCD_u8D4_PIN,GET_BIT(Copy_u8Data,0));
     b52:	89 81       	ldd	r24, Y+1	; 0x01
     b54:	98 2f       	mov	r25, r24
     b56:	91 70       	andi	r25, 0x01	; 1
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	63 e0       	ldi	r22, 0x03	; 3
     b5c:	49 2f       	mov	r20, r25
     b5e:	0e 94 b8 19 	call	0x3370	; 0x3370 <DIO_u8SetPinValue>
DIO_u8SetPinValue(CLCD_u8DATA_PORT,CLCD_u8D5_PIN,GET_BIT(Copy_u8Data,1));
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	86 95       	lsr	r24
     b66:	98 2f       	mov	r25, r24
     b68:	91 70       	andi	r25, 0x01	; 1
     b6a:	80 e0       	ldi	r24, 0x00	; 0
     b6c:	64 e0       	ldi	r22, 0x04	; 4
     b6e:	49 2f       	mov	r20, r25
     b70:	0e 94 b8 19 	call	0x3370	; 0x3370 <DIO_u8SetPinValue>
DIO_u8SetPinValue(CLCD_u8DATA_PORT,CLCD_u8D6_PIN,GET_BIT(Copy_u8Data,2));
     b74:	89 81       	ldd	r24, Y+1	; 0x01
     b76:	86 95       	lsr	r24
     b78:	86 95       	lsr	r24
     b7a:	98 2f       	mov	r25, r24
     b7c:	91 70       	andi	r25, 0x01	; 1
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	65 e0       	ldi	r22, 0x05	; 5
     b82:	49 2f       	mov	r20, r25
     b84:	0e 94 b8 19 	call	0x3370	; 0x3370 <DIO_u8SetPinValue>
DIO_u8SetPinValue(CLCD_u8DATA_PORT,CLCD_u8D7_PIN,GET_BIT(Copy_u8Data,3));
     b88:	89 81       	ldd	r24, Y+1	; 0x01
     b8a:	86 95       	lsr	r24
     b8c:	86 95       	lsr	r24
     b8e:	86 95       	lsr	r24
     b90:	98 2f       	mov	r25, r24
     b92:	91 70       	andi	r25, 0x01	; 1
     b94:	80 e0       	ldi	r24, 0x00	; 0
     b96:	66 e0       	ldi	r22, 0x06	; 6
     b98:	49 2f       	mov	r20, r25
     b9a:	0e 94 b8 19 	call	0x3370	; 0x3370 <DIO_u8SetPinValue>
}
     b9e:	0f 90       	pop	r0
     ba0:	cf 91       	pop	r28
     ba2:	df 91       	pop	r29
     ba4:	08 95       	ret

00000ba6 <voidSendEnablePulse>:
#endif

static void voidSendEnablePulse(void)
{
     ba6:	df 93       	push	r29
     ba8:	cf 93       	push	r28
     baa:	cd b7       	in	r28, 0x3d	; 61
     bac:	de b7       	in	r29, 0x3e	; 62
     bae:	2e 97       	sbiw	r28, 0x0e	; 14
     bb0:	0f b6       	in	r0, 0x3f	; 63
     bb2:	f8 94       	cli
     bb4:	de bf       	out	0x3e, r29	; 62
     bb6:	0f be       	out	0x3f, r0	; 63
     bb8:	cd bf       	out	0x3d, r28	; 61

	// send enable pulse
	DIO_u8SetPinValue(CLCD_u8CTRL_PORT,CLCD_u8E_PIN,DIO_u8PIN_HIGH );
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	62 e0       	ldi	r22, 0x02	; 2
     bbe:	41 e0       	ldi	r20, 0x01	; 1
     bc0:	0e 94 b8 19 	call	0x3370	; 0x3370 <DIO_u8SetPinValue>
     bc4:	80 e0       	ldi	r24, 0x00	; 0
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	a0 e0       	ldi	r26, 0x00	; 0
     bca:	b0 e4       	ldi	r27, 0x40	; 64
     bcc:	8b 87       	std	Y+11, r24	; 0x0b
     bce:	9c 87       	std	Y+12, r25	; 0x0c
     bd0:	ad 87       	std	Y+13, r26	; 0x0d
     bd2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bd4:	6b 85       	ldd	r22, Y+11	; 0x0b
     bd6:	7c 85       	ldd	r23, Y+12	; 0x0c
     bd8:	8d 85       	ldd	r24, Y+13	; 0x0d
     bda:	9e 85       	ldd	r25, Y+14	; 0x0e
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	4a e7       	ldi	r20, 0x7A	; 122
     be2:	55 e4       	ldi	r21, 0x45	; 69
     be4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     be8:	dc 01       	movw	r26, r24
     bea:	cb 01       	movw	r24, r22
     bec:	8f 83       	std	Y+7, r24	; 0x07
     bee:	98 87       	std	Y+8, r25	; 0x08
     bf0:	a9 87       	std	Y+9, r26	; 0x09
     bf2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bf4:	6f 81       	ldd	r22, Y+7	; 0x07
     bf6:	78 85       	ldd	r23, Y+8	; 0x08
     bf8:	89 85       	ldd	r24, Y+9	; 0x09
     bfa:	9a 85       	ldd	r25, Y+10	; 0x0a
     bfc:	20 e0       	ldi	r18, 0x00	; 0
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	40 e8       	ldi	r20, 0x80	; 128
     c02:	5f e3       	ldi	r21, 0x3F	; 63
     c04:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c08:	88 23       	and	r24, r24
     c0a:	2c f4       	brge	.+10     	; 0xc16 <voidSendEnablePulse+0x70>
		__ticks = 1;
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	9e 83       	std	Y+6, r25	; 0x06
     c12:	8d 83       	std	Y+5, r24	; 0x05
     c14:	3f c0       	rjmp	.+126    	; 0xc94 <voidSendEnablePulse+0xee>
	else if (__tmp > 65535)
     c16:	6f 81       	ldd	r22, Y+7	; 0x07
     c18:	78 85       	ldd	r23, Y+8	; 0x08
     c1a:	89 85       	ldd	r24, Y+9	; 0x09
     c1c:	9a 85       	ldd	r25, Y+10	; 0x0a
     c1e:	20 e0       	ldi	r18, 0x00	; 0
     c20:	3f ef       	ldi	r19, 0xFF	; 255
     c22:	4f e7       	ldi	r20, 0x7F	; 127
     c24:	57 e4       	ldi	r21, 0x47	; 71
     c26:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c2a:	18 16       	cp	r1, r24
     c2c:	4c f5       	brge	.+82     	; 0xc80 <voidSendEnablePulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c2e:	6b 85       	ldd	r22, Y+11	; 0x0b
     c30:	7c 85       	ldd	r23, Y+12	; 0x0c
     c32:	8d 85       	ldd	r24, Y+13	; 0x0d
     c34:	9e 85       	ldd	r25, Y+14	; 0x0e
     c36:	20 e0       	ldi	r18, 0x00	; 0
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	40 e2       	ldi	r20, 0x20	; 32
     c3c:	51 e4       	ldi	r21, 0x41	; 65
     c3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c42:	dc 01       	movw	r26, r24
     c44:	cb 01       	movw	r24, r22
     c46:	bc 01       	movw	r22, r24
     c48:	cd 01       	movw	r24, r26
     c4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c4e:	dc 01       	movw	r26, r24
     c50:	cb 01       	movw	r24, r22
     c52:	9e 83       	std	Y+6, r25	; 0x06
     c54:	8d 83       	std	Y+5, r24	; 0x05
     c56:	0f c0       	rjmp	.+30     	; 0xc76 <voidSendEnablePulse+0xd0>
     c58:	80 e9       	ldi	r24, 0x90	; 144
     c5a:	91 e0       	ldi	r25, 0x01	; 1
     c5c:	9c 83       	std	Y+4, r25	; 0x04
     c5e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c60:	8b 81       	ldd	r24, Y+3	; 0x03
     c62:	9c 81       	ldd	r25, Y+4	; 0x04
     c64:	01 97       	sbiw	r24, 0x01	; 1
     c66:	f1 f7       	brne	.-4      	; 0xc64 <voidSendEnablePulse+0xbe>
     c68:	9c 83       	std	Y+4, r25	; 0x04
     c6a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c6c:	8d 81       	ldd	r24, Y+5	; 0x05
     c6e:	9e 81       	ldd	r25, Y+6	; 0x06
     c70:	01 97       	sbiw	r24, 0x01	; 1
     c72:	9e 83       	std	Y+6, r25	; 0x06
     c74:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c76:	8d 81       	ldd	r24, Y+5	; 0x05
     c78:	9e 81       	ldd	r25, Y+6	; 0x06
     c7a:	00 97       	sbiw	r24, 0x00	; 0
     c7c:	69 f7       	brne	.-38     	; 0xc58 <voidSendEnablePulse+0xb2>
     c7e:	14 c0       	rjmp	.+40     	; 0xca8 <voidSendEnablePulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c80:	6f 81       	ldd	r22, Y+7	; 0x07
     c82:	78 85       	ldd	r23, Y+8	; 0x08
     c84:	89 85       	ldd	r24, Y+9	; 0x09
     c86:	9a 85       	ldd	r25, Y+10	; 0x0a
     c88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c8c:	dc 01       	movw	r26, r24
     c8e:	cb 01       	movw	r24, r22
     c90:	9e 83       	std	Y+6, r25	; 0x06
     c92:	8d 83       	std	Y+5, r24	; 0x05
     c94:	8d 81       	ldd	r24, Y+5	; 0x05
     c96:	9e 81       	ldd	r25, Y+6	; 0x06
     c98:	9a 83       	std	Y+2, r25	; 0x02
     c9a:	89 83       	std	Y+1, r24	; 0x01
     c9c:	89 81       	ldd	r24, Y+1	; 0x01
     c9e:	9a 81       	ldd	r25, Y+2	; 0x02
     ca0:	01 97       	sbiw	r24, 0x01	; 1
     ca2:	f1 f7       	brne	.-4      	; 0xca0 <voidSendEnablePulse+0xfa>
     ca4:	9a 83       	std	Y+2, r25	; 0x02
     ca6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_u8CTRL_PORT,CLCD_u8E_PIN,DIO_u8PIN_LOW);
     ca8:	80 e0       	ldi	r24, 0x00	; 0
     caa:	62 e0       	ldi	r22, 0x02	; 2
     cac:	40 e0       	ldi	r20, 0x00	; 0
     cae:	0e 94 b8 19 	call	0x3370	; 0x3370 <DIO_u8SetPinValue>
}
     cb2:	2e 96       	adiw	r28, 0x0e	; 14
     cb4:	0f b6       	in	r0, 0x3f	; 63
     cb6:	f8 94       	cli
     cb8:	de bf       	out	0x3e, r29	; 62
     cba:	0f be       	out	0x3f, r0	; 63
     cbc:	cd bf       	out	0x3d, r28	; 61
     cbe:	cf 91       	pop	r28
     cc0:	df 91       	pop	r29
     cc2:	08 95       	ret

00000cc4 <CLCD_voidSendCmd>:


void CLCD_voidSendCmd(uint8 Copy_u8Cmd)
{ //set RS pin to low for command
     cc4:	df 93       	push	r29
     cc6:	cf 93       	push	r28
     cc8:	0f 92       	push	r0
     cca:	cd b7       	in	r28, 0x3d	; 61
     ccc:	de b7       	in	r29, 0x3e	; 62
     cce:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(CLCD_u8CTRL_PORT,CLCD_u8RS_PIN,DIO_u8PIN_LOW);
     cd0:	80 e0       	ldi	r24, 0x00	; 0
     cd2:	61 e0       	ldi	r22, 0x01	; 1
     cd4:	40 e0       	ldi	r20, 0x00	; 0
     cd6:	0e 94 b8 19 	call	0x3370	; 0x3370 <DIO_u8SetPinValue>
	//send the command
	DIO_u8SetPortValue(CLCD_u8DATA_PORT,Copy_u8Cmd);
	voidSendEnablePulse();
#elif 	CLCD_u8BIT_MODE==FOUR_BIT
	/*Send the 4 Most significant bits of the command first*/
	voidSetHalfDataPort(Copy_u8Cmd >> 4);
     cda:	89 81       	ldd	r24, Y+1	; 0x01
     cdc:	82 95       	swap	r24
     cde:	8f 70       	andi	r24, 0x0F	; 15
     ce0:	0e 94 a3 05 	call	0xb46	; 0xb46 <voidSetHalfDataPort>
	voidSendEnablePulse();
     ce4:	0e 94 d3 05 	call	0xba6	; 0xba6 <voidSendEnablePulse>
	voidSetHalfDataPort(Copy_u8Cmd);
     ce8:	89 81       	ldd	r24, Y+1	; 0x01
     cea:	0e 94 a3 05 	call	0xb46	; 0xb46 <voidSetHalfDataPort>
	voidSendEnablePulse();
     cee:	0e 94 d3 05 	call	0xba6	; 0xba6 <voidSendEnablePulse>
#else
#error wrong CLCD_u8BIT_MODE configuration option
#endif

}
     cf2:	0f 90       	pop	r0
     cf4:	cf 91       	pop	r28
     cf6:	df 91       	pop	r29
     cf8:	08 95       	ret

00000cfa <CLCD_voidSendData>:
void CLCD_voidSendData(uint8 Copy_u8Data)
{
     cfa:	df 93       	push	r29
     cfc:	cf 93       	push	r28
     cfe:	0f 92       	push	r0
     d00:	cd b7       	in	r28, 0x3d	; 61
     d02:	de b7       	in	r29, 0x3e	; 62
     d04:	89 83       	std	Y+1, r24	; 0x01

	 //set RS pin to HIGH for DATA
		DIO_u8SetPinValue(CLCD_u8CTRL_PORT,CLCD_u8RS_PIN,DIO_u8PIN_HIGH);
     d06:	80 e0       	ldi	r24, 0x00	; 0
     d08:	61 e0       	ldi	r22, 0x01	; 1
     d0a:	41 e0       	ldi	r20, 0x01	; 1
     d0c:	0e 94 b8 19 	call	0x3370	; 0x3370 <DIO_u8SetPinValue>
	DIO_u8SetPortValue(CLCD_u8DATA_PORT,Copy_u8Data);//
	voidSendEnablePulse();

#elif CLCD_u8BIT_MODE == FOUR_BIT
	/*Send the 4 Most significant bits of the data first*/
	voidSetHalfDataPort(Copy_u8Data >> 4);
     d10:	89 81       	ldd	r24, Y+1	; 0x01
     d12:	82 95       	swap	r24
     d14:	8f 70       	andi	r24, 0x0F	; 15
     d16:	0e 94 a3 05 	call	0xb46	; 0xb46 <voidSetHalfDataPort>
	voidSendEnablePulse();
     d1a:	0e 94 d3 05 	call	0xba6	; 0xba6 <voidSendEnablePulse>
	voidSetHalfDataPort(Copy_u8Data);
     d1e:	89 81       	ldd	r24, Y+1	; 0x01
     d20:	0e 94 a3 05 	call	0xb46	; 0xb46 <voidSetHalfDataPort>
	voidSendEnablePulse();
     d24:	0e 94 d3 05 	call	0xba6	; 0xba6 <voidSendEnablePulse>

#else
#error wrong CLCD_u8BIT_MODE configuration option
#endif

}
     d28:	0f 90       	pop	r0
     d2a:	cf 91       	pop	r28
     d2c:	df 91       	pop	r29
     d2e:	08 95       	ret

00000d30 <CLCD_VoidInit>:
void CLCD_VoidInit(void)
{//if rs ==0 it is command ..low
     d30:	df 93       	push	r29
     d32:	cf 93       	push	r28
     d34:	cd b7       	in	r28, 0x3d	; 61
     d36:	de b7       	in	r29, 0x3e	; 62
     d38:	2e 97       	sbiw	r28, 0x0e	; 14
     d3a:	0f b6       	in	r0, 0x3f	; 63
     d3c:	f8 94       	cli
     d3e:	de bf       	out	0x3e, r29	; 62
     d40:	0f be       	out	0x3f, r0	; 63
     d42:	cd bf       	out	0x3d, r28	; 61
     d44:	80 e0       	ldi	r24, 0x00	; 0
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	a0 e2       	ldi	r26, 0x20	; 32
     d4a:	b2 e4       	ldi	r27, 0x42	; 66
     d4c:	8b 87       	std	Y+11, r24	; 0x0b
     d4e:	9c 87       	std	Y+12, r25	; 0x0c
     d50:	ad 87       	std	Y+13, r26	; 0x0d
     d52:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d54:	6b 85       	ldd	r22, Y+11	; 0x0b
     d56:	7c 85       	ldd	r23, Y+12	; 0x0c
     d58:	8d 85       	ldd	r24, Y+13	; 0x0d
     d5a:	9e 85       	ldd	r25, Y+14	; 0x0e
     d5c:	20 e0       	ldi	r18, 0x00	; 0
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	4a e7       	ldi	r20, 0x7A	; 122
     d62:	55 e4       	ldi	r21, 0x45	; 69
     d64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d68:	dc 01       	movw	r26, r24
     d6a:	cb 01       	movw	r24, r22
     d6c:	8f 83       	std	Y+7, r24	; 0x07
     d6e:	98 87       	std	Y+8, r25	; 0x08
     d70:	a9 87       	std	Y+9, r26	; 0x09
     d72:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d74:	6f 81       	ldd	r22, Y+7	; 0x07
     d76:	78 85       	ldd	r23, Y+8	; 0x08
     d78:	89 85       	ldd	r24, Y+9	; 0x09
     d7a:	9a 85       	ldd	r25, Y+10	; 0x0a
     d7c:	20 e0       	ldi	r18, 0x00	; 0
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	40 e8       	ldi	r20, 0x80	; 128
     d82:	5f e3       	ldi	r21, 0x3F	; 63
     d84:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d88:	88 23       	and	r24, r24
     d8a:	2c f4       	brge	.+10     	; 0xd96 <CLCD_VoidInit+0x66>
		__ticks = 1;
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	9e 83       	std	Y+6, r25	; 0x06
     d92:	8d 83       	std	Y+5, r24	; 0x05
     d94:	3f c0       	rjmp	.+126    	; 0xe14 <CLCD_VoidInit+0xe4>
	else if (__tmp > 65535)
     d96:	6f 81       	ldd	r22, Y+7	; 0x07
     d98:	78 85       	ldd	r23, Y+8	; 0x08
     d9a:	89 85       	ldd	r24, Y+9	; 0x09
     d9c:	9a 85       	ldd	r25, Y+10	; 0x0a
     d9e:	20 e0       	ldi	r18, 0x00	; 0
     da0:	3f ef       	ldi	r19, 0xFF	; 255
     da2:	4f e7       	ldi	r20, 0x7F	; 127
     da4:	57 e4       	ldi	r21, 0x47	; 71
     da6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     daa:	18 16       	cp	r1, r24
     dac:	4c f5       	brge	.+82     	; 0xe00 <CLCD_VoidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dae:	6b 85       	ldd	r22, Y+11	; 0x0b
     db0:	7c 85       	ldd	r23, Y+12	; 0x0c
     db2:	8d 85       	ldd	r24, Y+13	; 0x0d
     db4:	9e 85       	ldd	r25, Y+14	; 0x0e
     db6:	20 e0       	ldi	r18, 0x00	; 0
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	40 e2       	ldi	r20, 0x20	; 32
     dbc:	51 e4       	ldi	r21, 0x41	; 65
     dbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dc2:	dc 01       	movw	r26, r24
     dc4:	cb 01       	movw	r24, r22
     dc6:	bc 01       	movw	r22, r24
     dc8:	cd 01       	movw	r24, r26
     dca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dce:	dc 01       	movw	r26, r24
     dd0:	cb 01       	movw	r24, r22
     dd2:	9e 83       	std	Y+6, r25	; 0x06
     dd4:	8d 83       	std	Y+5, r24	; 0x05
     dd6:	0f c0       	rjmp	.+30     	; 0xdf6 <CLCD_VoidInit+0xc6>
     dd8:	80 e9       	ldi	r24, 0x90	; 144
     dda:	91 e0       	ldi	r25, 0x01	; 1
     ddc:	9c 83       	std	Y+4, r25	; 0x04
     dde:	8b 83       	std	Y+3, r24	; 0x03
     de0:	8b 81       	ldd	r24, Y+3	; 0x03
     de2:	9c 81       	ldd	r25, Y+4	; 0x04
     de4:	01 97       	sbiw	r24, 0x01	; 1
     de6:	f1 f7       	brne	.-4      	; 0xde4 <CLCD_VoidInit+0xb4>
     de8:	9c 83       	std	Y+4, r25	; 0x04
     dea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dec:	8d 81       	ldd	r24, Y+5	; 0x05
     dee:	9e 81       	ldd	r25, Y+6	; 0x06
     df0:	01 97       	sbiw	r24, 0x01	; 1
     df2:	9e 83       	std	Y+6, r25	; 0x06
     df4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     df6:	8d 81       	ldd	r24, Y+5	; 0x05
     df8:	9e 81       	ldd	r25, Y+6	; 0x06
     dfa:	00 97       	sbiw	r24, 0x00	; 0
     dfc:	69 f7       	brne	.-38     	; 0xdd8 <CLCD_VoidInit+0xa8>
     dfe:	14 c0       	rjmp	.+40     	; 0xe28 <CLCD_VoidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e00:	6f 81       	ldd	r22, Y+7	; 0x07
     e02:	78 85       	ldd	r23, Y+8	; 0x08
     e04:	89 85       	ldd	r24, Y+9	; 0x09
     e06:	9a 85       	ldd	r25, Y+10	; 0x0a
     e08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e0c:	dc 01       	movw	r26, r24
     e0e:	cb 01       	movw	r24, r22
     e10:	9e 83       	std	Y+6, r25	; 0x06
     e12:	8d 83       	std	Y+5, r24	; 0x05
     e14:	8d 81       	ldd	r24, Y+5	; 0x05
     e16:	9e 81       	ldd	r25, Y+6	; 0x06
     e18:	9a 83       	std	Y+2, r25	; 0x02
     e1a:	89 83       	std	Y+1, r24	; 0x01
     e1c:	89 81       	ldd	r24, Y+1	; 0x01
     e1e:	9a 81       	ldd	r25, Y+2	; 0x02
     e20:	01 97       	sbiw	r24, 0x01	; 1
     e22:	f1 f7       	brne	.-4      	; 0xe20 <CLCD_VoidInit+0xf0>
     e24:	9a 83       	std	Y+2, r25	; 0x02
     e26:	89 83       	std	Y+1, r24	; 0x01
#if  CLCD_u8BIT_MODE == EIGHT_BIT
	//function set command :2lines , font size 5*11
	CLCD_voidSendCmd(0b00111100);

#elif  CLCD_u8BIT_MODE == FOUR_BIT
		voidSetHalfDataPort(0b0010);
     e28:	82 e0       	ldi	r24, 0x02	; 2
     e2a:	0e 94 a3 05 	call	0xb46	; 0xb46 <voidSetHalfDataPort>
		voidSendEnablePulse();
     e2e:	0e 94 d3 05 	call	0xba6	; 0xba6 <voidSendEnablePulse>
		voidSetHalfDataPort(0b0010);
     e32:	82 e0       	ldi	r24, 0x02	; 2
     e34:	0e 94 a3 05 	call	0xb46	; 0xb46 <voidSetHalfDataPort>
		voidSendEnablePulse();
     e38:	0e 94 d3 05 	call	0xba6	; 0xba6 <voidSendEnablePulse>
		voidSetHalfDataPort(0b1000);
     e3c:	88 e0       	ldi	r24, 0x08	; 8
     e3e:	0e 94 a3 05 	call	0xb46	; 0xb46 <voidSetHalfDataPort>
		voidSendEnablePulse();
     e42:	0e 94 d3 05 	call	0xba6	; 0xba6 <voidSendEnablePulse>

	#endif

	//display on off control: display on, cursor off , blink cursor off
	CLCD_voidSendCmd(0b00001100);
     e46:	8c e0       	ldi	r24, 0x0C	; 12
     e48:	0e 94 62 06 	call	0xcc4	; 0xcc4 <CLCD_voidSendCmd>
	//clear display
	CLCD_voidSendCmd(1);
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	0e 94 62 06 	call	0xcc4	; 0xcc4 <CLCD_voidSendCmd>

}
     e52:	2e 96       	adiw	r28, 0x0e	; 14
     e54:	0f b6       	in	r0, 0x3f	; 63
     e56:	f8 94       	cli
     e58:	de bf       	out	0x3e, r29	; 62
     e5a:	0f be       	out	0x3f, r0	; 63
     e5c:	cd bf       	out	0x3d, r28	; 61
     e5e:	cf 91       	pop	r28
     e60:	df 91       	pop	r29
     e62:	08 95       	ret

00000e64 <CLCD_u8SendString>:

uint8 CLCD_u8SendString(const char* Copy_pchString)
{
     e64:	df 93       	push	r29
     e66:	cf 93       	push	r28
     e68:	00 d0       	rcall	.+0      	; 0xe6a <CLCD_u8SendString+0x6>
     e6a:	00 d0       	rcall	.+0      	; 0xe6c <CLCD_u8SendString+0x8>
     e6c:	cd b7       	in	r28, 0x3d	; 61
     e6e:	de b7       	in	r29, 0x3e	; 62
     e70:	9c 83       	std	Y+4, r25	; 0x04
     e72:	8b 83       	std	Y+3, r24	; 0x03

uint8 Local_u8ErrorState=OK;
     e74:	1a 82       	std	Y+2, r1	; 0x02
 if(Copy_pchString!=NULL)
     e76:	8b 81       	ldd	r24, Y+3	; 0x03
     e78:	9c 81       	ldd	r25, Y+4	; 0x04
     e7a:	00 97       	sbiw	r24, 0x00	; 0
     e7c:	e1 f0       	breq	.+56     	; 0xeb6 <CLCD_u8SendString+0x52>
 {
  uint8 Local_u8Iteratot=0u;
     e7e:	19 82       	std	Y+1, r1	; 0x01
     e80:	0e c0       	rjmp	.+28     	; 0xe9e <CLCD_u8SendString+0x3a>
   while(Copy_pchString[Local_u8Iteratot]!='\0')
      {
	    CLCD_voidSendData(Copy_pchString[Local_u8Iteratot]);
     e82:	89 81       	ldd	r24, Y+1	; 0x01
     e84:	28 2f       	mov	r18, r24
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	8b 81       	ldd	r24, Y+3	; 0x03
     e8a:	9c 81       	ldd	r25, Y+4	; 0x04
     e8c:	fc 01       	movw	r30, r24
     e8e:	e2 0f       	add	r30, r18
     e90:	f3 1f       	adc	r31, r19
     e92:	80 81       	ld	r24, Z
     e94:	0e 94 7d 06 	call	0xcfa	; 0xcfa <CLCD_voidSendData>
	    Local_u8Iteratot++;
     e98:	89 81       	ldd	r24, Y+1	; 0x01
     e9a:	8f 5f       	subi	r24, 0xFF	; 255
     e9c:	89 83       	std	Y+1, r24	; 0x01

uint8 Local_u8ErrorState=OK;
 if(Copy_pchString!=NULL)
 {
  uint8 Local_u8Iteratot=0u;
   while(Copy_pchString[Local_u8Iteratot]!='\0')
     e9e:	89 81       	ldd	r24, Y+1	; 0x01
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	8b 81       	ldd	r24, Y+3	; 0x03
     ea6:	9c 81       	ldd	r25, Y+4	; 0x04
     ea8:	fc 01       	movw	r30, r24
     eaa:	e2 0f       	add	r30, r18
     eac:	f3 1f       	adc	r31, r19
     eae:	80 81       	ld	r24, Z
     eb0:	88 23       	and	r24, r24
     eb2:	39 f7       	brne	.-50     	; 0xe82 <CLCD_u8SendString+0x1e>
     eb4:	02 c0       	rjmp	.+4      	; 0xeba <CLCD_u8SendString+0x56>
      }

 }
 else
  {
 	Local_u8ErrorState=  NULL_PTR_ERR;
     eb6:	82 e0       	ldi	r24, 0x02	; 2
     eb8:	8a 83       	std	Y+2, r24	; 0x02
  }
 return Local_u8ErrorState;
     eba:	8a 81       	ldd	r24, Y+2	; 0x02
}
     ebc:	0f 90       	pop	r0
     ebe:	0f 90       	pop	r0
     ec0:	0f 90       	pop	r0
     ec2:	0f 90       	pop	r0
     ec4:	cf 91       	pop	r28
     ec6:	df 91       	pop	r29
     ec8:	08 95       	ret

00000eca <CLCD_voidSendNumber>:
void CLCD_voidSendNumber(sint32 Copy_s32Number )
{ char Local_chNumber[10];
     eca:	df 93       	push	r29
     ecc:	cf 93       	push	r28
     ece:	cd b7       	in	r28, 0x3d	; 61
     ed0:	de b7       	in	r29, 0x3e	; 62
     ed2:	61 97       	sbiw	r28, 0x11	; 17
     ed4:	0f b6       	in	r0, 0x3f	; 63
     ed6:	f8 94       	cli
     ed8:	de bf       	out	0x3e, r29	; 62
     eda:	0f be       	out	0x3f, r0	; 63
     edc:	cd bf       	out	0x3d, r28	; 61
     ede:	6e 87       	std	Y+14, r22	; 0x0e
     ee0:	7f 87       	std	Y+15, r23	; 0x0f
     ee2:	88 8b       	std	Y+16, r24	; 0x10
     ee4:	99 8b       	std	Y+17, r25	; 0x11
  uint8 Local_u8RightDigit,Local_u8Counter1=0u;
     ee6:	1a 82       	std	Y+2, r1	; 0x02
  sint8 Local_s8Counter2=0;
     ee8:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_s32Number==0)
     eea:	8e 85       	ldd	r24, Y+14	; 0x0e
     eec:	9f 85       	ldd	r25, Y+15	; 0x0f
     eee:	a8 89       	ldd	r26, Y+16	; 0x10
     ef0:	b9 89       	ldd	r27, Y+17	; 0x11
     ef2:	00 97       	sbiw	r24, 0x00	; 0
     ef4:	a1 05       	cpc	r26, r1
     ef6:	b1 05       	cpc	r27, r1
     ef8:	21 f4       	brne	.+8      	; 0xf02 <CLCD_voidSendNumber+0x38>
	{
		CLCD_voidSendData('0');
     efa:	80 e3       	ldi	r24, 0x30	; 48
     efc:	0e 94 7d 06 	call	0xcfa	; 0xcfa <CLCD_voidSendData>
     f00:	67 c0       	rjmp	.+206    	; 0xfd0 <CLCD_voidSendNumber+0x106>
		return;
	}
	else if (Copy_s32Number<0)
     f02:	8e 85       	ldd	r24, Y+14	; 0x0e
     f04:	9f 85       	ldd	r25, Y+15	; 0x0f
     f06:	a8 89       	ldd	r26, Y+16	; 0x10
     f08:	b9 89       	ldd	r27, Y+17	; 0x11
     f0a:	bb 23       	and	r27, r27
     f0c:	0c f0       	brlt	.+2      	; 0xf10 <CLCD_voidSendNumber+0x46>
     f0e:	43 c0       	rjmp	.+134    	; 0xf96 <CLCD_voidSendNumber+0xcc>
	{ //make -ve -> +ve and print - "sign" on clcd
		Copy_s32Number *=-1;
     f10:	8e 85       	ldd	r24, Y+14	; 0x0e
     f12:	9f 85       	ldd	r25, Y+15	; 0x0f
     f14:	a8 89       	ldd	r26, Y+16	; 0x10
     f16:	b9 89       	ldd	r27, Y+17	; 0x11
     f18:	b0 95       	com	r27
     f1a:	a0 95       	com	r26
     f1c:	90 95       	com	r25
     f1e:	81 95       	neg	r24
     f20:	9f 4f       	sbci	r25, 0xFF	; 255
     f22:	af 4f       	sbci	r26, 0xFF	; 255
     f24:	bf 4f       	sbci	r27, 0xFF	; 255
     f26:	8e 87       	std	Y+14, r24	; 0x0e
     f28:	9f 87       	std	Y+15, r25	; 0x0f
     f2a:	a8 8b       	std	Y+16, r26	; 0x10
     f2c:	b9 8b       	std	Y+17, r27	; 0x11
		CLCD_voidSendData('-');
     f2e:	8d e2       	ldi	r24, 0x2D	; 45
     f30:	0e 94 7d 06 	call	0xcfa	; 0xcfa <CLCD_voidSendData>
     f34:	30 c0       	rjmp	.+96     	; 0xf96 <CLCD_voidSendNumber+0xcc>

	}
	while(Copy_s32Number!=0)
	{
		Local_u8RightDigit=(uint8)((uint32)Copy_s32Number %10);//get right most digit
     f36:	8e 85       	ldd	r24, Y+14	; 0x0e
     f38:	9f 85       	ldd	r25, Y+15	; 0x0f
     f3a:	a8 89       	ldd	r26, Y+16	; 0x10
     f3c:	b9 89       	ldd	r27, Y+17	; 0x11
     f3e:	2a e0       	ldi	r18, 0x0A	; 10
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	40 e0       	ldi	r20, 0x00	; 0
     f44:	50 e0       	ldi	r21, 0x00	; 0
     f46:	bc 01       	movw	r22, r24
     f48:	cd 01       	movw	r24, r26
     f4a:	0e 94 bb 20 	call	0x4176	; 0x4176 <__udivmodsi4>
     f4e:	dc 01       	movw	r26, r24
     f50:	cb 01       	movw	r24, r22
     f52:	8b 83       	std	Y+3, r24	; 0x03
		Copy_s32Number/=10; //remove right digit
     f54:	8e 85       	ldd	r24, Y+14	; 0x0e
     f56:	9f 85       	ldd	r25, Y+15	; 0x0f
     f58:	a8 89       	ldd	r26, Y+16	; 0x10
     f5a:	b9 89       	ldd	r27, Y+17	; 0x11
     f5c:	2a e0       	ldi	r18, 0x0A	; 10
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	40 e0       	ldi	r20, 0x00	; 0
     f62:	50 e0       	ldi	r21, 0x00	; 0
     f64:	bc 01       	movw	r22, r24
     f66:	cd 01       	movw	r24, r26
     f68:	0e 94 dd 20 	call	0x41ba	; 0x41ba <__divmodsi4>
     f6c:	da 01       	movw	r26, r20
     f6e:	c9 01       	movw	r24, r18
     f70:	8e 87       	std	Y+14, r24	; 0x0e
     f72:	9f 87       	std	Y+15, r25	; 0x0f
     f74:	a8 8b       	std	Y+16, r26	; 0x10
     f76:	b9 8b       	std	Y+17, r27	; 0x11
		Local_chNumber[Local_u8Counter1]=Local_u8RightDigit+'0'; //CONVERT TO ASCII
     f78:	8a 81       	ldd	r24, Y+2	; 0x02
     f7a:	28 2f       	mov	r18, r24
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	8b 81       	ldd	r24, Y+3	; 0x03
     f80:	48 2f       	mov	r20, r24
     f82:	40 5d       	subi	r20, 0xD0	; 208
     f84:	ce 01       	movw	r24, r28
     f86:	04 96       	adiw	r24, 0x04	; 4
     f88:	fc 01       	movw	r30, r24
     f8a:	e2 0f       	add	r30, r18
     f8c:	f3 1f       	adc	r31, r19
     f8e:	40 83       	st	Z, r20
		Local_u8Counter1++;
     f90:	8a 81       	ldd	r24, Y+2	; 0x02
     f92:	8f 5f       	subi	r24, 0xFF	; 255
     f94:	8a 83       	std	Y+2, r24	; 0x02
	{ //make -ve -> +ve and print - "sign" on clcd
		Copy_s32Number *=-1;
		CLCD_voidSendData('-');

	}
	while(Copy_s32Number!=0)
     f96:	8e 85       	ldd	r24, Y+14	; 0x0e
     f98:	9f 85       	ldd	r25, Y+15	; 0x0f
     f9a:	a8 89       	ldd	r26, Y+16	; 0x10
     f9c:	b9 89       	ldd	r27, Y+17	; 0x11
     f9e:	00 97       	sbiw	r24, 0x00	; 0
     fa0:	a1 05       	cpc	r26, r1
     fa2:	b1 05       	cpc	r27, r1
     fa4:	41 f6       	brne	.-112    	; 0xf36 <CLCD_voidSendNumber+0x6c>
		Local_u8Counter1++;


	}
	/////////////
	for(Local_s8Counter2 =(sint8)Local_u8Counter1-1; Local_s8Counter2>=0;Local_s8Counter2--)
     fa6:	8a 81       	ldd	r24, Y+2	; 0x02
     fa8:	81 50       	subi	r24, 0x01	; 1
     faa:	89 83       	std	Y+1, r24	; 0x01
     fac:	0e c0       	rjmp	.+28     	; 0xfca <CLCD_voidSendNumber+0x100>

	{
		CLCD_voidSendData(Local_chNumber[(uint8)Local_s8Counter2]);
     fae:	89 81       	ldd	r24, Y+1	; 0x01
     fb0:	28 2f       	mov	r18, r24
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	ce 01       	movw	r24, r28
     fb6:	04 96       	adiw	r24, 0x04	; 4
     fb8:	fc 01       	movw	r30, r24
     fba:	e2 0f       	add	r30, r18
     fbc:	f3 1f       	adc	r31, r19
     fbe:	80 81       	ld	r24, Z
     fc0:	0e 94 7d 06 	call	0xcfa	; 0xcfa <CLCD_voidSendData>
		Local_u8Counter1++;


	}
	/////////////
	for(Local_s8Counter2 =(sint8)Local_u8Counter1-1; Local_s8Counter2>=0;Local_s8Counter2--)
     fc4:	89 81       	ldd	r24, Y+1	; 0x01
     fc6:	81 50       	subi	r24, 0x01	; 1
     fc8:	89 83       	std	Y+1, r24	; 0x01
     fca:	89 81       	ldd	r24, Y+1	; 0x01
     fcc:	88 23       	and	r24, r24
     fce:	7c f7       	brge	.-34     	; 0xfae <CLCD_voidSendNumber+0xe4>

	{
		CLCD_voidSendData(Local_chNumber[(uint8)Local_s8Counter2]);
	}
}
     fd0:	61 96       	adiw	r28, 0x11	; 17
     fd2:	0f b6       	in	r0, 0x3f	; 63
     fd4:	f8 94       	cli
     fd6:	de bf       	out	0x3e, r29	; 62
     fd8:	0f be       	out	0x3f, r0	; 63
     fda:	cd bf       	out	0x3d, r28	; 61
     fdc:	cf 91       	pop	r28
     fde:	df 91       	pop	r29
     fe0:	08 95       	ret

00000fe2 <CLCD_VoidGoToXY>:
void CLCD_VoidGoToXY(uint8 Copy_u8Xpos,uint8 Copy_u8Ypos)
{
     fe2:	df 93       	push	r29
     fe4:	cf 93       	push	r28
     fe6:	00 d0       	rcall	.+0      	; 0xfe8 <CLCD_VoidGoToXY+0x6>
     fe8:	0f 92       	push	r0
     fea:	cd b7       	in	r28, 0x3d	; 61
     fec:	de b7       	in	r29, 0x3e	; 62
     fee:	8a 83       	std	Y+2, r24	; 0x02
     ff0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8Adress ;
	if(Copy_u8Ypos==0u)
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
     ff4:	88 23       	and	r24, r24
     ff6:	19 f4       	brne	.+6      	; 0xffe <CLCD_VoidGoToXY+0x1c>
	{
		Local_u8Adress=Copy_u8Xpos;
     ff8:	8a 81       	ldd	r24, Y+2	; 0x02
     ffa:	89 83       	std	Y+1, r24	; 0x01
     ffc:	06 c0       	rjmp	.+12     	; 0x100a <CLCD_VoidGoToXY+0x28>
	}
	else if(Copy_u8Ypos==1u)
     ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    1000:	81 30       	cpi	r24, 0x01	; 1
    1002:	19 f4       	brne	.+6      	; 0x100a <CLCD_VoidGoToXY+0x28>
	{
		Local_u8Adress=0x40+Copy_u8Xpos;
    1004:	8a 81       	ldd	r24, Y+2	; 0x02
    1006:	80 5c       	subi	r24, 0xC0	; 192
    1008:	89 83       	std	Y+1, r24	; 0x01

	}
	// WE CAN USE IT INSTEAD OF IF.IFELSE :Local_u8Adress=ox40*Copy_u8Ypos+Copy_u8Xpos;
   // SET BIT 7 FOR SET DDRAM ADDRESS COMMAND
	SET_BIT(Local_u8Adress,7);
    100a:	89 81       	ldd	r24, Y+1	; 0x01
    100c:	80 68       	ori	r24, 0x80	; 128
    100e:	89 83       	std	Y+1, r24	; 0x01
	//EXECUTE SET DDRam address command
   CLCD_voidSendCmd(Local_u8Adress);
    1010:	89 81       	ldd	r24, Y+1	; 0x01
    1012:	0e 94 62 06 	call	0xcc4	; 0xcc4 <CLCD_voidSendCmd>

}
    1016:	0f 90       	pop	r0
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	cf 91       	pop	r28
    101e:	df 91       	pop	r29
    1020:	08 95       	ret

00001022 <CLCD_u8SpecialCharacter>:
uint8 CLCD_u8SpecialCharacter(uint8 Copy_u8LocationNum, uint8 * Copy_puPattern,uint8 Copy_u8Xpos,uint8 Copy_u8Ypos)
{
    1022:	df 93       	push	r29
    1024:	cf 93       	push	r28
    1026:	cd b7       	in	r28, 0x3d	; 61
    1028:	de b7       	in	r29, 0x3e	; 62
    102a:	28 97       	sbiw	r28, 0x08	; 8
    102c:	0f b6       	in	r0, 0x3f	; 63
    102e:	f8 94       	cli
    1030:	de bf       	out	0x3e, r29	; 62
    1032:	0f be       	out	0x3f, r0	; 63
    1034:	cd bf       	out	0x3d, r28	; 61
    1036:	8c 83       	std	Y+4, r24	; 0x04
    1038:	7e 83       	std	Y+6, r23	; 0x06
    103a:	6d 83       	std	Y+5, r22	; 0x05
    103c:	4f 83       	std	Y+7, r20	; 0x07
    103e:	28 87       	std	Y+8, r18	; 0x08
uint8 Local_u8ErrorState=OK;
    1040:	1b 82       	std	Y+3, r1	; 0x03
uint8 Local_u8Counter=0;
    1042:	1a 82       	std	Y+2, r1	; 0x02
if(Copy_puPattern!=NULL)
    1044:	8d 81       	ldd	r24, Y+5	; 0x05
    1046:	9e 81       	ldd	r25, Y+6	; 0x06
    1048:	00 97       	sbiw	r24, 0x00	; 0
    104a:	59 f1       	breq	.+86     	; 0x10a2 <CLCD_u8SpecialCharacter+0x80>
{
	uint8 Local_u8CGRAMAddress= Copy_u8LocationNum*8;
    104c:	8c 81       	ldd	r24, Y+4	; 0x04
    104e:	88 2f       	mov	r24, r24
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	88 0f       	add	r24, r24
    1054:	99 1f       	adc	r25, r25
    1056:	88 0f       	add	r24, r24
    1058:	99 1f       	adc	r25, r25
    105a:	88 0f       	add	r24, r24
    105c:	99 1f       	adc	r25, r25
    105e:	89 83       	std	Y+1, r24	; 0x01
	//set bit 6 for CGRAM ADDRESS  command
	SET_BIT(Local_u8CGRAMAddress,6u);
    1060:	89 81       	ldd	r24, Y+1	; 0x01
    1062:	80 64       	ori	r24, 0x40	; 64
    1064:	89 83       	std	Y+1, r24	; 0x01
	// set CGRAM address
	CLCD_voidSendCmd(Local_u8CGRAMAddress);
    1066:	89 81       	ldd	r24, Y+1	; 0x01
    1068:	0e 94 62 06 	call	0xcc4	; 0xcc4 <CLCD_voidSendCmd>
	//write the input pattern inside cGRAM
	for(Local_u8Counter=0;Local_u8Counter<8;Local_u8Counter++)
    106c:	1a 82       	std	Y+2, r1	; 0x02
    106e:	0e c0       	rjmp	.+28     	; 0x108c <CLCD_u8SpecialCharacter+0x6a>
	{
		CLCD_voidSendData(Copy_puPattern[Local_u8Counter]);
    1070:	8a 81       	ldd	r24, Y+2	; 0x02
    1072:	28 2f       	mov	r18, r24
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	8d 81       	ldd	r24, Y+5	; 0x05
    1078:	9e 81       	ldd	r25, Y+6	; 0x06
    107a:	fc 01       	movw	r30, r24
    107c:	e2 0f       	add	r30, r18
    107e:	f3 1f       	adc	r31, r19
    1080:	80 81       	ld	r24, Z
    1082:	0e 94 7d 06 	call	0xcfa	; 0xcfa <CLCD_voidSendData>
	//set bit 6 for CGRAM ADDRESS  command
	SET_BIT(Local_u8CGRAMAddress,6u);
	// set CGRAM address
	CLCD_voidSendCmd(Local_u8CGRAMAddress);
	//write the input pattern inside cGRAM
	for(Local_u8Counter=0;Local_u8Counter<8;Local_u8Counter++)
    1086:	8a 81       	ldd	r24, Y+2	; 0x02
    1088:	8f 5f       	subi	r24, 0xFF	; 255
    108a:	8a 83       	std	Y+2, r24	; 0x02
    108c:	8a 81       	ldd	r24, Y+2	; 0x02
    108e:	88 30       	cpi	r24, 0x08	; 8
    1090:	78 f3       	brcs	.-34     	; 0x1070 <CLCD_u8SpecialCharacter+0x4e>
	{
		CLCD_voidSendData(Copy_puPattern[Local_u8Counter]);
	}
	//GO BACK TO DDRAM
	CLCD_VoidGoToXY(Copy_u8Xpos,Copy_u8Ypos);
    1092:	8f 81       	ldd	r24, Y+7	; 0x07
    1094:	68 85       	ldd	r22, Y+8	; 0x08
    1096:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <CLCD_VoidGoToXY>
	//WRITE SPECIAL PATTERN INSIDE CGRAM " DISPLAY
	CLCD_voidSendData(Copy_u8LocationNum);
    109a:	8c 81       	ldd	r24, Y+4	; 0x04
    109c:	0e 94 7d 06 	call	0xcfa	; 0xcfa <CLCD_voidSendData>
    10a0:	02 c0       	rjmp	.+4      	; 0x10a6 <CLCD_u8SpecialCharacter+0x84>
}
else
{
	Local_u8ErrorState=NULL_PTR_ERR;
    10a2:	82 e0       	ldi	r24, 0x02	; 2
    10a4:	8b 83       	std	Y+3, r24	; 0x03
}
return Local_u8ErrorState;
    10a6:	8b 81       	ldd	r24, Y+3	; 0x03
}
    10a8:	28 96       	adiw	r28, 0x08	; 8
    10aa:	0f b6       	in	r0, 0x3f	; 63
    10ac:	f8 94       	cli
    10ae:	de bf       	out	0x3e, r29	; 62
    10b0:	0f be       	out	0x3f, r0	; 63
    10b2:	cd bf       	out	0x3d, r28	; 61
    10b4:	cf 91       	pop	r28
    10b6:	df 91       	pop	r29
    10b8:	08 95       	ret

000010ba <CLCD_voidClear>:

void CLCD_voidClear()
{
    10ba:	df 93       	push	r29
    10bc:	cf 93       	push	r28
    10be:	cd b7       	in	r28, 0x3d	; 61
    10c0:	de b7       	in	r29, 0x3e	; 62
CLCD_voidSendCmd(1);
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	0e 94 62 06 	call	0xcc4	; 0xcc4 <CLCD_voidSendCmd>
}
    10c8:	cf 91       	pop	r28
    10ca:	df 91       	pop	r29
    10cc:	08 95       	ret

000010ce <CLCD_voidHamoksha>:

void CLCD_voidHamoksha()
{
    10ce:	0f 93       	push	r16
    10d0:	1f 93       	push	r17
    10d2:	df 93       	push	r29
    10d4:	cf 93       	push	r28
    10d6:	cd b7       	in	r28, 0x3d	; 61
    10d8:	de b7       	in	r29, 0x3e	; 62
    10da:	c3 56       	subi	r28, 0x63	; 99
    10dc:	d1 40       	sbci	r29, 0x01	; 1
    10de:	0f b6       	in	r0, 0x3f	; 63
    10e0:	f8 94       	cli
    10e2:	de bf       	out	0x3e, r29	; 62
    10e4:	0f be       	out	0x3f, r0	; 63
    10e6:	cd bf       	out	0x3d, r28	; 61
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000001
           ,0b00011111,
            0b00011111,0};
    10e8:	ce 01       	movw	r24, r28
    10ea:	8e 51       	subi	r24, 0x1E	; 30
    10ec:	9f 4f       	sbci	r25, 0xFF	; 255
    10ee:	ce 5c       	subi	r28, 0xCE	; 206
    10f0:	de 4f       	sbci	r29, 0xFE	; 254
    10f2:	99 83       	std	Y+1, r25	; 0x01
    10f4:	88 83       	st	Y, r24
    10f6:	c2 53       	subi	r28, 0x32	; 50
    10f8:	d1 40       	sbci	r29, 0x01	; 1
    10fa:	87 ef       	ldi	r24, 0xF7	; 247
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	cc 5c       	subi	r28, 0xCC	; 204
    1100:	de 4f       	sbci	r29, 0xFE	; 254
    1102:	99 83       	std	Y+1, r25	; 0x01
    1104:	88 83       	st	Y, r24
    1106:	c4 53       	subi	r28, 0x34	; 52
    1108:	d1 40       	sbci	r29, 0x01	; 1
    110a:	98 e0       	ldi	r25, 0x08	; 8
    110c:	ca 5c       	subi	r28, 0xCA	; 202
    110e:	de 4f       	sbci	r29, 0xFE	; 254
    1110:	98 83       	st	Y, r25
    1112:	c6 53       	subi	r28, 0x36	; 54
    1114:	d1 40       	sbci	r29, 0x01	; 1
    1116:	cc 5c       	subi	r28, 0xCC	; 204
    1118:	de 4f       	sbci	r29, 0xFE	; 254
    111a:	e8 81       	ld	r30, Y
    111c:	f9 81       	ldd	r31, Y+1	; 0x01
    111e:	c4 53       	subi	r28, 0x34	; 52
    1120:	d1 40       	sbci	r29, 0x01	; 1
    1122:	00 80       	ld	r0, Z
    1124:	cc 5c       	subi	r28, 0xCC	; 204
    1126:	de 4f       	sbci	r29, 0xFE	; 254
    1128:	88 81       	ld	r24, Y
    112a:	99 81       	ldd	r25, Y+1	; 0x01
    112c:	c4 53       	subi	r28, 0x34	; 52
    112e:	d1 40       	sbci	r29, 0x01	; 1
    1130:	01 96       	adiw	r24, 0x01	; 1
    1132:	cc 5c       	subi	r28, 0xCC	; 204
    1134:	de 4f       	sbci	r29, 0xFE	; 254
    1136:	99 83       	std	Y+1, r25	; 0x01
    1138:	88 83       	st	Y, r24
    113a:	c4 53       	subi	r28, 0x34	; 52
    113c:	d1 40       	sbci	r29, 0x01	; 1
    113e:	ce 5c       	subi	r28, 0xCE	; 206
    1140:	de 4f       	sbci	r29, 0xFE	; 254
    1142:	e8 81       	ld	r30, Y
    1144:	f9 81       	ldd	r31, Y+1	; 0x01
    1146:	c2 53       	subi	r28, 0x32	; 50
    1148:	d1 40       	sbci	r29, 0x01	; 1
    114a:	00 82       	st	Z, r0
    114c:	ce 5c       	subi	r28, 0xCE	; 206
    114e:	de 4f       	sbci	r29, 0xFE	; 254
    1150:	88 81       	ld	r24, Y
    1152:	99 81       	ldd	r25, Y+1	; 0x01
    1154:	c2 53       	subi	r28, 0x32	; 50
    1156:	d1 40       	sbci	r29, 0x01	; 1
    1158:	01 96       	adiw	r24, 0x01	; 1
    115a:	ce 5c       	subi	r28, 0xCE	; 206
    115c:	de 4f       	sbci	r29, 0xFE	; 254
    115e:	99 83       	std	Y+1, r25	; 0x01
    1160:	88 83       	st	Y, r24
    1162:	c2 53       	subi	r28, 0x32	; 50
    1164:	d1 40       	sbci	r29, 0x01	; 1
    1166:	ca 5c       	subi	r28, 0xCA	; 202
    1168:	de 4f       	sbci	r29, 0xFE	; 254
    116a:	98 81       	ld	r25, Y
    116c:	c6 53       	subi	r28, 0x36	; 54
    116e:	d1 40       	sbci	r29, 0x01	; 1
    1170:	91 50       	subi	r25, 0x01	; 1
    1172:	ca 5c       	subi	r28, 0xCA	; 202
    1174:	de 4f       	sbci	r29, 0xFE	; 254
    1176:	98 83       	st	Y, r25
    1178:	c6 53       	subi	r28, 0x36	; 54
    117a:	d1 40       	sbci	r29, 0x01	; 1
    117c:	ca 5c       	subi	r28, 0xCA	; 202
    117e:	de 4f       	sbci	r29, 0xFE	; 254
    1180:	e8 81       	ld	r30, Y
    1182:	c6 53       	subi	r28, 0x36	; 54
    1184:	d1 40       	sbci	r29, 0x01	; 1
    1186:	ee 23       	and	r30, r30
    1188:	31 f6       	brne	.-116    	; 0x1116 <CLCD_voidHamoksha+0x48>
                                         0b00001110,
                                         0b00010101,
                                         0b00010101,
                                         0b00000100
                                        ,0b00001010,
                                         0b00001010,0};
    118a:	ce 01       	movw	r24, r28
    118c:	86 51       	subi	r24, 0x16	; 22
    118e:	9f 4f       	sbci	r25, 0xFF	; 255
    1190:	c9 5c       	subi	r28, 0xC9	; 201
    1192:	de 4f       	sbci	r29, 0xFE	; 254
    1194:	99 83       	std	Y+1, r25	; 0x01
    1196:	88 83       	st	Y, r24
    1198:	c7 53       	subi	r28, 0x37	; 55
    119a:	d1 40       	sbci	r29, 0x01	; 1
    119c:	8f ee       	ldi	r24, 0xEF	; 239
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	c7 5c       	subi	r28, 0xC7	; 199
    11a2:	de 4f       	sbci	r29, 0xFE	; 254
    11a4:	99 83       	std	Y+1, r25	; 0x01
    11a6:	88 83       	st	Y, r24
    11a8:	c9 53       	subi	r28, 0x39	; 57
    11aa:	d1 40       	sbci	r29, 0x01	; 1
    11ac:	98 e0       	ldi	r25, 0x08	; 8
    11ae:	c5 5c       	subi	r28, 0xC5	; 197
    11b0:	de 4f       	sbci	r29, 0xFE	; 254
    11b2:	98 83       	st	Y, r25
    11b4:	cb 53       	subi	r28, 0x3B	; 59
    11b6:	d1 40       	sbci	r29, 0x01	; 1
    11b8:	c7 5c       	subi	r28, 0xC7	; 199
    11ba:	de 4f       	sbci	r29, 0xFE	; 254
    11bc:	e8 81       	ld	r30, Y
    11be:	f9 81       	ldd	r31, Y+1	; 0x01
    11c0:	c9 53       	subi	r28, 0x39	; 57
    11c2:	d1 40       	sbci	r29, 0x01	; 1
    11c4:	00 80       	ld	r0, Z
    11c6:	c7 5c       	subi	r28, 0xC7	; 199
    11c8:	de 4f       	sbci	r29, 0xFE	; 254
    11ca:	88 81       	ld	r24, Y
    11cc:	99 81       	ldd	r25, Y+1	; 0x01
    11ce:	c9 53       	subi	r28, 0x39	; 57
    11d0:	d1 40       	sbci	r29, 0x01	; 1
    11d2:	01 96       	adiw	r24, 0x01	; 1
    11d4:	c7 5c       	subi	r28, 0xC7	; 199
    11d6:	de 4f       	sbci	r29, 0xFE	; 254
    11d8:	99 83       	std	Y+1, r25	; 0x01
    11da:	88 83       	st	Y, r24
    11dc:	c9 53       	subi	r28, 0x39	; 57
    11de:	d1 40       	sbci	r29, 0x01	; 1
    11e0:	c9 5c       	subi	r28, 0xC9	; 201
    11e2:	de 4f       	sbci	r29, 0xFE	; 254
    11e4:	e8 81       	ld	r30, Y
    11e6:	f9 81       	ldd	r31, Y+1	; 0x01
    11e8:	c7 53       	subi	r28, 0x37	; 55
    11ea:	d1 40       	sbci	r29, 0x01	; 1
    11ec:	00 82       	st	Z, r0
    11ee:	c9 5c       	subi	r28, 0xC9	; 201
    11f0:	de 4f       	sbci	r29, 0xFE	; 254
    11f2:	88 81       	ld	r24, Y
    11f4:	99 81       	ldd	r25, Y+1	; 0x01
    11f6:	c7 53       	subi	r28, 0x37	; 55
    11f8:	d1 40       	sbci	r29, 0x01	; 1
    11fa:	01 96       	adiw	r24, 0x01	; 1
    11fc:	c9 5c       	subi	r28, 0xC9	; 201
    11fe:	de 4f       	sbci	r29, 0xFE	; 254
    1200:	99 83       	std	Y+1, r25	; 0x01
    1202:	88 83       	st	Y, r24
    1204:	c7 53       	subi	r28, 0x37	; 55
    1206:	d1 40       	sbci	r29, 0x01	; 1
    1208:	c5 5c       	subi	r28, 0xC5	; 197
    120a:	de 4f       	sbci	r29, 0xFE	; 254
    120c:	98 81       	ld	r25, Y
    120e:	cb 53       	subi	r28, 0x3B	; 59
    1210:	d1 40       	sbci	r29, 0x01	; 1
    1212:	91 50       	subi	r25, 0x01	; 1
    1214:	c5 5c       	subi	r28, 0xC5	; 197
    1216:	de 4f       	sbci	r29, 0xFE	; 254
    1218:	98 83       	st	Y, r25
    121a:	cb 53       	subi	r28, 0x3B	; 59
    121c:	d1 40       	sbci	r29, 0x01	; 1
    121e:	c5 5c       	subi	r28, 0xC5	; 197
    1220:	de 4f       	sbci	r29, 0xFE	; 254
    1222:	e8 81       	ld	r30, Y
    1224:	cb 53       	subi	r28, 0x3B	; 59
    1226:	d1 40       	sbci	r29, 0x01	; 1
    1228:	ee 23       	and	r30, r30
    122a:	31 f6       	brne	.-116    	; 0x11b8 <CLCD_voidHamoksha+0xea>
	                                         0b00011111,
	                                         0b00010101,
	                                         0b00000100,
	                                         0b00000100
	                                        ,0b00010001,
	                                         0b00010001,0};
    122c:	ce 01       	movw	r24, r28
    122e:	8e 50       	subi	r24, 0x0E	; 14
    1230:	9f 4f       	sbci	r25, 0xFF	; 255
    1232:	c4 5c       	subi	r28, 0xC4	; 196
    1234:	de 4f       	sbci	r29, 0xFE	; 254
    1236:	99 83       	std	Y+1, r25	; 0x01
    1238:	88 83       	st	Y, r24
    123a:	cc 53       	subi	r28, 0x3C	; 60
    123c:	d1 40       	sbci	r29, 0x01	; 1
    123e:	87 ee       	ldi	r24, 0xE7	; 231
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	c2 5c       	subi	r28, 0xC2	; 194
    1244:	de 4f       	sbci	r29, 0xFE	; 254
    1246:	99 83       	std	Y+1, r25	; 0x01
    1248:	88 83       	st	Y, r24
    124a:	ce 53       	subi	r28, 0x3E	; 62
    124c:	d1 40       	sbci	r29, 0x01	; 1
    124e:	98 e0       	ldi	r25, 0x08	; 8
    1250:	c0 5c       	subi	r28, 0xC0	; 192
    1252:	de 4f       	sbci	r29, 0xFE	; 254
    1254:	98 83       	st	Y, r25
    1256:	c0 54       	subi	r28, 0x40	; 64
    1258:	d1 40       	sbci	r29, 0x01	; 1
    125a:	c2 5c       	subi	r28, 0xC2	; 194
    125c:	de 4f       	sbci	r29, 0xFE	; 254
    125e:	e8 81       	ld	r30, Y
    1260:	f9 81       	ldd	r31, Y+1	; 0x01
    1262:	ce 53       	subi	r28, 0x3E	; 62
    1264:	d1 40       	sbci	r29, 0x01	; 1
    1266:	00 80       	ld	r0, Z
    1268:	c2 5c       	subi	r28, 0xC2	; 194
    126a:	de 4f       	sbci	r29, 0xFE	; 254
    126c:	88 81       	ld	r24, Y
    126e:	99 81       	ldd	r25, Y+1	; 0x01
    1270:	ce 53       	subi	r28, 0x3E	; 62
    1272:	d1 40       	sbci	r29, 0x01	; 1
    1274:	01 96       	adiw	r24, 0x01	; 1
    1276:	c2 5c       	subi	r28, 0xC2	; 194
    1278:	de 4f       	sbci	r29, 0xFE	; 254
    127a:	99 83       	std	Y+1, r25	; 0x01
    127c:	88 83       	st	Y, r24
    127e:	ce 53       	subi	r28, 0x3E	; 62
    1280:	d1 40       	sbci	r29, 0x01	; 1
    1282:	c4 5c       	subi	r28, 0xC4	; 196
    1284:	de 4f       	sbci	r29, 0xFE	; 254
    1286:	e8 81       	ld	r30, Y
    1288:	f9 81       	ldd	r31, Y+1	; 0x01
    128a:	cc 53       	subi	r28, 0x3C	; 60
    128c:	d1 40       	sbci	r29, 0x01	; 1
    128e:	00 82       	st	Z, r0
    1290:	c4 5c       	subi	r28, 0xC4	; 196
    1292:	de 4f       	sbci	r29, 0xFE	; 254
    1294:	88 81       	ld	r24, Y
    1296:	99 81       	ldd	r25, Y+1	; 0x01
    1298:	cc 53       	subi	r28, 0x3C	; 60
    129a:	d1 40       	sbci	r29, 0x01	; 1
    129c:	01 96       	adiw	r24, 0x01	; 1
    129e:	c4 5c       	subi	r28, 0xC4	; 196
    12a0:	de 4f       	sbci	r29, 0xFE	; 254
    12a2:	99 83       	std	Y+1, r25	; 0x01
    12a4:	88 83       	st	Y, r24
    12a6:	cc 53       	subi	r28, 0x3C	; 60
    12a8:	d1 40       	sbci	r29, 0x01	; 1
    12aa:	c0 5c       	subi	r28, 0xC0	; 192
    12ac:	de 4f       	sbci	r29, 0xFE	; 254
    12ae:	98 81       	ld	r25, Y
    12b0:	c0 54       	subi	r28, 0x40	; 64
    12b2:	d1 40       	sbci	r29, 0x01	; 1
    12b4:	91 50       	subi	r25, 0x01	; 1
    12b6:	c0 5c       	subi	r28, 0xC0	; 192
    12b8:	de 4f       	sbci	r29, 0xFE	; 254
    12ba:	98 83       	st	Y, r25
    12bc:	c0 54       	subi	r28, 0x40	; 64
    12be:	d1 40       	sbci	r29, 0x01	; 1
    12c0:	c0 5c       	subi	r28, 0xC0	; 192
    12c2:	de 4f       	sbci	r29, 0xFE	; 254
    12c4:	e8 81       	ld	r30, Y
    12c6:	c0 54       	subi	r28, 0x40	; 64
    12c8:	d1 40       	sbci	r29, 0x01	; 1
    12ca:	ee 23       	and	r30, r30
    12cc:	31 f6       	brne	.-116    	; 0x125a <CLCD_voidHamoksha+0x18c>
	                                         0b00011111,
	                                         0b00010101,
	                                         0b00000100,
	                                         0b00000100
	                                        ,0b00001010,
	                                         0b00001010,0};
    12ce:	ce 01       	movw	r24, r28
    12d0:	86 50       	subi	r24, 0x06	; 6
    12d2:	9f 4f       	sbci	r25, 0xFF	; 255
    12d4:	cf 5b       	subi	r28, 0xBF	; 191
    12d6:	de 4f       	sbci	r29, 0xFE	; 254
    12d8:	99 83       	std	Y+1, r25	; 0x01
    12da:	88 83       	st	Y, r24
    12dc:	c1 54       	subi	r28, 0x41	; 65
    12de:	d1 40       	sbci	r29, 0x01	; 1
    12e0:	8f ed       	ldi	r24, 0xDF	; 223
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	cd 5b       	subi	r28, 0xBD	; 189
    12e6:	de 4f       	sbci	r29, 0xFE	; 254
    12e8:	99 83       	std	Y+1, r25	; 0x01
    12ea:	88 83       	st	Y, r24
    12ec:	c3 54       	subi	r28, 0x43	; 67
    12ee:	d1 40       	sbci	r29, 0x01	; 1
    12f0:	98 e0       	ldi	r25, 0x08	; 8
    12f2:	cb 5b       	subi	r28, 0xBB	; 187
    12f4:	de 4f       	sbci	r29, 0xFE	; 254
    12f6:	98 83       	st	Y, r25
    12f8:	c5 54       	subi	r28, 0x45	; 69
    12fa:	d1 40       	sbci	r29, 0x01	; 1
    12fc:	cd 5b       	subi	r28, 0xBD	; 189
    12fe:	de 4f       	sbci	r29, 0xFE	; 254
    1300:	e8 81       	ld	r30, Y
    1302:	f9 81       	ldd	r31, Y+1	; 0x01
    1304:	c3 54       	subi	r28, 0x43	; 67
    1306:	d1 40       	sbci	r29, 0x01	; 1
    1308:	00 80       	ld	r0, Z
    130a:	cd 5b       	subi	r28, 0xBD	; 189
    130c:	de 4f       	sbci	r29, 0xFE	; 254
    130e:	88 81       	ld	r24, Y
    1310:	99 81       	ldd	r25, Y+1	; 0x01
    1312:	c3 54       	subi	r28, 0x43	; 67
    1314:	d1 40       	sbci	r29, 0x01	; 1
    1316:	01 96       	adiw	r24, 0x01	; 1
    1318:	cd 5b       	subi	r28, 0xBD	; 189
    131a:	de 4f       	sbci	r29, 0xFE	; 254
    131c:	99 83       	std	Y+1, r25	; 0x01
    131e:	88 83       	st	Y, r24
    1320:	c3 54       	subi	r28, 0x43	; 67
    1322:	d1 40       	sbci	r29, 0x01	; 1
    1324:	cf 5b       	subi	r28, 0xBF	; 191
    1326:	de 4f       	sbci	r29, 0xFE	; 254
    1328:	e8 81       	ld	r30, Y
    132a:	f9 81       	ldd	r31, Y+1	; 0x01
    132c:	c1 54       	subi	r28, 0x41	; 65
    132e:	d1 40       	sbci	r29, 0x01	; 1
    1330:	00 82       	st	Z, r0
    1332:	cf 5b       	subi	r28, 0xBF	; 191
    1334:	de 4f       	sbci	r29, 0xFE	; 254
    1336:	88 81       	ld	r24, Y
    1338:	99 81       	ldd	r25, Y+1	; 0x01
    133a:	c1 54       	subi	r28, 0x41	; 65
    133c:	d1 40       	sbci	r29, 0x01	; 1
    133e:	01 96       	adiw	r24, 0x01	; 1
    1340:	cf 5b       	subi	r28, 0xBF	; 191
    1342:	de 4f       	sbci	r29, 0xFE	; 254
    1344:	99 83       	std	Y+1, r25	; 0x01
    1346:	88 83       	st	Y, r24
    1348:	c1 54       	subi	r28, 0x41	; 65
    134a:	d1 40       	sbci	r29, 0x01	; 1
    134c:	cb 5b       	subi	r28, 0xBB	; 187
    134e:	de 4f       	sbci	r29, 0xFE	; 254
    1350:	98 81       	ld	r25, Y
    1352:	c5 54       	subi	r28, 0x45	; 69
    1354:	d1 40       	sbci	r29, 0x01	; 1
    1356:	91 50       	subi	r25, 0x01	; 1
    1358:	cb 5b       	subi	r28, 0xBB	; 187
    135a:	de 4f       	sbci	r29, 0xFE	; 254
    135c:	98 83       	st	Y, r25
    135e:	c5 54       	subi	r28, 0x45	; 69
    1360:	d1 40       	sbci	r29, 0x01	; 1
    1362:	cb 5b       	subi	r28, 0xBB	; 187
    1364:	de 4f       	sbci	r29, 0xFE	; 254
    1366:	e8 81       	ld	r30, Y
    1368:	c5 54       	subi	r28, 0x45	; 69
    136a:	d1 40       	sbci	r29, 0x01	; 1
    136c:	ee 23       	and	r30, r30
    136e:	31 f6       	brne	.-116    	; 0x12fc <CLCD_voidHamoksha+0x22e>
                                         0b00001110,
                                         0b00000100,
                                         0b00000100,
                                         0b00000100
                                        ,0b00001010,
                                         0b00001010,0};
    1370:	ce 01       	movw	r24, r28
    1372:	8e 5f       	subi	r24, 0xFE	; 254
    1374:	9e 4f       	sbci	r25, 0xFE	; 254
    1376:	ca 5b       	subi	r28, 0xBA	; 186
    1378:	de 4f       	sbci	r29, 0xFE	; 254
    137a:	99 83       	std	Y+1, r25	; 0x01
    137c:	88 83       	st	Y, r24
    137e:	c6 54       	subi	r28, 0x46	; 70
    1380:	d1 40       	sbci	r29, 0x01	; 1
    1382:	87 ed       	ldi	r24, 0xD7	; 215
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	c8 5b       	subi	r28, 0xB8	; 184
    1388:	de 4f       	sbci	r29, 0xFE	; 254
    138a:	99 83       	std	Y+1, r25	; 0x01
    138c:	88 83       	st	Y, r24
    138e:	c8 54       	subi	r28, 0x48	; 72
    1390:	d1 40       	sbci	r29, 0x01	; 1
    1392:	98 e0       	ldi	r25, 0x08	; 8
    1394:	c6 5b       	subi	r28, 0xB6	; 182
    1396:	de 4f       	sbci	r29, 0xFE	; 254
    1398:	98 83       	st	Y, r25
    139a:	ca 54       	subi	r28, 0x4A	; 74
    139c:	d1 40       	sbci	r29, 0x01	; 1
    139e:	c8 5b       	subi	r28, 0xB8	; 184
    13a0:	de 4f       	sbci	r29, 0xFE	; 254
    13a2:	e8 81       	ld	r30, Y
    13a4:	f9 81       	ldd	r31, Y+1	; 0x01
    13a6:	c8 54       	subi	r28, 0x48	; 72
    13a8:	d1 40       	sbci	r29, 0x01	; 1
    13aa:	00 80       	ld	r0, Z
    13ac:	c8 5b       	subi	r28, 0xB8	; 184
    13ae:	de 4f       	sbci	r29, 0xFE	; 254
    13b0:	88 81       	ld	r24, Y
    13b2:	99 81       	ldd	r25, Y+1	; 0x01
    13b4:	c8 54       	subi	r28, 0x48	; 72
    13b6:	d1 40       	sbci	r29, 0x01	; 1
    13b8:	01 96       	adiw	r24, 0x01	; 1
    13ba:	c8 5b       	subi	r28, 0xB8	; 184
    13bc:	de 4f       	sbci	r29, 0xFE	; 254
    13be:	99 83       	std	Y+1, r25	; 0x01
    13c0:	88 83       	st	Y, r24
    13c2:	c8 54       	subi	r28, 0x48	; 72
    13c4:	d1 40       	sbci	r29, 0x01	; 1
    13c6:	ca 5b       	subi	r28, 0xBA	; 186
    13c8:	de 4f       	sbci	r29, 0xFE	; 254
    13ca:	e8 81       	ld	r30, Y
    13cc:	f9 81       	ldd	r31, Y+1	; 0x01
    13ce:	c6 54       	subi	r28, 0x46	; 70
    13d0:	d1 40       	sbci	r29, 0x01	; 1
    13d2:	00 82       	st	Z, r0
    13d4:	ca 5b       	subi	r28, 0xBA	; 186
    13d6:	de 4f       	sbci	r29, 0xFE	; 254
    13d8:	88 81       	ld	r24, Y
    13da:	99 81       	ldd	r25, Y+1	; 0x01
    13dc:	c6 54       	subi	r28, 0x46	; 70
    13de:	d1 40       	sbci	r29, 0x01	; 1
    13e0:	01 96       	adiw	r24, 0x01	; 1
    13e2:	ca 5b       	subi	r28, 0xBA	; 186
    13e4:	de 4f       	sbci	r29, 0xFE	; 254
    13e6:	99 83       	std	Y+1, r25	; 0x01
    13e8:	88 83       	st	Y, r24
    13ea:	c6 54       	subi	r28, 0x46	; 70
    13ec:	d1 40       	sbci	r29, 0x01	; 1
    13ee:	c6 5b       	subi	r28, 0xB6	; 182
    13f0:	de 4f       	sbci	r29, 0xFE	; 254
    13f2:	98 81       	ld	r25, Y
    13f4:	ca 54       	subi	r28, 0x4A	; 74
    13f6:	d1 40       	sbci	r29, 0x01	; 1
    13f8:	91 50       	subi	r25, 0x01	; 1
    13fa:	c6 5b       	subi	r28, 0xB6	; 182
    13fc:	de 4f       	sbci	r29, 0xFE	; 254
    13fe:	98 83       	st	Y, r25
    1400:	ca 54       	subi	r28, 0x4A	; 74
    1402:	d1 40       	sbci	r29, 0x01	; 1
    1404:	c6 5b       	subi	r28, 0xB6	; 182
    1406:	de 4f       	sbci	r29, 0xFE	; 254
    1408:	e8 81       	ld	r30, Y
    140a:	ca 54       	subi	r28, 0x4A	; 74
    140c:	d1 40       	sbci	r29, 0x01	; 1
    140e:	ee 23       	and	r30, r30
    1410:	31 f6       	brne	.-116    	; 0x139e <CLCD_voidHamoksha+0x2d0>
                                         0b00001110,
                                         0b00000100,
                                         0b00000100,
                                         0b00000100
                                        ,0b00001001,
                                         0b00001001,0};
    1412:	ce 01       	movw	r24, r28
    1414:	86 5f       	subi	r24, 0xF6	; 246
    1416:	9e 4f       	sbci	r25, 0xFE	; 254
    1418:	c5 5b       	subi	r28, 0xB5	; 181
    141a:	de 4f       	sbci	r29, 0xFE	; 254
    141c:	99 83       	std	Y+1, r25	; 0x01
    141e:	88 83       	st	Y, r24
    1420:	cb 54       	subi	r28, 0x4B	; 75
    1422:	d1 40       	sbci	r29, 0x01	; 1
    1424:	8f ec       	ldi	r24, 0xCF	; 207
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	c3 5b       	subi	r28, 0xB3	; 179
    142a:	de 4f       	sbci	r29, 0xFE	; 254
    142c:	99 83       	std	Y+1, r25	; 0x01
    142e:	88 83       	st	Y, r24
    1430:	cd 54       	subi	r28, 0x4D	; 77
    1432:	d1 40       	sbci	r29, 0x01	; 1
    1434:	98 e0       	ldi	r25, 0x08	; 8
    1436:	c1 5b       	subi	r28, 0xB1	; 177
    1438:	de 4f       	sbci	r29, 0xFE	; 254
    143a:	98 83       	st	Y, r25
    143c:	cf 54       	subi	r28, 0x4F	; 79
    143e:	d1 40       	sbci	r29, 0x01	; 1
    1440:	c3 5b       	subi	r28, 0xB3	; 179
    1442:	de 4f       	sbci	r29, 0xFE	; 254
    1444:	e8 81       	ld	r30, Y
    1446:	f9 81       	ldd	r31, Y+1	; 0x01
    1448:	cd 54       	subi	r28, 0x4D	; 77
    144a:	d1 40       	sbci	r29, 0x01	; 1
    144c:	00 80       	ld	r0, Z
    144e:	c3 5b       	subi	r28, 0xB3	; 179
    1450:	de 4f       	sbci	r29, 0xFE	; 254
    1452:	88 81       	ld	r24, Y
    1454:	99 81       	ldd	r25, Y+1	; 0x01
    1456:	cd 54       	subi	r28, 0x4D	; 77
    1458:	d1 40       	sbci	r29, 0x01	; 1
    145a:	01 96       	adiw	r24, 0x01	; 1
    145c:	c3 5b       	subi	r28, 0xB3	; 179
    145e:	de 4f       	sbci	r29, 0xFE	; 254
    1460:	99 83       	std	Y+1, r25	; 0x01
    1462:	88 83       	st	Y, r24
    1464:	cd 54       	subi	r28, 0x4D	; 77
    1466:	d1 40       	sbci	r29, 0x01	; 1
    1468:	c5 5b       	subi	r28, 0xB5	; 181
    146a:	de 4f       	sbci	r29, 0xFE	; 254
    146c:	e8 81       	ld	r30, Y
    146e:	f9 81       	ldd	r31, Y+1	; 0x01
    1470:	cb 54       	subi	r28, 0x4B	; 75
    1472:	d1 40       	sbci	r29, 0x01	; 1
    1474:	00 82       	st	Z, r0
    1476:	c5 5b       	subi	r28, 0xB5	; 181
    1478:	de 4f       	sbci	r29, 0xFE	; 254
    147a:	88 81       	ld	r24, Y
    147c:	99 81       	ldd	r25, Y+1	; 0x01
    147e:	cb 54       	subi	r28, 0x4B	; 75
    1480:	d1 40       	sbci	r29, 0x01	; 1
    1482:	01 96       	adiw	r24, 0x01	; 1
    1484:	c5 5b       	subi	r28, 0xB5	; 181
    1486:	de 4f       	sbci	r29, 0xFE	; 254
    1488:	99 83       	std	Y+1, r25	; 0x01
    148a:	88 83       	st	Y, r24
    148c:	cb 54       	subi	r28, 0x4B	; 75
    148e:	d1 40       	sbci	r29, 0x01	; 1
    1490:	c1 5b       	subi	r28, 0xB1	; 177
    1492:	de 4f       	sbci	r29, 0xFE	; 254
    1494:	98 81       	ld	r25, Y
    1496:	cf 54       	subi	r28, 0x4F	; 79
    1498:	d1 40       	sbci	r29, 0x01	; 1
    149a:	91 50       	subi	r25, 0x01	; 1
    149c:	c1 5b       	subi	r28, 0xB1	; 177
    149e:	de 4f       	sbci	r29, 0xFE	; 254
    14a0:	98 83       	st	Y, r25
    14a2:	cf 54       	subi	r28, 0x4F	; 79
    14a4:	d1 40       	sbci	r29, 0x01	; 1
    14a6:	c1 5b       	subi	r28, 0xB1	; 177
    14a8:	de 4f       	sbci	r29, 0xFE	; 254
    14aa:	e8 81       	ld	r30, Y
    14ac:	cf 54       	subi	r28, 0x4F	; 79
    14ae:	d1 40       	sbci	r29, 0x01	; 1
    14b0:	ee 23       	and	r30, r30
    14b2:	31 f6       	brne	.-116    	; 0x1440 <CLCD_voidHamoksha+0x372>
	                                         0b00001110,
	                                         0b00000100,
	                                         0b00000101,
	                                         0b00000101
	                                        ,0b00001010,
	                                         0b00001000,0};
    14b4:	ce 01       	movw	r24, r28
    14b6:	8e 5e       	subi	r24, 0xEE	; 238
    14b8:	9e 4f       	sbci	r25, 0xFE	; 254
    14ba:	c0 5b       	subi	r28, 0xB0	; 176
    14bc:	de 4f       	sbci	r29, 0xFE	; 254
    14be:	99 83       	std	Y+1, r25	; 0x01
    14c0:	88 83       	st	Y, r24
    14c2:	c0 55       	subi	r28, 0x50	; 80
    14c4:	d1 40       	sbci	r29, 0x01	; 1
    14c6:	87 ec       	ldi	r24, 0xC7	; 199
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	ce 5a       	subi	r28, 0xAE	; 174
    14cc:	de 4f       	sbci	r29, 0xFE	; 254
    14ce:	99 83       	std	Y+1, r25	; 0x01
    14d0:	88 83       	st	Y, r24
    14d2:	c2 55       	subi	r28, 0x52	; 82
    14d4:	d1 40       	sbci	r29, 0x01	; 1
    14d6:	98 e0       	ldi	r25, 0x08	; 8
    14d8:	cc 5a       	subi	r28, 0xAC	; 172
    14da:	de 4f       	sbci	r29, 0xFE	; 254
    14dc:	98 83       	st	Y, r25
    14de:	c4 55       	subi	r28, 0x54	; 84
    14e0:	d1 40       	sbci	r29, 0x01	; 1
    14e2:	ce 5a       	subi	r28, 0xAE	; 174
    14e4:	de 4f       	sbci	r29, 0xFE	; 254
    14e6:	e8 81       	ld	r30, Y
    14e8:	f9 81       	ldd	r31, Y+1	; 0x01
    14ea:	c2 55       	subi	r28, 0x52	; 82
    14ec:	d1 40       	sbci	r29, 0x01	; 1
    14ee:	00 80       	ld	r0, Z
    14f0:	ce 5a       	subi	r28, 0xAE	; 174
    14f2:	de 4f       	sbci	r29, 0xFE	; 254
    14f4:	88 81       	ld	r24, Y
    14f6:	99 81       	ldd	r25, Y+1	; 0x01
    14f8:	c2 55       	subi	r28, 0x52	; 82
    14fa:	d1 40       	sbci	r29, 0x01	; 1
    14fc:	01 96       	adiw	r24, 0x01	; 1
    14fe:	ce 5a       	subi	r28, 0xAE	; 174
    1500:	de 4f       	sbci	r29, 0xFE	; 254
    1502:	99 83       	std	Y+1, r25	; 0x01
    1504:	88 83       	st	Y, r24
    1506:	c2 55       	subi	r28, 0x52	; 82
    1508:	d1 40       	sbci	r29, 0x01	; 1
    150a:	c0 5b       	subi	r28, 0xB0	; 176
    150c:	de 4f       	sbci	r29, 0xFE	; 254
    150e:	e8 81       	ld	r30, Y
    1510:	f9 81       	ldd	r31, Y+1	; 0x01
    1512:	c0 55       	subi	r28, 0x50	; 80
    1514:	d1 40       	sbci	r29, 0x01	; 1
    1516:	00 82       	st	Z, r0
    1518:	c0 5b       	subi	r28, 0xB0	; 176
    151a:	de 4f       	sbci	r29, 0xFE	; 254
    151c:	88 81       	ld	r24, Y
    151e:	99 81       	ldd	r25, Y+1	; 0x01
    1520:	c0 55       	subi	r28, 0x50	; 80
    1522:	d1 40       	sbci	r29, 0x01	; 1
    1524:	01 96       	adiw	r24, 0x01	; 1
    1526:	c0 5b       	subi	r28, 0xB0	; 176
    1528:	de 4f       	sbci	r29, 0xFE	; 254
    152a:	99 83       	std	Y+1, r25	; 0x01
    152c:	88 83       	st	Y, r24
    152e:	c0 55       	subi	r28, 0x50	; 80
    1530:	d1 40       	sbci	r29, 0x01	; 1
    1532:	cc 5a       	subi	r28, 0xAC	; 172
    1534:	de 4f       	sbci	r29, 0xFE	; 254
    1536:	98 81       	ld	r25, Y
    1538:	c4 55       	subi	r28, 0x54	; 84
    153a:	d1 40       	sbci	r29, 0x01	; 1
    153c:	91 50       	subi	r25, 0x01	; 1
    153e:	cc 5a       	subi	r28, 0xAC	; 172
    1540:	de 4f       	sbci	r29, 0xFE	; 254
    1542:	98 83       	st	Y, r25
    1544:	c4 55       	subi	r28, 0x54	; 84
    1546:	d1 40       	sbci	r29, 0x01	; 1
    1548:	cc 5a       	subi	r28, 0xAC	; 172
    154a:	de 4f       	sbci	r29, 0xFE	; 254
    154c:	e8 81       	ld	r30, Y
    154e:	c4 55       	subi	r28, 0x54	; 84
    1550:	d1 40       	sbci	r29, 0x01	; 1
    1552:	ee 23       	and	r30, r30
    1554:	31 f6       	brne	.-116    	; 0x14e2 <CLCD_voidHamoksha+0x414>
            0b00011111,
            0b00011111,
            0b00011111,
            0b00011111
           ,0b00011111,
            0b00011111,0};
    1556:	ce 01       	movw	r24, r28
    1558:	86 5e       	subi	r24, 0xE6	; 230
    155a:	9e 4f       	sbci	r25, 0xFE	; 254
    155c:	cb 5a       	subi	r28, 0xAB	; 171
    155e:	de 4f       	sbci	r29, 0xFE	; 254
    1560:	99 83       	std	Y+1, r25	; 0x01
    1562:	88 83       	st	Y, r24
    1564:	c5 55       	subi	r28, 0x55	; 85
    1566:	d1 40       	sbci	r29, 0x01	; 1
    1568:	8f eb       	ldi	r24, 0xBF	; 191
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	c9 5a       	subi	r28, 0xA9	; 169
    156e:	de 4f       	sbci	r29, 0xFE	; 254
    1570:	99 83       	std	Y+1, r25	; 0x01
    1572:	88 83       	st	Y, r24
    1574:	c7 55       	subi	r28, 0x57	; 87
    1576:	d1 40       	sbci	r29, 0x01	; 1
    1578:	98 e0       	ldi	r25, 0x08	; 8
    157a:	c7 5a       	subi	r28, 0xA7	; 167
    157c:	de 4f       	sbci	r29, 0xFE	; 254
    157e:	98 83       	st	Y, r25
    1580:	c9 55       	subi	r28, 0x59	; 89
    1582:	d1 40       	sbci	r29, 0x01	; 1
    1584:	c9 5a       	subi	r28, 0xA9	; 169
    1586:	de 4f       	sbci	r29, 0xFE	; 254
    1588:	e8 81       	ld	r30, Y
    158a:	f9 81       	ldd	r31, Y+1	; 0x01
    158c:	c7 55       	subi	r28, 0x57	; 87
    158e:	d1 40       	sbci	r29, 0x01	; 1
    1590:	00 80       	ld	r0, Z
    1592:	c9 5a       	subi	r28, 0xA9	; 169
    1594:	de 4f       	sbci	r29, 0xFE	; 254
    1596:	88 81       	ld	r24, Y
    1598:	99 81       	ldd	r25, Y+1	; 0x01
    159a:	c7 55       	subi	r28, 0x57	; 87
    159c:	d1 40       	sbci	r29, 0x01	; 1
    159e:	01 96       	adiw	r24, 0x01	; 1
    15a0:	c9 5a       	subi	r28, 0xA9	; 169
    15a2:	de 4f       	sbci	r29, 0xFE	; 254
    15a4:	99 83       	std	Y+1, r25	; 0x01
    15a6:	88 83       	st	Y, r24
    15a8:	c7 55       	subi	r28, 0x57	; 87
    15aa:	d1 40       	sbci	r29, 0x01	; 1
    15ac:	cb 5a       	subi	r28, 0xAB	; 171
    15ae:	de 4f       	sbci	r29, 0xFE	; 254
    15b0:	e8 81       	ld	r30, Y
    15b2:	f9 81       	ldd	r31, Y+1	; 0x01
    15b4:	c5 55       	subi	r28, 0x55	; 85
    15b6:	d1 40       	sbci	r29, 0x01	; 1
    15b8:	00 82       	st	Z, r0
    15ba:	cb 5a       	subi	r28, 0xAB	; 171
    15bc:	de 4f       	sbci	r29, 0xFE	; 254
    15be:	88 81       	ld	r24, Y
    15c0:	99 81       	ldd	r25, Y+1	; 0x01
    15c2:	c5 55       	subi	r28, 0x55	; 85
    15c4:	d1 40       	sbci	r29, 0x01	; 1
    15c6:	01 96       	adiw	r24, 0x01	; 1
    15c8:	cb 5a       	subi	r28, 0xAB	; 171
    15ca:	de 4f       	sbci	r29, 0xFE	; 254
    15cc:	99 83       	std	Y+1, r25	; 0x01
    15ce:	88 83       	st	Y, r24
    15d0:	c5 55       	subi	r28, 0x55	; 85
    15d2:	d1 40       	sbci	r29, 0x01	; 1
    15d4:	c7 5a       	subi	r28, 0xA7	; 167
    15d6:	de 4f       	sbci	r29, 0xFE	; 254
    15d8:	98 81       	ld	r25, Y
    15da:	c9 55       	subi	r28, 0x59	; 89
    15dc:	d1 40       	sbci	r29, 0x01	; 1
    15de:	91 50       	subi	r25, 0x01	; 1
    15e0:	c7 5a       	subi	r28, 0xA7	; 167
    15e2:	de 4f       	sbci	r29, 0xFE	; 254
    15e4:	98 83       	st	Y, r25
    15e6:	c9 55       	subi	r28, 0x59	; 89
    15e8:	d1 40       	sbci	r29, 0x01	; 1
    15ea:	c7 5a       	subi	r28, 0xA7	; 167
    15ec:	de 4f       	sbci	r29, 0xFE	; 254
    15ee:	e8 81       	ld	r30, Y
    15f0:	c9 55       	subi	r28, 0x59	; 89
    15f2:	d1 40       	sbci	r29, 0x01	; 1
    15f4:	ee 23       	and	r30, r30
    15f6:	31 f6       	brne	.-116    	; 0x1584 <CLCD_voidHamoksha+0x4b6>
	            0b00011111,
	            0b00011111,
	            0b00011111,
	            0b00000000
	           ,0b00000000,
	            0b00000000,0};
    15f8:	ce 01       	movw	r24, r28
    15fa:	8e 5d       	subi	r24, 0xDE	; 222
    15fc:	9e 4f       	sbci	r25, 0xFE	; 254
    15fe:	c6 5a       	subi	r28, 0xA6	; 166
    1600:	de 4f       	sbci	r29, 0xFE	; 254
    1602:	99 83       	std	Y+1, r25	; 0x01
    1604:	88 83       	st	Y, r24
    1606:	ca 55       	subi	r28, 0x5A	; 90
    1608:	d1 40       	sbci	r29, 0x01	; 1
    160a:	87 eb       	ldi	r24, 0xB7	; 183
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	c4 5a       	subi	r28, 0xA4	; 164
    1610:	de 4f       	sbci	r29, 0xFE	; 254
    1612:	99 83       	std	Y+1, r25	; 0x01
    1614:	88 83       	st	Y, r24
    1616:	cc 55       	subi	r28, 0x5C	; 92
    1618:	d1 40       	sbci	r29, 0x01	; 1
    161a:	98 e0       	ldi	r25, 0x08	; 8
    161c:	c2 5a       	subi	r28, 0xA2	; 162
    161e:	de 4f       	sbci	r29, 0xFE	; 254
    1620:	98 83       	st	Y, r25
    1622:	ce 55       	subi	r28, 0x5E	; 94
    1624:	d1 40       	sbci	r29, 0x01	; 1
    1626:	c4 5a       	subi	r28, 0xA4	; 164
    1628:	de 4f       	sbci	r29, 0xFE	; 254
    162a:	e8 81       	ld	r30, Y
    162c:	f9 81       	ldd	r31, Y+1	; 0x01
    162e:	cc 55       	subi	r28, 0x5C	; 92
    1630:	d1 40       	sbci	r29, 0x01	; 1
    1632:	00 80       	ld	r0, Z
    1634:	c4 5a       	subi	r28, 0xA4	; 164
    1636:	de 4f       	sbci	r29, 0xFE	; 254
    1638:	88 81       	ld	r24, Y
    163a:	99 81       	ldd	r25, Y+1	; 0x01
    163c:	cc 55       	subi	r28, 0x5C	; 92
    163e:	d1 40       	sbci	r29, 0x01	; 1
    1640:	01 96       	adiw	r24, 0x01	; 1
    1642:	c4 5a       	subi	r28, 0xA4	; 164
    1644:	de 4f       	sbci	r29, 0xFE	; 254
    1646:	99 83       	std	Y+1, r25	; 0x01
    1648:	88 83       	st	Y, r24
    164a:	cc 55       	subi	r28, 0x5C	; 92
    164c:	d1 40       	sbci	r29, 0x01	; 1
    164e:	c6 5a       	subi	r28, 0xA6	; 166
    1650:	de 4f       	sbci	r29, 0xFE	; 254
    1652:	e8 81       	ld	r30, Y
    1654:	f9 81       	ldd	r31, Y+1	; 0x01
    1656:	ca 55       	subi	r28, 0x5A	; 90
    1658:	d1 40       	sbci	r29, 0x01	; 1
    165a:	00 82       	st	Z, r0
    165c:	c6 5a       	subi	r28, 0xA6	; 166
    165e:	de 4f       	sbci	r29, 0xFE	; 254
    1660:	88 81       	ld	r24, Y
    1662:	99 81       	ldd	r25, Y+1	; 0x01
    1664:	ca 55       	subi	r28, 0x5A	; 90
    1666:	d1 40       	sbci	r29, 0x01	; 1
    1668:	01 96       	adiw	r24, 0x01	; 1
    166a:	c6 5a       	subi	r28, 0xA6	; 166
    166c:	de 4f       	sbci	r29, 0xFE	; 254
    166e:	99 83       	std	Y+1, r25	; 0x01
    1670:	88 83       	st	Y, r24
    1672:	ca 55       	subi	r28, 0x5A	; 90
    1674:	d1 40       	sbci	r29, 0x01	; 1
    1676:	c2 5a       	subi	r28, 0xA2	; 162
    1678:	de 4f       	sbci	r29, 0xFE	; 254
    167a:	98 81       	ld	r25, Y
    167c:	ce 55       	subi	r28, 0x5E	; 94
    167e:	d1 40       	sbci	r29, 0x01	; 1
    1680:	91 50       	subi	r25, 0x01	; 1
    1682:	c2 5a       	subi	r28, 0xA2	; 162
    1684:	de 4f       	sbci	r29, 0xFE	; 254
    1686:	98 83       	st	Y, r25
    1688:	ce 55       	subi	r28, 0x5E	; 94
    168a:	d1 40       	sbci	r29, 0x01	; 1
    168c:	c2 5a       	subi	r28, 0xA2	; 162
    168e:	de 4f       	sbci	r29, 0xFE	; 254
    1690:	e8 81       	ld	r30, Y
    1692:	ce 55       	subi	r28, 0x5E	; 94
    1694:	d1 40       	sbci	r29, 0x01	; 1
    1696:	ee 23       	and	r30, r30
    1698:	31 f6       	brne	.-116    	; 0x1626 <CLCD_voidHamoksha+0x558>
                                   0b00001110,
                                   0b00001110,
                                   0b00000000,
                                   0b00000000
                                  ,0b00000000,
                                   0b00000000,0};
    169a:	ce 01       	movw	r24, r28
    169c:	86 5d       	subi	r24, 0xD6	; 214
    169e:	9e 4f       	sbci	r25, 0xFE	; 254
    16a0:	c1 5a       	subi	r28, 0xA1	; 161
    16a2:	de 4f       	sbci	r29, 0xFE	; 254
    16a4:	99 83       	std	Y+1, r25	; 0x01
    16a6:	88 83       	st	Y, r24
    16a8:	cf 55       	subi	r28, 0x5F	; 95
    16aa:	d1 40       	sbci	r29, 0x01	; 1
    16ac:	8f ea       	ldi	r24, 0xAF	; 175
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	cf 59       	subi	r28, 0x9F	; 159
    16b2:	de 4f       	sbci	r29, 0xFE	; 254
    16b4:	99 83       	std	Y+1, r25	; 0x01
    16b6:	88 83       	st	Y, r24
    16b8:	c1 56       	subi	r28, 0x61	; 97
    16ba:	d1 40       	sbci	r29, 0x01	; 1
    16bc:	98 e0       	ldi	r25, 0x08	; 8
    16be:	cd 59       	subi	r28, 0x9D	; 157
    16c0:	de 4f       	sbci	r29, 0xFE	; 254
    16c2:	98 83       	st	Y, r25
    16c4:	c3 56       	subi	r28, 0x63	; 99
    16c6:	d1 40       	sbci	r29, 0x01	; 1
    16c8:	cf 59       	subi	r28, 0x9F	; 159
    16ca:	de 4f       	sbci	r29, 0xFE	; 254
    16cc:	e8 81       	ld	r30, Y
    16ce:	f9 81       	ldd	r31, Y+1	; 0x01
    16d0:	c1 56       	subi	r28, 0x61	; 97
    16d2:	d1 40       	sbci	r29, 0x01	; 1
    16d4:	00 80       	ld	r0, Z
    16d6:	cf 59       	subi	r28, 0x9F	; 159
    16d8:	de 4f       	sbci	r29, 0xFE	; 254
    16da:	88 81       	ld	r24, Y
    16dc:	99 81       	ldd	r25, Y+1	; 0x01
    16de:	c1 56       	subi	r28, 0x61	; 97
    16e0:	d1 40       	sbci	r29, 0x01	; 1
    16e2:	01 96       	adiw	r24, 0x01	; 1
    16e4:	cf 59       	subi	r28, 0x9F	; 159
    16e6:	de 4f       	sbci	r29, 0xFE	; 254
    16e8:	99 83       	std	Y+1, r25	; 0x01
    16ea:	88 83       	st	Y, r24
    16ec:	c1 56       	subi	r28, 0x61	; 97
    16ee:	d1 40       	sbci	r29, 0x01	; 1
    16f0:	c1 5a       	subi	r28, 0xA1	; 161
    16f2:	de 4f       	sbci	r29, 0xFE	; 254
    16f4:	e8 81       	ld	r30, Y
    16f6:	f9 81       	ldd	r31, Y+1	; 0x01
    16f8:	cf 55       	subi	r28, 0x5F	; 95
    16fa:	d1 40       	sbci	r29, 0x01	; 1
    16fc:	00 82       	st	Z, r0
    16fe:	c1 5a       	subi	r28, 0xA1	; 161
    1700:	de 4f       	sbci	r29, 0xFE	; 254
    1702:	88 81       	ld	r24, Y
    1704:	99 81       	ldd	r25, Y+1	; 0x01
    1706:	cf 55       	subi	r28, 0x5F	; 95
    1708:	d1 40       	sbci	r29, 0x01	; 1
    170a:	01 96       	adiw	r24, 0x01	; 1
    170c:	c1 5a       	subi	r28, 0xA1	; 161
    170e:	de 4f       	sbci	r29, 0xFE	; 254
    1710:	99 83       	std	Y+1, r25	; 0x01
    1712:	88 83       	st	Y, r24
    1714:	cf 55       	subi	r28, 0x5F	; 95
    1716:	d1 40       	sbci	r29, 0x01	; 1
    1718:	cd 59       	subi	r28, 0x9D	; 157
    171a:	de 4f       	sbci	r29, 0xFE	; 254
    171c:	98 81       	ld	r25, Y
    171e:	c3 56       	subi	r28, 0x63	; 99
    1720:	d1 40       	sbci	r29, 0x01	; 1
    1722:	91 50       	subi	r25, 0x01	; 1
    1724:	cd 59       	subi	r28, 0x9D	; 157
    1726:	de 4f       	sbci	r29, 0xFE	; 254
    1728:	98 83       	st	Y, r25
    172a:	c3 56       	subi	r28, 0x63	; 99
    172c:	d1 40       	sbci	r29, 0x01	; 1
    172e:	cd 59       	subi	r28, 0x9D	; 157
    1730:	de 4f       	sbci	r29, 0xFE	; 254
    1732:	e8 81       	ld	r30, Y
    1734:	c3 56       	subi	r28, 0x63	; 99
    1736:	d1 40       	sbci	r29, 0x01	; 1
    1738:	ee 23       	and	r30, r30
    173a:	31 f6       	brne	.-116    	; 0x16c8 <CLCD_voidHamoksha+0x5fa>





CLCD_voidClear();
    173c:	0e 94 5d 08 	call	0x10ba	; 0x10ba <CLCD_voidClear>
	CLCD_VoidGoToXY(0,0);
    1740:	80 e0       	ldi	r24, 0x00	; 0
    1742:	60 e0       	ldi	r22, 0x00	; 0
    1744:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <CLCD_VoidGoToXY>
	CLCD_u8SendString("HI I AM HAMOKSHA");
    1748:	80 e6       	ldi	r24, 0x60	; 96
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	0e 94 32 07 	call	0xe64	; 0xe64 <CLCD_u8SendString>

	CLCD_u8SpecialCharacter(0,Local_u8HamokshaPattern1,7,1);
    1750:	9e 01       	movw	r18, r28
    1752:	26 51       	subi	r18, 0x16	; 22
    1754:	3f 4f       	sbci	r19, 0xFF	; 255
    1756:	80 e0       	ldi	r24, 0x00	; 0
    1758:	b9 01       	movw	r22, r18
    175a:	47 e0       	ldi	r20, 0x07	; 7
    175c:	21 e0       	ldi	r18, 0x01	; 1
    175e:	0e 94 11 08 	call	0x1022	; 0x1022 <CLCD_u8SpecialCharacter>
    1762:	fe 01       	movw	r30, r28
    1764:	e3 52       	subi	r30, 0x23	; 35
    1766:	ff 4f       	sbci	r31, 0xFF	; 255
    1768:	80 e0       	ldi	r24, 0x00	; 0
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	af e2       	ldi	r26, 0x2F	; 47
    176e:	b4 e4       	ldi	r27, 0x44	; 68
    1770:	80 83       	st	Z, r24
    1772:	91 83       	std	Z+1, r25	; 0x01
    1774:	a2 83       	std	Z+2, r26	; 0x02
    1776:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1778:	8e 01       	movw	r16, r28
    177a:	07 52       	subi	r16, 0x27	; 39
    177c:	1f 4f       	sbci	r17, 0xFF	; 255
    177e:	fe 01       	movw	r30, r28
    1780:	e3 52       	subi	r30, 0x23	; 35
    1782:	ff 4f       	sbci	r31, 0xFF	; 255
    1784:	60 81       	ld	r22, Z
    1786:	71 81       	ldd	r23, Z+1	; 0x01
    1788:	82 81       	ldd	r24, Z+2	; 0x02
    178a:	93 81       	ldd	r25, Z+3	; 0x03
    178c:	20 e0       	ldi	r18, 0x00	; 0
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	4a e7       	ldi	r20, 0x7A	; 122
    1792:	55 e4       	ldi	r21, 0x45	; 69
    1794:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1798:	dc 01       	movw	r26, r24
    179a:	cb 01       	movw	r24, r22
    179c:	f8 01       	movw	r30, r16
    179e:	80 83       	st	Z, r24
    17a0:	91 83       	std	Z+1, r25	; 0x01
    17a2:	a2 83       	std	Z+2, r26	; 0x02
    17a4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17a6:	fe 01       	movw	r30, r28
    17a8:	e7 52       	subi	r30, 0x27	; 39
    17aa:	ff 4f       	sbci	r31, 0xFF	; 255
    17ac:	60 81       	ld	r22, Z
    17ae:	71 81       	ldd	r23, Z+1	; 0x01
    17b0:	82 81       	ldd	r24, Z+2	; 0x02
    17b2:	93 81       	ldd	r25, Z+3	; 0x03
    17b4:	20 e0       	ldi	r18, 0x00	; 0
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	40 e8       	ldi	r20, 0x80	; 128
    17ba:	5f e3       	ldi	r21, 0x3F	; 63
    17bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17c0:	88 23       	and	r24, r24
    17c2:	44 f4       	brge	.+16     	; 0x17d4 <CLCD_voidHamoksha+0x706>
		__ticks = 1;
    17c4:	fe 01       	movw	r30, r28
    17c6:	e9 52       	subi	r30, 0x29	; 41
    17c8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	91 83       	std	Z+1, r25	; 0x01
    17d0:	80 83       	st	Z, r24
    17d2:	64 c0       	rjmp	.+200    	; 0x189c <CLCD_voidHamoksha+0x7ce>
	else if (__tmp > 65535)
    17d4:	fe 01       	movw	r30, r28
    17d6:	e7 52       	subi	r30, 0x27	; 39
    17d8:	ff 4f       	sbci	r31, 0xFF	; 255
    17da:	60 81       	ld	r22, Z
    17dc:	71 81       	ldd	r23, Z+1	; 0x01
    17de:	82 81       	ldd	r24, Z+2	; 0x02
    17e0:	93 81       	ldd	r25, Z+3	; 0x03
    17e2:	20 e0       	ldi	r18, 0x00	; 0
    17e4:	3f ef       	ldi	r19, 0xFF	; 255
    17e6:	4f e7       	ldi	r20, 0x7F	; 127
    17e8:	57 e4       	ldi	r21, 0x47	; 71
    17ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17ee:	18 16       	cp	r1, r24
    17f0:	0c f0       	brlt	.+2      	; 0x17f4 <CLCD_voidHamoksha+0x726>
    17f2:	43 c0       	rjmp	.+134    	; 0x187a <CLCD_voidHamoksha+0x7ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17f4:	fe 01       	movw	r30, r28
    17f6:	e3 52       	subi	r30, 0x23	; 35
    17f8:	ff 4f       	sbci	r31, 0xFF	; 255
    17fa:	60 81       	ld	r22, Z
    17fc:	71 81       	ldd	r23, Z+1	; 0x01
    17fe:	82 81       	ldd	r24, Z+2	; 0x02
    1800:	93 81       	ldd	r25, Z+3	; 0x03
    1802:	20 e0       	ldi	r18, 0x00	; 0
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	40 e2       	ldi	r20, 0x20	; 32
    1808:	51 e4       	ldi	r21, 0x41	; 65
    180a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    180e:	dc 01       	movw	r26, r24
    1810:	cb 01       	movw	r24, r22
    1812:	8e 01       	movw	r16, r28
    1814:	09 52       	subi	r16, 0x29	; 41
    1816:	1f 4f       	sbci	r17, 0xFF	; 255
    1818:	bc 01       	movw	r22, r24
    181a:	cd 01       	movw	r24, r26
    181c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1820:	dc 01       	movw	r26, r24
    1822:	cb 01       	movw	r24, r22
    1824:	f8 01       	movw	r30, r16
    1826:	91 83       	std	Z+1, r25	; 0x01
    1828:	80 83       	st	Z, r24
    182a:	1f c0       	rjmp	.+62     	; 0x186a <CLCD_voidHamoksha+0x79c>
    182c:	fe 01       	movw	r30, r28
    182e:	eb 52       	subi	r30, 0x2B	; 43
    1830:	ff 4f       	sbci	r31, 0xFF	; 255
    1832:	80 e9       	ldi	r24, 0x90	; 144
    1834:	91 e0       	ldi	r25, 0x01	; 1
    1836:	91 83       	std	Z+1, r25	; 0x01
    1838:	80 83       	st	Z, r24
    183a:	fe 01       	movw	r30, r28
    183c:	eb 52       	subi	r30, 0x2B	; 43
    183e:	ff 4f       	sbci	r31, 0xFF	; 255
    1840:	80 81       	ld	r24, Z
    1842:	91 81       	ldd	r25, Z+1	; 0x01
    1844:	01 97       	sbiw	r24, 0x01	; 1
    1846:	f1 f7       	brne	.-4      	; 0x1844 <CLCD_voidHamoksha+0x776>
    1848:	fe 01       	movw	r30, r28
    184a:	eb 52       	subi	r30, 0x2B	; 43
    184c:	ff 4f       	sbci	r31, 0xFF	; 255
    184e:	91 83       	std	Z+1, r25	; 0x01
    1850:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1852:	de 01       	movw	r26, r28
    1854:	a9 52       	subi	r26, 0x29	; 41
    1856:	bf 4f       	sbci	r27, 0xFF	; 255
    1858:	fe 01       	movw	r30, r28
    185a:	e9 52       	subi	r30, 0x29	; 41
    185c:	ff 4f       	sbci	r31, 0xFF	; 255
    185e:	80 81       	ld	r24, Z
    1860:	91 81       	ldd	r25, Z+1	; 0x01
    1862:	01 97       	sbiw	r24, 0x01	; 1
    1864:	11 96       	adiw	r26, 0x01	; 1
    1866:	9c 93       	st	X, r25
    1868:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    186a:	fe 01       	movw	r30, r28
    186c:	e9 52       	subi	r30, 0x29	; 41
    186e:	ff 4f       	sbci	r31, 0xFF	; 255
    1870:	80 81       	ld	r24, Z
    1872:	91 81       	ldd	r25, Z+1	; 0x01
    1874:	00 97       	sbiw	r24, 0x00	; 0
    1876:	d1 f6       	brne	.-76     	; 0x182c <CLCD_voidHamoksha+0x75e>
    1878:	27 c0       	rjmp	.+78     	; 0x18c8 <CLCD_voidHamoksha+0x7fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    187a:	8e 01       	movw	r16, r28
    187c:	09 52       	subi	r16, 0x29	; 41
    187e:	1f 4f       	sbci	r17, 0xFF	; 255
    1880:	fe 01       	movw	r30, r28
    1882:	e7 52       	subi	r30, 0x27	; 39
    1884:	ff 4f       	sbci	r31, 0xFF	; 255
    1886:	60 81       	ld	r22, Z
    1888:	71 81       	ldd	r23, Z+1	; 0x01
    188a:	82 81       	ldd	r24, Z+2	; 0x02
    188c:	93 81       	ldd	r25, Z+3	; 0x03
    188e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1892:	dc 01       	movw	r26, r24
    1894:	cb 01       	movw	r24, r22
    1896:	f8 01       	movw	r30, r16
    1898:	91 83       	std	Z+1, r25	; 0x01
    189a:	80 83       	st	Z, r24
    189c:	de 01       	movw	r26, r28
    189e:	ad 52       	subi	r26, 0x2D	; 45
    18a0:	bf 4f       	sbci	r27, 0xFF	; 255
    18a2:	fe 01       	movw	r30, r28
    18a4:	e9 52       	subi	r30, 0x29	; 41
    18a6:	ff 4f       	sbci	r31, 0xFF	; 255
    18a8:	80 81       	ld	r24, Z
    18aa:	91 81       	ldd	r25, Z+1	; 0x01
    18ac:	8d 93       	st	X+, r24
    18ae:	9c 93       	st	X, r25
    18b0:	fe 01       	movw	r30, r28
    18b2:	ed 52       	subi	r30, 0x2D	; 45
    18b4:	ff 4f       	sbci	r31, 0xFF	; 255
    18b6:	80 81       	ld	r24, Z
    18b8:	91 81       	ldd	r25, Z+1	; 0x01
    18ba:	01 97       	sbiw	r24, 0x01	; 1
    18bc:	f1 f7       	brne	.-4      	; 0x18ba <CLCD_voidHamoksha+0x7ec>
    18be:	fe 01       	movw	r30, r28
    18c0:	ed 52       	subi	r30, 0x2D	; 45
    18c2:	ff 4f       	sbci	r31, 0xFF	; 255
    18c4:	91 83       	std	Z+1, r25	; 0x01
    18c6:	80 83       	st	Z, r24
	_delay_ms(700);
	CLCD_voidClear();
    18c8:	0e 94 5d 08 	call	0x10ba	; 0x10ba <CLCD_voidClear>
	CLCD_VoidGoToXY(0,0);
    18cc:	80 e0       	ldi	r24, 0x00	; 0
    18ce:	60 e0       	ldi	r22, 0x00	; 0
    18d0:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <CLCD_VoidGoToXY>
	CLCD_u8SendString("I CAN RUN");
    18d4:	81 e7       	ldi	r24, 0x71	; 113
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	0e 94 32 07 	call	0xe64	; 0xe64 <CLCD_u8SendString>
    18dc:	fe 01       	movw	r30, r28
    18de:	e1 53       	subi	r30, 0x31	; 49
    18e0:	ff 4f       	sbci	r31, 0xFF	; 255
    18e2:	80 e0       	ldi	r24, 0x00	; 0
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	a6 e1       	ldi	r26, 0x16	; 22
    18e8:	b4 e4       	ldi	r27, 0x44	; 68
    18ea:	80 83       	st	Z, r24
    18ec:	91 83       	std	Z+1, r25	; 0x01
    18ee:	a2 83       	std	Z+2, r26	; 0x02
    18f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18f2:	8e 01       	movw	r16, r28
    18f4:	05 53       	subi	r16, 0x35	; 53
    18f6:	1f 4f       	sbci	r17, 0xFF	; 255
    18f8:	fe 01       	movw	r30, r28
    18fa:	e1 53       	subi	r30, 0x31	; 49
    18fc:	ff 4f       	sbci	r31, 0xFF	; 255
    18fe:	60 81       	ld	r22, Z
    1900:	71 81       	ldd	r23, Z+1	; 0x01
    1902:	82 81       	ldd	r24, Z+2	; 0x02
    1904:	93 81       	ldd	r25, Z+3	; 0x03
    1906:	20 e0       	ldi	r18, 0x00	; 0
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	4a e7       	ldi	r20, 0x7A	; 122
    190c:	55 e4       	ldi	r21, 0x45	; 69
    190e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1912:	dc 01       	movw	r26, r24
    1914:	cb 01       	movw	r24, r22
    1916:	f8 01       	movw	r30, r16
    1918:	80 83       	st	Z, r24
    191a:	91 83       	std	Z+1, r25	; 0x01
    191c:	a2 83       	std	Z+2, r26	; 0x02
    191e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1920:	fe 01       	movw	r30, r28
    1922:	e5 53       	subi	r30, 0x35	; 53
    1924:	ff 4f       	sbci	r31, 0xFF	; 255
    1926:	60 81       	ld	r22, Z
    1928:	71 81       	ldd	r23, Z+1	; 0x01
    192a:	82 81       	ldd	r24, Z+2	; 0x02
    192c:	93 81       	ldd	r25, Z+3	; 0x03
    192e:	20 e0       	ldi	r18, 0x00	; 0
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	40 e8       	ldi	r20, 0x80	; 128
    1934:	5f e3       	ldi	r21, 0x3F	; 63
    1936:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    193a:	88 23       	and	r24, r24
    193c:	44 f4       	brge	.+16     	; 0x194e <CLCD_voidHamoksha+0x880>
		__ticks = 1;
    193e:	fe 01       	movw	r30, r28
    1940:	e7 53       	subi	r30, 0x37	; 55
    1942:	ff 4f       	sbci	r31, 0xFF	; 255
    1944:	81 e0       	ldi	r24, 0x01	; 1
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	91 83       	std	Z+1, r25	; 0x01
    194a:	80 83       	st	Z, r24
    194c:	64 c0       	rjmp	.+200    	; 0x1a16 <CLCD_voidHamoksha+0x948>
	else if (__tmp > 65535)
    194e:	fe 01       	movw	r30, r28
    1950:	e5 53       	subi	r30, 0x35	; 53
    1952:	ff 4f       	sbci	r31, 0xFF	; 255
    1954:	60 81       	ld	r22, Z
    1956:	71 81       	ldd	r23, Z+1	; 0x01
    1958:	82 81       	ldd	r24, Z+2	; 0x02
    195a:	93 81       	ldd	r25, Z+3	; 0x03
    195c:	20 e0       	ldi	r18, 0x00	; 0
    195e:	3f ef       	ldi	r19, 0xFF	; 255
    1960:	4f e7       	ldi	r20, 0x7F	; 127
    1962:	57 e4       	ldi	r21, 0x47	; 71
    1964:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1968:	18 16       	cp	r1, r24
    196a:	0c f0       	brlt	.+2      	; 0x196e <CLCD_voidHamoksha+0x8a0>
    196c:	43 c0       	rjmp	.+134    	; 0x19f4 <CLCD_voidHamoksha+0x926>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    196e:	fe 01       	movw	r30, r28
    1970:	e1 53       	subi	r30, 0x31	; 49
    1972:	ff 4f       	sbci	r31, 0xFF	; 255
    1974:	60 81       	ld	r22, Z
    1976:	71 81       	ldd	r23, Z+1	; 0x01
    1978:	82 81       	ldd	r24, Z+2	; 0x02
    197a:	93 81       	ldd	r25, Z+3	; 0x03
    197c:	20 e0       	ldi	r18, 0x00	; 0
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	40 e2       	ldi	r20, 0x20	; 32
    1982:	51 e4       	ldi	r21, 0x41	; 65
    1984:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1988:	dc 01       	movw	r26, r24
    198a:	cb 01       	movw	r24, r22
    198c:	8e 01       	movw	r16, r28
    198e:	07 53       	subi	r16, 0x37	; 55
    1990:	1f 4f       	sbci	r17, 0xFF	; 255
    1992:	bc 01       	movw	r22, r24
    1994:	cd 01       	movw	r24, r26
    1996:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    199a:	dc 01       	movw	r26, r24
    199c:	cb 01       	movw	r24, r22
    199e:	f8 01       	movw	r30, r16
    19a0:	91 83       	std	Z+1, r25	; 0x01
    19a2:	80 83       	st	Z, r24
    19a4:	1f c0       	rjmp	.+62     	; 0x19e4 <CLCD_voidHamoksha+0x916>
    19a6:	fe 01       	movw	r30, r28
    19a8:	e9 53       	subi	r30, 0x39	; 57
    19aa:	ff 4f       	sbci	r31, 0xFF	; 255
    19ac:	80 e9       	ldi	r24, 0x90	; 144
    19ae:	91 e0       	ldi	r25, 0x01	; 1
    19b0:	91 83       	std	Z+1, r25	; 0x01
    19b2:	80 83       	st	Z, r24
    19b4:	fe 01       	movw	r30, r28
    19b6:	e9 53       	subi	r30, 0x39	; 57
    19b8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ba:	80 81       	ld	r24, Z
    19bc:	91 81       	ldd	r25, Z+1	; 0x01
    19be:	01 97       	sbiw	r24, 0x01	; 1
    19c0:	f1 f7       	brne	.-4      	; 0x19be <CLCD_voidHamoksha+0x8f0>
    19c2:	fe 01       	movw	r30, r28
    19c4:	e9 53       	subi	r30, 0x39	; 57
    19c6:	ff 4f       	sbci	r31, 0xFF	; 255
    19c8:	91 83       	std	Z+1, r25	; 0x01
    19ca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19cc:	de 01       	movw	r26, r28
    19ce:	a7 53       	subi	r26, 0x37	; 55
    19d0:	bf 4f       	sbci	r27, 0xFF	; 255
    19d2:	fe 01       	movw	r30, r28
    19d4:	e7 53       	subi	r30, 0x37	; 55
    19d6:	ff 4f       	sbci	r31, 0xFF	; 255
    19d8:	80 81       	ld	r24, Z
    19da:	91 81       	ldd	r25, Z+1	; 0x01
    19dc:	01 97       	sbiw	r24, 0x01	; 1
    19de:	11 96       	adiw	r26, 0x01	; 1
    19e0:	9c 93       	st	X, r25
    19e2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19e4:	fe 01       	movw	r30, r28
    19e6:	e7 53       	subi	r30, 0x37	; 55
    19e8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ea:	80 81       	ld	r24, Z
    19ec:	91 81       	ldd	r25, Z+1	; 0x01
    19ee:	00 97       	sbiw	r24, 0x00	; 0
    19f0:	d1 f6       	brne	.-76     	; 0x19a6 <CLCD_voidHamoksha+0x8d8>
    19f2:	28 c0       	rjmp	.+80     	; 0x1a44 <CLCD_voidHamoksha+0x976>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19f4:	8e 01       	movw	r16, r28
    19f6:	07 53       	subi	r16, 0x37	; 55
    19f8:	1f 4f       	sbci	r17, 0xFF	; 255
    19fa:	fe 01       	movw	r30, r28
    19fc:	e5 53       	subi	r30, 0x35	; 53
    19fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1a00:	60 81       	ld	r22, Z
    1a02:	71 81       	ldd	r23, Z+1	; 0x01
    1a04:	82 81       	ldd	r24, Z+2	; 0x02
    1a06:	93 81       	ldd	r25, Z+3	; 0x03
    1a08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a0c:	dc 01       	movw	r26, r24
    1a0e:	cb 01       	movw	r24, r22
    1a10:	f8 01       	movw	r30, r16
    1a12:	91 83       	std	Z+1, r25	; 0x01
    1a14:	80 83       	st	Z, r24
    1a16:	de 01       	movw	r26, r28
    1a18:	ab 53       	subi	r26, 0x3B	; 59
    1a1a:	bf 4f       	sbci	r27, 0xFF	; 255
    1a1c:	fe 01       	movw	r30, r28
    1a1e:	e7 53       	subi	r30, 0x37	; 55
    1a20:	ff 4f       	sbci	r31, 0xFF	; 255
    1a22:	80 81       	ld	r24, Z
    1a24:	91 81       	ldd	r25, Z+1	; 0x01
    1a26:	11 96       	adiw	r26, 0x01	; 1
    1a28:	9c 93       	st	X, r25
    1a2a:	8e 93       	st	-X, r24
    1a2c:	fe 01       	movw	r30, r28
    1a2e:	eb 53       	subi	r30, 0x3B	; 59
    1a30:	ff 4f       	sbci	r31, 0xFF	; 255
    1a32:	80 81       	ld	r24, Z
    1a34:	91 81       	ldd	r25, Z+1	; 0x01
    1a36:	01 97       	sbiw	r24, 0x01	; 1
    1a38:	f1 f7       	brne	.-4      	; 0x1a36 <CLCD_voidHamoksha+0x968>
    1a3a:	fe 01       	movw	r30, r28
    1a3c:	eb 53       	subi	r30, 0x3B	; 59
    1a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a40:	91 83       	std	Z+1, r25	; 0x01
    1a42:	80 83       	st	Z, r24
	_delay_ms(600);
uint8 i=0;
    1a44:	fe 01       	movw	r30, r28
    1a46:	ef 51       	subi	r30, 0x1F	; 31
    1a48:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4a:	10 82       	st	Z, r1
    1a4c:	93 c1       	rjmp	.+806    	; 0x1d74 <CLCD_voidHamoksha+0xca6>
while(i<16)
	{   CLCD_voidClear();
    1a4e:	0e 94 5d 08 	call	0x10ba	; 0x10ba <CLCD_voidClear>
		CLCD_u8SpecialCharacter(0,Local_u8HamokshaPattern4,i++,1);
    1a52:	fe 01       	movw	r30, r28
    1a54:	ef 51       	subi	r30, 0x1F	; 31
    1a56:	ff 4f       	sbci	r31, 0xFF	; 255
    1a58:	90 81       	ld	r25, Z
    1a5a:	de 01       	movw	r26, r28
    1a5c:	af 51       	subi	r26, 0x1F	; 31
    1a5e:	bf 4f       	sbci	r27, 0xFF	; 255
    1a60:	fe 01       	movw	r30, r28
    1a62:	ef 51       	subi	r30, 0x1F	; 31
    1a64:	ff 4f       	sbci	r31, 0xFF	; 255
    1a66:	80 81       	ld	r24, Z
    1a68:	8f 5f       	subi	r24, 0xFF	; 255
    1a6a:	8c 93       	st	X, r24
    1a6c:	9e 01       	movw	r18, r28
    1a6e:	2e 5f       	subi	r18, 0xFE	; 254
    1a70:	3e 4f       	sbci	r19, 0xFE	; 254
    1a72:	80 e0       	ldi	r24, 0x00	; 0
    1a74:	b9 01       	movw	r22, r18
    1a76:	49 2f       	mov	r20, r25
    1a78:	21 e0       	ldi	r18, 0x01	; 1
    1a7a:	0e 94 11 08 	call	0x1022	; 0x1022 <CLCD_u8SpecialCharacter>
    1a7e:	fe 01       	movw	r30, r28
    1a80:	ef 53       	subi	r30, 0x3F	; 63
    1a82:	ff 4f       	sbci	r31, 0xFF	; 255
    1a84:	80 e0       	ldi	r24, 0x00	; 0
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	a0 e2       	ldi	r26, 0x20	; 32
    1a8a:	b2 e4       	ldi	r27, 0x42	; 66
    1a8c:	80 83       	st	Z, r24
    1a8e:	91 83       	std	Z+1, r25	; 0x01
    1a90:	a2 83       	std	Z+2, r26	; 0x02
    1a92:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a94:	8e 01       	movw	r16, r28
    1a96:	03 54       	subi	r16, 0x43	; 67
    1a98:	1f 4f       	sbci	r17, 0xFF	; 255
    1a9a:	fe 01       	movw	r30, r28
    1a9c:	ef 53       	subi	r30, 0x3F	; 63
    1a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa0:	60 81       	ld	r22, Z
    1aa2:	71 81       	ldd	r23, Z+1	; 0x01
    1aa4:	82 81       	ldd	r24, Z+2	; 0x02
    1aa6:	93 81       	ldd	r25, Z+3	; 0x03
    1aa8:	20 e0       	ldi	r18, 0x00	; 0
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	4a e7       	ldi	r20, 0x7A	; 122
    1aae:	55 e4       	ldi	r21, 0x45	; 69
    1ab0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab4:	dc 01       	movw	r26, r24
    1ab6:	cb 01       	movw	r24, r22
    1ab8:	f8 01       	movw	r30, r16
    1aba:	80 83       	st	Z, r24
    1abc:	91 83       	std	Z+1, r25	; 0x01
    1abe:	a2 83       	std	Z+2, r26	; 0x02
    1ac0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ac2:	fe 01       	movw	r30, r28
    1ac4:	e3 54       	subi	r30, 0x43	; 67
    1ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac8:	60 81       	ld	r22, Z
    1aca:	71 81       	ldd	r23, Z+1	; 0x01
    1acc:	82 81       	ldd	r24, Z+2	; 0x02
    1ace:	93 81       	ldd	r25, Z+3	; 0x03
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	40 e8       	ldi	r20, 0x80	; 128
    1ad6:	5f e3       	ldi	r21, 0x3F	; 63
    1ad8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1adc:	88 23       	and	r24, r24
    1ade:	44 f4       	brge	.+16     	; 0x1af0 <CLCD_voidHamoksha+0xa22>
		__ticks = 1;
    1ae0:	fe 01       	movw	r30, r28
    1ae2:	e5 54       	subi	r30, 0x45	; 69
    1ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	91 83       	std	Z+1, r25	; 0x01
    1aec:	80 83       	st	Z, r24
    1aee:	64 c0       	rjmp	.+200    	; 0x1bb8 <CLCD_voidHamoksha+0xaea>
	else if (__tmp > 65535)
    1af0:	fe 01       	movw	r30, r28
    1af2:	e3 54       	subi	r30, 0x43	; 67
    1af4:	ff 4f       	sbci	r31, 0xFF	; 255
    1af6:	60 81       	ld	r22, Z
    1af8:	71 81       	ldd	r23, Z+1	; 0x01
    1afa:	82 81       	ldd	r24, Z+2	; 0x02
    1afc:	93 81       	ldd	r25, Z+3	; 0x03
    1afe:	20 e0       	ldi	r18, 0x00	; 0
    1b00:	3f ef       	ldi	r19, 0xFF	; 255
    1b02:	4f e7       	ldi	r20, 0x7F	; 127
    1b04:	57 e4       	ldi	r21, 0x47	; 71
    1b06:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b0a:	18 16       	cp	r1, r24
    1b0c:	0c f0       	brlt	.+2      	; 0x1b10 <CLCD_voidHamoksha+0xa42>
    1b0e:	43 c0       	rjmp	.+134    	; 0x1b96 <CLCD_voidHamoksha+0xac8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b10:	fe 01       	movw	r30, r28
    1b12:	ef 53       	subi	r30, 0x3F	; 63
    1b14:	ff 4f       	sbci	r31, 0xFF	; 255
    1b16:	60 81       	ld	r22, Z
    1b18:	71 81       	ldd	r23, Z+1	; 0x01
    1b1a:	82 81       	ldd	r24, Z+2	; 0x02
    1b1c:	93 81       	ldd	r25, Z+3	; 0x03
    1b1e:	20 e0       	ldi	r18, 0x00	; 0
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	40 e2       	ldi	r20, 0x20	; 32
    1b24:	51 e4       	ldi	r21, 0x41	; 65
    1b26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b2a:	dc 01       	movw	r26, r24
    1b2c:	cb 01       	movw	r24, r22
    1b2e:	8e 01       	movw	r16, r28
    1b30:	05 54       	subi	r16, 0x45	; 69
    1b32:	1f 4f       	sbci	r17, 0xFF	; 255
    1b34:	bc 01       	movw	r22, r24
    1b36:	cd 01       	movw	r24, r26
    1b38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b3c:	dc 01       	movw	r26, r24
    1b3e:	cb 01       	movw	r24, r22
    1b40:	f8 01       	movw	r30, r16
    1b42:	91 83       	std	Z+1, r25	; 0x01
    1b44:	80 83       	st	Z, r24
    1b46:	1f c0       	rjmp	.+62     	; 0x1b86 <CLCD_voidHamoksha+0xab8>
    1b48:	fe 01       	movw	r30, r28
    1b4a:	e7 54       	subi	r30, 0x47	; 71
    1b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4e:	80 e9       	ldi	r24, 0x90	; 144
    1b50:	91 e0       	ldi	r25, 0x01	; 1
    1b52:	91 83       	std	Z+1, r25	; 0x01
    1b54:	80 83       	st	Z, r24
    1b56:	fe 01       	movw	r30, r28
    1b58:	e7 54       	subi	r30, 0x47	; 71
    1b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5c:	80 81       	ld	r24, Z
    1b5e:	91 81       	ldd	r25, Z+1	; 0x01
    1b60:	01 97       	sbiw	r24, 0x01	; 1
    1b62:	f1 f7       	brne	.-4      	; 0x1b60 <CLCD_voidHamoksha+0xa92>
    1b64:	fe 01       	movw	r30, r28
    1b66:	e7 54       	subi	r30, 0x47	; 71
    1b68:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6a:	91 83       	std	Z+1, r25	; 0x01
    1b6c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b6e:	de 01       	movw	r26, r28
    1b70:	a5 54       	subi	r26, 0x45	; 69
    1b72:	bf 4f       	sbci	r27, 0xFF	; 255
    1b74:	fe 01       	movw	r30, r28
    1b76:	e5 54       	subi	r30, 0x45	; 69
    1b78:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7a:	80 81       	ld	r24, Z
    1b7c:	91 81       	ldd	r25, Z+1	; 0x01
    1b7e:	01 97       	sbiw	r24, 0x01	; 1
    1b80:	11 96       	adiw	r26, 0x01	; 1
    1b82:	9c 93       	st	X, r25
    1b84:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b86:	fe 01       	movw	r30, r28
    1b88:	e5 54       	subi	r30, 0x45	; 69
    1b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8c:	80 81       	ld	r24, Z
    1b8e:	91 81       	ldd	r25, Z+1	; 0x01
    1b90:	00 97       	sbiw	r24, 0x00	; 0
    1b92:	d1 f6       	brne	.-76     	; 0x1b48 <CLCD_voidHamoksha+0xa7a>
    1b94:	27 c0       	rjmp	.+78     	; 0x1be4 <CLCD_voidHamoksha+0xb16>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b96:	8e 01       	movw	r16, r28
    1b98:	05 54       	subi	r16, 0x45	; 69
    1b9a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b9c:	fe 01       	movw	r30, r28
    1b9e:	e3 54       	subi	r30, 0x43	; 67
    1ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba2:	60 81       	ld	r22, Z
    1ba4:	71 81       	ldd	r23, Z+1	; 0x01
    1ba6:	82 81       	ldd	r24, Z+2	; 0x02
    1ba8:	93 81       	ldd	r25, Z+3	; 0x03
    1baa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bae:	dc 01       	movw	r26, r24
    1bb0:	cb 01       	movw	r24, r22
    1bb2:	f8 01       	movw	r30, r16
    1bb4:	91 83       	std	Z+1, r25	; 0x01
    1bb6:	80 83       	st	Z, r24
    1bb8:	de 01       	movw	r26, r28
    1bba:	a9 54       	subi	r26, 0x49	; 73
    1bbc:	bf 4f       	sbci	r27, 0xFF	; 255
    1bbe:	fe 01       	movw	r30, r28
    1bc0:	e5 54       	subi	r30, 0x45	; 69
    1bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc4:	80 81       	ld	r24, Z
    1bc6:	91 81       	ldd	r25, Z+1	; 0x01
    1bc8:	8d 93       	st	X+, r24
    1bca:	9c 93       	st	X, r25
    1bcc:	fe 01       	movw	r30, r28
    1bce:	e9 54       	subi	r30, 0x49	; 73
    1bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd2:	80 81       	ld	r24, Z
    1bd4:	91 81       	ldd	r25, Z+1	; 0x01
    1bd6:	01 97       	sbiw	r24, 0x01	; 1
    1bd8:	f1 f7       	brne	.-4      	; 0x1bd6 <CLCD_voidHamoksha+0xb08>
    1bda:	fe 01       	movw	r30, r28
    1bdc:	e9 54       	subi	r30, 0x49	; 73
    1bde:	ff 4f       	sbci	r31, 0xFF	; 255
    1be0:	91 83       	std	Z+1, r25	; 0x01
    1be2:	80 83       	st	Z, r24
		_delay_ms(40);
		CLCD_u8SpecialCharacter(0,Local_u8HamokshaPattern5,i,1);
    1be4:	9e 01       	movw	r18, r28
    1be6:	26 5f       	subi	r18, 0xF6	; 246
    1be8:	3e 4f       	sbci	r19, 0xFE	; 254
    1bea:	fe 01       	movw	r30, r28
    1bec:	ef 51       	subi	r30, 0x1F	; 31
    1bee:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf0:	80 e0       	ldi	r24, 0x00	; 0
    1bf2:	b9 01       	movw	r22, r18
    1bf4:	40 81       	ld	r20, Z
    1bf6:	21 e0       	ldi	r18, 0x01	; 1
    1bf8:	0e 94 11 08 	call	0x1022	; 0x1022 <CLCD_u8SpecialCharacter>
    1bfc:	fe 01       	movw	r30, r28
    1bfe:	ed 54       	subi	r30, 0x4D	; 77
    1c00:	ff 4f       	sbci	r31, 0xFF	; 255
    1c02:	80 e0       	ldi	r24, 0x00	; 0
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	a0 e2       	ldi	r26, 0x20	; 32
    1c08:	b2 e4       	ldi	r27, 0x42	; 66
    1c0a:	80 83       	st	Z, r24
    1c0c:	91 83       	std	Z+1, r25	; 0x01
    1c0e:	a2 83       	std	Z+2, r26	; 0x02
    1c10:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c12:	8e 01       	movw	r16, r28
    1c14:	01 55       	subi	r16, 0x51	; 81
    1c16:	1f 4f       	sbci	r17, 0xFF	; 255
    1c18:	fe 01       	movw	r30, r28
    1c1a:	ed 54       	subi	r30, 0x4D	; 77
    1c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1e:	60 81       	ld	r22, Z
    1c20:	71 81       	ldd	r23, Z+1	; 0x01
    1c22:	82 81       	ldd	r24, Z+2	; 0x02
    1c24:	93 81       	ldd	r25, Z+3	; 0x03
    1c26:	20 e0       	ldi	r18, 0x00	; 0
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	4a e7       	ldi	r20, 0x7A	; 122
    1c2c:	55 e4       	ldi	r21, 0x45	; 69
    1c2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c32:	dc 01       	movw	r26, r24
    1c34:	cb 01       	movw	r24, r22
    1c36:	f8 01       	movw	r30, r16
    1c38:	80 83       	st	Z, r24
    1c3a:	91 83       	std	Z+1, r25	; 0x01
    1c3c:	a2 83       	std	Z+2, r26	; 0x02
    1c3e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c40:	fe 01       	movw	r30, r28
    1c42:	e1 55       	subi	r30, 0x51	; 81
    1c44:	ff 4f       	sbci	r31, 0xFF	; 255
    1c46:	60 81       	ld	r22, Z
    1c48:	71 81       	ldd	r23, Z+1	; 0x01
    1c4a:	82 81       	ldd	r24, Z+2	; 0x02
    1c4c:	93 81       	ldd	r25, Z+3	; 0x03
    1c4e:	20 e0       	ldi	r18, 0x00	; 0
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	40 e8       	ldi	r20, 0x80	; 128
    1c54:	5f e3       	ldi	r21, 0x3F	; 63
    1c56:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c5a:	88 23       	and	r24, r24
    1c5c:	44 f4       	brge	.+16     	; 0x1c6e <CLCD_voidHamoksha+0xba0>
		__ticks = 1;
    1c5e:	fe 01       	movw	r30, r28
    1c60:	e3 55       	subi	r30, 0x53	; 83
    1c62:	ff 4f       	sbci	r31, 0xFF	; 255
    1c64:	81 e0       	ldi	r24, 0x01	; 1
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	91 83       	std	Z+1, r25	; 0x01
    1c6a:	80 83       	st	Z, r24
    1c6c:	64 c0       	rjmp	.+200    	; 0x1d36 <CLCD_voidHamoksha+0xc68>
	else if (__tmp > 65535)
    1c6e:	fe 01       	movw	r30, r28
    1c70:	e1 55       	subi	r30, 0x51	; 81
    1c72:	ff 4f       	sbci	r31, 0xFF	; 255
    1c74:	60 81       	ld	r22, Z
    1c76:	71 81       	ldd	r23, Z+1	; 0x01
    1c78:	82 81       	ldd	r24, Z+2	; 0x02
    1c7a:	93 81       	ldd	r25, Z+3	; 0x03
    1c7c:	20 e0       	ldi	r18, 0x00	; 0
    1c7e:	3f ef       	ldi	r19, 0xFF	; 255
    1c80:	4f e7       	ldi	r20, 0x7F	; 127
    1c82:	57 e4       	ldi	r21, 0x47	; 71
    1c84:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c88:	18 16       	cp	r1, r24
    1c8a:	0c f0       	brlt	.+2      	; 0x1c8e <CLCD_voidHamoksha+0xbc0>
    1c8c:	43 c0       	rjmp	.+134    	; 0x1d14 <CLCD_voidHamoksha+0xc46>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c8e:	fe 01       	movw	r30, r28
    1c90:	ed 54       	subi	r30, 0x4D	; 77
    1c92:	ff 4f       	sbci	r31, 0xFF	; 255
    1c94:	60 81       	ld	r22, Z
    1c96:	71 81       	ldd	r23, Z+1	; 0x01
    1c98:	82 81       	ldd	r24, Z+2	; 0x02
    1c9a:	93 81       	ldd	r25, Z+3	; 0x03
    1c9c:	20 e0       	ldi	r18, 0x00	; 0
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	40 e2       	ldi	r20, 0x20	; 32
    1ca2:	51 e4       	ldi	r21, 0x41	; 65
    1ca4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca8:	dc 01       	movw	r26, r24
    1caa:	cb 01       	movw	r24, r22
    1cac:	8e 01       	movw	r16, r28
    1cae:	03 55       	subi	r16, 0x53	; 83
    1cb0:	1f 4f       	sbci	r17, 0xFF	; 255
    1cb2:	bc 01       	movw	r22, r24
    1cb4:	cd 01       	movw	r24, r26
    1cb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cba:	dc 01       	movw	r26, r24
    1cbc:	cb 01       	movw	r24, r22
    1cbe:	f8 01       	movw	r30, r16
    1cc0:	91 83       	std	Z+1, r25	; 0x01
    1cc2:	80 83       	st	Z, r24
    1cc4:	1f c0       	rjmp	.+62     	; 0x1d04 <CLCD_voidHamoksha+0xc36>
    1cc6:	fe 01       	movw	r30, r28
    1cc8:	e5 55       	subi	r30, 0x55	; 85
    1cca:	ff 4f       	sbci	r31, 0xFF	; 255
    1ccc:	80 e9       	ldi	r24, 0x90	; 144
    1cce:	91 e0       	ldi	r25, 0x01	; 1
    1cd0:	91 83       	std	Z+1, r25	; 0x01
    1cd2:	80 83       	st	Z, r24
    1cd4:	fe 01       	movw	r30, r28
    1cd6:	e5 55       	subi	r30, 0x55	; 85
    1cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cda:	80 81       	ld	r24, Z
    1cdc:	91 81       	ldd	r25, Z+1	; 0x01
    1cde:	01 97       	sbiw	r24, 0x01	; 1
    1ce0:	f1 f7       	brne	.-4      	; 0x1cde <CLCD_voidHamoksha+0xc10>
    1ce2:	fe 01       	movw	r30, r28
    1ce4:	e5 55       	subi	r30, 0x55	; 85
    1ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce8:	91 83       	std	Z+1, r25	; 0x01
    1cea:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cec:	de 01       	movw	r26, r28
    1cee:	a3 55       	subi	r26, 0x53	; 83
    1cf0:	bf 4f       	sbci	r27, 0xFF	; 255
    1cf2:	fe 01       	movw	r30, r28
    1cf4:	e3 55       	subi	r30, 0x53	; 83
    1cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf8:	80 81       	ld	r24, Z
    1cfa:	91 81       	ldd	r25, Z+1	; 0x01
    1cfc:	01 97       	sbiw	r24, 0x01	; 1
    1cfe:	11 96       	adiw	r26, 0x01	; 1
    1d00:	9c 93       	st	X, r25
    1d02:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d04:	fe 01       	movw	r30, r28
    1d06:	e3 55       	subi	r30, 0x53	; 83
    1d08:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0a:	80 81       	ld	r24, Z
    1d0c:	91 81       	ldd	r25, Z+1	; 0x01
    1d0e:	00 97       	sbiw	r24, 0x00	; 0
    1d10:	d1 f6       	brne	.-76     	; 0x1cc6 <CLCD_voidHamoksha+0xbf8>
    1d12:	27 c0       	rjmp	.+78     	; 0x1d62 <CLCD_voidHamoksha+0xc94>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d14:	8e 01       	movw	r16, r28
    1d16:	03 55       	subi	r16, 0x53	; 83
    1d18:	1f 4f       	sbci	r17, 0xFF	; 255
    1d1a:	fe 01       	movw	r30, r28
    1d1c:	e1 55       	subi	r30, 0x51	; 81
    1d1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d20:	60 81       	ld	r22, Z
    1d22:	71 81       	ldd	r23, Z+1	; 0x01
    1d24:	82 81       	ldd	r24, Z+2	; 0x02
    1d26:	93 81       	ldd	r25, Z+3	; 0x03
    1d28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d2c:	dc 01       	movw	r26, r24
    1d2e:	cb 01       	movw	r24, r22
    1d30:	f8 01       	movw	r30, r16
    1d32:	91 83       	std	Z+1, r25	; 0x01
    1d34:	80 83       	st	Z, r24
    1d36:	de 01       	movw	r26, r28
    1d38:	a7 55       	subi	r26, 0x57	; 87
    1d3a:	bf 4f       	sbci	r27, 0xFF	; 255
    1d3c:	fe 01       	movw	r30, r28
    1d3e:	e3 55       	subi	r30, 0x53	; 83
    1d40:	ff 4f       	sbci	r31, 0xFF	; 255
    1d42:	80 81       	ld	r24, Z
    1d44:	91 81       	ldd	r25, Z+1	; 0x01
    1d46:	8d 93       	st	X+, r24
    1d48:	9c 93       	st	X, r25
    1d4a:	fe 01       	movw	r30, r28
    1d4c:	e7 55       	subi	r30, 0x57	; 87
    1d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d50:	80 81       	ld	r24, Z
    1d52:	91 81       	ldd	r25, Z+1	; 0x01
    1d54:	01 97       	sbiw	r24, 0x01	; 1
    1d56:	f1 f7       	brne	.-4      	; 0x1d54 <CLCD_voidHamoksha+0xc86>
    1d58:	fe 01       	movw	r30, r28
    1d5a:	e7 55       	subi	r30, 0x57	; 87
    1d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5e:	91 83       	std	Z+1, r25	; 0x01
    1d60:	80 83       	st	Z, r24
		_delay_ms(40);
		        i++;
    1d62:	de 01       	movw	r26, r28
    1d64:	af 51       	subi	r26, 0x1F	; 31
    1d66:	bf 4f       	sbci	r27, 0xFF	; 255
    1d68:	fe 01       	movw	r30, r28
    1d6a:	ef 51       	subi	r30, 0x1F	; 31
    1d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6e:	80 81       	ld	r24, Z
    1d70:	8f 5f       	subi	r24, 0xFF	; 255
    1d72:	8c 93       	st	X, r24
	CLCD_voidClear();
	CLCD_VoidGoToXY(0,0);
	CLCD_u8SendString("I CAN RUN");
	_delay_ms(600);
uint8 i=0;
while(i<16)
    1d74:	fe 01       	movw	r30, r28
    1d76:	ef 51       	subi	r30, 0x1F	; 31
    1d78:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7a:	80 81       	ld	r24, Z
    1d7c:	80 31       	cpi	r24, 0x10	; 16
    1d7e:	08 f4       	brcc	.+2      	; 0x1d82 <CLCD_voidHamoksha+0xcb4>
    1d80:	66 ce       	rjmp	.-820    	; 0x1a4e <CLCD_voidHamoksha+0x980>
		CLCD_u8SpecialCharacter(0,Local_u8HamokshaPattern5,i,1);
		_delay_ms(40);
		        i++;

	}
CLCD_voidClear();
    1d82:	0e 94 5d 08 	call	0x10ba	; 0x10ba <CLCD_voidClear>
CLCD_VoidGoToXY(0,0);
    1d86:	80 e0       	ldi	r24, 0x00	; 0
    1d88:	60 e0       	ldi	r22, 0x00	; 0
    1d8a:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <CLCD_VoidGoToXY>
	CLCD_u8SendString("I CAN DANCE");
    1d8e:	8b e7       	ldi	r24, 0x7B	; 123
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	0e 94 32 07 	call	0xe64	; 0xe64 <CLCD_u8SendString>
    1d96:	fe 01       	movw	r30, r28
    1d98:	eb 55       	subi	r30, 0x5B	; 91
    1d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9c:	80 e0       	ldi	r24, 0x00	; 0
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	a6 e1       	ldi	r26, 0x16	; 22
    1da2:	b4 e4       	ldi	r27, 0x44	; 68
    1da4:	80 83       	st	Z, r24
    1da6:	91 83       	std	Z+1, r25	; 0x01
    1da8:	a2 83       	std	Z+2, r26	; 0x02
    1daa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dac:	8e 01       	movw	r16, r28
    1dae:	0f 55       	subi	r16, 0x5F	; 95
    1db0:	1f 4f       	sbci	r17, 0xFF	; 255
    1db2:	fe 01       	movw	r30, r28
    1db4:	eb 55       	subi	r30, 0x5B	; 91
    1db6:	ff 4f       	sbci	r31, 0xFF	; 255
    1db8:	60 81       	ld	r22, Z
    1dba:	71 81       	ldd	r23, Z+1	; 0x01
    1dbc:	82 81       	ldd	r24, Z+2	; 0x02
    1dbe:	93 81       	ldd	r25, Z+3	; 0x03
    1dc0:	20 e0       	ldi	r18, 0x00	; 0
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	4a e7       	ldi	r20, 0x7A	; 122
    1dc6:	55 e4       	ldi	r21, 0x45	; 69
    1dc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dcc:	dc 01       	movw	r26, r24
    1dce:	cb 01       	movw	r24, r22
    1dd0:	f8 01       	movw	r30, r16
    1dd2:	80 83       	st	Z, r24
    1dd4:	91 83       	std	Z+1, r25	; 0x01
    1dd6:	a2 83       	std	Z+2, r26	; 0x02
    1dd8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1dda:	fe 01       	movw	r30, r28
    1ddc:	ef 55       	subi	r30, 0x5F	; 95
    1dde:	ff 4f       	sbci	r31, 0xFF	; 255
    1de0:	60 81       	ld	r22, Z
    1de2:	71 81       	ldd	r23, Z+1	; 0x01
    1de4:	82 81       	ldd	r24, Z+2	; 0x02
    1de6:	93 81       	ldd	r25, Z+3	; 0x03
    1de8:	20 e0       	ldi	r18, 0x00	; 0
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	40 e8       	ldi	r20, 0x80	; 128
    1dee:	5f e3       	ldi	r21, 0x3F	; 63
    1df0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1df4:	88 23       	and	r24, r24
    1df6:	44 f4       	brge	.+16     	; 0x1e08 <CLCD_voidHamoksha+0xd3a>
		__ticks = 1;
    1df8:	fe 01       	movw	r30, r28
    1dfa:	e1 56       	subi	r30, 0x61	; 97
    1dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	91 83       	std	Z+1, r25	; 0x01
    1e04:	80 83       	st	Z, r24
    1e06:	64 c0       	rjmp	.+200    	; 0x1ed0 <CLCD_voidHamoksha+0xe02>
	else if (__tmp > 65535)
    1e08:	fe 01       	movw	r30, r28
    1e0a:	ef 55       	subi	r30, 0x5F	; 95
    1e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0e:	60 81       	ld	r22, Z
    1e10:	71 81       	ldd	r23, Z+1	; 0x01
    1e12:	82 81       	ldd	r24, Z+2	; 0x02
    1e14:	93 81       	ldd	r25, Z+3	; 0x03
    1e16:	20 e0       	ldi	r18, 0x00	; 0
    1e18:	3f ef       	ldi	r19, 0xFF	; 255
    1e1a:	4f e7       	ldi	r20, 0x7F	; 127
    1e1c:	57 e4       	ldi	r21, 0x47	; 71
    1e1e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e22:	18 16       	cp	r1, r24
    1e24:	0c f0       	brlt	.+2      	; 0x1e28 <CLCD_voidHamoksha+0xd5a>
    1e26:	43 c0       	rjmp	.+134    	; 0x1eae <CLCD_voidHamoksha+0xde0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e28:	fe 01       	movw	r30, r28
    1e2a:	eb 55       	subi	r30, 0x5B	; 91
    1e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2e:	60 81       	ld	r22, Z
    1e30:	71 81       	ldd	r23, Z+1	; 0x01
    1e32:	82 81       	ldd	r24, Z+2	; 0x02
    1e34:	93 81       	ldd	r25, Z+3	; 0x03
    1e36:	20 e0       	ldi	r18, 0x00	; 0
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	40 e2       	ldi	r20, 0x20	; 32
    1e3c:	51 e4       	ldi	r21, 0x41	; 65
    1e3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e42:	dc 01       	movw	r26, r24
    1e44:	cb 01       	movw	r24, r22
    1e46:	8e 01       	movw	r16, r28
    1e48:	01 56       	subi	r16, 0x61	; 97
    1e4a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e4c:	bc 01       	movw	r22, r24
    1e4e:	cd 01       	movw	r24, r26
    1e50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e54:	dc 01       	movw	r26, r24
    1e56:	cb 01       	movw	r24, r22
    1e58:	f8 01       	movw	r30, r16
    1e5a:	91 83       	std	Z+1, r25	; 0x01
    1e5c:	80 83       	st	Z, r24
    1e5e:	1f c0       	rjmp	.+62     	; 0x1e9e <CLCD_voidHamoksha+0xdd0>
    1e60:	fe 01       	movw	r30, r28
    1e62:	e3 56       	subi	r30, 0x63	; 99
    1e64:	ff 4f       	sbci	r31, 0xFF	; 255
    1e66:	80 e9       	ldi	r24, 0x90	; 144
    1e68:	91 e0       	ldi	r25, 0x01	; 1
    1e6a:	91 83       	std	Z+1, r25	; 0x01
    1e6c:	80 83       	st	Z, r24
    1e6e:	fe 01       	movw	r30, r28
    1e70:	e3 56       	subi	r30, 0x63	; 99
    1e72:	ff 4f       	sbci	r31, 0xFF	; 255
    1e74:	80 81       	ld	r24, Z
    1e76:	91 81       	ldd	r25, Z+1	; 0x01
    1e78:	01 97       	sbiw	r24, 0x01	; 1
    1e7a:	f1 f7       	brne	.-4      	; 0x1e78 <CLCD_voidHamoksha+0xdaa>
    1e7c:	fe 01       	movw	r30, r28
    1e7e:	e3 56       	subi	r30, 0x63	; 99
    1e80:	ff 4f       	sbci	r31, 0xFF	; 255
    1e82:	91 83       	std	Z+1, r25	; 0x01
    1e84:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e86:	de 01       	movw	r26, r28
    1e88:	a1 56       	subi	r26, 0x61	; 97
    1e8a:	bf 4f       	sbci	r27, 0xFF	; 255
    1e8c:	fe 01       	movw	r30, r28
    1e8e:	e1 56       	subi	r30, 0x61	; 97
    1e90:	ff 4f       	sbci	r31, 0xFF	; 255
    1e92:	80 81       	ld	r24, Z
    1e94:	91 81       	ldd	r25, Z+1	; 0x01
    1e96:	01 97       	sbiw	r24, 0x01	; 1
    1e98:	11 96       	adiw	r26, 0x01	; 1
    1e9a:	9c 93       	st	X, r25
    1e9c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e9e:	fe 01       	movw	r30, r28
    1ea0:	e1 56       	subi	r30, 0x61	; 97
    1ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea4:	80 81       	ld	r24, Z
    1ea6:	91 81       	ldd	r25, Z+1	; 0x01
    1ea8:	00 97       	sbiw	r24, 0x00	; 0
    1eaa:	d1 f6       	brne	.-76     	; 0x1e60 <CLCD_voidHamoksha+0xd92>
    1eac:	28 c0       	rjmp	.+80     	; 0x1efe <CLCD_voidHamoksha+0xe30>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eae:	8e 01       	movw	r16, r28
    1eb0:	01 56       	subi	r16, 0x61	; 97
    1eb2:	1f 4f       	sbci	r17, 0xFF	; 255
    1eb4:	fe 01       	movw	r30, r28
    1eb6:	ef 55       	subi	r30, 0x5F	; 95
    1eb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eba:	60 81       	ld	r22, Z
    1ebc:	71 81       	ldd	r23, Z+1	; 0x01
    1ebe:	82 81       	ldd	r24, Z+2	; 0x02
    1ec0:	93 81       	ldd	r25, Z+3	; 0x03
    1ec2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ec6:	dc 01       	movw	r26, r24
    1ec8:	cb 01       	movw	r24, r22
    1eca:	f8 01       	movw	r30, r16
    1ecc:	91 83       	std	Z+1, r25	; 0x01
    1ece:	80 83       	st	Z, r24
    1ed0:	de 01       	movw	r26, r28
    1ed2:	a5 56       	subi	r26, 0x65	; 101
    1ed4:	bf 4f       	sbci	r27, 0xFF	; 255
    1ed6:	fe 01       	movw	r30, r28
    1ed8:	e1 56       	subi	r30, 0x61	; 97
    1eda:	ff 4f       	sbci	r31, 0xFF	; 255
    1edc:	80 81       	ld	r24, Z
    1ede:	91 81       	ldd	r25, Z+1	; 0x01
    1ee0:	11 96       	adiw	r26, 0x01	; 1
    1ee2:	9c 93       	st	X, r25
    1ee4:	8e 93       	st	-X, r24
    1ee6:	fe 01       	movw	r30, r28
    1ee8:	e5 56       	subi	r30, 0x65	; 101
    1eea:	ff 4f       	sbci	r31, 0xFF	; 255
    1eec:	80 81       	ld	r24, Z
    1eee:	91 81       	ldd	r25, Z+1	; 0x01
    1ef0:	01 97       	sbiw	r24, 0x01	; 1
    1ef2:	f1 f7       	brne	.-4      	; 0x1ef0 <CLCD_voidHamoksha+0xe22>
    1ef4:	fe 01       	movw	r30, r28
    1ef6:	e5 56       	subi	r30, 0x65	; 101
    1ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    1efa:	91 83       	std	Z+1, r25	; 0x01
    1efc:	80 83       	st	Z, r24
	_delay_ms(600);
	 i=0;
    1efe:	fe 01       	movw	r30, r28
    1f00:	ef 51       	subi	r30, 0x1F	; 31
    1f02:	ff 4f       	sbci	r31, 0xFF	; 255
    1f04:	10 82       	st	Z, r1
    1f06:	3d c2       	rjmp	.+1146   	; 0x2382 <CLCD_voidHamoksha+0x12b4>
	while(i<10)
	{
		CLCD_u8SpecialCharacter(0,Local_u8HamokshaPattern1,7,1);
    1f08:	9e 01       	movw	r18, r28
    1f0a:	26 51       	subi	r18, 0x16	; 22
    1f0c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f0e:	80 e0       	ldi	r24, 0x00	; 0
    1f10:	b9 01       	movw	r22, r18
    1f12:	47 e0       	ldi	r20, 0x07	; 7
    1f14:	21 e0       	ldi	r18, 0x01	; 1
    1f16:	0e 94 11 08 	call	0x1022	; 0x1022 <CLCD_u8SpecialCharacter>
    1f1a:	fe 01       	movw	r30, r28
    1f1c:	e9 56       	subi	r30, 0x69	; 105
    1f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f20:	80 e0       	ldi	r24, 0x00	; 0
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	a0 e2       	ldi	r26, 0x20	; 32
    1f26:	b2 e4       	ldi	r27, 0x42	; 66
    1f28:	80 83       	st	Z, r24
    1f2a:	91 83       	std	Z+1, r25	; 0x01
    1f2c:	a2 83       	std	Z+2, r26	; 0x02
    1f2e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f30:	8e 01       	movw	r16, r28
    1f32:	0d 56       	subi	r16, 0x6D	; 109
    1f34:	1f 4f       	sbci	r17, 0xFF	; 255
    1f36:	fe 01       	movw	r30, r28
    1f38:	e9 56       	subi	r30, 0x69	; 105
    1f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3c:	60 81       	ld	r22, Z
    1f3e:	71 81       	ldd	r23, Z+1	; 0x01
    1f40:	82 81       	ldd	r24, Z+2	; 0x02
    1f42:	93 81       	ldd	r25, Z+3	; 0x03
    1f44:	20 e0       	ldi	r18, 0x00	; 0
    1f46:	30 e0       	ldi	r19, 0x00	; 0
    1f48:	4a e7       	ldi	r20, 0x7A	; 122
    1f4a:	55 e4       	ldi	r21, 0x45	; 69
    1f4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f50:	dc 01       	movw	r26, r24
    1f52:	cb 01       	movw	r24, r22
    1f54:	f8 01       	movw	r30, r16
    1f56:	80 83       	st	Z, r24
    1f58:	91 83       	std	Z+1, r25	; 0x01
    1f5a:	a2 83       	std	Z+2, r26	; 0x02
    1f5c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f5e:	fe 01       	movw	r30, r28
    1f60:	ed 56       	subi	r30, 0x6D	; 109
    1f62:	ff 4f       	sbci	r31, 0xFF	; 255
    1f64:	60 81       	ld	r22, Z
    1f66:	71 81       	ldd	r23, Z+1	; 0x01
    1f68:	82 81       	ldd	r24, Z+2	; 0x02
    1f6a:	93 81       	ldd	r25, Z+3	; 0x03
    1f6c:	20 e0       	ldi	r18, 0x00	; 0
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	40 e8       	ldi	r20, 0x80	; 128
    1f72:	5f e3       	ldi	r21, 0x3F	; 63
    1f74:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f78:	88 23       	and	r24, r24
    1f7a:	44 f4       	brge	.+16     	; 0x1f8c <CLCD_voidHamoksha+0xebe>
		__ticks = 1;
    1f7c:	fe 01       	movw	r30, r28
    1f7e:	ef 56       	subi	r30, 0x6F	; 111
    1f80:	ff 4f       	sbci	r31, 0xFF	; 255
    1f82:	81 e0       	ldi	r24, 0x01	; 1
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	91 83       	std	Z+1, r25	; 0x01
    1f88:	80 83       	st	Z, r24
    1f8a:	64 c0       	rjmp	.+200    	; 0x2054 <CLCD_voidHamoksha+0xf86>
	else if (__tmp > 65535)
    1f8c:	fe 01       	movw	r30, r28
    1f8e:	ed 56       	subi	r30, 0x6D	; 109
    1f90:	ff 4f       	sbci	r31, 0xFF	; 255
    1f92:	60 81       	ld	r22, Z
    1f94:	71 81       	ldd	r23, Z+1	; 0x01
    1f96:	82 81       	ldd	r24, Z+2	; 0x02
    1f98:	93 81       	ldd	r25, Z+3	; 0x03
    1f9a:	20 e0       	ldi	r18, 0x00	; 0
    1f9c:	3f ef       	ldi	r19, 0xFF	; 255
    1f9e:	4f e7       	ldi	r20, 0x7F	; 127
    1fa0:	57 e4       	ldi	r21, 0x47	; 71
    1fa2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fa6:	18 16       	cp	r1, r24
    1fa8:	0c f0       	brlt	.+2      	; 0x1fac <CLCD_voidHamoksha+0xede>
    1faa:	43 c0       	rjmp	.+134    	; 0x2032 <CLCD_voidHamoksha+0xf64>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fac:	fe 01       	movw	r30, r28
    1fae:	e9 56       	subi	r30, 0x69	; 105
    1fb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb2:	60 81       	ld	r22, Z
    1fb4:	71 81       	ldd	r23, Z+1	; 0x01
    1fb6:	82 81       	ldd	r24, Z+2	; 0x02
    1fb8:	93 81       	ldd	r25, Z+3	; 0x03
    1fba:	20 e0       	ldi	r18, 0x00	; 0
    1fbc:	30 e0       	ldi	r19, 0x00	; 0
    1fbe:	40 e2       	ldi	r20, 0x20	; 32
    1fc0:	51 e4       	ldi	r21, 0x41	; 65
    1fc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc6:	dc 01       	movw	r26, r24
    1fc8:	cb 01       	movw	r24, r22
    1fca:	8e 01       	movw	r16, r28
    1fcc:	0f 56       	subi	r16, 0x6F	; 111
    1fce:	1f 4f       	sbci	r17, 0xFF	; 255
    1fd0:	bc 01       	movw	r22, r24
    1fd2:	cd 01       	movw	r24, r26
    1fd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd8:	dc 01       	movw	r26, r24
    1fda:	cb 01       	movw	r24, r22
    1fdc:	f8 01       	movw	r30, r16
    1fde:	91 83       	std	Z+1, r25	; 0x01
    1fe0:	80 83       	st	Z, r24
    1fe2:	1f c0       	rjmp	.+62     	; 0x2022 <CLCD_voidHamoksha+0xf54>
    1fe4:	fe 01       	movw	r30, r28
    1fe6:	e1 57       	subi	r30, 0x71	; 113
    1fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fea:	80 e9       	ldi	r24, 0x90	; 144
    1fec:	91 e0       	ldi	r25, 0x01	; 1
    1fee:	91 83       	std	Z+1, r25	; 0x01
    1ff0:	80 83       	st	Z, r24
    1ff2:	fe 01       	movw	r30, r28
    1ff4:	e1 57       	subi	r30, 0x71	; 113
    1ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff8:	80 81       	ld	r24, Z
    1ffa:	91 81       	ldd	r25, Z+1	; 0x01
    1ffc:	01 97       	sbiw	r24, 0x01	; 1
    1ffe:	f1 f7       	brne	.-4      	; 0x1ffc <CLCD_voidHamoksha+0xf2e>
    2000:	fe 01       	movw	r30, r28
    2002:	e1 57       	subi	r30, 0x71	; 113
    2004:	ff 4f       	sbci	r31, 0xFF	; 255
    2006:	91 83       	std	Z+1, r25	; 0x01
    2008:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    200a:	de 01       	movw	r26, r28
    200c:	af 56       	subi	r26, 0x6F	; 111
    200e:	bf 4f       	sbci	r27, 0xFF	; 255
    2010:	fe 01       	movw	r30, r28
    2012:	ef 56       	subi	r30, 0x6F	; 111
    2014:	ff 4f       	sbci	r31, 0xFF	; 255
    2016:	80 81       	ld	r24, Z
    2018:	91 81       	ldd	r25, Z+1	; 0x01
    201a:	01 97       	sbiw	r24, 0x01	; 1
    201c:	11 96       	adiw	r26, 0x01	; 1
    201e:	9c 93       	st	X, r25
    2020:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2022:	fe 01       	movw	r30, r28
    2024:	ef 56       	subi	r30, 0x6F	; 111
    2026:	ff 4f       	sbci	r31, 0xFF	; 255
    2028:	80 81       	ld	r24, Z
    202a:	91 81       	ldd	r25, Z+1	; 0x01
    202c:	00 97       	sbiw	r24, 0x00	; 0
    202e:	d1 f6       	brne	.-76     	; 0x1fe4 <CLCD_voidHamoksha+0xf16>
    2030:	27 c0       	rjmp	.+78     	; 0x2080 <CLCD_voidHamoksha+0xfb2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2032:	8e 01       	movw	r16, r28
    2034:	0f 56       	subi	r16, 0x6F	; 111
    2036:	1f 4f       	sbci	r17, 0xFF	; 255
    2038:	fe 01       	movw	r30, r28
    203a:	ed 56       	subi	r30, 0x6D	; 109
    203c:	ff 4f       	sbci	r31, 0xFF	; 255
    203e:	60 81       	ld	r22, Z
    2040:	71 81       	ldd	r23, Z+1	; 0x01
    2042:	82 81       	ldd	r24, Z+2	; 0x02
    2044:	93 81       	ldd	r25, Z+3	; 0x03
    2046:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    204a:	dc 01       	movw	r26, r24
    204c:	cb 01       	movw	r24, r22
    204e:	f8 01       	movw	r30, r16
    2050:	91 83       	std	Z+1, r25	; 0x01
    2052:	80 83       	st	Z, r24
    2054:	de 01       	movw	r26, r28
    2056:	a3 57       	subi	r26, 0x73	; 115
    2058:	bf 4f       	sbci	r27, 0xFF	; 255
    205a:	fe 01       	movw	r30, r28
    205c:	ef 56       	subi	r30, 0x6F	; 111
    205e:	ff 4f       	sbci	r31, 0xFF	; 255
    2060:	80 81       	ld	r24, Z
    2062:	91 81       	ldd	r25, Z+1	; 0x01
    2064:	8d 93       	st	X+, r24
    2066:	9c 93       	st	X, r25
    2068:	fe 01       	movw	r30, r28
    206a:	e3 57       	subi	r30, 0x73	; 115
    206c:	ff 4f       	sbci	r31, 0xFF	; 255
    206e:	80 81       	ld	r24, Z
    2070:	91 81       	ldd	r25, Z+1	; 0x01
    2072:	01 97       	sbiw	r24, 0x01	; 1
    2074:	f1 f7       	brne	.-4      	; 0x2072 <CLCD_voidHamoksha+0xfa4>
    2076:	fe 01       	movw	r30, r28
    2078:	e3 57       	subi	r30, 0x73	; 115
    207a:	ff 4f       	sbci	r31, 0xFF	; 255
    207c:	91 83       	std	Z+1, r25	; 0x01
    207e:	80 83       	st	Z, r24
		_delay_ms(40);
		CLCD_u8SpecialCharacter(1,Local_u8HamokshaPattern2,7,1);
    2080:	9e 01       	movw	r18, r28
    2082:	2e 50       	subi	r18, 0x0E	; 14
    2084:	3f 4f       	sbci	r19, 0xFF	; 255
    2086:	81 e0       	ldi	r24, 0x01	; 1
    2088:	b9 01       	movw	r22, r18
    208a:	47 e0       	ldi	r20, 0x07	; 7
    208c:	21 e0       	ldi	r18, 0x01	; 1
    208e:	0e 94 11 08 	call	0x1022	; 0x1022 <CLCD_u8SpecialCharacter>
    2092:	fe 01       	movw	r30, r28
    2094:	e7 57       	subi	r30, 0x77	; 119
    2096:	ff 4f       	sbci	r31, 0xFF	; 255
    2098:	80 e0       	ldi	r24, 0x00	; 0
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	a0 e2       	ldi	r26, 0x20	; 32
    209e:	b2 e4       	ldi	r27, 0x42	; 66
    20a0:	80 83       	st	Z, r24
    20a2:	91 83       	std	Z+1, r25	; 0x01
    20a4:	a2 83       	std	Z+2, r26	; 0x02
    20a6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20a8:	8e 01       	movw	r16, r28
    20aa:	0b 57       	subi	r16, 0x7B	; 123
    20ac:	1f 4f       	sbci	r17, 0xFF	; 255
    20ae:	fe 01       	movw	r30, r28
    20b0:	e7 57       	subi	r30, 0x77	; 119
    20b2:	ff 4f       	sbci	r31, 0xFF	; 255
    20b4:	60 81       	ld	r22, Z
    20b6:	71 81       	ldd	r23, Z+1	; 0x01
    20b8:	82 81       	ldd	r24, Z+2	; 0x02
    20ba:	93 81       	ldd	r25, Z+3	; 0x03
    20bc:	20 e0       	ldi	r18, 0x00	; 0
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	4a e7       	ldi	r20, 0x7A	; 122
    20c2:	55 e4       	ldi	r21, 0x45	; 69
    20c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c8:	dc 01       	movw	r26, r24
    20ca:	cb 01       	movw	r24, r22
    20cc:	f8 01       	movw	r30, r16
    20ce:	80 83       	st	Z, r24
    20d0:	91 83       	std	Z+1, r25	; 0x01
    20d2:	a2 83       	std	Z+2, r26	; 0x02
    20d4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20d6:	fe 01       	movw	r30, r28
    20d8:	eb 57       	subi	r30, 0x7B	; 123
    20da:	ff 4f       	sbci	r31, 0xFF	; 255
    20dc:	60 81       	ld	r22, Z
    20de:	71 81       	ldd	r23, Z+1	; 0x01
    20e0:	82 81       	ldd	r24, Z+2	; 0x02
    20e2:	93 81       	ldd	r25, Z+3	; 0x03
    20e4:	20 e0       	ldi	r18, 0x00	; 0
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	40 e8       	ldi	r20, 0x80	; 128
    20ea:	5f e3       	ldi	r21, 0x3F	; 63
    20ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20f0:	88 23       	and	r24, r24
    20f2:	44 f4       	brge	.+16     	; 0x2104 <CLCD_voidHamoksha+0x1036>
		__ticks = 1;
    20f4:	fe 01       	movw	r30, r28
    20f6:	ed 57       	subi	r30, 0x7D	; 125
    20f8:	ff 4f       	sbci	r31, 0xFF	; 255
    20fa:	81 e0       	ldi	r24, 0x01	; 1
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	91 83       	std	Z+1, r25	; 0x01
    2100:	80 83       	st	Z, r24
    2102:	64 c0       	rjmp	.+200    	; 0x21cc <CLCD_voidHamoksha+0x10fe>
	else if (__tmp > 65535)
    2104:	fe 01       	movw	r30, r28
    2106:	eb 57       	subi	r30, 0x7B	; 123
    2108:	ff 4f       	sbci	r31, 0xFF	; 255
    210a:	60 81       	ld	r22, Z
    210c:	71 81       	ldd	r23, Z+1	; 0x01
    210e:	82 81       	ldd	r24, Z+2	; 0x02
    2110:	93 81       	ldd	r25, Z+3	; 0x03
    2112:	20 e0       	ldi	r18, 0x00	; 0
    2114:	3f ef       	ldi	r19, 0xFF	; 255
    2116:	4f e7       	ldi	r20, 0x7F	; 127
    2118:	57 e4       	ldi	r21, 0x47	; 71
    211a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    211e:	18 16       	cp	r1, r24
    2120:	0c f0       	brlt	.+2      	; 0x2124 <CLCD_voidHamoksha+0x1056>
    2122:	43 c0       	rjmp	.+134    	; 0x21aa <CLCD_voidHamoksha+0x10dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2124:	fe 01       	movw	r30, r28
    2126:	e7 57       	subi	r30, 0x77	; 119
    2128:	ff 4f       	sbci	r31, 0xFF	; 255
    212a:	60 81       	ld	r22, Z
    212c:	71 81       	ldd	r23, Z+1	; 0x01
    212e:	82 81       	ldd	r24, Z+2	; 0x02
    2130:	93 81       	ldd	r25, Z+3	; 0x03
    2132:	20 e0       	ldi	r18, 0x00	; 0
    2134:	30 e0       	ldi	r19, 0x00	; 0
    2136:	40 e2       	ldi	r20, 0x20	; 32
    2138:	51 e4       	ldi	r21, 0x41	; 65
    213a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    213e:	dc 01       	movw	r26, r24
    2140:	cb 01       	movw	r24, r22
    2142:	8e 01       	movw	r16, r28
    2144:	0d 57       	subi	r16, 0x7D	; 125
    2146:	1f 4f       	sbci	r17, 0xFF	; 255
    2148:	bc 01       	movw	r22, r24
    214a:	cd 01       	movw	r24, r26
    214c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2150:	dc 01       	movw	r26, r24
    2152:	cb 01       	movw	r24, r22
    2154:	f8 01       	movw	r30, r16
    2156:	91 83       	std	Z+1, r25	; 0x01
    2158:	80 83       	st	Z, r24
    215a:	1f c0       	rjmp	.+62     	; 0x219a <CLCD_voidHamoksha+0x10cc>
    215c:	fe 01       	movw	r30, r28
    215e:	ef 57       	subi	r30, 0x7F	; 127
    2160:	ff 4f       	sbci	r31, 0xFF	; 255
    2162:	80 e9       	ldi	r24, 0x90	; 144
    2164:	91 e0       	ldi	r25, 0x01	; 1
    2166:	91 83       	std	Z+1, r25	; 0x01
    2168:	80 83       	st	Z, r24
    216a:	fe 01       	movw	r30, r28
    216c:	ef 57       	subi	r30, 0x7F	; 127
    216e:	ff 4f       	sbci	r31, 0xFF	; 255
    2170:	80 81       	ld	r24, Z
    2172:	91 81       	ldd	r25, Z+1	; 0x01
    2174:	01 97       	sbiw	r24, 0x01	; 1
    2176:	f1 f7       	brne	.-4      	; 0x2174 <CLCD_voidHamoksha+0x10a6>
    2178:	fe 01       	movw	r30, r28
    217a:	ef 57       	subi	r30, 0x7F	; 127
    217c:	ff 4f       	sbci	r31, 0xFF	; 255
    217e:	91 83       	std	Z+1, r25	; 0x01
    2180:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2182:	de 01       	movw	r26, r28
    2184:	ad 57       	subi	r26, 0x7D	; 125
    2186:	bf 4f       	sbci	r27, 0xFF	; 255
    2188:	fe 01       	movw	r30, r28
    218a:	ed 57       	subi	r30, 0x7D	; 125
    218c:	ff 4f       	sbci	r31, 0xFF	; 255
    218e:	80 81       	ld	r24, Z
    2190:	91 81       	ldd	r25, Z+1	; 0x01
    2192:	01 97       	sbiw	r24, 0x01	; 1
    2194:	11 96       	adiw	r26, 0x01	; 1
    2196:	9c 93       	st	X, r25
    2198:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    219a:	fe 01       	movw	r30, r28
    219c:	ed 57       	subi	r30, 0x7D	; 125
    219e:	ff 4f       	sbci	r31, 0xFF	; 255
    21a0:	80 81       	ld	r24, Z
    21a2:	91 81       	ldd	r25, Z+1	; 0x01
    21a4:	00 97       	sbiw	r24, 0x00	; 0
    21a6:	d1 f6       	brne	.-76     	; 0x215c <CLCD_voidHamoksha+0x108e>
    21a8:	27 c0       	rjmp	.+78     	; 0x21f8 <CLCD_voidHamoksha+0x112a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21aa:	8e 01       	movw	r16, r28
    21ac:	0d 57       	subi	r16, 0x7D	; 125
    21ae:	1f 4f       	sbci	r17, 0xFF	; 255
    21b0:	fe 01       	movw	r30, r28
    21b2:	eb 57       	subi	r30, 0x7B	; 123
    21b4:	ff 4f       	sbci	r31, 0xFF	; 255
    21b6:	60 81       	ld	r22, Z
    21b8:	71 81       	ldd	r23, Z+1	; 0x01
    21ba:	82 81       	ldd	r24, Z+2	; 0x02
    21bc:	93 81       	ldd	r25, Z+3	; 0x03
    21be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c2:	dc 01       	movw	r26, r24
    21c4:	cb 01       	movw	r24, r22
    21c6:	f8 01       	movw	r30, r16
    21c8:	91 83       	std	Z+1, r25	; 0x01
    21ca:	80 83       	st	Z, r24
    21cc:	de 01       	movw	r26, r28
    21ce:	a1 58       	subi	r26, 0x81	; 129
    21d0:	bf 4f       	sbci	r27, 0xFF	; 255
    21d2:	fe 01       	movw	r30, r28
    21d4:	ed 57       	subi	r30, 0x7D	; 125
    21d6:	ff 4f       	sbci	r31, 0xFF	; 255
    21d8:	80 81       	ld	r24, Z
    21da:	91 81       	ldd	r25, Z+1	; 0x01
    21dc:	8d 93       	st	X+, r24
    21de:	9c 93       	st	X, r25
    21e0:	fe 01       	movw	r30, r28
    21e2:	e1 58       	subi	r30, 0x81	; 129
    21e4:	ff 4f       	sbci	r31, 0xFF	; 255
    21e6:	80 81       	ld	r24, Z
    21e8:	91 81       	ldd	r25, Z+1	; 0x01
    21ea:	01 97       	sbiw	r24, 0x01	; 1
    21ec:	f1 f7       	brne	.-4      	; 0x21ea <CLCD_voidHamoksha+0x111c>
    21ee:	fe 01       	movw	r30, r28
    21f0:	e1 58       	subi	r30, 0x81	; 129
    21f2:	ff 4f       	sbci	r31, 0xFF	; 255
    21f4:	91 83       	std	Z+1, r25	; 0x01
    21f6:	80 83       	st	Z, r24
		_delay_ms(40);
		CLCD_u8SpecialCharacter(2,Local_u8HamokshaPattern3,7,1);
    21f8:	9e 01       	movw	r18, r28
    21fa:	26 50       	subi	r18, 0x06	; 6
    21fc:	3f 4f       	sbci	r19, 0xFF	; 255
    21fe:	82 e0       	ldi	r24, 0x02	; 2
    2200:	b9 01       	movw	r22, r18
    2202:	47 e0       	ldi	r20, 0x07	; 7
    2204:	21 e0       	ldi	r18, 0x01	; 1
    2206:	0e 94 11 08 	call	0x1022	; 0x1022 <CLCD_u8SpecialCharacter>
    220a:	fe 01       	movw	r30, r28
    220c:	e5 58       	subi	r30, 0x85	; 133
    220e:	ff 4f       	sbci	r31, 0xFF	; 255
    2210:	80 e0       	ldi	r24, 0x00	; 0
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	a0 e2       	ldi	r26, 0x20	; 32
    2216:	b2 e4       	ldi	r27, 0x42	; 66
    2218:	80 83       	st	Z, r24
    221a:	91 83       	std	Z+1, r25	; 0x01
    221c:	a2 83       	std	Z+2, r26	; 0x02
    221e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2220:	8e 01       	movw	r16, r28
    2222:	09 58       	subi	r16, 0x89	; 137
    2224:	1f 4f       	sbci	r17, 0xFF	; 255
    2226:	fe 01       	movw	r30, r28
    2228:	e5 58       	subi	r30, 0x85	; 133
    222a:	ff 4f       	sbci	r31, 0xFF	; 255
    222c:	60 81       	ld	r22, Z
    222e:	71 81       	ldd	r23, Z+1	; 0x01
    2230:	82 81       	ldd	r24, Z+2	; 0x02
    2232:	93 81       	ldd	r25, Z+3	; 0x03
    2234:	20 e0       	ldi	r18, 0x00	; 0
    2236:	30 e0       	ldi	r19, 0x00	; 0
    2238:	4a e7       	ldi	r20, 0x7A	; 122
    223a:	55 e4       	ldi	r21, 0x45	; 69
    223c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2240:	dc 01       	movw	r26, r24
    2242:	cb 01       	movw	r24, r22
    2244:	f8 01       	movw	r30, r16
    2246:	80 83       	st	Z, r24
    2248:	91 83       	std	Z+1, r25	; 0x01
    224a:	a2 83       	std	Z+2, r26	; 0x02
    224c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    224e:	fe 01       	movw	r30, r28
    2250:	e9 58       	subi	r30, 0x89	; 137
    2252:	ff 4f       	sbci	r31, 0xFF	; 255
    2254:	60 81       	ld	r22, Z
    2256:	71 81       	ldd	r23, Z+1	; 0x01
    2258:	82 81       	ldd	r24, Z+2	; 0x02
    225a:	93 81       	ldd	r25, Z+3	; 0x03
    225c:	20 e0       	ldi	r18, 0x00	; 0
    225e:	30 e0       	ldi	r19, 0x00	; 0
    2260:	40 e8       	ldi	r20, 0x80	; 128
    2262:	5f e3       	ldi	r21, 0x3F	; 63
    2264:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2268:	88 23       	and	r24, r24
    226a:	44 f4       	brge	.+16     	; 0x227c <CLCD_voidHamoksha+0x11ae>
		__ticks = 1;
    226c:	fe 01       	movw	r30, r28
    226e:	eb 58       	subi	r30, 0x8B	; 139
    2270:	ff 4f       	sbci	r31, 0xFF	; 255
    2272:	81 e0       	ldi	r24, 0x01	; 1
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	91 83       	std	Z+1, r25	; 0x01
    2278:	80 83       	st	Z, r24
    227a:	64 c0       	rjmp	.+200    	; 0x2344 <CLCD_voidHamoksha+0x1276>
	else if (__tmp > 65535)
    227c:	fe 01       	movw	r30, r28
    227e:	e9 58       	subi	r30, 0x89	; 137
    2280:	ff 4f       	sbci	r31, 0xFF	; 255
    2282:	60 81       	ld	r22, Z
    2284:	71 81       	ldd	r23, Z+1	; 0x01
    2286:	82 81       	ldd	r24, Z+2	; 0x02
    2288:	93 81       	ldd	r25, Z+3	; 0x03
    228a:	20 e0       	ldi	r18, 0x00	; 0
    228c:	3f ef       	ldi	r19, 0xFF	; 255
    228e:	4f e7       	ldi	r20, 0x7F	; 127
    2290:	57 e4       	ldi	r21, 0x47	; 71
    2292:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2296:	18 16       	cp	r1, r24
    2298:	0c f0       	brlt	.+2      	; 0x229c <CLCD_voidHamoksha+0x11ce>
    229a:	43 c0       	rjmp	.+134    	; 0x2322 <CLCD_voidHamoksha+0x1254>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    229c:	fe 01       	movw	r30, r28
    229e:	e5 58       	subi	r30, 0x85	; 133
    22a0:	ff 4f       	sbci	r31, 0xFF	; 255
    22a2:	60 81       	ld	r22, Z
    22a4:	71 81       	ldd	r23, Z+1	; 0x01
    22a6:	82 81       	ldd	r24, Z+2	; 0x02
    22a8:	93 81       	ldd	r25, Z+3	; 0x03
    22aa:	20 e0       	ldi	r18, 0x00	; 0
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	40 e2       	ldi	r20, 0x20	; 32
    22b0:	51 e4       	ldi	r21, 0x41	; 65
    22b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22b6:	dc 01       	movw	r26, r24
    22b8:	cb 01       	movw	r24, r22
    22ba:	8e 01       	movw	r16, r28
    22bc:	0b 58       	subi	r16, 0x8B	; 139
    22be:	1f 4f       	sbci	r17, 0xFF	; 255
    22c0:	bc 01       	movw	r22, r24
    22c2:	cd 01       	movw	r24, r26
    22c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c8:	dc 01       	movw	r26, r24
    22ca:	cb 01       	movw	r24, r22
    22cc:	f8 01       	movw	r30, r16
    22ce:	91 83       	std	Z+1, r25	; 0x01
    22d0:	80 83       	st	Z, r24
    22d2:	1f c0       	rjmp	.+62     	; 0x2312 <CLCD_voidHamoksha+0x1244>
    22d4:	fe 01       	movw	r30, r28
    22d6:	ed 58       	subi	r30, 0x8D	; 141
    22d8:	ff 4f       	sbci	r31, 0xFF	; 255
    22da:	80 e9       	ldi	r24, 0x90	; 144
    22dc:	91 e0       	ldi	r25, 0x01	; 1
    22de:	91 83       	std	Z+1, r25	; 0x01
    22e0:	80 83       	st	Z, r24
    22e2:	fe 01       	movw	r30, r28
    22e4:	ed 58       	subi	r30, 0x8D	; 141
    22e6:	ff 4f       	sbci	r31, 0xFF	; 255
    22e8:	80 81       	ld	r24, Z
    22ea:	91 81       	ldd	r25, Z+1	; 0x01
    22ec:	01 97       	sbiw	r24, 0x01	; 1
    22ee:	f1 f7       	brne	.-4      	; 0x22ec <CLCD_voidHamoksha+0x121e>
    22f0:	fe 01       	movw	r30, r28
    22f2:	ed 58       	subi	r30, 0x8D	; 141
    22f4:	ff 4f       	sbci	r31, 0xFF	; 255
    22f6:	91 83       	std	Z+1, r25	; 0x01
    22f8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22fa:	de 01       	movw	r26, r28
    22fc:	ab 58       	subi	r26, 0x8B	; 139
    22fe:	bf 4f       	sbci	r27, 0xFF	; 255
    2300:	fe 01       	movw	r30, r28
    2302:	eb 58       	subi	r30, 0x8B	; 139
    2304:	ff 4f       	sbci	r31, 0xFF	; 255
    2306:	80 81       	ld	r24, Z
    2308:	91 81       	ldd	r25, Z+1	; 0x01
    230a:	01 97       	sbiw	r24, 0x01	; 1
    230c:	11 96       	adiw	r26, 0x01	; 1
    230e:	9c 93       	st	X, r25
    2310:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2312:	fe 01       	movw	r30, r28
    2314:	eb 58       	subi	r30, 0x8B	; 139
    2316:	ff 4f       	sbci	r31, 0xFF	; 255
    2318:	80 81       	ld	r24, Z
    231a:	91 81       	ldd	r25, Z+1	; 0x01
    231c:	00 97       	sbiw	r24, 0x00	; 0
    231e:	d1 f6       	brne	.-76     	; 0x22d4 <CLCD_voidHamoksha+0x1206>
    2320:	27 c0       	rjmp	.+78     	; 0x2370 <CLCD_voidHamoksha+0x12a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2322:	8e 01       	movw	r16, r28
    2324:	0b 58       	subi	r16, 0x8B	; 139
    2326:	1f 4f       	sbci	r17, 0xFF	; 255
    2328:	fe 01       	movw	r30, r28
    232a:	e9 58       	subi	r30, 0x89	; 137
    232c:	ff 4f       	sbci	r31, 0xFF	; 255
    232e:	60 81       	ld	r22, Z
    2330:	71 81       	ldd	r23, Z+1	; 0x01
    2332:	82 81       	ldd	r24, Z+2	; 0x02
    2334:	93 81       	ldd	r25, Z+3	; 0x03
    2336:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    233a:	dc 01       	movw	r26, r24
    233c:	cb 01       	movw	r24, r22
    233e:	f8 01       	movw	r30, r16
    2340:	91 83       	std	Z+1, r25	; 0x01
    2342:	80 83       	st	Z, r24
    2344:	de 01       	movw	r26, r28
    2346:	af 58       	subi	r26, 0x8F	; 143
    2348:	bf 4f       	sbci	r27, 0xFF	; 255
    234a:	fe 01       	movw	r30, r28
    234c:	eb 58       	subi	r30, 0x8B	; 139
    234e:	ff 4f       	sbci	r31, 0xFF	; 255
    2350:	80 81       	ld	r24, Z
    2352:	91 81       	ldd	r25, Z+1	; 0x01
    2354:	8d 93       	st	X+, r24
    2356:	9c 93       	st	X, r25
    2358:	fe 01       	movw	r30, r28
    235a:	ef 58       	subi	r30, 0x8F	; 143
    235c:	ff 4f       	sbci	r31, 0xFF	; 255
    235e:	80 81       	ld	r24, Z
    2360:	91 81       	ldd	r25, Z+1	; 0x01
    2362:	01 97       	sbiw	r24, 0x01	; 1
    2364:	f1 f7       	brne	.-4      	; 0x2362 <CLCD_voidHamoksha+0x1294>
    2366:	fe 01       	movw	r30, r28
    2368:	ef 58       	subi	r30, 0x8F	; 143
    236a:	ff 4f       	sbci	r31, 0xFF	; 255
    236c:	91 83       	std	Z+1, r25	; 0x01
    236e:	80 83       	st	Z, r24
		_delay_ms(40);
        i++;
    2370:	de 01       	movw	r26, r28
    2372:	af 51       	subi	r26, 0x1F	; 31
    2374:	bf 4f       	sbci	r27, 0xFF	; 255
    2376:	fe 01       	movw	r30, r28
    2378:	ef 51       	subi	r30, 0x1F	; 31
    237a:	ff 4f       	sbci	r31, 0xFF	; 255
    237c:	80 81       	ld	r24, Z
    237e:	8f 5f       	subi	r24, 0xFF	; 255
    2380:	8c 93       	st	X, r24
CLCD_voidClear();
CLCD_VoidGoToXY(0,0);
	CLCD_u8SendString("I CAN DANCE");
	_delay_ms(600);
	 i=0;
	while(i<10)
    2382:	fe 01       	movw	r30, r28
    2384:	ef 51       	subi	r30, 0x1F	; 31
    2386:	ff 4f       	sbci	r31, 0xFF	; 255
    2388:	80 81       	ld	r24, Z
    238a:	8a 30       	cpi	r24, 0x0A	; 10
    238c:	08 f4       	brcc	.+2      	; 0x2390 <CLCD_voidHamoksha+0x12c2>
    238e:	bc cd       	rjmp	.-1160   	; 0x1f08 <CLCD_voidHamoksha+0xe3a>
		CLCD_u8SpecialCharacter(2,Local_u8HamokshaPattern3,7,1);
		_delay_ms(40);
        i++;

	}
	CLCD_voidClear();
    2390:	0e 94 5d 08 	call	0x10ba	; 0x10ba <CLCD_voidClear>
	CLCD_VoidGoToXY(0,0);
    2394:	80 e0       	ldi	r24, 0x00	; 0
    2396:	60 e0       	ldi	r22, 0x00	; 0
    2398:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <CLCD_VoidGoToXY>
	CLCD_u8SendString(" I play Football");
    239c:	87 e8       	ldi	r24, 0x87	; 135
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	0e 94 32 07 	call	0xe64	; 0xe64 <CLCD_u8SendString>
    23a4:	fe 01       	movw	r30, r28
    23a6:	e3 59       	subi	r30, 0x93	; 147
    23a8:	ff 4f       	sbci	r31, 0xFF	; 255
    23aa:	80 e0       	ldi	r24, 0x00	; 0
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	a6 e1       	ldi	r26, 0x16	; 22
    23b0:	b4 e4       	ldi	r27, 0x44	; 68
    23b2:	80 83       	st	Z, r24
    23b4:	91 83       	std	Z+1, r25	; 0x01
    23b6:	a2 83       	std	Z+2, r26	; 0x02
    23b8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23ba:	8e 01       	movw	r16, r28
    23bc:	07 59       	subi	r16, 0x97	; 151
    23be:	1f 4f       	sbci	r17, 0xFF	; 255
    23c0:	fe 01       	movw	r30, r28
    23c2:	e3 59       	subi	r30, 0x93	; 147
    23c4:	ff 4f       	sbci	r31, 0xFF	; 255
    23c6:	60 81       	ld	r22, Z
    23c8:	71 81       	ldd	r23, Z+1	; 0x01
    23ca:	82 81       	ldd	r24, Z+2	; 0x02
    23cc:	93 81       	ldd	r25, Z+3	; 0x03
    23ce:	20 e0       	ldi	r18, 0x00	; 0
    23d0:	30 e0       	ldi	r19, 0x00	; 0
    23d2:	4a e7       	ldi	r20, 0x7A	; 122
    23d4:	55 e4       	ldi	r21, 0x45	; 69
    23d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23da:	dc 01       	movw	r26, r24
    23dc:	cb 01       	movw	r24, r22
    23de:	f8 01       	movw	r30, r16
    23e0:	80 83       	st	Z, r24
    23e2:	91 83       	std	Z+1, r25	; 0x01
    23e4:	a2 83       	std	Z+2, r26	; 0x02
    23e6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23e8:	fe 01       	movw	r30, r28
    23ea:	e7 59       	subi	r30, 0x97	; 151
    23ec:	ff 4f       	sbci	r31, 0xFF	; 255
    23ee:	60 81       	ld	r22, Z
    23f0:	71 81       	ldd	r23, Z+1	; 0x01
    23f2:	82 81       	ldd	r24, Z+2	; 0x02
    23f4:	93 81       	ldd	r25, Z+3	; 0x03
    23f6:	20 e0       	ldi	r18, 0x00	; 0
    23f8:	30 e0       	ldi	r19, 0x00	; 0
    23fa:	40 e8       	ldi	r20, 0x80	; 128
    23fc:	5f e3       	ldi	r21, 0x3F	; 63
    23fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2402:	88 23       	and	r24, r24
    2404:	44 f4       	brge	.+16     	; 0x2416 <CLCD_voidHamoksha+0x1348>
		__ticks = 1;
    2406:	fe 01       	movw	r30, r28
    2408:	e9 59       	subi	r30, 0x99	; 153
    240a:	ff 4f       	sbci	r31, 0xFF	; 255
    240c:	81 e0       	ldi	r24, 0x01	; 1
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	91 83       	std	Z+1, r25	; 0x01
    2412:	80 83       	st	Z, r24
    2414:	64 c0       	rjmp	.+200    	; 0x24de <CLCD_voidHamoksha+0x1410>
	else if (__tmp > 65535)
    2416:	fe 01       	movw	r30, r28
    2418:	e7 59       	subi	r30, 0x97	; 151
    241a:	ff 4f       	sbci	r31, 0xFF	; 255
    241c:	60 81       	ld	r22, Z
    241e:	71 81       	ldd	r23, Z+1	; 0x01
    2420:	82 81       	ldd	r24, Z+2	; 0x02
    2422:	93 81       	ldd	r25, Z+3	; 0x03
    2424:	20 e0       	ldi	r18, 0x00	; 0
    2426:	3f ef       	ldi	r19, 0xFF	; 255
    2428:	4f e7       	ldi	r20, 0x7F	; 127
    242a:	57 e4       	ldi	r21, 0x47	; 71
    242c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2430:	18 16       	cp	r1, r24
    2432:	0c f0       	brlt	.+2      	; 0x2436 <CLCD_voidHamoksha+0x1368>
    2434:	43 c0       	rjmp	.+134    	; 0x24bc <CLCD_voidHamoksha+0x13ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2436:	fe 01       	movw	r30, r28
    2438:	e3 59       	subi	r30, 0x93	; 147
    243a:	ff 4f       	sbci	r31, 0xFF	; 255
    243c:	60 81       	ld	r22, Z
    243e:	71 81       	ldd	r23, Z+1	; 0x01
    2440:	82 81       	ldd	r24, Z+2	; 0x02
    2442:	93 81       	ldd	r25, Z+3	; 0x03
    2444:	20 e0       	ldi	r18, 0x00	; 0
    2446:	30 e0       	ldi	r19, 0x00	; 0
    2448:	40 e2       	ldi	r20, 0x20	; 32
    244a:	51 e4       	ldi	r21, 0x41	; 65
    244c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2450:	dc 01       	movw	r26, r24
    2452:	cb 01       	movw	r24, r22
    2454:	8e 01       	movw	r16, r28
    2456:	09 59       	subi	r16, 0x99	; 153
    2458:	1f 4f       	sbci	r17, 0xFF	; 255
    245a:	bc 01       	movw	r22, r24
    245c:	cd 01       	movw	r24, r26
    245e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2462:	dc 01       	movw	r26, r24
    2464:	cb 01       	movw	r24, r22
    2466:	f8 01       	movw	r30, r16
    2468:	91 83       	std	Z+1, r25	; 0x01
    246a:	80 83       	st	Z, r24
    246c:	1f c0       	rjmp	.+62     	; 0x24ac <CLCD_voidHamoksha+0x13de>
    246e:	fe 01       	movw	r30, r28
    2470:	eb 59       	subi	r30, 0x9B	; 155
    2472:	ff 4f       	sbci	r31, 0xFF	; 255
    2474:	80 e9       	ldi	r24, 0x90	; 144
    2476:	91 e0       	ldi	r25, 0x01	; 1
    2478:	91 83       	std	Z+1, r25	; 0x01
    247a:	80 83       	st	Z, r24
    247c:	fe 01       	movw	r30, r28
    247e:	eb 59       	subi	r30, 0x9B	; 155
    2480:	ff 4f       	sbci	r31, 0xFF	; 255
    2482:	80 81       	ld	r24, Z
    2484:	91 81       	ldd	r25, Z+1	; 0x01
    2486:	01 97       	sbiw	r24, 0x01	; 1
    2488:	f1 f7       	brne	.-4      	; 0x2486 <CLCD_voidHamoksha+0x13b8>
    248a:	fe 01       	movw	r30, r28
    248c:	eb 59       	subi	r30, 0x9B	; 155
    248e:	ff 4f       	sbci	r31, 0xFF	; 255
    2490:	91 83       	std	Z+1, r25	; 0x01
    2492:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2494:	de 01       	movw	r26, r28
    2496:	a9 59       	subi	r26, 0x99	; 153
    2498:	bf 4f       	sbci	r27, 0xFF	; 255
    249a:	fe 01       	movw	r30, r28
    249c:	e9 59       	subi	r30, 0x99	; 153
    249e:	ff 4f       	sbci	r31, 0xFF	; 255
    24a0:	80 81       	ld	r24, Z
    24a2:	91 81       	ldd	r25, Z+1	; 0x01
    24a4:	01 97       	sbiw	r24, 0x01	; 1
    24a6:	11 96       	adiw	r26, 0x01	; 1
    24a8:	9c 93       	st	X, r25
    24aa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ac:	fe 01       	movw	r30, r28
    24ae:	e9 59       	subi	r30, 0x99	; 153
    24b0:	ff 4f       	sbci	r31, 0xFF	; 255
    24b2:	80 81       	ld	r24, Z
    24b4:	91 81       	ldd	r25, Z+1	; 0x01
    24b6:	00 97       	sbiw	r24, 0x00	; 0
    24b8:	d1 f6       	brne	.-76     	; 0x246e <CLCD_voidHamoksha+0x13a0>
    24ba:	28 c0       	rjmp	.+80     	; 0x250c <CLCD_voidHamoksha+0x143e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24bc:	8e 01       	movw	r16, r28
    24be:	09 59       	subi	r16, 0x99	; 153
    24c0:	1f 4f       	sbci	r17, 0xFF	; 255
    24c2:	fe 01       	movw	r30, r28
    24c4:	e7 59       	subi	r30, 0x97	; 151
    24c6:	ff 4f       	sbci	r31, 0xFF	; 255
    24c8:	60 81       	ld	r22, Z
    24ca:	71 81       	ldd	r23, Z+1	; 0x01
    24cc:	82 81       	ldd	r24, Z+2	; 0x02
    24ce:	93 81       	ldd	r25, Z+3	; 0x03
    24d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d4:	dc 01       	movw	r26, r24
    24d6:	cb 01       	movw	r24, r22
    24d8:	f8 01       	movw	r30, r16
    24da:	91 83       	std	Z+1, r25	; 0x01
    24dc:	80 83       	st	Z, r24
    24de:	de 01       	movw	r26, r28
    24e0:	ad 59       	subi	r26, 0x9D	; 157
    24e2:	bf 4f       	sbci	r27, 0xFF	; 255
    24e4:	fe 01       	movw	r30, r28
    24e6:	e9 59       	subi	r30, 0x99	; 153
    24e8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ea:	80 81       	ld	r24, Z
    24ec:	91 81       	ldd	r25, Z+1	; 0x01
    24ee:	11 96       	adiw	r26, 0x01	; 1
    24f0:	9c 93       	st	X, r25
    24f2:	8e 93       	st	-X, r24
    24f4:	fe 01       	movw	r30, r28
    24f6:	ed 59       	subi	r30, 0x9D	; 157
    24f8:	ff 4f       	sbci	r31, 0xFF	; 255
    24fa:	80 81       	ld	r24, Z
    24fc:	91 81       	ldd	r25, Z+1	; 0x01
    24fe:	01 97       	sbiw	r24, 0x01	; 1
    2500:	f1 f7       	brne	.-4      	; 0x24fe <CLCD_voidHamoksha+0x1430>
    2502:	fe 01       	movw	r30, r28
    2504:	ed 59       	subi	r30, 0x9D	; 157
    2506:	ff 4f       	sbci	r31, 0xFF	; 255
    2508:	91 83       	std	Z+1, r25	; 0x01
    250a:	80 83       	st	Z, r24
	_delay_ms(600);
	i=0;
    250c:	fe 01       	movw	r30, r28
    250e:	ef 51       	subi	r30, 0x1F	; 31
    2510:	ff 4f       	sbci	r31, 0xFF	; 255
    2512:	10 82       	st	Z, r1
    2514:	93 c1       	rjmp	.+806    	; 0x283c <CLCD_voidHamoksha+0x176e>
	{
		while(i<16)
			{   CLCD_voidClear();
    2516:	0e 94 5d 08 	call	0x10ba	; 0x10ba <CLCD_voidClear>
				CLCD_u8SpecialCharacter(0,Local_u8HamokshaPattern4,i++,1);
    251a:	fe 01       	movw	r30, r28
    251c:	ef 51       	subi	r30, 0x1F	; 31
    251e:	ff 4f       	sbci	r31, 0xFF	; 255
    2520:	90 81       	ld	r25, Z
    2522:	de 01       	movw	r26, r28
    2524:	af 51       	subi	r26, 0x1F	; 31
    2526:	bf 4f       	sbci	r27, 0xFF	; 255
    2528:	fe 01       	movw	r30, r28
    252a:	ef 51       	subi	r30, 0x1F	; 31
    252c:	ff 4f       	sbci	r31, 0xFF	; 255
    252e:	80 81       	ld	r24, Z
    2530:	8f 5f       	subi	r24, 0xFF	; 255
    2532:	8c 93       	st	X, r24
    2534:	9e 01       	movw	r18, r28
    2536:	2e 5f       	subi	r18, 0xFE	; 254
    2538:	3e 4f       	sbci	r19, 0xFE	; 254
    253a:	80 e0       	ldi	r24, 0x00	; 0
    253c:	b9 01       	movw	r22, r18
    253e:	49 2f       	mov	r20, r25
    2540:	21 e0       	ldi	r18, 0x01	; 1
    2542:	0e 94 11 08 	call	0x1022	; 0x1022 <CLCD_u8SpecialCharacter>
    2546:	fe 01       	movw	r30, r28
    2548:	e1 5a       	subi	r30, 0xA1	; 161
    254a:	ff 4f       	sbci	r31, 0xFF	; 255
    254c:	80 e0       	ldi	r24, 0x00	; 0
    254e:	90 e0       	ldi	r25, 0x00	; 0
    2550:	a0 e2       	ldi	r26, 0x20	; 32
    2552:	b2 e4       	ldi	r27, 0x42	; 66
    2554:	80 83       	st	Z, r24
    2556:	91 83       	std	Z+1, r25	; 0x01
    2558:	a2 83       	std	Z+2, r26	; 0x02
    255a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    255c:	8e 01       	movw	r16, r28
    255e:	05 5a       	subi	r16, 0xA5	; 165
    2560:	1f 4f       	sbci	r17, 0xFF	; 255
    2562:	fe 01       	movw	r30, r28
    2564:	e1 5a       	subi	r30, 0xA1	; 161
    2566:	ff 4f       	sbci	r31, 0xFF	; 255
    2568:	60 81       	ld	r22, Z
    256a:	71 81       	ldd	r23, Z+1	; 0x01
    256c:	82 81       	ldd	r24, Z+2	; 0x02
    256e:	93 81       	ldd	r25, Z+3	; 0x03
    2570:	20 e0       	ldi	r18, 0x00	; 0
    2572:	30 e0       	ldi	r19, 0x00	; 0
    2574:	4a e7       	ldi	r20, 0x7A	; 122
    2576:	55 e4       	ldi	r21, 0x45	; 69
    2578:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    257c:	dc 01       	movw	r26, r24
    257e:	cb 01       	movw	r24, r22
    2580:	f8 01       	movw	r30, r16
    2582:	80 83       	st	Z, r24
    2584:	91 83       	std	Z+1, r25	; 0x01
    2586:	a2 83       	std	Z+2, r26	; 0x02
    2588:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    258a:	fe 01       	movw	r30, r28
    258c:	e5 5a       	subi	r30, 0xA5	; 165
    258e:	ff 4f       	sbci	r31, 0xFF	; 255
    2590:	60 81       	ld	r22, Z
    2592:	71 81       	ldd	r23, Z+1	; 0x01
    2594:	82 81       	ldd	r24, Z+2	; 0x02
    2596:	93 81       	ldd	r25, Z+3	; 0x03
    2598:	20 e0       	ldi	r18, 0x00	; 0
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	40 e8       	ldi	r20, 0x80	; 128
    259e:	5f e3       	ldi	r21, 0x3F	; 63
    25a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25a4:	88 23       	and	r24, r24
    25a6:	44 f4       	brge	.+16     	; 0x25b8 <CLCD_voidHamoksha+0x14ea>
		__ticks = 1;
    25a8:	fe 01       	movw	r30, r28
    25aa:	e7 5a       	subi	r30, 0xA7	; 167
    25ac:	ff 4f       	sbci	r31, 0xFF	; 255
    25ae:	81 e0       	ldi	r24, 0x01	; 1
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	91 83       	std	Z+1, r25	; 0x01
    25b4:	80 83       	st	Z, r24
    25b6:	64 c0       	rjmp	.+200    	; 0x2680 <CLCD_voidHamoksha+0x15b2>
	else if (__tmp > 65535)
    25b8:	fe 01       	movw	r30, r28
    25ba:	e5 5a       	subi	r30, 0xA5	; 165
    25bc:	ff 4f       	sbci	r31, 0xFF	; 255
    25be:	60 81       	ld	r22, Z
    25c0:	71 81       	ldd	r23, Z+1	; 0x01
    25c2:	82 81       	ldd	r24, Z+2	; 0x02
    25c4:	93 81       	ldd	r25, Z+3	; 0x03
    25c6:	20 e0       	ldi	r18, 0x00	; 0
    25c8:	3f ef       	ldi	r19, 0xFF	; 255
    25ca:	4f e7       	ldi	r20, 0x7F	; 127
    25cc:	57 e4       	ldi	r21, 0x47	; 71
    25ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25d2:	18 16       	cp	r1, r24
    25d4:	0c f0       	brlt	.+2      	; 0x25d8 <CLCD_voidHamoksha+0x150a>
    25d6:	43 c0       	rjmp	.+134    	; 0x265e <CLCD_voidHamoksha+0x1590>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25d8:	fe 01       	movw	r30, r28
    25da:	e1 5a       	subi	r30, 0xA1	; 161
    25dc:	ff 4f       	sbci	r31, 0xFF	; 255
    25de:	60 81       	ld	r22, Z
    25e0:	71 81       	ldd	r23, Z+1	; 0x01
    25e2:	82 81       	ldd	r24, Z+2	; 0x02
    25e4:	93 81       	ldd	r25, Z+3	; 0x03
    25e6:	20 e0       	ldi	r18, 0x00	; 0
    25e8:	30 e0       	ldi	r19, 0x00	; 0
    25ea:	40 e2       	ldi	r20, 0x20	; 32
    25ec:	51 e4       	ldi	r21, 0x41	; 65
    25ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25f2:	dc 01       	movw	r26, r24
    25f4:	cb 01       	movw	r24, r22
    25f6:	8e 01       	movw	r16, r28
    25f8:	07 5a       	subi	r16, 0xA7	; 167
    25fa:	1f 4f       	sbci	r17, 0xFF	; 255
    25fc:	bc 01       	movw	r22, r24
    25fe:	cd 01       	movw	r24, r26
    2600:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2604:	dc 01       	movw	r26, r24
    2606:	cb 01       	movw	r24, r22
    2608:	f8 01       	movw	r30, r16
    260a:	91 83       	std	Z+1, r25	; 0x01
    260c:	80 83       	st	Z, r24
    260e:	1f c0       	rjmp	.+62     	; 0x264e <CLCD_voidHamoksha+0x1580>
    2610:	fe 01       	movw	r30, r28
    2612:	e9 5a       	subi	r30, 0xA9	; 169
    2614:	ff 4f       	sbci	r31, 0xFF	; 255
    2616:	80 e9       	ldi	r24, 0x90	; 144
    2618:	91 e0       	ldi	r25, 0x01	; 1
    261a:	91 83       	std	Z+1, r25	; 0x01
    261c:	80 83       	st	Z, r24
    261e:	fe 01       	movw	r30, r28
    2620:	e9 5a       	subi	r30, 0xA9	; 169
    2622:	ff 4f       	sbci	r31, 0xFF	; 255
    2624:	80 81       	ld	r24, Z
    2626:	91 81       	ldd	r25, Z+1	; 0x01
    2628:	01 97       	sbiw	r24, 0x01	; 1
    262a:	f1 f7       	brne	.-4      	; 0x2628 <CLCD_voidHamoksha+0x155a>
    262c:	fe 01       	movw	r30, r28
    262e:	e9 5a       	subi	r30, 0xA9	; 169
    2630:	ff 4f       	sbci	r31, 0xFF	; 255
    2632:	91 83       	std	Z+1, r25	; 0x01
    2634:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2636:	de 01       	movw	r26, r28
    2638:	a7 5a       	subi	r26, 0xA7	; 167
    263a:	bf 4f       	sbci	r27, 0xFF	; 255
    263c:	fe 01       	movw	r30, r28
    263e:	e7 5a       	subi	r30, 0xA7	; 167
    2640:	ff 4f       	sbci	r31, 0xFF	; 255
    2642:	80 81       	ld	r24, Z
    2644:	91 81       	ldd	r25, Z+1	; 0x01
    2646:	01 97       	sbiw	r24, 0x01	; 1
    2648:	11 96       	adiw	r26, 0x01	; 1
    264a:	9c 93       	st	X, r25
    264c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    264e:	fe 01       	movw	r30, r28
    2650:	e7 5a       	subi	r30, 0xA7	; 167
    2652:	ff 4f       	sbci	r31, 0xFF	; 255
    2654:	80 81       	ld	r24, Z
    2656:	91 81       	ldd	r25, Z+1	; 0x01
    2658:	00 97       	sbiw	r24, 0x00	; 0
    265a:	d1 f6       	brne	.-76     	; 0x2610 <CLCD_voidHamoksha+0x1542>
    265c:	27 c0       	rjmp	.+78     	; 0x26ac <CLCD_voidHamoksha+0x15de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    265e:	8e 01       	movw	r16, r28
    2660:	07 5a       	subi	r16, 0xA7	; 167
    2662:	1f 4f       	sbci	r17, 0xFF	; 255
    2664:	fe 01       	movw	r30, r28
    2666:	e5 5a       	subi	r30, 0xA5	; 165
    2668:	ff 4f       	sbci	r31, 0xFF	; 255
    266a:	60 81       	ld	r22, Z
    266c:	71 81       	ldd	r23, Z+1	; 0x01
    266e:	82 81       	ldd	r24, Z+2	; 0x02
    2670:	93 81       	ldd	r25, Z+3	; 0x03
    2672:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2676:	dc 01       	movw	r26, r24
    2678:	cb 01       	movw	r24, r22
    267a:	f8 01       	movw	r30, r16
    267c:	91 83       	std	Z+1, r25	; 0x01
    267e:	80 83       	st	Z, r24
    2680:	de 01       	movw	r26, r28
    2682:	ab 5a       	subi	r26, 0xAB	; 171
    2684:	bf 4f       	sbci	r27, 0xFF	; 255
    2686:	fe 01       	movw	r30, r28
    2688:	e7 5a       	subi	r30, 0xA7	; 167
    268a:	ff 4f       	sbci	r31, 0xFF	; 255
    268c:	80 81       	ld	r24, Z
    268e:	91 81       	ldd	r25, Z+1	; 0x01
    2690:	8d 93       	st	X+, r24
    2692:	9c 93       	st	X, r25
    2694:	fe 01       	movw	r30, r28
    2696:	eb 5a       	subi	r30, 0xAB	; 171
    2698:	ff 4f       	sbci	r31, 0xFF	; 255
    269a:	80 81       	ld	r24, Z
    269c:	91 81       	ldd	r25, Z+1	; 0x01
    269e:	01 97       	sbiw	r24, 0x01	; 1
    26a0:	f1 f7       	brne	.-4      	; 0x269e <CLCD_voidHamoksha+0x15d0>
    26a2:	fe 01       	movw	r30, r28
    26a4:	eb 5a       	subi	r30, 0xAB	; 171
    26a6:	ff 4f       	sbci	r31, 0xFF	; 255
    26a8:	91 83       	std	Z+1, r25	; 0x01
    26aa:	80 83       	st	Z, r24
				_delay_ms(40);
				CLCD_u8SpecialCharacter(0,Local_u8HamokshaPattern42,i,1);
    26ac:	9e 01       	movw	r18, r28
    26ae:	2e 5e       	subi	r18, 0xEE	; 238
    26b0:	3e 4f       	sbci	r19, 0xFE	; 254
    26b2:	fe 01       	movw	r30, r28
    26b4:	ef 51       	subi	r30, 0x1F	; 31
    26b6:	ff 4f       	sbci	r31, 0xFF	; 255
    26b8:	80 e0       	ldi	r24, 0x00	; 0
    26ba:	b9 01       	movw	r22, r18
    26bc:	40 81       	ld	r20, Z
    26be:	21 e0       	ldi	r18, 0x01	; 1
    26c0:	0e 94 11 08 	call	0x1022	; 0x1022 <CLCD_u8SpecialCharacter>
    26c4:	fe 01       	movw	r30, r28
    26c6:	ef 5a       	subi	r30, 0xAF	; 175
    26c8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ca:	80 e0       	ldi	r24, 0x00	; 0
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	a0 e2       	ldi	r26, 0x20	; 32
    26d0:	b2 e4       	ldi	r27, 0x42	; 66
    26d2:	80 83       	st	Z, r24
    26d4:	91 83       	std	Z+1, r25	; 0x01
    26d6:	a2 83       	std	Z+2, r26	; 0x02
    26d8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26da:	8e 01       	movw	r16, r28
    26dc:	03 5b       	subi	r16, 0xB3	; 179
    26de:	1f 4f       	sbci	r17, 0xFF	; 255
    26e0:	fe 01       	movw	r30, r28
    26e2:	ef 5a       	subi	r30, 0xAF	; 175
    26e4:	ff 4f       	sbci	r31, 0xFF	; 255
    26e6:	60 81       	ld	r22, Z
    26e8:	71 81       	ldd	r23, Z+1	; 0x01
    26ea:	82 81       	ldd	r24, Z+2	; 0x02
    26ec:	93 81       	ldd	r25, Z+3	; 0x03
    26ee:	20 e0       	ldi	r18, 0x00	; 0
    26f0:	30 e0       	ldi	r19, 0x00	; 0
    26f2:	4a e7       	ldi	r20, 0x7A	; 122
    26f4:	55 e4       	ldi	r21, 0x45	; 69
    26f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26fa:	dc 01       	movw	r26, r24
    26fc:	cb 01       	movw	r24, r22
    26fe:	f8 01       	movw	r30, r16
    2700:	80 83       	st	Z, r24
    2702:	91 83       	std	Z+1, r25	; 0x01
    2704:	a2 83       	std	Z+2, r26	; 0x02
    2706:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2708:	fe 01       	movw	r30, r28
    270a:	e3 5b       	subi	r30, 0xB3	; 179
    270c:	ff 4f       	sbci	r31, 0xFF	; 255
    270e:	60 81       	ld	r22, Z
    2710:	71 81       	ldd	r23, Z+1	; 0x01
    2712:	82 81       	ldd	r24, Z+2	; 0x02
    2714:	93 81       	ldd	r25, Z+3	; 0x03
    2716:	20 e0       	ldi	r18, 0x00	; 0
    2718:	30 e0       	ldi	r19, 0x00	; 0
    271a:	40 e8       	ldi	r20, 0x80	; 128
    271c:	5f e3       	ldi	r21, 0x3F	; 63
    271e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2722:	88 23       	and	r24, r24
    2724:	44 f4       	brge	.+16     	; 0x2736 <CLCD_voidHamoksha+0x1668>
		__ticks = 1;
    2726:	fe 01       	movw	r30, r28
    2728:	e5 5b       	subi	r30, 0xB5	; 181
    272a:	ff 4f       	sbci	r31, 0xFF	; 255
    272c:	81 e0       	ldi	r24, 0x01	; 1
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	91 83       	std	Z+1, r25	; 0x01
    2732:	80 83       	st	Z, r24
    2734:	64 c0       	rjmp	.+200    	; 0x27fe <CLCD_voidHamoksha+0x1730>
	else if (__tmp > 65535)
    2736:	fe 01       	movw	r30, r28
    2738:	e3 5b       	subi	r30, 0xB3	; 179
    273a:	ff 4f       	sbci	r31, 0xFF	; 255
    273c:	60 81       	ld	r22, Z
    273e:	71 81       	ldd	r23, Z+1	; 0x01
    2740:	82 81       	ldd	r24, Z+2	; 0x02
    2742:	93 81       	ldd	r25, Z+3	; 0x03
    2744:	20 e0       	ldi	r18, 0x00	; 0
    2746:	3f ef       	ldi	r19, 0xFF	; 255
    2748:	4f e7       	ldi	r20, 0x7F	; 127
    274a:	57 e4       	ldi	r21, 0x47	; 71
    274c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2750:	18 16       	cp	r1, r24
    2752:	0c f0       	brlt	.+2      	; 0x2756 <CLCD_voidHamoksha+0x1688>
    2754:	43 c0       	rjmp	.+134    	; 0x27dc <CLCD_voidHamoksha+0x170e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2756:	fe 01       	movw	r30, r28
    2758:	ef 5a       	subi	r30, 0xAF	; 175
    275a:	ff 4f       	sbci	r31, 0xFF	; 255
    275c:	60 81       	ld	r22, Z
    275e:	71 81       	ldd	r23, Z+1	; 0x01
    2760:	82 81       	ldd	r24, Z+2	; 0x02
    2762:	93 81       	ldd	r25, Z+3	; 0x03
    2764:	20 e0       	ldi	r18, 0x00	; 0
    2766:	30 e0       	ldi	r19, 0x00	; 0
    2768:	40 e2       	ldi	r20, 0x20	; 32
    276a:	51 e4       	ldi	r21, 0x41	; 65
    276c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2770:	dc 01       	movw	r26, r24
    2772:	cb 01       	movw	r24, r22
    2774:	8e 01       	movw	r16, r28
    2776:	05 5b       	subi	r16, 0xB5	; 181
    2778:	1f 4f       	sbci	r17, 0xFF	; 255
    277a:	bc 01       	movw	r22, r24
    277c:	cd 01       	movw	r24, r26
    277e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2782:	dc 01       	movw	r26, r24
    2784:	cb 01       	movw	r24, r22
    2786:	f8 01       	movw	r30, r16
    2788:	91 83       	std	Z+1, r25	; 0x01
    278a:	80 83       	st	Z, r24
    278c:	1f c0       	rjmp	.+62     	; 0x27cc <CLCD_voidHamoksha+0x16fe>
    278e:	fe 01       	movw	r30, r28
    2790:	e7 5b       	subi	r30, 0xB7	; 183
    2792:	ff 4f       	sbci	r31, 0xFF	; 255
    2794:	80 e9       	ldi	r24, 0x90	; 144
    2796:	91 e0       	ldi	r25, 0x01	; 1
    2798:	91 83       	std	Z+1, r25	; 0x01
    279a:	80 83       	st	Z, r24
    279c:	fe 01       	movw	r30, r28
    279e:	e7 5b       	subi	r30, 0xB7	; 183
    27a0:	ff 4f       	sbci	r31, 0xFF	; 255
    27a2:	80 81       	ld	r24, Z
    27a4:	91 81       	ldd	r25, Z+1	; 0x01
    27a6:	01 97       	sbiw	r24, 0x01	; 1
    27a8:	f1 f7       	brne	.-4      	; 0x27a6 <CLCD_voidHamoksha+0x16d8>
    27aa:	fe 01       	movw	r30, r28
    27ac:	e7 5b       	subi	r30, 0xB7	; 183
    27ae:	ff 4f       	sbci	r31, 0xFF	; 255
    27b0:	91 83       	std	Z+1, r25	; 0x01
    27b2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27b4:	de 01       	movw	r26, r28
    27b6:	a5 5b       	subi	r26, 0xB5	; 181
    27b8:	bf 4f       	sbci	r27, 0xFF	; 255
    27ba:	fe 01       	movw	r30, r28
    27bc:	e5 5b       	subi	r30, 0xB5	; 181
    27be:	ff 4f       	sbci	r31, 0xFF	; 255
    27c0:	80 81       	ld	r24, Z
    27c2:	91 81       	ldd	r25, Z+1	; 0x01
    27c4:	01 97       	sbiw	r24, 0x01	; 1
    27c6:	11 96       	adiw	r26, 0x01	; 1
    27c8:	9c 93       	st	X, r25
    27ca:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27cc:	fe 01       	movw	r30, r28
    27ce:	e5 5b       	subi	r30, 0xB5	; 181
    27d0:	ff 4f       	sbci	r31, 0xFF	; 255
    27d2:	80 81       	ld	r24, Z
    27d4:	91 81       	ldd	r25, Z+1	; 0x01
    27d6:	00 97       	sbiw	r24, 0x00	; 0
    27d8:	d1 f6       	brne	.-76     	; 0x278e <CLCD_voidHamoksha+0x16c0>
    27da:	27 c0       	rjmp	.+78     	; 0x282a <CLCD_voidHamoksha+0x175c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27dc:	8e 01       	movw	r16, r28
    27de:	05 5b       	subi	r16, 0xB5	; 181
    27e0:	1f 4f       	sbci	r17, 0xFF	; 255
    27e2:	fe 01       	movw	r30, r28
    27e4:	e3 5b       	subi	r30, 0xB3	; 179
    27e6:	ff 4f       	sbci	r31, 0xFF	; 255
    27e8:	60 81       	ld	r22, Z
    27ea:	71 81       	ldd	r23, Z+1	; 0x01
    27ec:	82 81       	ldd	r24, Z+2	; 0x02
    27ee:	93 81       	ldd	r25, Z+3	; 0x03
    27f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f4:	dc 01       	movw	r26, r24
    27f6:	cb 01       	movw	r24, r22
    27f8:	f8 01       	movw	r30, r16
    27fa:	91 83       	std	Z+1, r25	; 0x01
    27fc:	80 83       	st	Z, r24
    27fe:	de 01       	movw	r26, r28
    2800:	a9 5b       	subi	r26, 0xB9	; 185
    2802:	bf 4f       	sbci	r27, 0xFF	; 255
    2804:	fe 01       	movw	r30, r28
    2806:	e5 5b       	subi	r30, 0xB5	; 181
    2808:	ff 4f       	sbci	r31, 0xFF	; 255
    280a:	80 81       	ld	r24, Z
    280c:	91 81       	ldd	r25, Z+1	; 0x01
    280e:	8d 93       	st	X+, r24
    2810:	9c 93       	st	X, r25
    2812:	fe 01       	movw	r30, r28
    2814:	e9 5b       	subi	r30, 0xB9	; 185
    2816:	ff 4f       	sbci	r31, 0xFF	; 255
    2818:	80 81       	ld	r24, Z
    281a:	91 81       	ldd	r25, Z+1	; 0x01
    281c:	01 97       	sbiw	r24, 0x01	; 1
    281e:	f1 f7       	brne	.-4      	; 0x281c <CLCD_voidHamoksha+0x174e>
    2820:	fe 01       	movw	r30, r28
    2822:	e9 5b       	subi	r30, 0xB9	; 185
    2824:	ff 4f       	sbci	r31, 0xFF	; 255
    2826:	91 83       	std	Z+1, r25	; 0x01
    2828:	80 83       	st	Z, r24
				_delay_ms(40);
				        i++;
    282a:	de 01       	movw	r26, r28
    282c:	af 51       	subi	r26, 0x1F	; 31
    282e:	bf 4f       	sbci	r27, 0xFF	; 255
    2830:	fe 01       	movw	r30, r28
    2832:	ef 51       	subi	r30, 0x1F	; 31
    2834:	ff 4f       	sbci	r31, 0xFF	; 255
    2836:	80 81       	ld	r24, Z
    2838:	8f 5f       	subi	r24, 0xFF	; 255
    283a:	8c 93       	st	X, r24
	CLCD_VoidGoToXY(0,0);
	CLCD_u8SendString(" I play Football");
	_delay_ms(600);
	i=0;
	{
		while(i<16)
    283c:	fe 01       	movw	r30, r28
    283e:	ef 51       	subi	r30, 0x1F	; 31
    2840:	ff 4f       	sbci	r31, 0xFF	; 255
    2842:	80 81       	ld	r24, Z
    2844:	80 31       	cpi	r24, 0x10	; 16
    2846:	08 f4       	brcc	.+2      	; 0x284a <CLCD_voidHamoksha+0x177c>
    2848:	66 ce       	rjmp	.-820    	; 0x2516 <CLCD_voidHamoksha+0x1448>

			}

	}

	CLCD_voidClear();
    284a:	0e 94 5d 08 	call	0x10ba	; 0x10ba <CLCD_voidClear>
	CLCD_VoidGoToXY(0,0);
    284e:	80 e0       	ldi	r24, 0x00	; 0
    2850:	60 e0       	ldi	r22, 0x00	; 0
    2852:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <CLCD_VoidGoToXY>
	CLCD_u8SendString(" DON'T KILL ME");
    2856:	88 e9       	ldi	r24, 0x98	; 152
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	0e 94 32 07 	call	0xe64	; 0xe64 <CLCD_u8SendString>
    285e:	fe 01       	movw	r30, r28
    2860:	ed 5b       	subi	r30, 0xBD	; 189
    2862:	ff 4f       	sbci	r31, 0xFF	; 255
    2864:	80 e0       	ldi	r24, 0x00	; 0
    2866:	90 e0       	ldi	r25, 0x00	; 0
    2868:	a6 e1       	ldi	r26, 0x16	; 22
    286a:	b4 e4       	ldi	r27, 0x44	; 68
    286c:	80 83       	st	Z, r24
    286e:	91 83       	std	Z+1, r25	; 0x01
    2870:	a2 83       	std	Z+2, r26	; 0x02
    2872:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2874:	8e 01       	movw	r16, r28
    2876:	01 5c       	subi	r16, 0xC1	; 193
    2878:	1f 4f       	sbci	r17, 0xFF	; 255
    287a:	fe 01       	movw	r30, r28
    287c:	ed 5b       	subi	r30, 0xBD	; 189
    287e:	ff 4f       	sbci	r31, 0xFF	; 255
    2880:	60 81       	ld	r22, Z
    2882:	71 81       	ldd	r23, Z+1	; 0x01
    2884:	82 81       	ldd	r24, Z+2	; 0x02
    2886:	93 81       	ldd	r25, Z+3	; 0x03
    2888:	20 e0       	ldi	r18, 0x00	; 0
    288a:	30 e0       	ldi	r19, 0x00	; 0
    288c:	4a e7       	ldi	r20, 0x7A	; 122
    288e:	55 e4       	ldi	r21, 0x45	; 69
    2890:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2894:	dc 01       	movw	r26, r24
    2896:	cb 01       	movw	r24, r22
    2898:	f8 01       	movw	r30, r16
    289a:	80 83       	st	Z, r24
    289c:	91 83       	std	Z+1, r25	; 0x01
    289e:	a2 83       	std	Z+2, r26	; 0x02
    28a0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28a2:	fe 01       	movw	r30, r28
    28a4:	ff 96       	adiw	r30, 0x3f	; 63
    28a6:	60 81       	ld	r22, Z
    28a8:	71 81       	ldd	r23, Z+1	; 0x01
    28aa:	82 81       	ldd	r24, Z+2	; 0x02
    28ac:	93 81       	ldd	r25, Z+3	; 0x03
    28ae:	20 e0       	ldi	r18, 0x00	; 0
    28b0:	30 e0       	ldi	r19, 0x00	; 0
    28b2:	40 e8       	ldi	r20, 0x80	; 128
    28b4:	5f e3       	ldi	r21, 0x3F	; 63
    28b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28ba:	88 23       	and	r24, r24
    28bc:	2c f4       	brge	.+10     	; 0x28c8 <CLCD_voidHamoksha+0x17fa>
		__ticks = 1;
    28be:	81 e0       	ldi	r24, 0x01	; 1
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	9e af       	std	Y+62, r25	; 0x3e
    28c4:	8d af       	std	Y+61, r24	; 0x3d
    28c6:	46 c0       	rjmp	.+140    	; 0x2954 <CLCD_voidHamoksha+0x1886>
	else if (__tmp > 65535)
    28c8:	fe 01       	movw	r30, r28
    28ca:	ff 96       	adiw	r30, 0x3f	; 63
    28cc:	60 81       	ld	r22, Z
    28ce:	71 81       	ldd	r23, Z+1	; 0x01
    28d0:	82 81       	ldd	r24, Z+2	; 0x02
    28d2:	93 81       	ldd	r25, Z+3	; 0x03
    28d4:	20 e0       	ldi	r18, 0x00	; 0
    28d6:	3f ef       	ldi	r19, 0xFF	; 255
    28d8:	4f e7       	ldi	r20, 0x7F	; 127
    28da:	57 e4       	ldi	r21, 0x47	; 71
    28dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28e0:	18 16       	cp	r1, r24
    28e2:	64 f5       	brge	.+88     	; 0x293c <CLCD_voidHamoksha+0x186e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28e4:	fe 01       	movw	r30, r28
    28e6:	ed 5b       	subi	r30, 0xBD	; 189
    28e8:	ff 4f       	sbci	r31, 0xFF	; 255
    28ea:	60 81       	ld	r22, Z
    28ec:	71 81       	ldd	r23, Z+1	; 0x01
    28ee:	82 81       	ldd	r24, Z+2	; 0x02
    28f0:	93 81       	ldd	r25, Z+3	; 0x03
    28f2:	20 e0       	ldi	r18, 0x00	; 0
    28f4:	30 e0       	ldi	r19, 0x00	; 0
    28f6:	40 e2       	ldi	r20, 0x20	; 32
    28f8:	51 e4       	ldi	r21, 0x41	; 65
    28fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28fe:	dc 01       	movw	r26, r24
    2900:	cb 01       	movw	r24, r22
    2902:	bc 01       	movw	r22, r24
    2904:	cd 01       	movw	r24, r26
    2906:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    290a:	dc 01       	movw	r26, r24
    290c:	cb 01       	movw	r24, r22
    290e:	9e af       	std	Y+62, r25	; 0x3e
    2910:	8d af       	std	Y+61, r24	; 0x3d
    2912:	0f c0       	rjmp	.+30     	; 0x2932 <CLCD_voidHamoksha+0x1864>
    2914:	80 e9       	ldi	r24, 0x90	; 144
    2916:	91 e0       	ldi	r25, 0x01	; 1
    2918:	9c af       	std	Y+60, r25	; 0x3c
    291a:	8b af       	std	Y+59, r24	; 0x3b
    291c:	8b ad       	ldd	r24, Y+59	; 0x3b
    291e:	9c ad       	ldd	r25, Y+60	; 0x3c
    2920:	01 97       	sbiw	r24, 0x01	; 1
    2922:	f1 f7       	brne	.-4      	; 0x2920 <CLCD_voidHamoksha+0x1852>
    2924:	9c af       	std	Y+60, r25	; 0x3c
    2926:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2928:	8d ad       	ldd	r24, Y+61	; 0x3d
    292a:	9e ad       	ldd	r25, Y+62	; 0x3e
    292c:	01 97       	sbiw	r24, 0x01	; 1
    292e:	9e af       	std	Y+62, r25	; 0x3e
    2930:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2932:	8d ad       	ldd	r24, Y+61	; 0x3d
    2934:	9e ad       	ldd	r25, Y+62	; 0x3e
    2936:	00 97       	sbiw	r24, 0x00	; 0
    2938:	69 f7       	brne	.-38     	; 0x2914 <CLCD_voidHamoksha+0x1846>
    293a:	16 c0       	rjmp	.+44     	; 0x2968 <CLCD_voidHamoksha+0x189a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    293c:	fe 01       	movw	r30, r28
    293e:	ff 96       	adiw	r30, 0x3f	; 63
    2940:	60 81       	ld	r22, Z
    2942:	71 81       	ldd	r23, Z+1	; 0x01
    2944:	82 81       	ldd	r24, Z+2	; 0x02
    2946:	93 81       	ldd	r25, Z+3	; 0x03
    2948:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    294c:	dc 01       	movw	r26, r24
    294e:	cb 01       	movw	r24, r22
    2950:	9e af       	std	Y+62, r25	; 0x3e
    2952:	8d af       	std	Y+61, r24	; 0x3d
    2954:	8d ad       	ldd	r24, Y+61	; 0x3d
    2956:	9e ad       	ldd	r25, Y+62	; 0x3e
    2958:	9a af       	std	Y+58, r25	; 0x3a
    295a:	89 af       	std	Y+57, r24	; 0x39
    295c:	89 ad       	ldd	r24, Y+57	; 0x39
    295e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2960:	01 97       	sbiw	r24, 0x01	; 1
    2962:	f1 f7       	brne	.-4      	; 0x2960 <CLCD_voidHamoksha+0x1892>
    2964:	9a af       	std	Y+58, r25	; 0x3a
    2966:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(600);
	CLCD_voidClear();
    2968:	0e 94 5d 08 	call	0x10ba	; 0x10ba <CLCD_voidClear>
		CLCD_u8SpecialCharacter(0,Local_u8HamokshaPattern1,13,1);
    296c:	9e 01       	movw	r18, r28
    296e:	26 51       	subi	r18, 0x16	; 22
    2970:	3f 4f       	sbci	r19, 0xFF	; 255
    2972:	80 e0       	ldi	r24, 0x00	; 0
    2974:	b9 01       	movw	r22, r18
    2976:	4d e0       	ldi	r20, 0x0D	; 13
    2978:	21 e0       	ldi	r18, 0x01	; 1
    297a:	0e 94 11 08 	call	0x1022	; 0x1022 <CLCD_u8SpecialCharacter>


			CLCD_u8SpecialCharacter(1,Local_u8HamokshaPattern6,0,1);
    297e:	9e 01       	movw	r18, r28
    2980:	26 5e       	subi	r18, 0xE6	; 230
    2982:	3e 4f       	sbci	r19, 0xFE	; 254
    2984:	81 e0       	ldi	r24, 0x01	; 1
    2986:	b9 01       	movw	r22, r18
    2988:	40 e0       	ldi	r20, 0x00	; 0
    298a:	21 e0       	ldi	r18, 0x01	; 1
    298c:	0e 94 11 08 	call	0x1022	; 0x1022 <CLCD_u8SpecialCharacter>
			CLCD_u8SpecialCharacter(2,Local_u8HamokshaPattern7,1,1);
    2990:	9e 01       	movw	r18, r28
    2992:	2e 5d       	subi	r18, 0xDE	; 222
    2994:	3e 4f       	sbci	r19, 0xFE	; 254
    2996:	82 e0       	ldi	r24, 0x02	; 2
    2998:	b9 01       	movw	r22, r18
    299a:	41 e0       	ldi	r20, 0x01	; 1
    299c:	21 e0       	ldi	r18, 0x01	; 1
    299e:	0e 94 11 08 	call	0x1022	; 0x1022 <CLCD_u8SpecialCharacter>
			CLCD_u8SpecialCharacter(3,Local_u8HamokshaPattern7,2,1);
    29a2:	9e 01       	movw	r18, r28
    29a4:	2e 5d       	subi	r18, 0xDE	; 222
    29a6:	3e 4f       	sbci	r19, 0xFE	; 254
    29a8:	83 e0       	ldi	r24, 0x03	; 3
    29aa:	b9 01       	movw	r22, r18
    29ac:	42 e0       	ldi	r20, 0x02	; 2
    29ae:	21 e0       	ldi	r18, 0x01	; 1
    29b0:	0e 94 11 08 	call	0x1022	; 0x1022 <CLCD_u8SpecialCharacter>

			CLCD_u8SpecialCharacter(4,Local_u8HamokshaPattern8,4,1);
    29b4:	9e 01       	movw	r18, r28
    29b6:	26 5d       	subi	r18, 0xD6	; 214
    29b8:	3e 4f       	sbci	r19, 0xFE	; 254
    29ba:	84 e0       	ldi	r24, 0x04	; 4
    29bc:	b9 01       	movw	r22, r18
    29be:	44 e0       	ldi	r20, 0x04	; 4
    29c0:	21 e0       	ldi	r18, 0x01	; 1
    29c2:	0e 94 11 08 	call	0x1022	; 0x1022 <CLCD_u8SpecialCharacter>
    29c6:	80 e0       	ldi	r24, 0x00	; 0
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	a0 ef       	ldi	r26, 0xF0	; 240
    29cc:	b1 e4       	ldi	r27, 0x41	; 65
    29ce:	8d ab       	std	Y+53, r24	; 0x35
    29d0:	9e ab       	std	Y+54, r25	; 0x36
    29d2:	af ab       	std	Y+55, r26	; 0x37
    29d4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29d6:	6d a9       	ldd	r22, Y+53	; 0x35
    29d8:	7e a9       	ldd	r23, Y+54	; 0x36
    29da:	8f a9       	ldd	r24, Y+55	; 0x37
    29dc:	98 ad       	ldd	r25, Y+56	; 0x38
    29de:	20 e0       	ldi	r18, 0x00	; 0
    29e0:	30 e0       	ldi	r19, 0x00	; 0
    29e2:	4a e7       	ldi	r20, 0x7A	; 122
    29e4:	55 e4       	ldi	r21, 0x45	; 69
    29e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ea:	dc 01       	movw	r26, r24
    29ec:	cb 01       	movw	r24, r22
    29ee:	89 ab       	std	Y+49, r24	; 0x31
    29f0:	9a ab       	std	Y+50, r25	; 0x32
    29f2:	ab ab       	std	Y+51, r26	; 0x33
    29f4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    29f6:	69 a9       	ldd	r22, Y+49	; 0x31
    29f8:	7a a9       	ldd	r23, Y+50	; 0x32
    29fa:	8b a9       	ldd	r24, Y+51	; 0x33
    29fc:	9c a9       	ldd	r25, Y+52	; 0x34
    29fe:	20 e0       	ldi	r18, 0x00	; 0
    2a00:	30 e0       	ldi	r19, 0x00	; 0
    2a02:	40 e8       	ldi	r20, 0x80	; 128
    2a04:	5f e3       	ldi	r21, 0x3F	; 63
    2a06:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a0a:	88 23       	and	r24, r24
    2a0c:	2c f4       	brge	.+10     	; 0x2a18 <CLCD_voidHamoksha+0x194a>
		__ticks = 1;
    2a0e:	81 e0       	ldi	r24, 0x01	; 1
    2a10:	90 e0       	ldi	r25, 0x00	; 0
    2a12:	98 ab       	std	Y+48, r25	; 0x30
    2a14:	8f a7       	std	Y+47, r24	; 0x2f
    2a16:	3f c0       	rjmp	.+126    	; 0x2a96 <CLCD_voidHamoksha+0x19c8>
	else if (__tmp > 65535)
    2a18:	69 a9       	ldd	r22, Y+49	; 0x31
    2a1a:	7a a9       	ldd	r23, Y+50	; 0x32
    2a1c:	8b a9       	ldd	r24, Y+51	; 0x33
    2a1e:	9c a9       	ldd	r25, Y+52	; 0x34
    2a20:	20 e0       	ldi	r18, 0x00	; 0
    2a22:	3f ef       	ldi	r19, 0xFF	; 255
    2a24:	4f e7       	ldi	r20, 0x7F	; 127
    2a26:	57 e4       	ldi	r21, 0x47	; 71
    2a28:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a2c:	18 16       	cp	r1, r24
    2a2e:	4c f5       	brge	.+82     	; 0x2a82 <CLCD_voidHamoksha+0x19b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a30:	6d a9       	ldd	r22, Y+53	; 0x35
    2a32:	7e a9       	ldd	r23, Y+54	; 0x36
    2a34:	8f a9       	ldd	r24, Y+55	; 0x37
    2a36:	98 ad       	ldd	r25, Y+56	; 0x38
    2a38:	20 e0       	ldi	r18, 0x00	; 0
    2a3a:	30 e0       	ldi	r19, 0x00	; 0
    2a3c:	40 e2       	ldi	r20, 0x20	; 32
    2a3e:	51 e4       	ldi	r21, 0x41	; 65
    2a40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a44:	dc 01       	movw	r26, r24
    2a46:	cb 01       	movw	r24, r22
    2a48:	bc 01       	movw	r22, r24
    2a4a:	cd 01       	movw	r24, r26
    2a4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a50:	dc 01       	movw	r26, r24
    2a52:	cb 01       	movw	r24, r22
    2a54:	98 ab       	std	Y+48, r25	; 0x30
    2a56:	8f a7       	std	Y+47, r24	; 0x2f
    2a58:	0f c0       	rjmp	.+30     	; 0x2a78 <CLCD_voidHamoksha+0x19aa>
    2a5a:	80 e9       	ldi	r24, 0x90	; 144
    2a5c:	91 e0       	ldi	r25, 0x01	; 1
    2a5e:	9e a7       	std	Y+46, r25	; 0x2e
    2a60:	8d a7       	std	Y+45, r24	; 0x2d
    2a62:	8d a5       	ldd	r24, Y+45	; 0x2d
    2a64:	9e a5       	ldd	r25, Y+46	; 0x2e
    2a66:	01 97       	sbiw	r24, 0x01	; 1
    2a68:	f1 f7       	brne	.-4      	; 0x2a66 <CLCD_voidHamoksha+0x1998>
    2a6a:	9e a7       	std	Y+46, r25	; 0x2e
    2a6c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a6e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a70:	98 a9       	ldd	r25, Y+48	; 0x30
    2a72:	01 97       	sbiw	r24, 0x01	; 1
    2a74:	98 ab       	std	Y+48, r25	; 0x30
    2a76:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a78:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a7a:	98 a9       	ldd	r25, Y+48	; 0x30
    2a7c:	00 97       	sbiw	r24, 0x00	; 0
    2a7e:	69 f7       	brne	.-38     	; 0x2a5a <CLCD_voidHamoksha+0x198c>
    2a80:	14 c0       	rjmp	.+40     	; 0x2aaa <CLCD_voidHamoksha+0x19dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a82:	69 a9       	ldd	r22, Y+49	; 0x31
    2a84:	7a a9       	ldd	r23, Y+50	; 0x32
    2a86:	8b a9       	ldd	r24, Y+51	; 0x33
    2a88:	9c a9       	ldd	r25, Y+52	; 0x34
    2a8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a8e:	dc 01       	movw	r26, r24
    2a90:	cb 01       	movw	r24, r22
    2a92:	98 ab       	std	Y+48, r25	; 0x30
    2a94:	8f a7       	std	Y+47, r24	; 0x2f
    2a96:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a98:	98 a9       	ldd	r25, Y+48	; 0x30
    2a9a:	9c a7       	std	Y+44, r25	; 0x2c
    2a9c:	8b a7       	std	Y+43, r24	; 0x2b
    2a9e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2aa0:	9c a5       	ldd	r25, Y+44	; 0x2c
    2aa2:	01 97       	sbiw	r24, 0x01	; 1
    2aa4:	f1 f7       	brne	.-4      	; 0x2aa2 <CLCD_voidHamoksha+0x19d4>
    2aa6:	9c a7       	std	Y+44, r25	; 0x2c
    2aa8:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(30);
			CLCD_u8SpecialCharacter(5,Local_u8HamokshaPattern8,7,1);
    2aaa:	9e 01       	movw	r18, r28
    2aac:	26 5d       	subi	r18, 0xD6	; 214
    2aae:	3e 4f       	sbci	r19, 0xFE	; 254
    2ab0:	85 e0       	ldi	r24, 0x05	; 5
    2ab2:	b9 01       	movw	r22, r18
    2ab4:	47 e0       	ldi	r20, 0x07	; 7
    2ab6:	21 e0       	ldi	r18, 0x01	; 1
    2ab8:	0e 94 11 08 	call	0x1022	; 0x1022 <CLCD_u8SpecialCharacter>
    2abc:	80 e0       	ldi	r24, 0x00	; 0
    2abe:	90 e0       	ldi	r25, 0x00	; 0
    2ac0:	a0 ef       	ldi	r26, 0xF0	; 240
    2ac2:	b1 e4       	ldi	r27, 0x41	; 65
    2ac4:	8f a3       	std	Y+39, r24	; 0x27
    2ac6:	98 a7       	std	Y+40, r25	; 0x28
    2ac8:	a9 a7       	std	Y+41, r26	; 0x29
    2aca:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2acc:	6f a1       	ldd	r22, Y+39	; 0x27
    2ace:	78 a5       	ldd	r23, Y+40	; 0x28
    2ad0:	89 a5       	ldd	r24, Y+41	; 0x29
    2ad2:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ad4:	20 e0       	ldi	r18, 0x00	; 0
    2ad6:	30 e0       	ldi	r19, 0x00	; 0
    2ad8:	4a e7       	ldi	r20, 0x7A	; 122
    2ada:	55 e4       	ldi	r21, 0x45	; 69
    2adc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ae0:	dc 01       	movw	r26, r24
    2ae2:	cb 01       	movw	r24, r22
    2ae4:	8b a3       	std	Y+35, r24	; 0x23
    2ae6:	9c a3       	std	Y+36, r25	; 0x24
    2ae8:	ad a3       	std	Y+37, r26	; 0x25
    2aea:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2aec:	6b a1       	ldd	r22, Y+35	; 0x23
    2aee:	7c a1       	ldd	r23, Y+36	; 0x24
    2af0:	8d a1       	ldd	r24, Y+37	; 0x25
    2af2:	9e a1       	ldd	r25, Y+38	; 0x26
    2af4:	20 e0       	ldi	r18, 0x00	; 0
    2af6:	30 e0       	ldi	r19, 0x00	; 0
    2af8:	40 e8       	ldi	r20, 0x80	; 128
    2afa:	5f e3       	ldi	r21, 0x3F	; 63
    2afc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b00:	88 23       	and	r24, r24
    2b02:	2c f4       	brge	.+10     	; 0x2b0e <CLCD_voidHamoksha+0x1a40>
		__ticks = 1;
    2b04:	81 e0       	ldi	r24, 0x01	; 1
    2b06:	90 e0       	ldi	r25, 0x00	; 0
    2b08:	9a a3       	std	Y+34, r25	; 0x22
    2b0a:	89 a3       	std	Y+33, r24	; 0x21
    2b0c:	3f c0       	rjmp	.+126    	; 0x2b8c <CLCD_voidHamoksha+0x1abe>
	else if (__tmp > 65535)
    2b0e:	6b a1       	ldd	r22, Y+35	; 0x23
    2b10:	7c a1       	ldd	r23, Y+36	; 0x24
    2b12:	8d a1       	ldd	r24, Y+37	; 0x25
    2b14:	9e a1       	ldd	r25, Y+38	; 0x26
    2b16:	20 e0       	ldi	r18, 0x00	; 0
    2b18:	3f ef       	ldi	r19, 0xFF	; 255
    2b1a:	4f e7       	ldi	r20, 0x7F	; 127
    2b1c:	57 e4       	ldi	r21, 0x47	; 71
    2b1e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b22:	18 16       	cp	r1, r24
    2b24:	4c f5       	brge	.+82     	; 0x2b78 <CLCD_voidHamoksha+0x1aaa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b26:	6f a1       	ldd	r22, Y+39	; 0x27
    2b28:	78 a5       	ldd	r23, Y+40	; 0x28
    2b2a:	89 a5       	ldd	r24, Y+41	; 0x29
    2b2c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b2e:	20 e0       	ldi	r18, 0x00	; 0
    2b30:	30 e0       	ldi	r19, 0x00	; 0
    2b32:	40 e2       	ldi	r20, 0x20	; 32
    2b34:	51 e4       	ldi	r21, 0x41	; 65
    2b36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b3a:	dc 01       	movw	r26, r24
    2b3c:	cb 01       	movw	r24, r22
    2b3e:	bc 01       	movw	r22, r24
    2b40:	cd 01       	movw	r24, r26
    2b42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b46:	dc 01       	movw	r26, r24
    2b48:	cb 01       	movw	r24, r22
    2b4a:	9a a3       	std	Y+34, r25	; 0x22
    2b4c:	89 a3       	std	Y+33, r24	; 0x21
    2b4e:	0f c0       	rjmp	.+30     	; 0x2b6e <CLCD_voidHamoksha+0x1aa0>
    2b50:	80 e9       	ldi	r24, 0x90	; 144
    2b52:	91 e0       	ldi	r25, 0x01	; 1
    2b54:	98 a3       	std	Y+32, r25	; 0x20
    2b56:	8f 8f       	std	Y+31, r24	; 0x1f
    2b58:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b5a:	98 a1       	ldd	r25, Y+32	; 0x20
    2b5c:	01 97       	sbiw	r24, 0x01	; 1
    2b5e:	f1 f7       	brne	.-4      	; 0x2b5c <CLCD_voidHamoksha+0x1a8e>
    2b60:	98 a3       	std	Y+32, r25	; 0x20
    2b62:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b64:	89 a1       	ldd	r24, Y+33	; 0x21
    2b66:	9a a1       	ldd	r25, Y+34	; 0x22
    2b68:	01 97       	sbiw	r24, 0x01	; 1
    2b6a:	9a a3       	std	Y+34, r25	; 0x22
    2b6c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b6e:	89 a1       	ldd	r24, Y+33	; 0x21
    2b70:	9a a1       	ldd	r25, Y+34	; 0x22
    2b72:	00 97       	sbiw	r24, 0x00	; 0
    2b74:	69 f7       	brne	.-38     	; 0x2b50 <CLCD_voidHamoksha+0x1a82>
    2b76:	14 c0       	rjmp	.+40     	; 0x2ba0 <CLCD_voidHamoksha+0x1ad2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b78:	6b a1       	ldd	r22, Y+35	; 0x23
    2b7a:	7c a1       	ldd	r23, Y+36	; 0x24
    2b7c:	8d a1       	ldd	r24, Y+37	; 0x25
    2b7e:	9e a1       	ldd	r25, Y+38	; 0x26
    2b80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b84:	dc 01       	movw	r26, r24
    2b86:	cb 01       	movw	r24, r22
    2b88:	9a a3       	std	Y+34, r25	; 0x22
    2b8a:	89 a3       	std	Y+33, r24	; 0x21
    2b8c:	89 a1       	ldd	r24, Y+33	; 0x21
    2b8e:	9a a1       	ldd	r25, Y+34	; 0x22
    2b90:	9e 8f       	std	Y+30, r25	; 0x1e
    2b92:	8d 8f       	std	Y+29, r24	; 0x1d
    2b94:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b96:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b98:	01 97       	sbiw	r24, 0x01	; 1
    2b9a:	f1 f7       	brne	.-4      	; 0x2b98 <CLCD_voidHamoksha+0x1aca>
    2b9c:	9e 8f       	std	Y+30, r25	; 0x1e
    2b9e:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(30);
			CLCD_u8SpecialCharacter(6,Local_u8HamokshaPattern8,9,1);
    2ba0:	9e 01       	movw	r18, r28
    2ba2:	26 5d       	subi	r18, 0xD6	; 214
    2ba4:	3e 4f       	sbci	r19, 0xFE	; 254
    2ba6:	86 e0       	ldi	r24, 0x06	; 6
    2ba8:	b9 01       	movw	r22, r18
    2baa:	49 e0       	ldi	r20, 0x09	; 9
    2bac:	21 e0       	ldi	r18, 0x01	; 1
    2bae:	0e 94 11 08 	call	0x1022	; 0x1022 <CLCD_u8SpecialCharacter>
    2bb2:	80 e0       	ldi	r24, 0x00	; 0
    2bb4:	90 e0       	ldi	r25, 0x00	; 0
    2bb6:	a0 ef       	ldi	r26, 0xF0	; 240
    2bb8:	b1 e4       	ldi	r27, 0x41	; 65
    2bba:	89 8f       	std	Y+25, r24	; 0x19
    2bbc:	9a 8f       	std	Y+26, r25	; 0x1a
    2bbe:	ab 8f       	std	Y+27, r26	; 0x1b
    2bc0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bc2:	69 8d       	ldd	r22, Y+25	; 0x19
    2bc4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bc6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bc8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bca:	20 e0       	ldi	r18, 0x00	; 0
    2bcc:	30 e0       	ldi	r19, 0x00	; 0
    2bce:	4a e7       	ldi	r20, 0x7A	; 122
    2bd0:	55 e4       	ldi	r21, 0x45	; 69
    2bd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bd6:	dc 01       	movw	r26, r24
    2bd8:	cb 01       	movw	r24, r22
    2bda:	8d 8b       	std	Y+21, r24	; 0x15
    2bdc:	9e 8b       	std	Y+22, r25	; 0x16
    2bde:	af 8b       	std	Y+23, r26	; 0x17
    2be0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2be2:	6d 89       	ldd	r22, Y+21	; 0x15
    2be4:	7e 89       	ldd	r23, Y+22	; 0x16
    2be6:	8f 89       	ldd	r24, Y+23	; 0x17
    2be8:	98 8d       	ldd	r25, Y+24	; 0x18
    2bea:	20 e0       	ldi	r18, 0x00	; 0
    2bec:	30 e0       	ldi	r19, 0x00	; 0
    2bee:	40 e8       	ldi	r20, 0x80	; 128
    2bf0:	5f e3       	ldi	r21, 0x3F	; 63
    2bf2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bf6:	88 23       	and	r24, r24
    2bf8:	2c f4       	brge	.+10     	; 0x2c04 <CLCD_voidHamoksha+0x1b36>
		__ticks = 1;
    2bfa:	81 e0       	ldi	r24, 0x01	; 1
    2bfc:	90 e0       	ldi	r25, 0x00	; 0
    2bfe:	9c 8b       	std	Y+20, r25	; 0x14
    2c00:	8b 8b       	std	Y+19, r24	; 0x13
    2c02:	3f c0       	rjmp	.+126    	; 0x2c82 <CLCD_voidHamoksha+0x1bb4>
	else if (__tmp > 65535)
    2c04:	6d 89       	ldd	r22, Y+21	; 0x15
    2c06:	7e 89       	ldd	r23, Y+22	; 0x16
    2c08:	8f 89       	ldd	r24, Y+23	; 0x17
    2c0a:	98 8d       	ldd	r25, Y+24	; 0x18
    2c0c:	20 e0       	ldi	r18, 0x00	; 0
    2c0e:	3f ef       	ldi	r19, 0xFF	; 255
    2c10:	4f e7       	ldi	r20, 0x7F	; 127
    2c12:	57 e4       	ldi	r21, 0x47	; 71
    2c14:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c18:	18 16       	cp	r1, r24
    2c1a:	4c f5       	brge	.+82     	; 0x2c6e <CLCD_voidHamoksha+0x1ba0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c1c:	69 8d       	ldd	r22, Y+25	; 0x19
    2c1e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c20:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c22:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c24:	20 e0       	ldi	r18, 0x00	; 0
    2c26:	30 e0       	ldi	r19, 0x00	; 0
    2c28:	40 e2       	ldi	r20, 0x20	; 32
    2c2a:	51 e4       	ldi	r21, 0x41	; 65
    2c2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c30:	dc 01       	movw	r26, r24
    2c32:	cb 01       	movw	r24, r22
    2c34:	bc 01       	movw	r22, r24
    2c36:	cd 01       	movw	r24, r26
    2c38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c3c:	dc 01       	movw	r26, r24
    2c3e:	cb 01       	movw	r24, r22
    2c40:	9c 8b       	std	Y+20, r25	; 0x14
    2c42:	8b 8b       	std	Y+19, r24	; 0x13
    2c44:	0f c0       	rjmp	.+30     	; 0x2c64 <CLCD_voidHamoksha+0x1b96>
    2c46:	80 e9       	ldi	r24, 0x90	; 144
    2c48:	91 e0       	ldi	r25, 0x01	; 1
    2c4a:	9a 8b       	std	Y+18, r25	; 0x12
    2c4c:	89 8b       	std	Y+17, r24	; 0x11
    2c4e:	89 89       	ldd	r24, Y+17	; 0x11
    2c50:	9a 89       	ldd	r25, Y+18	; 0x12
    2c52:	01 97       	sbiw	r24, 0x01	; 1
    2c54:	f1 f7       	brne	.-4      	; 0x2c52 <CLCD_voidHamoksha+0x1b84>
    2c56:	9a 8b       	std	Y+18, r25	; 0x12
    2c58:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c5a:	8b 89       	ldd	r24, Y+19	; 0x13
    2c5c:	9c 89       	ldd	r25, Y+20	; 0x14
    2c5e:	01 97       	sbiw	r24, 0x01	; 1
    2c60:	9c 8b       	std	Y+20, r25	; 0x14
    2c62:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c64:	8b 89       	ldd	r24, Y+19	; 0x13
    2c66:	9c 89       	ldd	r25, Y+20	; 0x14
    2c68:	00 97       	sbiw	r24, 0x00	; 0
    2c6a:	69 f7       	brne	.-38     	; 0x2c46 <CLCD_voidHamoksha+0x1b78>
    2c6c:	14 c0       	rjmp	.+40     	; 0x2c96 <CLCD_voidHamoksha+0x1bc8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c6e:	6d 89       	ldd	r22, Y+21	; 0x15
    2c70:	7e 89       	ldd	r23, Y+22	; 0x16
    2c72:	8f 89       	ldd	r24, Y+23	; 0x17
    2c74:	98 8d       	ldd	r25, Y+24	; 0x18
    2c76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c7a:	dc 01       	movw	r26, r24
    2c7c:	cb 01       	movw	r24, r22
    2c7e:	9c 8b       	std	Y+20, r25	; 0x14
    2c80:	8b 8b       	std	Y+19, r24	; 0x13
    2c82:	8b 89       	ldd	r24, Y+19	; 0x13
    2c84:	9c 89       	ldd	r25, Y+20	; 0x14
    2c86:	98 8b       	std	Y+16, r25	; 0x10
    2c88:	8f 87       	std	Y+15, r24	; 0x0f
    2c8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c8c:	98 89       	ldd	r25, Y+16	; 0x10
    2c8e:	01 97       	sbiw	r24, 0x01	; 1
    2c90:	f1 f7       	brne	.-4      	; 0x2c8e <CLCD_voidHamoksha+0x1bc0>
    2c92:	98 8b       	std	Y+16, r25	; 0x10
    2c94:	8f 87       	std	Y+15, r24	; 0x0f
            _delay_ms(30);

			CLCD_u8SpecialCharacter(0,Local_u8HamokshaPattern0,13,1);
    2c96:	9e 01       	movw	r18, r28
    2c98:	2e 51       	subi	r18, 0x1E	; 30
    2c9a:	3f 4f       	sbci	r19, 0xFF	; 255
    2c9c:	80 e0       	ldi	r24, 0x00	; 0
    2c9e:	b9 01       	movw	r22, r18
    2ca0:	4d e0       	ldi	r20, 0x0D	; 13
    2ca2:	21 e0       	ldi	r18, 0x01	; 1
    2ca4:	0e 94 11 08 	call	0x1022	; 0x1022 <CLCD_u8SpecialCharacter>
    2ca8:	80 e0       	ldi	r24, 0x00	; 0
    2caa:	90 e0       	ldi	r25, 0x00	; 0
    2cac:	a6 e9       	ldi	r26, 0x96	; 150
    2cae:	b3 e4       	ldi	r27, 0x43	; 67
    2cb0:	8b 87       	std	Y+11, r24	; 0x0b
    2cb2:	9c 87       	std	Y+12, r25	; 0x0c
    2cb4:	ad 87       	std	Y+13, r26	; 0x0d
    2cb6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cb8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cba:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cbc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cbe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cc0:	20 e0       	ldi	r18, 0x00	; 0
    2cc2:	30 e0       	ldi	r19, 0x00	; 0
    2cc4:	4a e7       	ldi	r20, 0x7A	; 122
    2cc6:	55 e4       	ldi	r21, 0x45	; 69
    2cc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ccc:	dc 01       	movw	r26, r24
    2cce:	cb 01       	movw	r24, r22
    2cd0:	8f 83       	std	Y+7, r24	; 0x07
    2cd2:	98 87       	std	Y+8, r25	; 0x08
    2cd4:	a9 87       	std	Y+9, r26	; 0x09
    2cd6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2cd8:	6f 81       	ldd	r22, Y+7	; 0x07
    2cda:	78 85       	ldd	r23, Y+8	; 0x08
    2cdc:	89 85       	ldd	r24, Y+9	; 0x09
    2cde:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ce0:	20 e0       	ldi	r18, 0x00	; 0
    2ce2:	30 e0       	ldi	r19, 0x00	; 0
    2ce4:	40 e8       	ldi	r20, 0x80	; 128
    2ce6:	5f e3       	ldi	r21, 0x3F	; 63
    2ce8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cec:	88 23       	and	r24, r24
    2cee:	2c f4       	brge	.+10     	; 0x2cfa <CLCD_voidHamoksha+0x1c2c>
		__ticks = 1;
    2cf0:	81 e0       	ldi	r24, 0x01	; 1
    2cf2:	90 e0       	ldi	r25, 0x00	; 0
    2cf4:	9e 83       	std	Y+6, r25	; 0x06
    2cf6:	8d 83       	std	Y+5, r24	; 0x05
    2cf8:	3f c0       	rjmp	.+126    	; 0x2d78 <CLCD_voidHamoksha+0x1caa>
	else if (__tmp > 65535)
    2cfa:	6f 81       	ldd	r22, Y+7	; 0x07
    2cfc:	78 85       	ldd	r23, Y+8	; 0x08
    2cfe:	89 85       	ldd	r24, Y+9	; 0x09
    2d00:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d02:	20 e0       	ldi	r18, 0x00	; 0
    2d04:	3f ef       	ldi	r19, 0xFF	; 255
    2d06:	4f e7       	ldi	r20, 0x7F	; 127
    2d08:	57 e4       	ldi	r21, 0x47	; 71
    2d0a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d0e:	18 16       	cp	r1, r24
    2d10:	4c f5       	brge	.+82     	; 0x2d64 <CLCD_voidHamoksha+0x1c96>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d12:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d14:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d16:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d18:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d1a:	20 e0       	ldi	r18, 0x00	; 0
    2d1c:	30 e0       	ldi	r19, 0x00	; 0
    2d1e:	40 e2       	ldi	r20, 0x20	; 32
    2d20:	51 e4       	ldi	r21, 0x41	; 65
    2d22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d26:	dc 01       	movw	r26, r24
    2d28:	cb 01       	movw	r24, r22
    2d2a:	bc 01       	movw	r22, r24
    2d2c:	cd 01       	movw	r24, r26
    2d2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d32:	dc 01       	movw	r26, r24
    2d34:	cb 01       	movw	r24, r22
    2d36:	9e 83       	std	Y+6, r25	; 0x06
    2d38:	8d 83       	std	Y+5, r24	; 0x05
    2d3a:	0f c0       	rjmp	.+30     	; 0x2d5a <CLCD_voidHamoksha+0x1c8c>
    2d3c:	80 e9       	ldi	r24, 0x90	; 144
    2d3e:	91 e0       	ldi	r25, 0x01	; 1
    2d40:	9c 83       	std	Y+4, r25	; 0x04
    2d42:	8b 83       	std	Y+3, r24	; 0x03
    2d44:	8b 81       	ldd	r24, Y+3	; 0x03
    2d46:	9c 81       	ldd	r25, Y+4	; 0x04
    2d48:	01 97       	sbiw	r24, 0x01	; 1
    2d4a:	f1 f7       	brne	.-4      	; 0x2d48 <CLCD_voidHamoksha+0x1c7a>
    2d4c:	9c 83       	std	Y+4, r25	; 0x04
    2d4e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d50:	8d 81       	ldd	r24, Y+5	; 0x05
    2d52:	9e 81       	ldd	r25, Y+6	; 0x06
    2d54:	01 97       	sbiw	r24, 0x01	; 1
    2d56:	9e 83       	std	Y+6, r25	; 0x06
    2d58:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d5a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d5c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d5e:	00 97       	sbiw	r24, 0x00	; 0
    2d60:	69 f7       	brne	.-38     	; 0x2d3c <CLCD_voidHamoksha+0x1c6e>
    2d62:	14 c0       	rjmp	.+40     	; 0x2d8c <CLCD_voidHamoksha+0x1cbe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d64:	6f 81       	ldd	r22, Y+7	; 0x07
    2d66:	78 85       	ldd	r23, Y+8	; 0x08
    2d68:	89 85       	ldd	r24, Y+9	; 0x09
    2d6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d70:	dc 01       	movw	r26, r24
    2d72:	cb 01       	movw	r24, r22
    2d74:	9e 83       	std	Y+6, r25	; 0x06
    2d76:	8d 83       	std	Y+5, r24	; 0x05
    2d78:	8d 81       	ldd	r24, Y+5	; 0x05
    2d7a:	9e 81       	ldd	r25, Y+6	; 0x06
    2d7c:	9a 83       	std	Y+2, r25	; 0x02
    2d7e:	89 83       	std	Y+1, r24	; 0x01
    2d80:	89 81       	ldd	r24, Y+1	; 0x01
    2d82:	9a 81       	ldd	r25, Y+2	; 0x02
    2d84:	01 97       	sbiw	r24, 0x01	; 1
    2d86:	f1 f7       	brne	.-4      	; 0x2d84 <CLCD_voidHamoksha+0x1cb6>
    2d88:	9a 83       	std	Y+2, r25	; 0x02
    2d8a:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(300);
		}
    2d8c:	cd 59       	subi	r28, 0x9D	; 157
    2d8e:	de 4f       	sbci	r29, 0xFE	; 254
    2d90:	0f b6       	in	r0, 0x3f	; 63
    2d92:	f8 94       	cli
    2d94:	de bf       	out	0x3e, r29	; 62
    2d96:	0f be       	out	0x3f, r0	; 63
    2d98:	cd bf       	out	0x3d, r28	; 61
    2d9a:	cf 91       	pop	r28
    2d9c:	df 91       	pop	r29
    2d9e:	1f 91       	pop	r17
    2da0:	0f 91       	pop	r16
    2da2:	08 95       	ret

00002da4 <CLCD_voidMyNameSin>:


void CLCD_voidMyNameSin()
{
    2da4:	df 93       	push	r29
    2da6:	cf 93       	push	r28
    2da8:	cd b7       	in	r28, 0x3d	; 61
    2daa:	de b7       	in	r29, 0x3e	; 62
    2dac:	c1 55       	subi	r28, 0x51	; 81
    2dae:	d0 40       	sbci	r29, 0x00	; 0
    2db0:	0f b6       	in	r0, 0x3f	; 63
    2db2:	f8 94       	cli
    2db4:	de bf       	out	0x3e, r29	; 62
    2db6:	0f be       	out	0x3f, r0	; 63
    2db8:	cd bf       	out	0x3d, r28	; 61
                        0b00000100,
                        0b00011111,
                        0b00000100,
                        0b00000100,
                        0b00000100,
                        0b00000100,0};
    2dba:	ce 01       	movw	r24, r28
    2dbc:	41 96       	adiw	r24, 0x11	; 17
    2dbe:	9a af       	std	Y+58, r25	; 0x3a
    2dc0:	89 af       	std	Y+57, r24	; 0x39
    2dc2:	ef e1       	ldi	r30, 0x1F	; 31
    2dc4:	f1 e0       	ldi	r31, 0x01	; 1
    2dc6:	fc af       	std	Y+60, r31	; 0x3c
    2dc8:	eb af       	std	Y+59, r30	; 0x3b
    2dca:	f8 e0       	ldi	r31, 0x08	; 8
    2dcc:	fd af       	std	Y+61, r31	; 0x3d
    2dce:	eb ad       	ldd	r30, Y+59	; 0x3b
    2dd0:	fc ad       	ldd	r31, Y+60	; 0x3c
    2dd2:	00 80       	ld	r0, Z
    2dd4:	8b ad       	ldd	r24, Y+59	; 0x3b
    2dd6:	9c ad       	ldd	r25, Y+60	; 0x3c
    2dd8:	01 96       	adiw	r24, 0x01	; 1
    2dda:	9c af       	std	Y+60, r25	; 0x3c
    2ddc:	8b af       	std	Y+59, r24	; 0x3b
    2dde:	e9 ad       	ldd	r30, Y+57	; 0x39
    2de0:	fa ad       	ldd	r31, Y+58	; 0x3a
    2de2:	00 82       	st	Z, r0
    2de4:	89 ad       	ldd	r24, Y+57	; 0x39
    2de6:	9a ad       	ldd	r25, Y+58	; 0x3a
    2de8:	01 96       	adiw	r24, 0x01	; 1
    2dea:	9a af       	std	Y+58, r25	; 0x3a
    2dec:	89 af       	std	Y+57, r24	; 0x39
    2dee:	9d ad       	ldd	r25, Y+61	; 0x3d
    2df0:	91 50       	subi	r25, 0x01	; 1
    2df2:	9d af       	std	Y+61, r25	; 0x3d
    2df4:	ed ad       	ldd	r30, Y+61	; 0x3d
    2df6:	ee 23       	and	r30, r30
    2df8:	51 f7       	brne	.-44     	; 0x2dce <CLCD_voidMyNameSin+0x2a>
                              0b00000000,
                              0b00000111,
                              0b00000101,
                              0b00000111,
                              0b00011111,
                              0b00000000,0};
    2dfa:	ce 01       	movw	r24, r28
    2dfc:	49 96       	adiw	r24, 0x19	; 25
    2dfe:	9f af       	std	Y+63, r25	; 0x3f
    2e00:	8e af       	std	Y+62, r24	; 0x3e
    2e02:	e7 e1       	ldi	r30, 0x17	; 23
    2e04:	f1 e0       	ldi	r31, 0x01	; 1
    2e06:	22 96       	adiw	r28, 0x02	; 2
    2e08:	ff af       	std	Y+63, r31	; 0x3f
    2e0a:	ee af       	std	Y+62, r30	; 0x3e
    2e0c:	22 97       	sbiw	r28, 0x02	; 2
    2e0e:	f8 e0       	ldi	r31, 0x08	; 8
    2e10:	23 96       	adiw	r28, 0x03	; 3
    2e12:	ff af       	std	Y+63, r31	; 0x3f
    2e14:	23 97       	sbiw	r28, 0x03	; 3
    2e16:	22 96       	adiw	r28, 0x02	; 2
    2e18:	ee ad       	ldd	r30, Y+62	; 0x3e
    2e1a:	ff ad       	ldd	r31, Y+63	; 0x3f
    2e1c:	22 97       	sbiw	r28, 0x02	; 2
    2e1e:	00 80       	ld	r0, Z
    2e20:	22 96       	adiw	r28, 0x02	; 2
    2e22:	8e ad       	ldd	r24, Y+62	; 0x3e
    2e24:	9f ad       	ldd	r25, Y+63	; 0x3f
    2e26:	22 97       	sbiw	r28, 0x02	; 2
    2e28:	01 96       	adiw	r24, 0x01	; 1
    2e2a:	22 96       	adiw	r28, 0x02	; 2
    2e2c:	9f af       	std	Y+63, r25	; 0x3f
    2e2e:	8e af       	std	Y+62, r24	; 0x3e
    2e30:	22 97       	sbiw	r28, 0x02	; 2
    2e32:	ee ad       	ldd	r30, Y+62	; 0x3e
    2e34:	ff ad       	ldd	r31, Y+63	; 0x3f
    2e36:	00 82       	st	Z, r0
    2e38:	8e ad       	ldd	r24, Y+62	; 0x3e
    2e3a:	9f ad       	ldd	r25, Y+63	; 0x3f
    2e3c:	01 96       	adiw	r24, 0x01	; 1
    2e3e:	9f af       	std	Y+63, r25	; 0x3f
    2e40:	8e af       	std	Y+62, r24	; 0x3e
    2e42:	23 96       	adiw	r28, 0x03	; 3
    2e44:	9f ad       	ldd	r25, Y+63	; 0x3f
    2e46:	23 97       	sbiw	r28, 0x03	; 3
    2e48:	91 50       	subi	r25, 0x01	; 1
    2e4a:	23 96       	adiw	r28, 0x03	; 3
    2e4c:	9f af       	std	Y+63, r25	; 0x3f
    2e4e:	23 97       	sbiw	r28, 0x03	; 3
    2e50:	23 96       	adiw	r28, 0x03	; 3
    2e52:	ef ad       	ldd	r30, Y+63	; 0x3f
    2e54:	23 97       	sbiw	r28, 0x03	; 3
    2e56:	ee 23       	and	r30, r30
    2e58:	f1 f6       	brne	.-68     	; 0x2e16 <CLCD_voidMyNameSin+0x72>
                              0b00000000,
                              0b00000000,
                              0b00000101,
                              0b00000001,
                              0b00011111,
                              0b00000000,0};
    2e5a:	ce 01       	movw	r24, r28
    2e5c:	81 96       	adiw	r24, 0x21	; 33
    2e5e:	25 96       	adiw	r28, 0x05	; 5
    2e60:	9f af       	std	Y+63, r25	; 0x3f
    2e62:	8e af       	std	Y+62, r24	; 0x3e
    2e64:	25 97       	sbiw	r28, 0x05	; 5
    2e66:	ef e0       	ldi	r30, 0x0F	; 15
    2e68:	f1 e0       	ldi	r31, 0x01	; 1
    2e6a:	27 96       	adiw	r28, 0x07	; 7
    2e6c:	ff af       	std	Y+63, r31	; 0x3f
    2e6e:	ee af       	std	Y+62, r30	; 0x3e
    2e70:	27 97       	sbiw	r28, 0x07	; 7
    2e72:	f8 e0       	ldi	r31, 0x08	; 8
    2e74:	28 96       	adiw	r28, 0x08	; 8
    2e76:	ff af       	std	Y+63, r31	; 0x3f
    2e78:	28 97       	sbiw	r28, 0x08	; 8
    2e7a:	27 96       	adiw	r28, 0x07	; 7
    2e7c:	ee ad       	ldd	r30, Y+62	; 0x3e
    2e7e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2e80:	27 97       	sbiw	r28, 0x07	; 7
    2e82:	00 80       	ld	r0, Z
    2e84:	27 96       	adiw	r28, 0x07	; 7
    2e86:	8e ad       	ldd	r24, Y+62	; 0x3e
    2e88:	9f ad       	ldd	r25, Y+63	; 0x3f
    2e8a:	27 97       	sbiw	r28, 0x07	; 7
    2e8c:	01 96       	adiw	r24, 0x01	; 1
    2e8e:	27 96       	adiw	r28, 0x07	; 7
    2e90:	9f af       	std	Y+63, r25	; 0x3f
    2e92:	8e af       	std	Y+62, r24	; 0x3e
    2e94:	27 97       	sbiw	r28, 0x07	; 7
    2e96:	25 96       	adiw	r28, 0x05	; 5
    2e98:	ee ad       	ldd	r30, Y+62	; 0x3e
    2e9a:	ff ad       	ldd	r31, Y+63	; 0x3f
    2e9c:	25 97       	sbiw	r28, 0x05	; 5
    2e9e:	00 82       	st	Z, r0
    2ea0:	25 96       	adiw	r28, 0x05	; 5
    2ea2:	8e ad       	ldd	r24, Y+62	; 0x3e
    2ea4:	9f ad       	ldd	r25, Y+63	; 0x3f
    2ea6:	25 97       	sbiw	r28, 0x05	; 5
    2ea8:	01 96       	adiw	r24, 0x01	; 1
    2eaa:	25 96       	adiw	r28, 0x05	; 5
    2eac:	9f af       	std	Y+63, r25	; 0x3f
    2eae:	8e af       	std	Y+62, r24	; 0x3e
    2eb0:	25 97       	sbiw	r28, 0x05	; 5
    2eb2:	28 96       	adiw	r28, 0x08	; 8
    2eb4:	9f ad       	ldd	r25, Y+63	; 0x3f
    2eb6:	28 97       	sbiw	r28, 0x08	; 8
    2eb8:	91 50       	subi	r25, 0x01	; 1
    2eba:	28 96       	adiw	r28, 0x08	; 8
    2ebc:	9f af       	std	Y+63, r25	; 0x3f
    2ebe:	28 97       	sbiw	r28, 0x08	; 8
    2ec0:	28 96       	adiw	r28, 0x08	; 8
    2ec2:	ef ad       	ldd	r30, Y+63	; 0x3f
    2ec4:	28 97       	sbiw	r28, 0x08	; 8
    2ec6:	ee 23       	and	r30, r30
    2ec8:	c1 f6       	brne	.-80     	; 0x2e7a <CLCD_voidMyNameSin+0xd6>
                              0b00000000,
                              0b00000001,
                              0b00000001,
                              0b00011111,
                              0b00000000,
                              0b00001010,0};
    2eca:	ce 01       	movw	r24, r28
    2ecc:	89 96       	adiw	r24, 0x29	; 41
    2ece:	2a 96       	adiw	r28, 0x0a	; 10
    2ed0:	9f af       	std	Y+63, r25	; 0x3f
    2ed2:	8e af       	std	Y+62, r24	; 0x3e
    2ed4:	2a 97       	sbiw	r28, 0x0a	; 10
    2ed6:	e7 e0       	ldi	r30, 0x07	; 7
    2ed8:	f1 e0       	ldi	r31, 0x01	; 1
    2eda:	2c 96       	adiw	r28, 0x0c	; 12
    2edc:	ff af       	std	Y+63, r31	; 0x3f
    2ede:	ee af       	std	Y+62, r30	; 0x3e
    2ee0:	2c 97       	sbiw	r28, 0x0c	; 12
    2ee2:	f8 e0       	ldi	r31, 0x08	; 8
    2ee4:	2d 96       	adiw	r28, 0x0d	; 13
    2ee6:	ff af       	std	Y+63, r31	; 0x3f
    2ee8:	2d 97       	sbiw	r28, 0x0d	; 13
    2eea:	2c 96       	adiw	r28, 0x0c	; 12
    2eec:	ee ad       	ldd	r30, Y+62	; 0x3e
    2eee:	ff ad       	ldd	r31, Y+63	; 0x3f
    2ef0:	2c 97       	sbiw	r28, 0x0c	; 12
    2ef2:	00 80       	ld	r0, Z
    2ef4:	2c 96       	adiw	r28, 0x0c	; 12
    2ef6:	8e ad       	ldd	r24, Y+62	; 0x3e
    2ef8:	9f ad       	ldd	r25, Y+63	; 0x3f
    2efa:	2c 97       	sbiw	r28, 0x0c	; 12
    2efc:	01 96       	adiw	r24, 0x01	; 1
    2efe:	2c 96       	adiw	r28, 0x0c	; 12
    2f00:	9f af       	std	Y+63, r25	; 0x3f
    2f02:	8e af       	std	Y+62, r24	; 0x3e
    2f04:	2c 97       	sbiw	r28, 0x0c	; 12
    2f06:	2a 96       	adiw	r28, 0x0a	; 10
    2f08:	ee ad       	ldd	r30, Y+62	; 0x3e
    2f0a:	ff ad       	ldd	r31, Y+63	; 0x3f
    2f0c:	2a 97       	sbiw	r28, 0x0a	; 10
    2f0e:	00 82       	st	Z, r0
    2f10:	2a 96       	adiw	r28, 0x0a	; 10
    2f12:	8e ad       	ldd	r24, Y+62	; 0x3e
    2f14:	9f ad       	ldd	r25, Y+63	; 0x3f
    2f16:	2a 97       	sbiw	r28, 0x0a	; 10
    2f18:	01 96       	adiw	r24, 0x01	; 1
    2f1a:	2a 96       	adiw	r28, 0x0a	; 10
    2f1c:	9f af       	std	Y+63, r25	; 0x3f
    2f1e:	8e af       	std	Y+62, r24	; 0x3e
    2f20:	2a 97       	sbiw	r28, 0x0a	; 10
    2f22:	2d 96       	adiw	r28, 0x0d	; 13
    2f24:	9f ad       	ldd	r25, Y+63	; 0x3f
    2f26:	2d 97       	sbiw	r28, 0x0d	; 13
    2f28:	91 50       	subi	r25, 0x01	; 1
    2f2a:	2d 96       	adiw	r28, 0x0d	; 13
    2f2c:	9f af       	std	Y+63, r25	; 0x3f
    2f2e:	2d 97       	sbiw	r28, 0x0d	; 13
    2f30:	2d 96       	adiw	r28, 0x0d	; 13
    2f32:	ef ad       	ldd	r30, Y+63	; 0x3f
    2f34:	2d 97       	sbiw	r28, 0x0d	; 13
    2f36:	ee 23       	and	r30, r30
    2f38:	c1 f6       	brne	.-80     	; 0x2eea <CLCD_voidMyNameSin+0x146>
                              0b00001111,
                              0b00001001,
                              0b00001111,
                              0b00000001,
                              0b00000000,0
                              };
    2f3a:	ce 01       	movw	r24, r28
    2f3c:	c1 96       	adiw	r24, 0x31	; 49
    2f3e:	2f 96       	adiw	r28, 0x0f	; 15
    2f40:	9f af       	std	Y+63, r25	; 0x3f
    2f42:	8e af       	std	Y+62, r24	; 0x3e
    2f44:	2f 97       	sbiw	r28, 0x0f	; 15
    2f46:	ef ef       	ldi	r30, 0xFF	; 255
    2f48:	f0 e0       	ldi	r31, 0x00	; 0
    2f4a:	61 96       	adiw	r28, 0x11	; 17
    2f4c:	ff af       	std	Y+63, r31	; 0x3f
    2f4e:	ee af       	std	Y+62, r30	; 0x3e
    2f50:	61 97       	sbiw	r28, 0x11	; 17
    2f52:	f8 e0       	ldi	r31, 0x08	; 8
    2f54:	62 96       	adiw	r28, 0x12	; 18
    2f56:	ff af       	std	Y+63, r31	; 0x3f
    2f58:	62 97       	sbiw	r28, 0x12	; 18
    2f5a:	61 96       	adiw	r28, 0x11	; 17
    2f5c:	ee ad       	ldd	r30, Y+62	; 0x3e
    2f5e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2f60:	61 97       	sbiw	r28, 0x11	; 17
    2f62:	00 80       	ld	r0, Z
    2f64:	61 96       	adiw	r28, 0x11	; 17
    2f66:	8e ad       	ldd	r24, Y+62	; 0x3e
    2f68:	9f ad       	ldd	r25, Y+63	; 0x3f
    2f6a:	61 97       	sbiw	r28, 0x11	; 17
    2f6c:	01 96       	adiw	r24, 0x01	; 1
    2f6e:	61 96       	adiw	r28, 0x11	; 17
    2f70:	9f af       	std	Y+63, r25	; 0x3f
    2f72:	8e af       	std	Y+62, r24	; 0x3e
    2f74:	61 97       	sbiw	r28, 0x11	; 17
    2f76:	2f 96       	adiw	r28, 0x0f	; 15
    2f78:	ee ad       	ldd	r30, Y+62	; 0x3e
    2f7a:	ff ad       	ldd	r31, Y+63	; 0x3f
    2f7c:	2f 97       	sbiw	r28, 0x0f	; 15
    2f7e:	00 82       	st	Z, r0
    2f80:	2f 96       	adiw	r28, 0x0f	; 15
    2f82:	8e ad       	ldd	r24, Y+62	; 0x3e
    2f84:	9f ad       	ldd	r25, Y+63	; 0x3f
    2f86:	2f 97       	sbiw	r28, 0x0f	; 15
    2f88:	01 96       	adiw	r24, 0x01	; 1
    2f8a:	2f 96       	adiw	r28, 0x0f	; 15
    2f8c:	9f af       	std	Y+63, r25	; 0x3f
    2f8e:	8e af       	std	Y+62, r24	; 0x3e
    2f90:	2f 97       	sbiw	r28, 0x0f	; 15
    2f92:	62 96       	adiw	r28, 0x12	; 18
    2f94:	9f ad       	ldd	r25, Y+63	; 0x3f
    2f96:	62 97       	sbiw	r28, 0x12	; 18
    2f98:	91 50       	subi	r25, 0x01	; 1
    2f9a:	62 96       	adiw	r28, 0x12	; 18
    2f9c:	9f af       	std	Y+63, r25	; 0x3f
    2f9e:	62 97       	sbiw	r28, 0x12	; 18
    2fa0:	62 96       	adiw	r28, 0x12	; 18
    2fa2:	ef ad       	ldd	r30, Y+63	; 0x3f
    2fa4:	62 97       	sbiw	r28, 0x12	; 18
    2fa6:	ee 23       	and	r30, r30
    2fa8:	c1 f6       	brne	.-80     	; 0x2f5a <CLCD_voidMyNameSin+0x1b6>
   // sint8 j;
    for(uint8 i=15,j=0; (i>0 && j<2) ;i--,j++)
    2faa:	8f e0       	ldi	r24, 0x0F	; 15
    2fac:	88 8b       	std	Y+16, r24	; 0x10
    2fae:	1f 86       	std	Y+15, r1	; 0x0f
    2fb0:	bc c0       	rjmp	.+376    	; 0x312a <CLCD_voidMyNameSin+0x386>
    {
	CLCD_u8SpecialCharacter(0,Local_u81letter,i--,j);
    2fb2:	98 89       	ldd	r25, Y+16	; 0x10
    2fb4:	88 89       	ldd	r24, Y+16	; 0x10
    2fb6:	81 50       	subi	r24, 0x01	; 1
    2fb8:	88 8b       	std	Y+16, r24	; 0x10
    2fba:	9e 01       	movw	r18, r28
    2fbc:	2f 5e       	subi	r18, 0xEF	; 239
    2fbe:	3f 4f       	sbci	r19, 0xFF	; 255
    2fc0:	80 e0       	ldi	r24, 0x00	; 0
    2fc2:	b9 01       	movw	r22, r18
    2fc4:	49 2f       	mov	r20, r25
    2fc6:	2f 85       	ldd	r18, Y+15	; 0x0f
    2fc8:	0e 94 11 08 	call	0x1022	; 0x1022 <CLCD_u8SpecialCharacter>
	CLCD_u8SpecialCharacter(1,Local_u82letter,i--,j);
    2fcc:	98 89       	ldd	r25, Y+16	; 0x10
    2fce:	88 89       	ldd	r24, Y+16	; 0x10
    2fd0:	81 50       	subi	r24, 0x01	; 1
    2fd2:	88 8b       	std	Y+16, r24	; 0x10
    2fd4:	9e 01       	movw	r18, r28
    2fd6:	27 5e       	subi	r18, 0xE7	; 231
    2fd8:	3f 4f       	sbci	r19, 0xFF	; 255
    2fda:	81 e0       	ldi	r24, 0x01	; 1
    2fdc:	b9 01       	movw	r22, r18
    2fde:	49 2f       	mov	r20, r25
    2fe0:	2f 85       	ldd	r18, Y+15	; 0x0f
    2fe2:	0e 94 11 08 	call	0x1022	; 0x1022 <CLCD_u8SpecialCharacter>
	CLCD_u8SpecialCharacter(2,Local_u83letter,i--,j);
    2fe6:	98 89       	ldd	r25, Y+16	; 0x10
    2fe8:	88 89       	ldd	r24, Y+16	; 0x10
    2fea:	81 50       	subi	r24, 0x01	; 1
    2fec:	88 8b       	std	Y+16, r24	; 0x10
    2fee:	9e 01       	movw	r18, r28
    2ff0:	2f 5d       	subi	r18, 0xDF	; 223
    2ff2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ff4:	82 e0       	ldi	r24, 0x02	; 2
    2ff6:	b9 01       	movw	r22, r18
    2ff8:	49 2f       	mov	r20, r25
    2ffa:	2f 85       	ldd	r18, Y+15	; 0x0f
    2ffc:	0e 94 11 08 	call	0x1022	; 0x1022 <CLCD_u8SpecialCharacter>
	CLCD_u8SpecialCharacter(3,Local_u84letter,i--,j);
    3000:	98 89       	ldd	r25, Y+16	; 0x10
    3002:	88 89       	ldd	r24, Y+16	; 0x10
    3004:	81 50       	subi	r24, 0x01	; 1
    3006:	88 8b       	std	Y+16, r24	; 0x10
    3008:	9e 01       	movw	r18, r28
    300a:	27 5d       	subi	r18, 0xD7	; 215
    300c:	3f 4f       	sbci	r19, 0xFF	; 255
    300e:	83 e0       	ldi	r24, 0x03	; 3
    3010:	b9 01       	movw	r22, r18
    3012:	49 2f       	mov	r20, r25
    3014:	2f 85       	ldd	r18, Y+15	; 0x0f
    3016:	0e 94 11 08 	call	0x1022	; 0x1022 <CLCD_u8SpecialCharacter>
	CLCD_u8SpecialCharacter(4,Local_u85letter,i,j);
    301a:	9e 01       	movw	r18, r28
    301c:	2f 5c       	subi	r18, 0xCF	; 207
    301e:	3f 4f       	sbci	r19, 0xFF	; 255
    3020:	84 e0       	ldi	r24, 0x04	; 4
    3022:	b9 01       	movw	r22, r18
    3024:	48 89       	ldd	r20, Y+16	; 0x10
    3026:	2f 85       	ldd	r18, Y+15	; 0x0f
    3028:	0e 94 11 08 	call	0x1022	; 0x1022 <CLCD_u8SpecialCharacter>
    302c:	80 e0       	ldi	r24, 0x00	; 0
    302e:	90 e0       	ldi	r25, 0x00	; 0
    3030:	a0 ea       	ldi	r26, 0xA0	; 160
    3032:	b2 e4       	ldi	r27, 0x42	; 66
    3034:	8b 87       	std	Y+11, r24	; 0x0b
    3036:	9c 87       	std	Y+12, r25	; 0x0c
    3038:	ad 87       	std	Y+13, r26	; 0x0d
    303a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    303c:	6b 85       	ldd	r22, Y+11	; 0x0b
    303e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3040:	8d 85       	ldd	r24, Y+13	; 0x0d
    3042:	9e 85       	ldd	r25, Y+14	; 0x0e
    3044:	20 e0       	ldi	r18, 0x00	; 0
    3046:	30 e0       	ldi	r19, 0x00	; 0
    3048:	4a e7       	ldi	r20, 0x7A	; 122
    304a:	55 e4       	ldi	r21, 0x45	; 69
    304c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3050:	dc 01       	movw	r26, r24
    3052:	cb 01       	movw	r24, r22
    3054:	8f 83       	std	Y+7, r24	; 0x07
    3056:	98 87       	std	Y+8, r25	; 0x08
    3058:	a9 87       	std	Y+9, r26	; 0x09
    305a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    305c:	6f 81       	ldd	r22, Y+7	; 0x07
    305e:	78 85       	ldd	r23, Y+8	; 0x08
    3060:	89 85       	ldd	r24, Y+9	; 0x09
    3062:	9a 85       	ldd	r25, Y+10	; 0x0a
    3064:	20 e0       	ldi	r18, 0x00	; 0
    3066:	30 e0       	ldi	r19, 0x00	; 0
    3068:	40 e8       	ldi	r20, 0x80	; 128
    306a:	5f e3       	ldi	r21, 0x3F	; 63
    306c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3070:	88 23       	and	r24, r24
    3072:	2c f4       	brge	.+10     	; 0x307e <CLCD_voidMyNameSin+0x2da>
		__ticks = 1;
    3074:	81 e0       	ldi	r24, 0x01	; 1
    3076:	90 e0       	ldi	r25, 0x00	; 0
    3078:	9e 83       	std	Y+6, r25	; 0x06
    307a:	8d 83       	std	Y+5, r24	; 0x05
    307c:	3f c0       	rjmp	.+126    	; 0x30fc <CLCD_voidMyNameSin+0x358>
	else if (__tmp > 65535)
    307e:	6f 81       	ldd	r22, Y+7	; 0x07
    3080:	78 85       	ldd	r23, Y+8	; 0x08
    3082:	89 85       	ldd	r24, Y+9	; 0x09
    3084:	9a 85       	ldd	r25, Y+10	; 0x0a
    3086:	20 e0       	ldi	r18, 0x00	; 0
    3088:	3f ef       	ldi	r19, 0xFF	; 255
    308a:	4f e7       	ldi	r20, 0x7F	; 127
    308c:	57 e4       	ldi	r21, 0x47	; 71
    308e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3092:	18 16       	cp	r1, r24
    3094:	4c f5       	brge	.+82     	; 0x30e8 <CLCD_voidMyNameSin+0x344>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3096:	6b 85       	ldd	r22, Y+11	; 0x0b
    3098:	7c 85       	ldd	r23, Y+12	; 0x0c
    309a:	8d 85       	ldd	r24, Y+13	; 0x0d
    309c:	9e 85       	ldd	r25, Y+14	; 0x0e
    309e:	20 e0       	ldi	r18, 0x00	; 0
    30a0:	30 e0       	ldi	r19, 0x00	; 0
    30a2:	40 e2       	ldi	r20, 0x20	; 32
    30a4:	51 e4       	ldi	r21, 0x41	; 65
    30a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30aa:	dc 01       	movw	r26, r24
    30ac:	cb 01       	movw	r24, r22
    30ae:	bc 01       	movw	r22, r24
    30b0:	cd 01       	movw	r24, r26
    30b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30b6:	dc 01       	movw	r26, r24
    30b8:	cb 01       	movw	r24, r22
    30ba:	9e 83       	std	Y+6, r25	; 0x06
    30bc:	8d 83       	std	Y+5, r24	; 0x05
    30be:	0f c0       	rjmp	.+30     	; 0x30de <CLCD_voidMyNameSin+0x33a>
    30c0:	80 e9       	ldi	r24, 0x90	; 144
    30c2:	91 e0       	ldi	r25, 0x01	; 1
    30c4:	9c 83       	std	Y+4, r25	; 0x04
    30c6:	8b 83       	std	Y+3, r24	; 0x03
    30c8:	8b 81       	ldd	r24, Y+3	; 0x03
    30ca:	9c 81       	ldd	r25, Y+4	; 0x04
    30cc:	01 97       	sbiw	r24, 0x01	; 1
    30ce:	f1 f7       	brne	.-4      	; 0x30cc <CLCD_voidMyNameSin+0x328>
    30d0:	9c 83       	std	Y+4, r25	; 0x04
    30d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30d4:	8d 81       	ldd	r24, Y+5	; 0x05
    30d6:	9e 81       	ldd	r25, Y+6	; 0x06
    30d8:	01 97       	sbiw	r24, 0x01	; 1
    30da:	9e 83       	std	Y+6, r25	; 0x06
    30dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30de:	8d 81       	ldd	r24, Y+5	; 0x05
    30e0:	9e 81       	ldd	r25, Y+6	; 0x06
    30e2:	00 97       	sbiw	r24, 0x00	; 0
    30e4:	69 f7       	brne	.-38     	; 0x30c0 <CLCD_voidMyNameSin+0x31c>
    30e6:	14 c0       	rjmp	.+40     	; 0x3110 <CLCD_voidMyNameSin+0x36c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30e8:	6f 81       	ldd	r22, Y+7	; 0x07
    30ea:	78 85       	ldd	r23, Y+8	; 0x08
    30ec:	89 85       	ldd	r24, Y+9	; 0x09
    30ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    30f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30f4:	dc 01       	movw	r26, r24
    30f6:	cb 01       	movw	r24, r22
    30f8:	9e 83       	std	Y+6, r25	; 0x06
    30fa:	8d 83       	std	Y+5, r24	; 0x05
    30fc:	8d 81       	ldd	r24, Y+5	; 0x05
    30fe:	9e 81       	ldd	r25, Y+6	; 0x06
    3100:	9a 83       	std	Y+2, r25	; 0x02
    3102:	89 83       	std	Y+1, r24	; 0x01
    3104:	89 81       	ldd	r24, Y+1	; 0x01
    3106:	9a 81       	ldd	r25, Y+2	; 0x02
    3108:	01 97       	sbiw	r24, 0x01	; 1
    310a:	f1 f7       	brne	.-4      	; 0x3108 <CLCD_voidMyNameSin+0x364>
    310c:	9a 83       	std	Y+2, r25	; 0x02
    310e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(80);
	CLCD_voidClear();
    3110:	0e 94 5d 08 	call	0x10ba	; 0x10ba <CLCD_voidClear>
	if(j==1)
    3114:	8f 85       	ldd	r24, Y+15	; 0x0f
    3116:	81 30       	cpi	r24, 0x01	; 1
    3118:	11 f4       	brne	.+4      	; 0x311e <CLCD_voidMyNameSin+0x37a>
	{
		j=-1;
    311a:	8f ef       	ldi	r24, 0xFF	; 255
    311c:	8f 87       	std	Y+15, r24	; 0x0f
                              0b00001111,
                              0b00000001,
                              0b00000000,0
                              };
   // sint8 j;
    for(uint8 i=15,j=0; (i>0 && j<2) ;i--,j++)
    311e:	88 89       	ldd	r24, Y+16	; 0x10
    3120:	81 50       	subi	r24, 0x01	; 1
    3122:	88 8b       	std	Y+16, r24	; 0x10
    3124:	8f 85       	ldd	r24, Y+15	; 0x0f
    3126:	8f 5f       	subi	r24, 0xFF	; 255
    3128:	8f 87       	std	Y+15, r24	; 0x0f
    312a:	88 89       	ldd	r24, Y+16	; 0x10
    312c:	88 23       	and	r24, r24
    312e:	21 f0       	breq	.+8      	; 0x3138 <CLCD_voidMyNameSin+0x394>
    3130:	8f 85       	ldd	r24, Y+15	; 0x0f
    3132:	82 30       	cpi	r24, 0x02	; 2
    3134:	08 f4       	brcc	.+2      	; 0x3138 <CLCD_voidMyNameSin+0x394>
    3136:	3d cf       	rjmp	.-390    	; 0x2fb2 <CLCD_voidMyNameSin+0x20e>
	}
    }



}
    3138:	cf 5a       	subi	r28, 0xAF	; 175
    313a:	df 4f       	sbci	r29, 0xFF	; 255
    313c:	0f b6       	in	r0, 0x3f	; 63
    313e:	f8 94       	cli
    3140:	de bf       	out	0x3e, r29	; 62
    3142:	0f be       	out	0x3f, r0	; 63
    3144:	cd bf       	out	0x3d, r28	; 61
    3146:	cf 91       	pop	r28
    3148:	df 91       	pop	r29
    314a:	08 95       	ret

0000314c <DIO_u8SetPinDirection>:
#include "DIO_prv.h"
#include "DIO_cfg.h"
#include "DIO_reg.h"

uint8 DIO_u8SetPinDirection(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Direction )
{
    314c:	df 93       	push	r29
    314e:	cf 93       	push	r28
    3150:	cd b7       	in	r28, 0x3d	; 61
    3152:	de b7       	in	r29, 0x3e	; 62
    3154:	28 97       	sbiw	r28, 0x08	; 8
    3156:	0f b6       	in	r0, 0x3f	; 63
    3158:	f8 94       	cli
    315a:	de bf       	out	0x3e, r29	; 62
    315c:	0f be       	out	0x3f, r0	; 63
    315e:	cd bf       	out	0x3d, r28	; 61
    3160:	8a 83       	std	Y+2, r24	; 0x02
    3162:	6b 83       	std	Y+3, r22	; 0x03
    3164:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
    3166:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <=DIO_u8PIN7)
    3168:	8b 81       	ldd	r24, Y+3	; 0x03
    316a:	88 30       	cpi	r24, 0x08	; 8
    316c:	08 f0       	brcs	.+2      	; 0x3170 <DIO_u8SetPinDirection+0x24>
    316e:	f4 c0       	rjmp	.+488    	; 0x3358 <DIO_u8SetPinDirection+0x20c>
	{

		if(Copy_u8Direction == DIO_u8PIN_INPUT)
    3170:	8c 81       	ldd	r24, Y+4	; 0x04
    3172:	88 23       	and	r24, r24
    3174:	09 f0       	breq	.+2      	; 0x3178 <DIO_u8SetPinDirection+0x2c>
    3176:	77 c0       	rjmp	.+238    	; 0x3266 <DIO_u8SetPinDirection+0x11a>
		{
			switch(Copy_u8Port)
    3178:	8a 81       	ldd	r24, Y+2	; 0x02
    317a:	28 2f       	mov	r18, r24
    317c:	30 e0       	ldi	r19, 0x00	; 0
    317e:	38 87       	std	Y+8, r19	; 0x08
    3180:	2f 83       	std	Y+7, r18	; 0x07
    3182:	8f 81       	ldd	r24, Y+7	; 0x07
    3184:	98 85       	ldd	r25, Y+8	; 0x08
    3186:	81 30       	cpi	r24, 0x01	; 1
    3188:	91 05       	cpc	r25, r1
    318a:	59 f1       	breq	.+86     	; 0x31e2 <DIO_u8SetPinDirection+0x96>
    318c:	2f 81       	ldd	r18, Y+7	; 0x07
    318e:	38 85       	ldd	r19, Y+8	; 0x08
    3190:	22 30       	cpi	r18, 0x02	; 2
    3192:	31 05       	cpc	r19, r1
    3194:	2c f4       	brge	.+10     	; 0x31a0 <DIO_u8SetPinDirection+0x54>
    3196:	8f 81       	ldd	r24, Y+7	; 0x07
    3198:	98 85       	ldd	r25, Y+8	; 0x08
    319a:	00 97       	sbiw	r24, 0x00	; 0
    319c:	69 f0       	breq	.+26     	; 0x31b8 <DIO_u8SetPinDirection+0x6c>
    319e:	60 c0       	rjmp	.+192    	; 0x3260 <DIO_u8SetPinDirection+0x114>
    31a0:	2f 81       	ldd	r18, Y+7	; 0x07
    31a2:	38 85       	ldd	r19, Y+8	; 0x08
    31a4:	22 30       	cpi	r18, 0x02	; 2
    31a6:	31 05       	cpc	r19, r1
    31a8:	89 f1       	breq	.+98     	; 0x320c <DIO_u8SetPinDirection+0xc0>
    31aa:	8f 81       	ldd	r24, Y+7	; 0x07
    31ac:	98 85       	ldd	r25, Y+8	; 0x08
    31ae:	83 30       	cpi	r24, 0x03	; 3
    31b0:	91 05       	cpc	r25, r1
    31b2:	09 f4       	brne	.+2      	; 0x31b6 <DIO_u8SetPinDirection+0x6a>
    31b4:	40 c0       	rjmp	.+128    	; 0x3236 <DIO_u8SetPinDirection+0xea>
    31b6:	54 c0       	rjmp	.+168    	; 0x3260 <DIO_u8SetPinDirection+0x114>
			{
			case DIO_u8PORTA : CLR_BIT(DDRA,Copy_u8Pin); break;
    31b8:	aa e3       	ldi	r26, 0x3A	; 58
    31ba:	b0 e0       	ldi	r27, 0x00	; 0
    31bc:	ea e3       	ldi	r30, 0x3A	; 58
    31be:	f0 e0       	ldi	r31, 0x00	; 0
    31c0:	80 81       	ld	r24, Z
    31c2:	48 2f       	mov	r20, r24
    31c4:	8b 81       	ldd	r24, Y+3	; 0x03
    31c6:	28 2f       	mov	r18, r24
    31c8:	30 e0       	ldi	r19, 0x00	; 0
    31ca:	81 e0       	ldi	r24, 0x01	; 1
    31cc:	90 e0       	ldi	r25, 0x00	; 0
    31ce:	02 2e       	mov	r0, r18
    31d0:	02 c0       	rjmp	.+4      	; 0x31d6 <DIO_u8SetPinDirection+0x8a>
    31d2:	88 0f       	add	r24, r24
    31d4:	99 1f       	adc	r25, r25
    31d6:	0a 94       	dec	r0
    31d8:	e2 f7       	brpl	.-8      	; 0x31d2 <DIO_u8SetPinDirection+0x86>
    31da:	80 95       	com	r24
    31dc:	84 23       	and	r24, r20
    31de:	8c 93       	st	X, r24
    31e0:	bd c0       	rjmp	.+378    	; 0x335c <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB : CLR_BIT(DDRB,Copy_u8Pin); break;
    31e2:	a7 e3       	ldi	r26, 0x37	; 55
    31e4:	b0 e0       	ldi	r27, 0x00	; 0
    31e6:	e7 e3       	ldi	r30, 0x37	; 55
    31e8:	f0 e0       	ldi	r31, 0x00	; 0
    31ea:	80 81       	ld	r24, Z
    31ec:	48 2f       	mov	r20, r24
    31ee:	8b 81       	ldd	r24, Y+3	; 0x03
    31f0:	28 2f       	mov	r18, r24
    31f2:	30 e0       	ldi	r19, 0x00	; 0
    31f4:	81 e0       	ldi	r24, 0x01	; 1
    31f6:	90 e0       	ldi	r25, 0x00	; 0
    31f8:	02 2e       	mov	r0, r18
    31fa:	02 c0       	rjmp	.+4      	; 0x3200 <DIO_u8SetPinDirection+0xb4>
    31fc:	88 0f       	add	r24, r24
    31fe:	99 1f       	adc	r25, r25
    3200:	0a 94       	dec	r0
    3202:	e2 f7       	brpl	.-8      	; 0x31fc <DIO_u8SetPinDirection+0xb0>
    3204:	80 95       	com	r24
    3206:	84 23       	and	r24, r20
    3208:	8c 93       	st	X, r24
    320a:	a8 c0       	rjmp	.+336    	; 0x335c <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC : CLR_BIT(DDRC,Copy_u8Pin); break;
    320c:	a4 e3       	ldi	r26, 0x34	; 52
    320e:	b0 e0       	ldi	r27, 0x00	; 0
    3210:	e4 e3       	ldi	r30, 0x34	; 52
    3212:	f0 e0       	ldi	r31, 0x00	; 0
    3214:	80 81       	ld	r24, Z
    3216:	48 2f       	mov	r20, r24
    3218:	8b 81       	ldd	r24, Y+3	; 0x03
    321a:	28 2f       	mov	r18, r24
    321c:	30 e0       	ldi	r19, 0x00	; 0
    321e:	81 e0       	ldi	r24, 0x01	; 1
    3220:	90 e0       	ldi	r25, 0x00	; 0
    3222:	02 2e       	mov	r0, r18
    3224:	02 c0       	rjmp	.+4      	; 0x322a <DIO_u8SetPinDirection+0xde>
    3226:	88 0f       	add	r24, r24
    3228:	99 1f       	adc	r25, r25
    322a:	0a 94       	dec	r0
    322c:	e2 f7       	brpl	.-8      	; 0x3226 <DIO_u8SetPinDirection+0xda>
    322e:	80 95       	com	r24
    3230:	84 23       	and	r24, r20
    3232:	8c 93       	st	X, r24
    3234:	93 c0       	rjmp	.+294    	; 0x335c <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD : CLR_BIT(DDRD,Copy_u8Pin); break;
    3236:	a1 e3       	ldi	r26, 0x31	; 49
    3238:	b0 e0       	ldi	r27, 0x00	; 0
    323a:	e1 e3       	ldi	r30, 0x31	; 49
    323c:	f0 e0       	ldi	r31, 0x00	; 0
    323e:	80 81       	ld	r24, Z
    3240:	48 2f       	mov	r20, r24
    3242:	8b 81       	ldd	r24, Y+3	; 0x03
    3244:	28 2f       	mov	r18, r24
    3246:	30 e0       	ldi	r19, 0x00	; 0
    3248:	81 e0       	ldi	r24, 0x01	; 1
    324a:	90 e0       	ldi	r25, 0x00	; 0
    324c:	02 2e       	mov	r0, r18
    324e:	02 c0       	rjmp	.+4      	; 0x3254 <DIO_u8SetPinDirection+0x108>
    3250:	88 0f       	add	r24, r24
    3252:	99 1f       	adc	r25, r25
    3254:	0a 94       	dec	r0
    3256:	e2 f7       	brpl	.-8      	; 0x3250 <DIO_u8SetPinDirection+0x104>
    3258:	80 95       	com	r24
    325a:	84 23       	and	r24, r20
    325c:	8c 93       	st	X, r24
    325e:	7e c0       	rjmp	.+252    	; 0x335c <DIO_u8SetPinDirection+0x210>
			default : Local_u8ErrorState = NOK; 		 break;
    3260:	81 e0       	ldi	r24, 0x01	; 1
    3262:	89 83       	std	Y+1, r24	; 0x01
    3264:	7b c0       	rjmp	.+246    	; 0x335c <DIO_u8SetPinDirection+0x210>
			}
		}
		else if(Copy_u8Direction == DIO_u8PIN_OUTPUT)
    3266:	8c 81       	ldd	r24, Y+4	; 0x04
    3268:	81 30       	cpi	r24, 0x01	; 1
    326a:	09 f0       	breq	.+2      	; 0x326e <DIO_u8SetPinDirection+0x122>
    326c:	72 c0       	rjmp	.+228    	; 0x3352 <DIO_u8SetPinDirection+0x206>
		{
			switch(Copy_u8Port)
    326e:	8a 81       	ldd	r24, Y+2	; 0x02
    3270:	28 2f       	mov	r18, r24
    3272:	30 e0       	ldi	r19, 0x00	; 0
    3274:	3e 83       	std	Y+6, r19	; 0x06
    3276:	2d 83       	std	Y+5, r18	; 0x05
    3278:	8d 81       	ldd	r24, Y+5	; 0x05
    327a:	9e 81       	ldd	r25, Y+6	; 0x06
    327c:	81 30       	cpi	r24, 0x01	; 1
    327e:	91 05       	cpc	r25, r1
    3280:	49 f1       	breq	.+82     	; 0x32d4 <DIO_u8SetPinDirection+0x188>
    3282:	2d 81       	ldd	r18, Y+5	; 0x05
    3284:	3e 81       	ldd	r19, Y+6	; 0x06
    3286:	22 30       	cpi	r18, 0x02	; 2
    3288:	31 05       	cpc	r19, r1
    328a:	2c f4       	brge	.+10     	; 0x3296 <DIO_u8SetPinDirection+0x14a>
    328c:	8d 81       	ldd	r24, Y+5	; 0x05
    328e:	9e 81       	ldd	r25, Y+6	; 0x06
    3290:	00 97       	sbiw	r24, 0x00	; 0
    3292:	61 f0       	breq	.+24     	; 0x32ac <DIO_u8SetPinDirection+0x160>
    3294:	5b c0       	rjmp	.+182    	; 0x334c <DIO_u8SetPinDirection+0x200>
    3296:	2d 81       	ldd	r18, Y+5	; 0x05
    3298:	3e 81       	ldd	r19, Y+6	; 0x06
    329a:	22 30       	cpi	r18, 0x02	; 2
    329c:	31 05       	cpc	r19, r1
    329e:	71 f1       	breq	.+92     	; 0x32fc <DIO_u8SetPinDirection+0x1b0>
    32a0:	8d 81       	ldd	r24, Y+5	; 0x05
    32a2:	9e 81       	ldd	r25, Y+6	; 0x06
    32a4:	83 30       	cpi	r24, 0x03	; 3
    32a6:	91 05       	cpc	r25, r1
    32a8:	e9 f1       	breq	.+122    	; 0x3324 <DIO_u8SetPinDirection+0x1d8>
    32aa:	50 c0       	rjmp	.+160    	; 0x334c <DIO_u8SetPinDirection+0x200>
			{
			case DIO_u8PORTA : SET_BIT(DDRA,Copy_u8Pin); break;
    32ac:	aa e3       	ldi	r26, 0x3A	; 58
    32ae:	b0 e0       	ldi	r27, 0x00	; 0
    32b0:	ea e3       	ldi	r30, 0x3A	; 58
    32b2:	f0 e0       	ldi	r31, 0x00	; 0
    32b4:	80 81       	ld	r24, Z
    32b6:	48 2f       	mov	r20, r24
    32b8:	8b 81       	ldd	r24, Y+3	; 0x03
    32ba:	28 2f       	mov	r18, r24
    32bc:	30 e0       	ldi	r19, 0x00	; 0
    32be:	81 e0       	ldi	r24, 0x01	; 1
    32c0:	90 e0       	ldi	r25, 0x00	; 0
    32c2:	02 2e       	mov	r0, r18
    32c4:	02 c0       	rjmp	.+4      	; 0x32ca <DIO_u8SetPinDirection+0x17e>
    32c6:	88 0f       	add	r24, r24
    32c8:	99 1f       	adc	r25, r25
    32ca:	0a 94       	dec	r0
    32cc:	e2 f7       	brpl	.-8      	; 0x32c6 <DIO_u8SetPinDirection+0x17a>
    32ce:	84 2b       	or	r24, r20
    32d0:	8c 93       	st	X, r24
    32d2:	44 c0       	rjmp	.+136    	; 0x335c <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB : SET_BIT(DDRB,Copy_u8Pin); break;
    32d4:	a7 e3       	ldi	r26, 0x37	; 55
    32d6:	b0 e0       	ldi	r27, 0x00	; 0
    32d8:	e7 e3       	ldi	r30, 0x37	; 55
    32da:	f0 e0       	ldi	r31, 0x00	; 0
    32dc:	80 81       	ld	r24, Z
    32de:	48 2f       	mov	r20, r24
    32e0:	8b 81       	ldd	r24, Y+3	; 0x03
    32e2:	28 2f       	mov	r18, r24
    32e4:	30 e0       	ldi	r19, 0x00	; 0
    32e6:	81 e0       	ldi	r24, 0x01	; 1
    32e8:	90 e0       	ldi	r25, 0x00	; 0
    32ea:	02 2e       	mov	r0, r18
    32ec:	02 c0       	rjmp	.+4      	; 0x32f2 <DIO_u8SetPinDirection+0x1a6>
    32ee:	88 0f       	add	r24, r24
    32f0:	99 1f       	adc	r25, r25
    32f2:	0a 94       	dec	r0
    32f4:	e2 f7       	brpl	.-8      	; 0x32ee <DIO_u8SetPinDirection+0x1a2>
    32f6:	84 2b       	or	r24, r20
    32f8:	8c 93       	st	X, r24
    32fa:	30 c0       	rjmp	.+96     	; 0x335c <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC : SET_BIT(DDRC,Copy_u8Pin); break;
    32fc:	a4 e3       	ldi	r26, 0x34	; 52
    32fe:	b0 e0       	ldi	r27, 0x00	; 0
    3300:	e4 e3       	ldi	r30, 0x34	; 52
    3302:	f0 e0       	ldi	r31, 0x00	; 0
    3304:	80 81       	ld	r24, Z
    3306:	48 2f       	mov	r20, r24
    3308:	8b 81       	ldd	r24, Y+3	; 0x03
    330a:	28 2f       	mov	r18, r24
    330c:	30 e0       	ldi	r19, 0x00	; 0
    330e:	81 e0       	ldi	r24, 0x01	; 1
    3310:	90 e0       	ldi	r25, 0x00	; 0
    3312:	02 2e       	mov	r0, r18
    3314:	02 c0       	rjmp	.+4      	; 0x331a <DIO_u8SetPinDirection+0x1ce>
    3316:	88 0f       	add	r24, r24
    3318:	99 1f       	adc	r25, r25
    331a:	0a 94       	dec	r0
    331c:	e2 f7       	brpl	.-8      	; 0x3316 <DIO_u8SetPinDirection+0x1ca>
    331e:	84 2b       	or	r24, r20
    3320:	8c 93       	st	X, r24
    3322:	1c c0       	rjmp	.+56     	; 0x335c <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD : SET_BIT(DDRD,Copy_u8Pin); break;
    3324:	a1 e3       	ldi	r26, 0x31	; 49
    3326:	b0 e0       	ldi	r27, 0x00	; 0
    3328:	e1 e3       	ldi	r30, 0x31	; 49
    332a:	f0 e0       	ldi	r31, 0x00	; 0
    332c:	80 81       	ld	r24, Z
    332e:	48 2f       	mov	r20, r24
    3330:	8b 81       	ldd	r24, Y+3	; 0x03
    3332:	28 2f       	mov	r18, r24
    3334:	30 e0       	ldi	r19, 0x00	; 0
    3336:	81 e0       	ldi	r24, 0x01	; 1
    3338:	90 e0       	ldi	r25, 0x00	; 0
    333a:	02 2e       	mov	r0, r18
    333c:	02 c0       	rjmp	.+4      	; 0x3342 <DIO_u8SetPinDirection+0x1f6>
    333e:	88 0f       	add	r24, r24
    3340:	99 1f       	adc	r25, r25
    3342:	0a 94       	dec	r0
    3344:	e2 f7       	brpl	.-8      	; 0x333e <DIO_u8SetPinDirection+0x1f2>
    3346:	84 2b       	or	r24, r20
    3348:	8c 93       	st	X, r24
    334a:	08 c0       	rjmp	.+16     	; 0x335c <DIO_u8SetPinDirection+0x210>
			default : Local_u8ErrorState = NOK; 		 break;
    334c:	81 e0       	ldi	r24, 0x01	; 1
    334e:	89 83       	std	Y+1, r24	; 0x01
    3350:	05 c0       	rjmp	.+10     	; 0x335c <DIO_u8SetPinDirection+0x210>
			}
		}

		else
		{
			Local_u8ErrorState = NOK;
    3352:	81 e0       	ldi	r24, 0x01	; 1
    3354:	89 83       	std	Y+1, r24	; 0x01
    3356:	02 c0       	rjmp	.+4      	; 0x335c <DIO_u8SetPinDirection+0x210>
		}
	}
	else
	{
		/*Pin number is invalid*/
		Local_u8ErrorState = NOK;
    3358:	81 e0       	ldi	r24, 0x01	; 1
    335a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    335c:	89 81       	ldd	r24, Y+1	; 0x01
}
    335e:	28 96       	adiw	r28, 0x08	; 8
    3360:	0f b6       	in	r0, 0x3f	; 63
    3362:	f8 94       	cli
    3364:	de bf       	out	0x3e, r29	; 62
    3366:	0f be       	out	0x3f, r0	; 63
    3368:	cd bf       	out	0x3d, r28	; 61
    336a:	cf 91       	pop	r28
    336c:	df 91       	pop	r29
    336e:	08 95       	ret

00003370 <DIO_u8SetPinValue>:
uint8 DIO_u8SetPinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Value )
{
    3370:	df 93       	push	r29
    3372:	cf 93       	push	r28
    3374:	cd b7       	in	r28, 0x3d	; 61
    3376:	de b7       	in	r29, 0x3e	; 62
    3378:	28 97       	sbiw	r28, 0x08	; 8
    337a:	0f b6       	in	r0, 0x3f	; 63
    337c:	f8 94       	cli
    337e:	de bf       	out	0x3e, r29	; 62
    3380:	0f be       	out	0x3f, r0	; 63
    3382:	cd bf       	out	0x3d, r28	; 61
    3384:	8a 83       	std	Y+2, r24	; 0x02
    3386:	6b 83       	std	Y+3, r22	; 0x03
    3388:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
    338a:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <=DIO_u8PIN7)
    338c:	8b 81       	ldd	r24, Y+3	; 0x03
    338e:	88 30       	cpi	r24, 0x08	; 8
    3390:	08 f0       	brcs	.+2      	; 0x3394 <DIO_u8SetPinValue+0x24>
    3392:	f4 c0       	rjmp	.+488    	; 0x357c <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value == DIO_u8PIN_LOW)
    3394:	8c 81       	ldd	r24, Y+4	; 0x04
    3396:	88 23       	and	r24, r24
    3398:	09 f0       	breq	.+2      	; 0x339c <DIO_u8SetPinValue+0x2c>
    339a:	77 c0       	rjmp	.+238    	; 0x348a <DIO_u8SetPinValue+0x11a>
		{
			switch(Copy_u8Port)
    339c:	8a 81       	ldd	r24, Y+2	; 0x02
    339e:	28 2f       	mov	r18, r24
    33a0:	30 e0       	ldi	r19, 0x00	; 0
    33a2:	38 87       	std	Y+8, r19	; 0x08
    33a4:	2f 83       	std	Y+7, r18	; 0x07
    33a6:	8f 81       	ldd	r24, Y+7	; 0x07
    33a8:	98 85       	ldd	r25, Y+8	; 0x08
    33aa:	81 30       	cpi	r24, 0x01	; 1
    33ac:	91 05       	cpc	r25, r1
    33ae:	59 f1       	breq	.+86     	; 0x3406 <DIO_u8SetPinValue+0x96>
    33b0:	2f 81       	ldd	r18, Y+7	; 0x07
    33b2:	38 85       	ldd	r19, Y+8	; 0x08
    33b4:	22 30       	cpi	r18, 0x02	; 2
    33b6:	31 05       	cpc	r19, r1
    33b8:	2c f4       	brge	.+10     	; 0x33c4 <DIO_u8SetPinValue+0x54>
    33ba:	8f 81       	ldd	r24, Y+7	; 0x07
    33bc:	98 85       	ldd	r25, Y+8	; 0x08
    33be:	00 97       	sbiw	r24, 0x00	; 0
    33c0:	69 f0       	breq	.+26     	; 0x33dc <DIO_u8SetPinValue+0x6c>
    33c2:	60 c0       	rjmp	.+192    	; 0x3484 <DIO_u8SetPinValue+0x114>
    33c4:	2f 81       	ldd	r18, Y+7	; 0x07
    33c6:	38 85       	ldd	r19, Y+8	; 0x08
    33c8:	22 30       	cpi	r18, 0x02	; 2
    33ca:	31 05       	cpc	r19, r1
    33cc:	89 f1       	breq	.+98     	; 0x3430 <DIO_u8SetPinValue+0xc0>
    33ce:	8f 81       	ldd	r24, Y+7	; 0x07
    33d0:	98 85       	ldd	r25, Y+8	; 0x08
    33d2:	83 30       	cpi	r24, 0x03	; 3
    33d4:	91 05       	cpc	r25, r1
    33d6:	09 f4       	brne	.+2      	; 0x33da <DIO_u8SetPinValue+0x6a>
    33d8:	40 c0       	rjmp	.+128    	; 0x345a <DIO_u8SetPinValue+0xea>
    33da:	54 c0       	rjmp	.+168    	; 0x3484 <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA : CLR_BIT(PORTA,Copy_u8Pin); break;
    33dc:	ab e3       	ldi	r26, 0x3B	; 59
    33de:	b0 e0       	ldi	r27, 0x00	; 0
    33e0:	eb e3       	ldi	r30, 0x3B	; 59
    33e2:	f0 e0       	ldi	r31, 0x00	; 0
    33e4:	80 81       	ld	r24, Z
    33e6:	48 2f       	mov	r20, r24
    33e8:	8b 81       	ldd	r24, Y+3	; 0x03
    33ea:	28 2f       	mov	r18, r24
    33ec:	30 e0       	ldi	r19, 0x00	; 0
    33ee:	81 e0       	ldi	r24, 0x01	; 1
    33f0:	90 e0       	ldi	r25, 0x00	; 0
    33f2:	02 2e       	mov	r0, r18
    33f4:	02 c0       	rjmp	.+4      	; 0x33fa <DIO_u8SetPinValue+0x8a>
    33f6:	88 0f       	add	r24, r24
    33f8:	99 1f       	adc	r25, r25
    33fa:	0a 94       	dec	r0
    33fc:	e2 f7       	brpl	.-8      	; 0x33f6 <DIO_u8SetPinValue+0x86>
    33fe:	80 95       	com	r24
    3400:	84 23       	and	r24, r20
    3402:	8c 93       	st	X, r24
    3404:	bd c0       	rjmp	.+378    	; 0x3580 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB : CLR_BIT(PORTB,Copy_u8Pin); break;
    3406:	a8 e3       	ldi	r26, 0x38	; 56
    3408:	b0 e0       	ldi	r27, 0x00	; 0
    340a:	e8 e3       	ldi	r30, 0x38	; 56
    340c:	f0 e0       	ldi	r31, 0x00	; 0
    340e:	80 81       	ld	r24, Z
    3410:	48 2f       	mov	r20, r24
    3412:	8b 81       	ldd	r24, Y+3	; 0x03
    3414:	28 2f       	mov	r18, r24
    3416:	30 e0       	ldi	r19, 0x00	; 0
    3418:	81 e0       	ldi	r24, 0x01	; 1
    341a:	90 e0       	ldi	r25, 0x00	; 0
    341c:	02 2e       	mov	r0, r18
    341e:	02 c0       	rjmp	.+4      	; 0x3424 <DIO_u8SetPinValue+0xb4>
    3420:	88 0f       	add	r24, r24
    3422:	99 1f       	adc	r25, r25
    3424:	0a 94       	dec	r0
    3426:	e2 f7       	brpl	.-8      	; 0x3420 <DIO_u8SetPinValue+0xb0>
    3428:	80 95       	com	r24
    342a:	84 23       	and	r24, r20
    342c:	8c 93       	st	X, r24
    342e:	a8 c0       	rjmp	.+336    	; 0x3580 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC : CLR_BIT(PORTC,Copy_u8Pin); break;
    3430:	a5 e3       	ldi	r26, 0x35	; 53
    3432:	b0 e0       	ldi	r27, 0x00	; 0
    3434:	e5 e3       	ldi	r30, 0x35	; 53
    3436:	f0 e0       	ldi	r31, 0x00	; 0
    3438:	80 81       	ld	r24, Z
    343a:	48 2f       	mov	r20, r24
    343c:	8b 81       	ldd	r24, Y+3	; 0x03
    343e:	28 2f       	mov	r18, r24
    3440:	30 e0       	ldi	r19, 0x00	; 0
    3442:	81 e0       	ldi	r24, 0x01	; 1
    3444:	90 e0       	ldi	r25, 0x00	; 0
    3446:	02 2e       	mov	r0, r18
    3448:	02 c0       	rjmp	.+4      	; 0x344e <DIO_u8SetPinValue+0xde>
    344a:	88 0f       	add	r24, r24
    344c:	99 1f       	adc	r25, r25
    344e:	0a 94       	dec	r0
    3450:	e2 f7       	brpl	.-8      	; 0x344a <DIO_u8SetPinValue+0xda>
    3452:	80 95       	com	r24
    3454:	84 23       	and	r24, r20
    3456:	8c 93       	st	X, r24
    3458:	93 c0       	rjmp	.+294    	; 0x3580 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD : CLR_BIT(PORTD,Copy_u8Pin); break;
    345a:	a2 e3       	ldi	r26, 0x32	; 50
    345c:	b0 e0       	ldi	r27, 0x00	; 0
    345e:	e2 e3       	ldi	r30, 0x32	; 50
    3460:	f0 e0       	ldi	r31, 0x00	; 0
    3462:	80 81       	ld	r24, Z
    3464:	48 2f       	mov	r20, r24
    3466:	8b 81       	ldd	r24, Y+3	; 0x03
    3468:	28 2f       	mov	r18, r24
    346a:	30 e0       	ldi	r19, 0x00	; 0
    346c:	81 e0       	ldi	r24, 0x01	; 1
    346e:	90 e0       	ldi	r25, 0x00	; 0
    3470:	02 2e       	mov	r0, r18
    3472:	02 c0       	rjmp	.+4      	; 0x3478 <DIO_u8SetPinValue+0x108>
    3474:	88 0f       	add	r24, r24
    3476:	99 1f       	adc	r25, r25
    3478:	0a 94       	dec	r0
    347a:	e2 f7       	brpl	.-8      	; 0x3474 <DIO_u8SetPinValue+0x104>
    347c:	80 95       	com	r24
    347e:	84 23       	and	r24, r20
    3480:	8c 93       	st	X, r24
    3482:	7e c0       	rjmp	.+252    	; 0x3580 <DIO_u8SetPinValue+0x210>
			default : Local_u8ErrorState = NOK; 		 break;
    3484:	81 e0       	ldi	r24, 0x01	; 1
    3486:	89 83       	std	Y+1, r24	; 0x01
    3488:	7b c0       	rjmp	.+246    	; 0x3580 <DIO_u8SetPinValue+0x210>
			}
		}
		else if(Copy_u8Value == DIO_u8PIN_HIGH)
    348a:	8c 81       	ldd	r24, Y+4	; 0x04
    348c:	81 30       	cpi	r24, 0x01	; 1
    348e:	09 f0       	breq	.+2      	; 0x3492 <DIO_u8SetPinValue+0x122>
    3490:	72 c0       	rjmp	.+228    	; 0x3576 <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
    3492:	8a 81       	ldd	r24, Y+2	; 0x02
    3494:	28 2f       	mov	r18, r24
    3496:	30 e0       	ldi	r19, 0x00	; 0
    3498:	3e 83       	std	Y+6, r19	; 0x06
    349a:	2d 83       	std	Y+5, r18	; 0x05
    349c:	8d 81       	ldd	r24, Y+5	; 0x05
    349e:	9e 81       	ldd	r25, Y+6	; 0x06
    34a0:	81 30       	cpi	r24, 0x01	; 1
    34a2:	91 05       	cpc	r25, r1
    34a4:	49 f1       	breq	.+82     	; 0x34f8 <DIO_u8SetPinValue+0x188>
    34a6:	2d 81       	ldd	r18, Y+5	; 0x05
    34a8:	3e 81       	ldd	r19, Y+6	; 0x06
    34aa:	22 30       	cpi	r18, 0x02	; 2
    34ac:	31 05       	cpc	r19, r1
    34ae:	2c f4       	brge	.+10     	; 0x34ba <DIO_u8SetPinValue+0x14a>
    34b0:	8d 81       	ldd	r24, Y+5	; 0x05
    34b2:	9e 81       	ldd	r25, Y+6	; 0x06
    34b4:	00 97       	sbiw	r24, 0x00	; 0
    34b6:	61 f0       	breq	.+24     	; 0x34d0 <DIO_u8SetPinValue+0x160>
    34b8:	5b c0       	rjmp	.+182    	; 0x3570 <DIO_u8SetPinValue+0x200>
    34ba:	2d 81       	ldd	r18, Y+5	; 0x05
    34bc:	3e 81       	ldd	r19, Y+6	; 0x06
    34be:	22 30       	cpi	r18, 0x02	; 2
    34c0:	31 05       	cpc	r19, r1
    34c2:	71 f1       	breq	.+92     	; 0x3520 <DIO_u8SetPinValue+0x1b0>
    34c4:	8d 81       	ldd	r24, Y+5	; 0x05
    34c6:	9e 81       	ldd	r25, Y+6	; 0x06
    34c8:	83 30       	cpi	r24, 0x03	; 3
    34ca:	91 05       	cpc	r25, r1
    34cc:	e9 f1       	breq	.+122    	; 0x3548 <DIO_u8SetPinValue+0x1d8>
    34ce:	50 c0       	rjmp	.+160    	; 0x3570 <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA : SET_BIT(PORTA,Copy_u8Pin); break;
    34d0:	ab e3       	ldi	r26, 0x3B	; 59
    34d2:	b0 e0       	ldi	r27, 0x00	; 0
    34d4:	eb e3       	ldi	r30, 0x3B	; 59
    34d6:	f0 e0       	ldi	r31, 0x00	; 0
    34d8:	80 81       	ld	r24, Z
    34da:	48 2f       	mov	r20, r24
    34dc:	8b 81       	ldd	r24, Y+3	; 0x03
    34de:	28 2f       	mov	r18, r24
    34e0:	30 e0       	ldi	r19, 0x00	; 0
    34e2:	81 e0       	ldi	r24, 0x01	; 1
    34e4:	90 e0       	ldi	r25, 0x00	; 0
    34e6:	02 2e       	mov	r0, r18
    34e8:	02 c0       	rjmp	.+4      	; 0x34ee <DIO_u8SetPinValue+0x17e>
    34ea:	88 0f       	add	r24, r24
    34ec:	99 1f       	adc	r25, r25
    34ee:	0a 94       	dec	r0
    34f0:	e2 f7       	brpl	.-8      	; 0x34ea <DIO_u8SetPinValue+0x17a>
    34f2:	84 2b       	or	r24, r20
    34f4:	8c 93       	st	X, r24
    34f6:	44 c0       	rjmp	.+136    	; 0x3580 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB : SET_BIT(PORTB,Copy_u8Pin); break;
    34f8:	a8 e3       	ldi	r26, 0x38	; 56
    34fa:	b0 e0       	ldi	r27, 0x00	; 0
    34fc:	e8 e3       	ldi	r30, 0x38	; 56
    34fe:	f0 e0       	ldi	r31, 0x00	; 0
    3500:	80 81       	ld	r24, Z
    3502:	48 2f       	mov	r20, r24
    3504:	8b 81       	ldd	r24, Y+3	; 0x03
    3506:	28 2f       	mov	r18, r24
    3508:	30 e0       	ldi	r19, 0x00	; 0
    350a:	81 e0       	ldi	r24, 0x01	; 1
    350c:	90 e0       	ldi	r25, 0x00	; 0
    350e:	02 2e       	mov	r0, r18
    3510:	02 c0       	rjmp	.+4      	; 0x3516 <DIO_u8SetPinValue+0x1a6>
    3512:	88 0f       	add	r24, r24
    3514:	99 1f       	adc	r25, r25
    3516:	0a 94       	dec	r0
    3518:	e2 f7       	brpl	.-8      	; 0x3512 <DIO_u8SetPinValue+0x1a2>
    351a:	84 2b       	or	r24, r20
    351c:	8c 93       	st	X, r24
    351e:	30 c0       	rjmp	.+96     	; 0x3580 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC : SET_BIT(PORTC,Copy_u8Pin); break;
    3520:	a5 e3       	ldi	r26, 0x35	; 53
    3522:	b0 e0       	ldi	r27, 0x00	; 0
    3524:	e5 e3       	ldi	r30, 0x35	; 53
    3526:	f0 e0       	ldi	r31, 0x00	; 0
    3528:	80 81       	ld	r24, Z
    352a:	48 2f       	mov	r20, r24
    352c:	8b 81       	ldd	r24, Y+3	; 0x03
    352e:	28 2f       	mov	r18, r24
    3530:	30 e0       	ldi	r19, 0x00	; 0
    3532:	81 e0       	ldi	r24, 0x01	; 1
    3534:	90 e0       	ldi	r25, 0x00	; 0
    3536:	02 2e       	mov	r0, r18
    3538:	02 c0       	rjmp	.+4      	; 0x353e <DIO_u8SetPinValue+0x1ce>
    353a:	88 0f       	add	r24, r24
    353c:	99 1f       	adc	r25, r25
    353e:	0a 94       	dec	r0
    3540:	e2 f7       	brpl	.-8      	; 0x353a <DIO_u8SetPinValue+0x1ca>
    3542:	84 2b       	or	r24, r20
    3544:	8c 93       	st	X, r24
    3546:	1c c0       	rjmp	.+56     	; 0x3580 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD : SET_BIT(PORTD,Copy_u8Pin); break;
    3548:	a2 e3       	ldi	r26, 0x32	; 50
    354a:	b0 e0       	ldi	r27, 0x00	; 0
    354c:	e2 e3       	ldi	r30, 0x32	; 50
    354e:	f0 e0       	ldi	r31, 0x00	; 0
    3550:	80 81       	ld	r24, Z
    3552:	48 2f       	mov	r20, r24
    3554:	8b 81       	ldd	r24, Y+3	; 0x03
    3556:	28 2f       	mov	r18, r24
    3558:	30 e0       	ldi	r19, 0x00	; 0
    355a:	81 e0       	ldi	r24, 0x01	; 1
    355c:	90 e0       	ldi	r25, 0x00	; 0
    355e:	02 2e       	mov	r0, r18
    3560:	02 c0       	rjmp	.+4      	; 0x3566 <DIO_u8SetPinValue+0x1f6>
    3562:	88 0f       	add	r24, r24
    3564:	99 1f       	adc	r25, r25
    3566:	0a 94       	dec	r0
    3568:	e2 f7       	brpl	.-8      	; 0x3562 <DIO_u8SetPinValue+0x1f2>
    356a:	84 2b       	or	r24, r20
    356c:	8c 93       	st	X, r24
    356e:	08 c0       	rjmp	.+16     	; 0x3580 <DIO_u8SetPinValue+0x210>
			default : Local_u8ErrorState = NOK; 		 break;
    3570:	81 e0       	ldi	r24, 0x01	; 1
    3572:	89 83       	std	Y+1, r24	; 0x01
    3574:	05 c0       	rjmp	.+10     	; 0x3580 <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState = NOK;
    3576:	81 e0       	ldi	r24, 0x01	; 1
    3578:	89 83       	std	Y+1, r24	; 0x01
    357a:	02 c0       	rjmp	.+4      	; 0x3580 <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		/*Pin number is invalid*/
		Local_u8ErrorState = NOK;
    357c:	81 e0       	ldi	r24, 0x01	; 1
    357e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    3580:	89 81       	ldd	r24, Y+1	; 0x01
}
    3582:	28 96       	adiw	r28, 0x08	; 8
    3584:	0f b6       	in	r0, 0x3f	; 63
    3586:	f8 94       	cli
    3588:	de bf       	out	0x3e, r29	; 62
    358a:	0f be       	out	0x3f, r0	; 63
    358c:	cd bf       	out	0x3d, r28	; 61
    358e:	cf 91       	pop	r28
    3590:	df 91       	pop	r29
    3592:	08 95       	ret

00003594 <DIO_u8ReadPinValue>:
uint8 DIO_u8ReadPinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8* Copy_pu8Value)
{
    3594:	df 93       	push	r29
    3596:	cf 93       	push	r28
    3598:	cd b7       	in	r28, 0x3d	; 61
    359a:	de b7       	in	r29, 0x3e	; 62
    359c:	27 97       	sbiw	r28, 0x07	; 7
    359e:	0f b6       	in	r0, 0x3f	; 63
    35a0:	f8 94       	cli
    35a2:	de bf       	out	0x3e, r29	; 62
    35a4:	0f be       	out	0x3f, r0	; 63
    35a6:	cd bf       	out	0x3d, r28	; 61
    35a8:	8a 83       	std	Y+2, r24	; 0x02
    35aa:	6b 83       	std	Y+3, r22	; 0x03
    35ac:	5d 83       	std	Y+5, r21	; 0x05
    35ae:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
    35b0:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pu8Value != NULL)
    35b2:	8c 81       	ldd	r24, Y+4	; 0x04
    35b4:	9d 81       	ldd	r25, Y+5	; 0x05
    35b6:	00 97       	sbiw	r24, 0x00	; 0
    35b8:	09 f4       	brne	.+2      	; 0x35bc <DIO_u8ReadPinValue+0x28>
    35ba:	7b c0       	rjmp	.+246    	; 0x36b2 <DIO_u8ReadPinValue+0x11e>
	{
		if(Copy_u8Pin <=DIO_u8PIN7)
    35bc:	8b 81       	ldd	r24, Y+3	; 0x03
    35be:	88 30       	cpi	r24, 0x08	; 8
    35c0:	08 f0       	brcs	.+2      	; 0x35c4 <DIO_u8ReadPinValue+0x30>
    35c2:	74 c0       	rjmp	.+232    	; 0x36ac <DIO_u8ReadPinValue+0x118>
		{
			switch(Copy_u8Port)
    35c4:	8a 81       	ldd	r24, Y+2	; 0x02
    35c6:	28 2f       	mov	r18, r24
    35c8:	30 e0       	ldi	r19, 0x00	; 0
    35ca:	3f 83       	std	Y+7, r19	; 0x07
    35cc:	2e 83       	std	Y+6, r18	; 0x06
    35ce:	4e 81       	ldd	r20, Y+6	; 0x06
    35d0:	5f 81       	ldd	r21, Y+7	; 0x07
    35d2:	41 30       	cpi	r20, 0x01	; 1
    35d4:	51 05       	cpc	r21, r1
    35d6:	59 f1       	breq	.+86     	; 0x362e <DIO_u8ReadPinValue+0x9a>
    35d8:	8e 81       	ldd	r24, Y+6	; 0x06
    35da:	9f 81       	ldd	r25, Y+7	; 0x07
    35dc:	82 30       	cpi	r24, 0x02	; 2
    35de:	91 05       	cpc	r25, r1
    35e0:	34 f4       	brge	.+12     	; 0x35ee <DIO_u8ReadPinValue+0x5a>
    35e2:	2e 81       	ldd	r18, Y+6	; 0x06
    35e4:	3f 81       	ldd	r19, Y+7	; 0x07
    35e6:	21 15       	cp	r18, r1
    35e8:	31 05       	cpc	r19, r1
    35ea:	69 f0       	breq	.+26     	; 0x3606 <DIO_u8ReadPinValue+0x72>
    35ec:	5c c0       	rjmp	.+184    	; 0x36a6 <DIO_u8ReadPinValue+0x112>
    35ee:	4e 81       	ldd	r20, Y+6	; 0x06
    35f0:	5f 81       	ldd	r21, Y+7	; 0x07
    35f2:	42 30       	cpi	r20, 0x02	; 2
    35f4:	51 05       	cpc	r21, r1
    35f6:	79 f1       	breq	.+94     	; 0x3656 <DIO_u8ReadPinValue+0xc2>
    35f8:	8e 81       	ldd	r24, Y+6	; 0x06
    35fa:	9f 81       	ldd	r25, Y+7	; 0x07
    35fc:	83 30       	cpi	r24, 0x03	; 3
    35fe:	91 05       	cpc	r25, r1
    3600:	09 f4       	brne	.+2      	; 0x3604 <DIO_u8ReadPinValue+0x70>
    3602:	3d c0       	rjmp	.+122    	; 0x367e <DIO_u8ReadPinValue+0xea>
    3604:	50 c0       	rjmp	.+160    	; 0x36a6 <DIO_u8ReadPinValue+0x112>
			{
			case DIO_u8PORTA :*Copy_pu8Value = GET_BIT(PINA,Copy_u8Pin); break;
    3606:	e9 e3       	ldi	r30, 0x39	; 57
    3608:	f0 e0       	ldi	r31, 0x00	; 0
    360a:	80 81       	ld	r24, Z
    360c:	28 2f       	mov	r18, r24
    360e:	30 e0       	ldi	r19, 0x00	; 0
    3610:	8b 81       	ldd	r24, Y+3	; 0x03
    3612:	88 2f       	mov	r24, r24
    3614:	90 e0       	ldi	r25, 0x00	; 0
    3616:	a9 01       	movw	r20, r18
    3618:	02 c0       	rjmp	.+4      	; 0x361e <DIO_u8ReadPinValue+0x8a>
    361a:	55 95       	asr	r21
    361c:	47 95       	ror	r20
    361e:	8a 95       	dec	r24
    3620:	e2 f7       	brpl	.-8      	; 0x361a <DIO_u8ReadPinValue+0x86>
    3622:	ca 01       	movw	r24, r20
    3624:	81 70       	andi	r24, 0x01	; 1
    3626:	ec 81       	ldd	r30, Y+4	; 0x04
    3628:	fd 81       	ldd	r31, Y+5	; 0x05
    362a:	80 83       	st	Z, r24
    362c:	44 c0       	rjmp	.+136    	; 0x36b6 <DIO_u8ReadPinValue+0x122>
			case DIO_u8PORTB :*Copy_pu8Value = GET_BIT(PINB,Copy_u8Pin); break;
    362e:	e6 e3       	ldi	r30, 0x36	; 54
    3630:	f0 e0       	ldi	r31, 0x00	; 0
    3632:	80 81       	ld	r24, Z
    3634:	28 2f       	mov	r18, r24
    3636:	30 e0       	ldi	r19, 0x00	; 0
    3638:	8b 81       	ldd	r24, Y+3	; 0x03
    363a:	88 2f       	mov	r24, r24
    363c:	90 e0       	ldi	r25, 0x00	; 0
    363e:	a9 01       	movw	r20, r18
    3640:	02 c0       	rjmp	.+4      	; 0x3646 <DIO_u8ReadPinValue+0xb2>
    3642:	55 95       	asr	r21
    3644:	47 95       	ror	r20
    3646:	8a 95       	dec	r24
    3648:	e2 f7       	brpl	.-8      	; 0x3642 <DIO_u8ReadPinValue+0xae>
    364a:	ca 01       	movw	r24, r20
    364c:	81 70       	andi	r24, 0x01	; 1
    364e:	ec 81       	ldd	r30, Y+4	; 0x04
    3650:	fd 81       	ldd	r31, Y+5	; 0x05
    3652:	80 83       	st	Z, r24
    3654:	30 c0       	rjmp	.+96     	; 0x36b6 <DIO_u8ReadPinValue+0x122>
			case DIO_u8PORTC :*Copy_pu8Value = GET_BIT(PINC,Copy_u8Pin); break;
    3656:	e3 e3       	ldi	r30, 0x33	; 51
    3658:	f0 e0       	ldi	r31, 0x00	; 0
    365a:	80 81       	ld	r24, Z
    365c:	28 2f       	mov	r18, r24
    365e:	30 e0       	ldi	r19, 0x00	; 0
    3660:	8b 81       	ldd	r24, Y+3	; 0x03
    3662:	88 2f       	mov	r24, r24
    3664:	90 e0       	ldi	r25, 0x00	; 0
    3666:	a9 01       	movw	r20, r18
    3668:	02 c0       	rjmp	.+4      	; 0x366e <DIO_u8ReadPinValue+0xda>
    366a:	55 95       	asr	r21
    366c:	47 95       	ror	r20
    366e:	8a 95       	dec	r24
    3670:	e2 f7       	brpl	.-8      	; 0x366a <DIO_u8ReadPinValue+0xd6>
    3672:	ca 01       	movw	r24, r20
    3674:	81 70       	andi	r24, 0x01	; 1
    3676:	ec 81       	ldd	r30, Y+4	; 0x04
    3678:	fd 81       	ldd	r31, Y+5	; 0x05
    367a:	80 83       	st	Z, r24
    367c:	1c c0       	rjmp	.+56     	; 0x36b6 <DIO_u8ReadPinValue+0x122>
			case DIO_u8PORTD :*Copy_pu8Value = GET_BIT(PIND,Copy_u8Pin); break;
    367e:	e0 e3       	ldi	r30, 0x30	; 48
    3680:	f0 e0       	ldi	r31, 0x00	; 0
    3682:	80 81       	ld	r24, Z
    3684:	28 2f       	mov	r18, r24
    3686:	30 e0       	ldi	r19, 0x00	; 0
    3688:	8b 81       	ldd	r24, Y+3	; 0x03
    368a:	88 2f       	mov	r24, r24
    368c:	90 e0       	ldi	r25, 0x00	; 0
    368e:	a9 01       	movw	r20, r18
    3690:	02 c0       	rjmp	.+4      	; 0x3696 <DIO_u8ReadPinValue+0x102>
    3692:	55 95       	asr	r21
    3694:	47 95       	ror	r20
    3696:	8a 95       	dec	r24
    3698:	e2 f7       	brpl	.-8      	; 0x3692 <DIO_u8ReadPinValue+0xfe>
    369a:	ca 01       	movw	r24, r20
    369c:	81 70       	andi	r24, 0x01	; 1
    369e:	ec 81       	ldd	r30, Y+4	; 0x04
    36a0:	fd 81       	ldd	r31, Y+5	; 0x05
    36a2:	80 83       	st	Z, r24
    36a4:	08 c0       	rjmp	.+16     	; 0x36b6 <DIO_u8ReadPinValue+0x122>
			default : Local_u8ErrorState = NOK; 		 break;
    36a6:	81 e0       	ldi	r24, 0x01	; 1
    36a8:	89 83       	std	Y+1, r24	; 0x01
    36aa:	05 c0       	rjmp	.+10     	; 0x36b6 <DIO_u8ReadPinValue+0x122>
			}
		}
		else
		{
			/*Pin number is invalid*/
			Local_u8ErrorState = NOK;
    36ac:	81 e0       	ldi	r24, 0x01	; 1
    36ae:	89 83       	std	Y+1, r24	; 0x01
    36b0:	02 c0       	rjmp	.+4      	; 0x36b6 <DIO_u8ReadPinValue+0x122>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    36b2:	82 e0       	ldi	r24, 0x02	; 2
    36b4:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    36b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    36b8:	27 96       	adiw	r28, 0x07	; 7
    36ba:	0f b6       	in	r0, 0x3f	; 63
    36bc:	f8 94       	cli
    36be:	de bf       	out	0x3e, r29	; 62
    36c0:	0f be       	out	0x3f, r0	; 63
    36c2:	cd bf       	out	0x3d, r28	; 61
    36c4:	cf 91       	pop	r28
    36c6:	df 91       	pop	r29
    36c8:	08 95       	ret

000036ca <DIO_u8SetPortDirection>:


uint8 DIO_u8SetPortDirection(uint8 Copy_u8Port, uint8 Copy_u8Direction )
{
    36ca:	df 93       	push	r29
    36cc:	cf 93       	push	r28
    36ce:	00 d0       	rcall	.+0      	; 0x36d0 <DIO_u8SetPortDirection+0x6>
    36d0:	00 d0       	rcall	.+0      	; 0x36d2 <DIO_u8SetPortDirection+0x8>
    36d2:	0f 92       	push	r0
    36d4:	cd b7       	in	r28, 0x3d	; 61
    36d6:	de b7       	in	r29, 0x3e	; 62
    36d8:	8a 83       	std	Y+2, r24	; 0x02
    36da:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    36dc:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
    36de:	8a 81       	ldd	r24, Y+2	; 0x02
    36e0:	28 2f       	mov	r18, r24
    36e2:	30 e0       	ldi	r19, 0x00	; 0
    36e4:	3d 83       	std	Y+5, r19	; 0x05
    36e6:	2c 83       	std	Y+4, r18	; 0x04
    36e8:	8c 81       	ldd	r24, Y+4	; 0x04
    36ea:	9d 81       	ldd	r25, Y+5	; 0x05
    36ec:	81 30       	cpi	r24, 0x01	; 1
    36ee:	91 05       	cpc	r25, r1
    36f0:	d1 f0       	breq	.+52     	; 0x3726 <DIO_u8SetPortDirection+0x5c>
    36f2:	2c 81       	ldd	r18, Y+4	; 0x04
    36f4:	3d 81       	ldd	r19, Y+5	; 0x05
    36f6:	22 30       	cpi	r18, 0x02	; 2
    36f8:	31 05       	cpc	r19, r1
    36fa:	2c f4       	brge	.+10     	; 0x3706 <DIO_u8SetPortDirection+0x3c>
    36fc:	8c 81       	ldd	r24, Y+4	; 0x04
    36fe:	9d 81       	ldd	r25, Y+5	; 0x05
    3700:	00 97       	sbiw	r24, 0x00	; 0
    3702:	61 f0       	breq	.+24     	; 0x371c <DIO_u8SetPortDirection+0x52>
    3704:	1f c0       	rjmp	.+62     	; 0x3744 <DIO_u8SetPortDirection+0x7a>
    3706:	2c 81       	ldd	r18, Y+4	; 0x04
    3708:	3d 81       	ldd	r19, Y+5	; 0x05
    370a:	22 30       	cpi	r18, 0x02	; 2
    370c:	31 05       	cpc	r19, r1
    370e:	81 f0       	breq	.+32     	; 0x3730 <DIO_u8SetPortDirection+0x66>
    3710:	8c 81       	ldd	r24, Y+4	; 0x04
    3712:	9d 81       	ldd	r25, Y+5	; 0x05
    3714:	83 30       	cpi	r24, 0x03	; 3
    3716:	91 05       	cpc	r25, r1
    3718:	81 f0       	breq	.+32     	; 0x373a <DIO_u8SetPortDirection+0x70>
    371a:	14 c0       	rjmp	.+40     	; 0x3744 <DIO_u8SetPortDirection+0x7a>
	{
	case DIO_u8PORTA : DDRA = Copy_u8Direction; break;
    371c:	ea e3       	ldi	r30, 0x3A	; 58
    371e:	f0 e0       	ldi	r31, 0x00	; 0
    3720:	8b 81       	ldd	r24, Y+3	; 0x03
    3722:	80 83       	st	Z, r24
    3724:	11 c0       	rjmp	.+34     	; 0x3748 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTB : DDRB = Copy_u8Direction; break;
    3726:	e7 e3       	ldi	r30, 0x37	; 55
    3728:	f0 e0       	ldi	r31, 0x00	; 0
    372a:	8b 81       	ldd	r24, Y+3	; 0x03
    372c:	80 83       	st	Z, r24
    372e:	0c c0       	rjmp	.+24     	; 0x3748 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTC : DDRC = Copy_u8Direction; break;
    3730:	e4 e3       	ldi	r30, 0x34	; 52
    3732:	f0 e0       	ldi	r31, 0x00	; 0
    3734:	8b 81       	ldd	r24, Y+3	; 0x03
    3736:	80 83       	st	Z, r24
    3738:	07 c0       	rjmp	.+14     	; 0x3748 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTD : DDRD = Copy_u8Direction; break;
    373a:	e1 e3       	ldi	r30, 0x31	; 49
    373c:	f0 e0       	ldi	r31, 0x00	; 0
    373e:	8b 81       	ldd	r24, Y+3	; 0x03
    3740:	80 83       	st	Z, r24
    3742:	02 c0       	rjmp	.+4      	; 0x3748 <DIO_u8SetPortDirection+0x7e>
	default : Local_u8ErrorState = NOK; 		break;
    3744:	81 e0       	ldi	r24, 0x01	; 1
    3746:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    3748:	89 81       	ldd	r24, Y+1	; 0x01
}
    374a:	0f 90       	pop	r0
    374c:	0f 90       	pop	r0
    374e:	0f 90       	pop	r0
    3750:	0f 90       	pop	r0
    3752:	0f 90       	pop	r0
    3754:	cf 91       	pop	r28
    3756:	df 91       	pop	r29
    3758:	08 95       	ret

0000375a <DIO_u8SetPortValue>:

uint8 DIO_u8SetPortValue(uint8 Copy_u8Port, uint8 Copy_u8Value )
{
    375a:	df 93       	push	r29
    375c:	cf 93       	push	r28
    375e:	00 d0       	rcall	.+0      	; 0x3760 <DIO_u8SetPortValue+0x6>
    3760:	00 d0       	rcall	.+0      	; 0x3762 <DIO_u8SetPortValue+0x8>
    3762:	0f 92       	push	r0
    3764:	cd b7       	in	r28, 0x3d	; 61
    3766:	de b7       	in	r29, 0x3e	; 62
    3768:	8a 83       	std	Y+2, r24	; 0x02
    376a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    376c:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    376e:	8a 81       	ldd	r24, Y+2	; 0x02
    3770:	28 2f       	mov	r18, r24
    3772:	30 e0       	ldi	r19, 0x00	; 0
    3774:	3d 83       	std	Y+5, r19	; 0x05
    3776:	2c 83       	std	Y+4, r18	; 0x04
    3778:	8c 81       	ldd	r24, Y+4	; 0x04
    377a:	9d 81       	ldd	r25, Y+5	; 0x05
    377c:	81 30       	cpi	r24, 0x01	; 1
    377e:	91 05       	cpc	r25, r1
    3780:	d1 f0       	breq	.+52     	; 0x37b6 <DIO_u8SetPortValue+0x5c>
    3782:	2c 81       	ldd	r18, Y+4	; 0x04
    3784:	3d 81       	ldd	r19, Y+5	; 0x05
    3786:	22 30       	cpi	r18, 0x02	; 2
    3788:	31 05       	cpc	r19, r1
    378a:	2c f4       	brge	.+10     	; 0x3796 <DIO_u8SetPortValue+0x3c>
    378c:	8c 81       	ldd	r24, Y+4	; 0x04
    378e:	9d 81       	ldd	r25, Y+5	; 0x05
    3790:	00 97       	sbiw	r24, 0x00	; 0
    3792:	61 f0       	breq	.+24     	; 0x37ac <DIO_u8SetPortValue+0x52>
    3794:	1f c0       	rjmp	.+62     	; 0x37d4 <DIO_u8SetPortValue+0x7a>
    3796:	2c 81       	ldd	r18, Y+4	; 0x04
    3798:	3d 81       	ldd	r19, Y+5	; 0x05
    379a:	22 30       	cpi	r18, 0x02	; 2
    379c:	31 05       	cpc	r19, r1
    379e:	81 f0       	breq	.+32     	; 0x37c0 <DIO_u8SetPortValue+0x66>
    37a0:	8c 81       	ldd	r24, Y+4	; 0x04
    37a2:	9d 81       	ldd	r25, Y+5	; 0x05
    37a4:	83 30       	cpi	r24, 0x03	; 3
    37a6:	91 05       	cpc	r25, r1
    37a8:	81 f0       	breq	.+32     	; 0x37ca <DIO_u8SetPortValue+0x70>
    37aa:	14 c0       	rjmp	.+40     	; 0x37d4 <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA : PORTA = Copy_u8Value; break;
    37ac:	eb e3       	ldi	r30, 0x3B	; 59
    37ae:	f0 e0       	ldi	r31, 0x00	; 0
    37b0:	8b 81       	ldd	r24, Y+3	; 0x03
    37b2:	80 83       	st	Z, r24
    37b4:	11 c0       	rjmp	.+34     	; 0x37d8 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB : PORTB = Copy_u8Value; break;
    37b6:	e8 e3       	ldi	r30, 0x38	; 56
    37b8:	f0 e0       	ldi	r31, 0x00	; 0
    37ba:	8b 81       	ldd	r24, Y+3	; 0x03
    37bc:	80 83       	st	Z, r24
    37be:	0c c0       	rjmp	.+24     	; 0x37d8 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC : PORTC = Copy_u8Value; break;
    37c0:	e5 e3       	ldi	r30, 0x35	; 53
    37c2:	f0 e0       	ldi	r31, 0x00	; 0
    37c4:	8b 81       	ldd	r24, Y+3	; 0x03
    37c6:	80 83       	st	Z, r24
    37c8:	07 c0       	rjmp	.+14     	; 0x37d8 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD : PORTD = Copy_u8Value; break;
    37ca:	e2 e3       	ldi	r30, 0x32	; 50
    37cc:	f0 e0       	ldi	r31, 0x00	; 0
    37ce:	8b 81       	ldd	r24, Y+3	; 0x03
    37d0:	80 83       	st	Z, r24
    37d2:	02 c0       	rjmp	.+4      	; 0x37d8 <DIO_u8SetPortValue+0x7e>
	default : Local_u8ErrorState = NOK; 	 break;
    37d4:	81 e0       	ldi	r24, 0x01	; 1
    37d6:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    37d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    37da:	0f 90       	pop	r0
    37dc:	0f 90       	pop	r0
    37de:	0f 90       	pop	r0
    37e0:	0f 90       	pop	r0
    37e2:	0f 90       	pop	r0
    37e4:	cf 91       	pop	r28
    37e6:	df 91       	pop	r29
    37e8:	08 95       	ret

000037ea <DIO_u8TogglePinValue>:

uint8 DIO_u8TogglePinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin)
{
    37ea:	df 93       	push	r29
    37ec:	cf 93       	push	r28
    37ee:	00 d0       	rcall	.+0      	; 0x37f0 <DIO_u8TogglePinValue+0x6>
    37f0:	00 d0       	rcall	.+0      	; 0x37f2 <DIO_u8TogglePinValue+0x8>
    37f2:	0f 92       	push	r0
    37f4:	cd b7       	in	r28, 0x3d	; 61
    37f6:	de b7       	in	r29, 0x3e	; 62
    37f8:	8a 83       	std	Y+2, r24	; 0x02
    37fa:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    37fc:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <=DIO_u8PIN7)
    37fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3800:	88 30       	cpi	r24, 0x08	; 8
    3802:	08 f0       	brcs	.+2      	; 0x3806 <DIO_u8TogglePinValue+0x1c>
    3804:	72 c0       	rjmp	.+228    	; 0x38ea <DIO_u8TogglePinValue+0x100>
	{
		switch(Copy_u8Port)
    3806:	8a 81       	ldd	r24, Y+2	; 0x02
    3808:	28 2f       	mov	r18, r24
    380a:	30 e0       	ldi	r19, 0x00	; 0
    380c:	3d 83       	std	Y+5, r19	; 0x05
    380e:	2c 83       	std	Y+4, r18	; 0x04
    3810:	8c 81       	ldd	r24, Y+4	; 0x04
    3812:	9d 81       	ldd	r25, Y+5	; 0x05
    3814:	81 30       	cpi	r24, 0x01	; 1
    3816:	91 05       	cpc	r25, r1
    3818:	49 f1       	breq	.+82     	; 0x386c <DIO_u8TogglePinValue+0x82>
    381a:	2c 81       	ldd	r18, Y+4	; 0x04
    381c:	3d 81       	ldd	r19, Y+5	; 0x05
    381e:	22 30       	cpi	r18, 0x02	; 2
    3820:	31 05       	cpc	r19, r1
    3822:	2c f4       	brge	.+10     	; 0x382e <DIO_u8TogglePinValue+0x44>
    3824:	8c 81       	ldd	r24, Y+4	; 0x04
    3826:	9d 81       	ldd	r25, Y+5	; 0x05
    3828:	00 97       	sbiw	r24, 0x00	; 0
    382a:	61 f0       	breq	.+24     	; 0x3844 <DIO_u8TogglePinValue+0x5a>
    382c:	5b c0       	rjmp	.+182    	; 0x38e4 <DIO_u8TogglePinValue+0xfa>
    382e:	2c 81       	ldd	r18, Y+4	; 0x04
    3830:	3d 81       	ldd	r19, Y+5	; 0x05
    3832:	22 30       	cpi	r18, 0x02	; 2
    3834:	31 05       	cpc	r19, r1
    3836:	71 f1       	breq	.+92     	; 0x3894 <DIO_u8TogglePinValue+0xaa>
    3838:	8c 81       	ldd	r24, Y+4	; 0x04
    383a:	9d 81       	ldd	r25, Y+5	; 0x05
    383c:	83 30       	cpi	r24, 0x03	; 3
    383e:	91 05       	cpc	r25, r1
    3840:	e9 f1       	breq	.+122    	; 0x38bc <DIO_u8TogglePinValue+0xd2>
    3842:	50 c0       	rjmp	.+160    	; 0x38e4 <DIO_u8TogglePinValue+0xfa>
		{
		case DIO_u8PORTA : TOG_BIT(PORTA,Copy_u8Pin); break;
    3844:	ab e3       	ldi	r26, 0x3B	; 59
    3846:	b0 e0       	ldi	r27, 0x00	; 0
    3848:	eb e3       	ldi	r30, 0x3B	; 59
    384a:	f0 e0       	ldi	r31, 0x00	; 0
    384c:	80 81       	ld	r24, Z
    384e:	48 2f       	mov	r20, r24
    3850:	8b 81       	ldd	r24, Y+3	; 0x03
    3852:	28 2f       	mov	r18, r24
    3854:	30 e0       	ldi	r19, 0x00	; 0
    3856:	81 e0       	ldi	r24, 0x01	; 1
    3858:	90 e0       	ldi	r25, 0x00	; 0
    385a:	02 2e       	mov	r0, r18
    385c:	02 c0       	rjmp	.+4      	; 0x3862 <DIO_u8TogglePinValue+0x78>
    385e:	88 0f       	add	r24, r24
    3860:	99 1f       	adc	r25, r25
    3862:	0a 94       	dec	r0
    3864:	e2 f7       	brpl	.-8      	; 0x385e <DIO_u8TogglePinValue+0x74>
    3866:	84 27       	eor	r24, r20
    3868:	8c 93       	st	X, r24
    386a:	41 c0       	rjmp	.+130    	; 0x38ee <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTB : TOG_BIT(PORTB,Copy_u8Pin); break;
    386c:	a8 e3       	ldi	r26, 0x38	; 56
    386e:	b0 e0       	ldi	r27, 0x00	; 0
    3870:	e8 e3       	ldi	r30, 0x38	; 56
    3872:	f0 e0       	ldi	r31, 0x00	; 0
    3874:	80 81       	ld	r24, Z
    3876:	48 2f       	mov	r20, r24
    3878:	8b 81       	ldd	r24, Y+3	; 0x03
    387a:	28 2f       	mov	r18, r24
    387c:	30 e0       	ldi	r19, 0x00	; 0
    387e:	81 e0       	ldi	r24, 0x01	; 1
    3880:	90 e0       	ldi	r25, 0x00	; 0
    3882:	02 2e       	mov	r0, r18
    3884:	02 c0       	rjmp	.+4      	; 0x388a <DIO_u8TogglePinValue+0xa0>
    3886:	88 0f       	add	r24, r24
    3888:	99 1f       	adc	r25, r25
    388a:	0a 94       	dec	r0
    388c:	e2 f7       	brpl	.-8      	; 0x3886 <DIO_u8TogglePinValue+0x9c>
    388e:	84 27       	eor	r24, r20
    3890:	8c 93       	st	X, r24
    3892:	2d c0       	rjmp	.+90     	; 0x38ee <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTC : TOG_BIT(PORTC,Copy_u8Pin); break;
    3894:	a5 e3       	ldi	r26, 0x35	; 53
    3896:	b0 e0       	ldi	r27, 0x00	; 0
    3898:	e5 e3       	ldi	r30, 0x35	; 53
    389a:	f0 e0       	ldi	r31, 0x00	; 0
    389c:	80 81       	ld	r24, Z
    389e:	48 2f       	mov	r20, r24
    38a0:	8b 81       	ldd	r24, Y+3	; 0x03
    38a2:	28 2f       	mov	r18, r24
    38a4:	30 e0       	ldi	r19, 0x00	; 0
    38a6:	81 e0       	ldi	r24, 0x01	; 1
    38a8:	90 e0       	ldi	r25, 0x00	; 0
    38aa:	02 2e       	mov	r0, r18
    38ac:	02 c0       	rjmp	.+4      	; 0x38b2 <DIO_u8TogglePinValue+0xc8>
    38ae:	88 0f       	add	r24, r24
    38b0:	99 1f       	adc	r25, r25
    38b2:	0a 94       	dec	r0
    38b4:	e2 f7       	brpl	.-8      	; 0x38ae <DIO_u8TogglePinValue+0xc4>
    38b6:	84 27       	eor	r24, r20
    38b8:	8c 93       	st	X, r24
    38ba:	19 c0       	rjmp	.+50     	; 0x38ee <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTD : TOG_BIT(PORTD,Copy_u8Pin); break;
    38bc:	a2 e3       	ldi	r26, 0x32	; 50
    38be:	b0 e0       	ldi	r27, 0x00	; 0
    38c0:	e2 e3       	ldi	r30, 0x32	; 50
    38c2:	f0 e0       	ldi	r31, 0x00	; 0
    38c4:	80 81       	ld	r24, Z
    38c6:	48 2f       	mov	r20, r24
    38c8:	8b 81       	ldd	r24, Y+3	; 0x03
    38ca:	28 2f       	mov	r18, r24
    38cc:	30 e0       	ldi	r19, 0x00	; 0
    38ce:	81 e0       	ldi	r24, 0x01	; 1
    38d0:	90 e0       	ldi	r25, 0x00	; 0
    38d2:	02 2e       	mov	r0, r18
    38d4:	02 c0       	rjmp	.+4      	; 0x38da <DIO_u8TogglePinValue+0xf0>
    38d6:	88 0f       	add	r24, r24
    38d8:	99 1f       	adc	r25, r25
    38da:	0a 94       	dec	r0
    38dc:	e2 f7       	brpl	.-8      	; 0x38d6 <DIO_u8TogglePinValue+0xec>
    38de:	84 27       	eor	r24, r20
    38e0:	8c 93       	st	X, r24
    38e2:	05 c0       	rjmp	.+10     	; 0x38ee <DIO_u8TogglePinValue+0x104>
		default : Local_u8ErrorState = NOK; 		 break;
    38e4:	81 e0       	ldi	r24, 0x01	; 1
    38e6:	89 83       	std	Y+1, r24	; 0x01
    38e8:	02 c0       	rjmp	.+4      	; 0x38ee <DIO_u8TogglePinValue+0x104>
		}
	}
	else
	{
		/*Pin number is invalid*/
		Local_u8ErrorState = NOK;
    38ea:	81 e0       	ldi	r24, 0x01	; 1
    38ec:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
    38ee:	89 81       	ldd	r24, Y+1	; 0x01
}
    38f0:	0f 90       	pop	r0
    38f2:	0f 90       	pop	r0
    38f4:	0f 90       	pop	r0
    38f6:	0f 90       	pop	r0
    38f8:	0f 90       	pop	r0
    38fa:	cf 91       	pop	r28
    38fc:	df 91       	pop	r29
    38fe:	08 95       	ret

00003900 <EXTI_voidInit>:
#include "EXTI_cfg.h"

static void(*EXTI_pvCallBack[3])(void)={0};

void EXTI_voidInit(void)
{
    3900:	df 93       	push	r29
    3902:	cf 93       	push	r28
    3904:	cd b7       	in	r28, 0x3d	; 61
    3906:	de b7       	in	r29, 0x3e	; 62
#elif INT0_SENSE_CTRL == EXTI_FALLING_EDGE
	CLR_BIT(MCUCR,MCUCR_ISC00);
	SET_BIT(MCUCR,MCUCR_ISC01);

#elif INT0_SENSE_CTRL == EXTI_RISING_EDGE
	SET_BIT(MCUCR,MCUCR_ISC00);
    3908:	a5 e5       	ldi	r26, 0x55	; 85
    390a:	b0 e0       	ldi	r27, 0x00	; 0
    390c:	e5 e5       	ldi	r30, 0x55	; 85
    390e:	f0 e0       	ldi	r31, 0x00	; 0
    3910:	80 81       	ld	r24, Z
    3912:	81 60       	ori	r24, 0x01	; 1
    3914:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC01);
    3916:	a5 e5       	ldi	r26, 0x55	; 85
    3918:	b0 e0       	ldi	r27, 0x00	; 0
    391a:	e5 e5       	ldi	r30, 0x55	; 85
    391c:	f0 e0       	ldi	r31, 0x00	; 0
    391e:	80 81       	ld	r24, Z
    3920:	82 60       	ori	r24, 0x02	; 2
    3922:	8c 93       	st	X, r24
#elif INT1_SENSE_CTRL == EXTI_ON_CHANGE
	SET_BIT(MCUCR,MCUCR_ISC10);
	CLR_BIT(MCUCR,MCUCR_ISC11);

#elif INT1_SENSE_CTRL == EXTI_FALLING_EDGE
	CLR_BIT(MCUCR,MCUCR_ISC10);
    3924:	a5 e5       	ldi	r26, 0x55	; 85
    3926:	b0 e0       	ldi	r27, 0x00	; 0
    3928:	e5 e5       	ldi	r30, 0x55	; 85
    392a:	f0 e0       	ldi	r31, 0x00	; 0
    392c:	80 81       	ld	r24, Z
    392e:	8b 7f       	andi	r24, 0xFB	; 251
    3930:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC11);
    3932:	a5 e5       	ldi	r26, 0x55	; 85
    3934:	b0 e0       	ldi	r27, 0x00	; 0
    3936:	e5 e5       	ldi	r30, 0x55	; 85
    3938:	f0 e0       	ldi	r31, 0x00	; 0
    393a:	80 81       	ld	r24, Z
    393c:	88 60       	ori	r24, 0x08	; 8
    393e:	8c 93       	st	X, r24
#endif



#if INT2_SENSE_CTRL == EXTI_FALLING_EDGE
	CLR_BIT(MCUCSR,MCUCSR_ISC2);
    3940:	a4 e5       	ldi	r26, 0x54	; 84
    3942:	b0 e0       	ldi	r27, 0x00	; 0
    3944:	e4 e5       	ldi	r30, 0x54	; 84
    3946:	f0 e0       	ldi	r31, 0x00	; 0
    3948:	80 81       	ld	r24, Z
    394a:	8f 7b       	andi	r24, 0xBF	; 191
    394c:	8c 93       	st	X, r24
#endif

#if INT0_INIT_STATE == DISABLED
	CLR_BIT(GICR,GICR_INT0);
#elif INT0_INIT_STATE == ENABLED
	SET_BIT(GICR,GICR_INT0);
    394e:	ab e5       	ldi	r26, 0x5B	; 91
    3950:	b0 e0       	ldi	r27, 0x00	; 0
    3952:	eb e5       	ldi	r30, 0x5B	; 91
    3954:	f0 e0       	ldi	r31, 0x00	; 0
    3956:	80 81       	ld	r24, Z
    3958:	80 64       	ori	r24, 0x40	; 64
    395a:	8c 93       	st	X, r24
#error Wrong INT0_INIT_STATE configuration option

#endif

#if INT1_INIT_STATE == DISABLED
	CLR_BIT(GICR,GICR_INT1);
    395c:	ab e5       	ldi	r26, 0x5B	; 91
    395e:	b0 e0       	ldi	r27, 0x00	; 0
    3960:	eb e5       	ldi	r30, 0x5B	; 91
    3962:	f0 e0       	ldi	r31, 0x00	; 0
    3964:	80 81       	ld	r24, Z
    3966:	8f 77       	andi	r24, 0x7F	; 127
    3968:	8c 93       	st	X, r24
#endif

#if INT2_INIT_STATE == DISABLED
	CLR_BIT(GICR,GICR_INT2);
#elif INT2_INIT_STATE == ENABLED
	SET_BIT(GICR,GICR_INT2);
    396a:	ab e5       	ldi	r26, 0x5B	; 91
    396c:	b0 e0       	ldi	r27, 0x00	; 0
    396e:	eb e5       	ldi	r30, 0x5B	; 91
    3970:	f0 e0       	ldi	r31, 0x00	; 0
    3972:	80 81       	ld	r24, Z
    3974:	80 62       	ori	r24, 0x20	; 32
    3976:	8c 93       	st	X, r24
#else
#error Wrong INT2_INIT_STATE configuration option

#endif

}
    3978:	cf 91       	pop	r28
    397a:	df 91       	pop	r29
    397c:	08 95       	ret

0000397e <EXTI_u8setSenseCtrl>:

uint8 EXTI_u8setSenseCtrl(IntChannel_t Copy_IntCh, SenseCtrl_t Copy_SenseCtrl)
{
    397e:	df 93       	push	r29
    3980:	cf 93       	push	r28
    3982:	cd b7       	in	r28, 0x3d	; 61
    3984:	de b7       	in	r29, 0x3e	; 62
    3986:	29 97       	sbiw	r28, 0x09	; 9
    3988:	0f b6       	in	r0, 0x3f	; 63
    398a:	f8 94       	cli
    398c:	de bf       	out	0x3e, r29	; 62
    398e:	0f be       	out	0x3f, r0	; 63
    3990:	cd bf       	out	0x3d, r28	; 61
    3992:	8a 83       	std	Y+2, r24	; 0x02
    3994:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState=OK;
    3996:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_IntCh == INT0)
    3998:	8a 81       	ldd	r24, Y+2	; 0x02
    399a:	88 23       	and	r24, r24
    399c:	09 f0       	breq	.+2      	; 0x39a0 <EXTI_u8setSenseCtrl+0x22>
    399e:	5e c0       	rjmp	.+188    	; 0x3a5c <EXTI_u8setSenseCtrl+0xde>
	{
		switch(Copy_SenseCtrl)
    39a0:	8b 81       	ldd	r24, Y+3	; 0x03
    39a2:	28 2f       	mov	r18, r24
    39a4:	30 e0       	ldi	r19, 0x00	; 0
    39a6:	39 87       	std	Y+9, r19	; 0x09
    39a8:	28 87       	std	Y+8, r18	; 0x08
    39aa:	88 85       	ldd	r24, Y+8	; 0x08
    39ac:	99 85       	ldd	r25, Y+9	; 0x09
    39ae:	81 30       	cpi	r24, 0x01	; 1
    39b0:	91 05       	cpc	r25, r1
    39b2:	21 f1       	breq	.+72     	; 0x39fc <EXTI_u8setSenseCtrl+0x7e>
    39b4:	28 85       	ldd	r18, Y+8	; 0x08
    39b6:	39 85       	ldd	r19, Y+9	; 0x09
    39b8:	22 30       	cpi	r18, 0x02	; 2
    39ba:	31 05       	cpc	r19, r1
    39bc:	2c f4       	brge	.+10     	; 0x39c8 <EXTI_u8setSenseCtrl+0x4a>
    39be:	88 85       	ldd	r24, Y+8	; 0x08
    39c0:	99 85       	ldd	r25, Y+9	; 0x09
    39c2:	00 97       	sbiw	r24, 0x00	; 0
    39c4:	61 f0       	breq	.+24     	; 0x39de <EXTI_u8setSenseCtrl+0x60>
    39c6:	47 c0       	rjmp	.+142    	; 0x3a56 <EXTI_u8setSenseCtrl+0xd8>
    39c8:	28 85       	ldd	r18, Y+8	; 0x08
    39ca:	39 85       	ldd	r19, Y+9	; 0x09
    39cc:	22 30       	cpi	r18, 0x02	; 2
    39ce:	31 05       	cpc	r19, r1
    39d0:	21 f1       	breq	.+72     	; 0x3a1a <EXTI_u8setSenseCtrl+0x9c>
    39d2:	88 85       	ldd	r24, Y+8	; 0x08
    39d4:	99 85       	ldd	r25, Y+9	; 0x09
    39d6:	83 30       	cpi	r24, 0x03	; 3
    39d8:	91 05       	cpc	r25, r1
    39da:	71 f1       	breq	.+92     	; 0x3a38 <EXTI_u8setSenseCtrl+0xba>
    39dc:	3c c0       	rjmp	.+120    	; 0x3a56 <EXTI_u8setSenseCtrl+0xd8>
		{
		case LOW_LEVEL:
			CLR_BIT(MCUCR,MCUCR_ISC00); CLR_BIT(MCUCR,MCUCR_ISC01); break;
    39de:	a5 e5       	ldi	r26, 0x55	; 85
    39e0:	b0 e0       	ldi	r27, 0x00	; 0
    39e2:	e5 e5       	ldi	r30, 0x55	; 85
    39e4:	f0 e0       	ldi	r31, 0x00	; 0
    39e6:	80 81       	ld	r24, Z
    39e8:	8e 7f       	andi	r24, 0xFE	; 254
    39ea:	8c 93       	st	X, r24
    39ec:	a5 e5       	ldi	r26, 0x55	; 85
    39ee:	b0 e0       	ldi	r27, 0x00	; 0
    39f0:	e5 e5       	ldi	r30, 0x55	; 85
    39f2:	f0 e0       	ldi	r31, 0x00	; 0
    39f4:	80 81       	ld	r24, Z
    39f6:	8d 7f       	andi	r24, 0xFD	; 253
    39f8:	8c 93       	st	X, r24
    39fa:	ba c0       	rjmp	.+372    	; 0x3b70 <EXTI_u8setSenseCtrl+0x1f2>
		case ON_CHANGE:
			SET_BIT(MCUCR,MCUCR_ISC00); CLR_BIT(MCUCR,MCUCR_ISC01); break;
    39fc:	a5 e5       	ldi	r26, 0x55	; 85
    39fe:	b0 e0       	ldi	r27, 0x00	; 0
    3a00:	e5 e5       	ldi	r30, 0x55	; 85
    3a02:	f0 e0       	ldi	r31, 0x00	; 0
    3a04:	80 81       	ld	r24, Z
    3a06:	81 60       	ori	r24, 0x01	; 1
    3a08:	8c 93       	st	X, r24
    3a0a:	a5 e5       	ldi	r26, 0x55	; 85
    3a0c:	b0 e0       	ldi	r27, 0x00	; 0
    3a0e:	e5 e5       	ldi	r30, 0x55	; 85
    3a10:	f0 e0       	ldi	r31, 0x00	; 0
    3a12:	80 81       	ld	r24, Z
    3a14:	8d 7f       	andi	r24, 0xFD	; 253
    3a16:	8c 93       	st	X, r24
    3a18:	ab c0       	rjmp	.+342    	; 0x3b70 <EXTI_u8setSenseCtrl+0x1f2>
		case FALLING_EDGE:
			CLR_BIT(MCUCR,MCUCR_ISC00); SET_BIT(MCUCR,MCUCR_ISC01); break;
    3a1a:	a5 e5       	ldi	r26, 0x55	; 85
    3a1c:	b0 e0       	ldi	r27, 0x00	; 0
    3a1e:	e5 e5       	ldi	r30, 0x55	; 85
    3a20:	f0 e0       	ldi	r31, 0x00	; 0
    3a22:	80 81       	ld	r24, Z
    3a24:	8e 7f       	andi	r24, 0xFE	; 254
    3a26:	8c 93       	st	X, r24
    3a28:	a5 e5       	ldi	r26, 0x55	; 85
    3a2a:	b0 e0       	ldi	r27, 0x00	; 0
    3a2c:	e5 e5       	ldi	r30, 0x55	; 85
    3a2e:	f0 e0       	ldi	r31, 0x00	; 0
    3a30:	80 81       	ld	r24, Z
    3a32:	82 60       	ori	r24, 0x02	; 2
    3a34:	8c 93       	st	X, r24
    3a36:	9c c0       	rjmp	.+312    	; 0x3b70 <EXTI_u8setSenseCtrl+0x1f2>
		case RISING_EDGE:
			SET_BIT(MCUCR,MCUCR_ISC00); SET_BIT(MCUCR,MCUCR_ISC01); break;
    3a38:	a5 e5       	ldi	r26, 0x55	; 85
    3a3a:	b0 e0       	ldi	r27, 0x00	; 0
    3a3c:	e5 e5       	ldi	r30, 0x55	; 85
    3a3e:	f0 e0       	ldi	r31, 0x00	; 0
    3a40:	80 81       	ld	r24, Z
    3a42:	81 60       	ori	r24, 0x01	; 1
    3a44:	8c 93       	st	X, r24
    3a46:	a5 e5       	ldi	r26, 0x55	; 85
    3a48:	b0 e0       	ldi	r27, 0x00	; 0
    3a4a:	e5 e5       	ldi	r30, 0x55	; 85
    3a4c:	f0 e0       	ldi	r31, 0x00	; 0
    3a4e:	80 81       	ld	r24, Z
    3a50:	82 60       	ori	r24, 0x02	; 2
    3a52:	8c 93       	st	X, r24
    3a54:	8d c0       	rjmp	.+282    	; 0x3b70 <EXTI_u8setSenseCtrl+0x1f2>
		default:
			Local_u8ErrorState=NOK;
    3a56:	81 e0       	ldi	r24, 0x01	; 1
    3a58:	89 83       	std	Y+1, r24	; 0x01
    3a5a:	8a c0       	rjmp	.+276    	; 0x3b70 <EXTI_u8setSenseCtrl+0x1f2>
		}
	}

	else if(Copy_IntCh == INT1)
    3a5c:	8a 81       	ldd	r24, Y+2	; 0x02
    3a5e:	81 30       	cpi	r24, 0x01	; 1
    3a60:	09 f0       	breq	.+2      	; 0x3a64 <EXTI_u8setSenseCtrl+0xe6>
    3a62:	5e c0       	rjmp	.+188    	; 0x3b20 <EXTI_u8setSenseCtrl+0x1a2>
	{
		switch(Copy_SenseCtrl)
    3a64:	8b 81       	ldd	r24, Y+3	; 0x03
    3a66:	28 2f       	mov	r18, r24
    3a68:	30 e0       	ldi	r19, 0x00	; 0
    3a6a:	3f 83       	std	Y+7, r19	; 0x07
    3a6c:	2e 83       	std	Y+6, r18	; 0x06
    3a6e:	8e 81       	ldd	r24, Y+6	; 0x06
    3a70:	9f 81       	ldd	r25, Y+7	; 0x07
    3a72:	81 30       	cpi	r24, 0x01	; 1
    3a74:	91 05       	cpc	r25, r1
    3a76:	21 f1       	breq	.+72     	; 0x3ac0 <EXTI_u8setSenseCtrl+0x142>
    3a78:	2e 81       	ldd	r18, Y+6	; 0x06
    3a7a:	3f 81       	ldd	r19, Y+7	; 0x07
    3a7c:	22 30       	cpi	r18, 0x02	; 2
    3a7e:	31 05       	cpc	r19, r1
    3a80:	2c f4       	brge	.+10     	; 0x3a8c <EXTI_u8setSenseCtrl+0x10e>
    3a82:	8e 81       	ldd	r24, Y+6	; 0x06
    3a84:	9f 81       	ldd	r25, Y+7	; 0x07
    3a86:	00 97       	sbiw	r24, 0x00	; 0
    3a88:	61 f0       	breq	.+24     	; 0x3aa2 <EXTI_u8setSenseCtrl+0x124>
    3a8a:	47 c0       	rjmp	.+142    	; 0x3b1a <EXTI_u8setSenseCtrl+0x19c>
    3a8c:	2e 81       	ldd	r18, Y+6	; 0x06
    3a8e:	3f 81       	ldd	r19, Y+7	; 0x07
    3a90:	22 30       	cpi	r18, 0x02	; 2
    3a92:	31 05       	cpc	r19, r1
    3a94:	21 f1       	breq	.+72     	; 0x3ade <EXTI_u8setSenseCtrl+0x160>
    3a96:	8e 81       	ldd	r24, Y+6	; 0x06
    3a98:	9f 81       	ldd	r25, Y+7	; 0x07
    3a9a:	83 30       	cpi	r24, 0x03	; 3
    3a9c:	91 05       	cpc	r25, r1
    3a9e:	71 f1       	breq	.+92     	; 0x3afc <EXTI_u8setSenseCtrl+0x17e>
    3aa0:	3c c0       	rjmp	.+120    	; 0x3b1a <EXTI_u8setSenseCtrl+0x19c>
		{
		case LOW_LEVEL:
			CLR_BIT(MCUCR,MCUCR_ISC10); CLR_BIT(MCUCR,MCUCR_ISC11); break;
    3aa2:	a5 e5       	ldi	r26, 0x55	; 85
    3aa4:	b0 e0       	ldi	r27, 0x00	; 0
    3aa6:	e5 e5       	ldi	r30, 0x55	; 85
    3aa8:	f0 e0       	ldi	r31, 0x00	; 0
    3aaa:	80 81       	ld	r24, Z
    3aac:	8b 7f       	andi	r24, 0xFB	; 251
    3aae:	8c 93       	st	X, r24
    3ab0:	a5 e5       	ldi	r26, 0x55	; 85
    3ab2:	b0 e0       	ldi	r27, 0x00	; 0
    3ab4:	e5 e5       	ldi	r30, 0x55	; 85
    3ab6:	f0 e0       	ldi	r31, 0x00	; 0
    3ab8:	80 81       	ld	r24, Z
    3aba:	87 7f       	andi	r24, 0xF7	; 247
    3abc:	8c 93       	st	X, r24
    3abe:	58 c0       	rjmp	.+176    	; 0x3b70 <EXTI_u8setSenseCtrl+0x1f2>
		case ON_CHANGE:
			SET_BIT(MCUCR,MCUCR_ISC10); CLR_BIT(MCUCR,MCUCR_ISC11); break;
    3ac0:	a5 e5       	ldi	r26, 0x55	; 85
    3ac2:	b0 e0       	ldi	r27, 0x00	; 0
    3ac4:	e5 e5       	ldi	r30, 0x55	; 85
    3ac6:	f0 e0       	ldi	r31, 0x00	; 0
    3ac8:	80 81       	ld	r24, Z
    3aca:	84 60       	ori	r24, 0x04	; 4
    3acc:	8c 93       	st	X, r24
    3ace:	a5 e5       	ldi	r26, 0x55	; 85
    3ad0:	b0 e0       	ldi	r27, 0x00	; 0
    3ad2:	e5 e5       	ldi	r30, 0x55	; 85
    3ad4:	f0 e0       	ldi	r31, 0x00	; 0
    3ad6:	80 81       	ld	r24, Z
    3ad8:	87 7f       	andi	r24, 0xF7	; 247
    3ada:	8c 93       	st	X, r24
    3adc:	49 c0       	rjmp	.+146    	; 0x3b70 <EXTI_u8setSenseCtrl+0x1f2>
		case FALLING_EDGE:
			CLR_BIT(MCUCR,MCUCR_ISC10); SET_BIT(MCUCR,MCUCR_ISC11); break;
    3ade:	a5 e5       	ldi	r26, 0x55	; 85
    3ae0:	b0 e0       	ldi	r27, 0x00	; 0
    3ae2:	e5 e5       	ldi	r30, 0x55	; 85
    3ae4:	f0 e0       	ldi	r31, 0x00	; 0
    3ae6:	80 81       	ld	r24, Z
    3ae8:	8b 7f       	andi	r24, 0xFB	; 251
    3aea:	8c 93       	st	X, r24
    3aec:	a5 e5       	ldi	r26, 0x55	; 85
    3aee:	b0 e0       	ldi	r27, 0x00	; 0
    3af0:	e5 e5       	ldi	r30, 0x55	; 85
    3af2:	f0 e0       	ldi	r31, 0x00	; 0
    3af4:	80 81       	ld	r24, Z
    3af6:	88 60       	ori	r24, 0x08	; 8
    3af8:	8c 93       	st	X, r24
    3afa:	3a c0       	rjmp	.+116    	; 0x3b70 <EXTI_u8setSenseCtrl+0x1f2>
		case RISING_EDGE:
			SET_BIT(MCUCR,MCUCR_ISC10); SET_BIT(MCUCR,MCUCR_ISC11); break;
    3afc:	a5 e5       	ldi	r26, 0x55	; 85
    3afe:	b0 e0       	ldi	r27, 0x00	; 0
    3b00:	e5 e5       	ldi	r30, 0x55	; 85
    3b02:	f0 e0       	ldi	r31, 0x00	; 0
    3b04:	80 81       	ld	r24, Z
    3b06:	84 60       	ori	r24, 0x04	; 4
    3b08:	8c 93       	st	X, r24
    3b0a:	a5 e5       	ldi	r26, 0x55	; 85
    3b0c:	b0 e0       	ldi	r27, 0x00	; 0
    3b0e:	e5 e5       	ldi	r30, 0x55	; 85
    3b10:	f0 e0       	ldi	r31, 0x00	; 0
    3b12:	80 81       	ld	r24, Z
    3b14:	88 60       	ori	r24, 0x08	; 8
    3b16:	8c 93       	st	X, r24
    3b18:	2b c0       	rjmp	.+86     	; 0x3b70 <EXTI_u8setSenseCtrl+0x1f2>
		default:
			Local_u8ErrorState=NOK;
    3b1a:	81 e0       	ldi	r24, 0x01	; 1
    3b1c:	89 83       	std	Y+1, r24	; 0x01
    3b1e:	28 c0       	rjmp	.+80     	; 0x3b70 <EXTI_u8setSenseCtrl+0x1f2>
		}
	}

	else if(Copy_IntCh == INT2)
    3b20:	8a 81       	ldd	r24, Y+2	; 0x02
    3b22:	82 30       	cpi	r24, 0x02	; 2
    3b24:	19 f5       	brne	.+70     	; 0x3b6c <EXTI_u8setSenseCtrl+0x1ee>
	{
		switch(Copy_SenseCtrl)
    3b26:	8b 81       	ldd	r24, Y+3	; 0x03
    3b28:	28 2f       	mov	r18, r24
    3b2a:	30 e0       	ldi	r19, 0x00	; 0
    3b2c:	3d 83       	std	Y+5, r19	; 0x05
    3b2e:	2c 83       	std	Y+4, r18	; 0x04
    3b30:	8c 81       	ldd	r24, Y+4	; 0x04
    3b32:	9d 81       	ldd	r25, Y+5	; 0x05
    3b34:	82 30       	cpi	r24, 0x02	; 2
    3b36:	91 05       	cpc	r25, r1
    3b38:	31 f0       	breq	.+12     	; 0x3b46 <EXTI_u8setSenseCtrl+0x1c8>
    3b3a:	2c 81       	ldd	r18, Y+4	; 0x04
    3b3c:	3d 81       	ldd	r19, Y+5	; 0x05
    3b3e:	23 30       	cpi	r18, 0x03	; 3
    3b40:	31 05       	cpc	r19, r1
    3b42:	49 f0       	breq	.+18     	; 0x3b56 <EXTI_u8setSenseCtrl+0x1d8>
    3b44:	10 c0       	rjmp	.+32     	; 0x3b66 <EXTI_u8setSenseCtrl+0x1e8>
		{
		case FALLING_EDGE:
			CLR_BIT(MCUCSR,MCUCSR_ISC2);  break;
    3b46:	a4 e5       	ldi	r26, 0x54	; 84
    3b48:	b0 e0       	ldi	r27, 0x00	; 0
    3b4a:	e4 e5       	ldi	r30, 0x54	; 84
    3b4c:	f0 e0       	ldi	r31, 0x00	; 0
    3b4e:	80 81       	ld	r24, Z
    3b50:	8f 7b       	andi	r24, 0xBF	; 191
    3b52:	8c 93       	st	X, r24
    3b54:	0d c0       	rjmp	.+26     	; 0x3b70 <EXTI_u8setSenseCtrl+0x1f2>
		case RISING_EDGE:
			SET_BIT(MCUCSR,MCUCSR_ISC2);  break;
    3b56:	a4 e5       	ldi	r26, 0x54	; 84
    3b58:	b0 e0       	ldi	r27, 0x00	; 0
    3b5a:	e4 e5       	ldi	r30, 0x54	; 84
    3b5c:	f0 e0       	ldi	r31, 0x00	; 0
    3b5e:	80 81       	ld	r24, Z
    3b60:	80 64       	ori	r24, 0x40	; 64
    3b62:	8c 93       	st	X, r24
    3b64:	05 c0       	rjmp	.+10     	; 0x3b70 <EXTI_u8setSenseCtrl+0x1f2>
		default:
			Local_u8ErrorState=NOK;
    3b66:	81 e0       	ldi	r24, 0x01	; 1
    3b68:	89 83       	std	Y+1, r24	; 0x01
    3b6a:	02 c0       	rjmp	.+4      	; 0x3b70 <EXTI_u8setSenseCtrl+0x1f2>
		}
	}
	else
	{
		Local_u8ErrorState=NOK;
    3b6c:	81 e0       	ldi	r24, 0x01	; 1
    3b6e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    3b70:	89 81       	ldd	r24, Y+1	; 0x01
}
    3b72:	29 96       	adiw	r28, 0x09	; 9
    3b74:	0f b6       	in	r0, 0x3f	; 63
    3b76:	f8 94       	cli
    3b78:	de bf       	out	0x3e, r29	; 62
    3b7a:	0f be       	out	0x3f, r0	; 63
    3b7c:	cd bf       	out	0x3d, r28	; 61
    3b7e:	cf 91       	pop	r28
    3b80:	df 91       	pop	r29
    3b82:	08 95       	ret

00003b84 <EXTI_u8EnableIntChannel>:

uint8 EXTI_u8EnableIntChannel(IntChannel_t Copy_IntCh)
{
    3b84:	df 93       	push	r29
    3b86:	cf 93       	push	r28
    3b88:	00 d0       	rcall	.+0      	; 0x3b8a <EXTI_u8EnableIntChannel+0x6>
    3b8a:	00 d0       	rcall	.+0      	; 0x3b8c <EXTI_u8EnableIntChannel+0x8>
    3b8c:	cd b7       	in	r28, 0x3d	; 61
    3b8e:	de b7       	in	r29, 0x3e	; 62
    3b90:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8ErrorState=OK;
    3b92:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_IntCh)
    3b94:	8a 81       	ldd	r24, Y+2	; 0x02
    3b96:	28 2f       	mov	r18, r24
    3b98:	30 e0       	ldi	r19, 0x00	; 0
    3b9a:	3c 83       	std	Y+4, r19	; 0x04
    3b9c:	2b 83       	std	Y+3, r18	; 0x03
    3b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    3ba0:	9c 81       	ldd	r25, Y+4	; 0x04
    3ba2:	81 30       	cpi	r24, 0x01	; 1
    3ba4:	91 05       	cpc	r25, r1
    3ba6:	89 f0       	breq	.+34     	; 0x3bca <EXTI_u8EnableIntChannel+0x46>
    3ba8:	2b 81       	ldd	r18, Y+3	; 0x03
    3baa:	3c 81       	ldd	r19, Y+4	; 0x04
    3bac:	22 30       	cpi	r18, 0x02	; 2
    3bae:	31 05       	cpc	r19, r1
    3bb0:	a1 f0       	breq	.+40     	; 0x3bda <EXTI_u8EnableIntChannel+0x56>
    3bb2:	8b 81       	ldd	r24, Y+3	; 0x03
    3bb4:	9c 81       	ldd	r25, Y+4	; 0x04
    3bb6:	00 97       	sbiw	r24, 0x00	; 0
    3bb8:	c1 f4       	brne	.+48     	; 0x3bea <EXTI_u8EnableIntChannel+0x66>
	{
	case INT0:
		SET_BIT(GICR,GICR_INT0);break;
    3bba:	ab e5       	ldi	r26, 0x5B	; 91
    3bbc:	b0 e0       	ldi	r27, 0x00	; 0
    3bbe:	eb e5       	ldi	r30, 0x5B	; 91
    3bc0:	f0 e0       	ldi	r31, 0x00	; 0
    3bc2:	80 81       	ld	r24, Z
    3bc4:	80 64       	ori	r24, 0x40	; 64
    3bc6:	8c 93       	st	X, r24
    3bc8:	12 c0       	rjmp	.+36     	; 0x3bee <EXTI_u8EnableIntChannel+0x6a>
	case INT1:
		SET_BIT(GICR,GICR_INT1);break;
    3bca:	ab e5       	ldi	r26, 0x5B	; 91
    3bcc:	b0 e0       	ldi	r27, 0x00	; 0
    3bce:	eb e5       	ldi	r30, 0x5B	; 91
    3bd0:	f0 e0       	ldi	r31, 0x00	; 0
    3bd2:	80 81       	ld	r24, Z
    3bd4:	80 68       	ori	r24, 0x80	; 128
    3bd6:	8c 93       	st	X, r24
    3bd8:	0a c0       	rjmp	.+20     	; 0x3bee <EXTI_u8EnableIntChannel+0x6a>
	case INT2:
		SET_BIT(GICR,GICR_INT2);break;
    3bda:	ab e5       	ldi	r26, 0x5B	; 91
    3bdc:	b0 e0       	ldi	r27, 0x00	; 0
    3bde:	eb e5       	ldi	r30, 0x5B	; 91
    3be0:	f0 e0       	ldi	r31, 0x00	; 0
    3be2:	80 81       	ld	r24, Z
    3be4:	80 62       	ori	r24, 0x20	; 32
    3be6:	8c 93       	st	X, r24
    3be8:	02 c0       	rjmp	.+4      	; 0x3bee <EXTI_u8EnableIntChannel+0x6a>
	default:
		Local_u8ErrorState=NOK;
    3bea:	81 e0       	ldi	r24, 0x01	; 1
    3bec:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    3bee:	89 81       	ldd	r24, Y+1	; 0x01
}
    3bf0:	0f 90       	pop	r0
    3bf2:	0f 90       	pop	r0
    3bf4:	0f 90       	pop	r0
    3bf6:	0f 90       	pop	r0
    3bf8:	cf 91       	pop	r28
    3bfa:	df 91       	pop	r29
    3bfc:	08 95       	ret

00003bfe <EXTI_u8DisableIntChannel>:

uint8 EXTI_u8DisableIntChannel(IntChannel_t Copy_IntCh)
{
    3bfe:	df 93       	push	r29
    3c00:	cf 93       	push	r28
    3c02:	00 d0       	rcall	.+0      	; 0x3c04 <EXTI_u8DisableIntChannel+0x6>
    3c04:	00 d0       	rcall	.+0      	; 0x3c06 <EXTI_u8DisableIntChannel+0x8>
    3c06:	cd b7       	in	r28, 0x3d	; 61
    3c08:	de b7       	in	r29, 0x3e	; 62
    3c0a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8ErrorState=OK;
    3c0c:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_IntCh)
    3c0e:	8a 81       	ldd	r24, Y+2	; 0x02
    3c10:	28 2f       	mov	r18, r24
    3c12:	30 e0       	ldi	r19, 0x00	; 0
    3c14:	3c 83       	std	Y+4, r19	; 0x04
    3c16:	2b 83       	std	Y+3, r18	; 0x03
    3c18:	8b 81       	ldd	r24, Y+3	; 0x03
    3c1a:	9c 81       	ldd	r25, Y+4	; 0x04
    3c1c:	81 30       	cpi	r24, 0x01	; 1
    3c1e:	91 05       	cpc	r25, r1
    3c20:	89 f0       	breq	.+34     	; 0x3c44 <EXTI_u8DisableIntChannel+0x46>
    3c22:	2b 81       	ldd	r18, Y+3	; 0x03
    3c24:	3c 81       	ldd	r19, Y+4	; 0x04
    3c26:	22 30       	cpi	r18, 0x02	; 2
    3c28:	31 05       	cpc	r19, r1
    3c2a:	a1 f0       	breq	.+40     	; 0x3c54 <EXTI_u8DisableIntChannel+0x56>
    3c2c:	8b 81       	ldd	r24, Y+3	; 0x03
    3c2e:	9c 81       	ldd	r25, Y+4	; 0x04
    3c30:	00 97       	sbiw	r24, 0x00	; 0
    3c32:	c1 f4       	brne	.+48     	; 0x3c64 <EXTI_u8DisableIntChannel+0x66>
	{
	case INT0:
		CLR_BIT(GICR,GICR_INT0);break;
    3c34:	ab e5       	ldi	r26, 0x5B	; 91
    3c36:	b0 e0       	ldi	r27, 0x00	; 0
    3c38:	eb e5       	ldi	r30, 0x5B	; 91
    3c3a:	f0 e0       	ldi	r31, 0x00	; 0
    3c3c:	80 81       	ld	r24, Z
    3c3e:	8f 7b       	andi	r24, 0xBF	; 191
    3c40:	8c 93       	st	X, r24
    3c42:	12 c0       	rjmp	.+36     	; 0x3c68 <EXTI_u8DisableIntChannel+0x6a>
	case INT1:
		CLR_BIT(GICR,GICR_INT1);break;
    3c44:	ab e5       	ldi	r26, 0x5B	; 91
    3c46:	b0 e0       	ldi	r27, 0x00	; 0
    3c48:	eb e5       	ldi	r30, 0x5B	; 91
    3c4a:	f0 e0       	ldi	r31, 0x00	; 0
    3c4c:	80 81       	ld	r24, Z
    3c4e:	8f 77       	andi	r24, 0x7F	; 127
    3c50:	8c 93       	st	X, r24
    3c52:	0a c0       	rjmp	.+20     	; 0x3c68 <EXTI_u8DisableIntChannel+0x6a>
	case INT2:
		CLR_BIT(GICR,GICR_INT2);break;
    3c54:	ab e5       	ldi	r26, 0x5B	; 91
    3c56:	b0 e0       	ldi	r27, 0x00	; 0
    3c58:	eb e5       	ldi	r30, 0x5B	; 91
    3c5a:	f0 e0       	ldi	r31, 0x00	; 0
    3c5c:	80 81       	ld	r24, Z
    3c5e:	8f 7d       	andi	r24, 0xDF	; 223
    3c60:	8c 93       	st	X, r24
    3c62:	02 c0       	rjmp	.+4      	; 0x3c68 <EXTI_u8DisableIntChannel+0x6a>
	default:
		Local_u8ErrorState=NOK;
    3c64:	81 e0       	ldi	r24, 0x01	; 1
    3c66:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    3c68:	89 81       	ldd	r24, Y+1	; 0x01
}
    3c6a:	0f 90       	pop	r0
    3c6c:	0f 90       	pop	r0
    3c6e:	0f 90       	pop	r0
    3c70:	0f 90       	pop	r0
    3c72:	cf 91       	pop	r28
    3c74:	df 91       	pop	r29
    3c76:	08 95       	ret

00003c78 <EXTI_u8SetCallBack>:

uint8 EXTI_u8SetCallBack(IntChannel_t Copy_IntCh,void (*Copy_pvCallBackFunc)(void))
{
    3c78:	df 93       	push	r29
    3c7a:	cf 93       	push	r28
    3c7c:	00 d0       	rcall	.+0      	; 0x3c7e <EXTI_u8SetCallBack+0x6>
    3c7e:	00 d0       	rcall	.+0      	; 0x3c80 <EXTI_u8SetCallBack+0x8>
    3c80:	cd b7       	in	r28, 0x3d	; 61
    3c82:	de b7       	in	r29, 0x3e	; 62
    3c84:	8a 83       	std	Y+2, r24	; 0x02
    3c86:	7c 83       	std	Y+4, r23	; 0x04
    3c88:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorStatus=OK;
    3c8a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvCallBackFunc != NULL)
    3c8c:	8b 81       	ldd	r24, Y+3	; 0x03
    3c8e:	9c 81       	ldd	r25, Y+4	; 0x04
    3c90:	00 97       	sbiw	r24, 0x00	; 0
    3c92:	69 f0       	breq	.+26     	; 0x3cae <EXTI_u8SetCallBack+0x36>
	{
		EXTI_pvCallBack[Copy_IntCh]= Copy_pvCallBackFunc;
    3c94:	8a 81       	ldd	r24, Y+2	; 0x02
    3c96:	88 2f       	mov	r24, r24
    3c98:	90 e0       	ldi	r25, 0x00	; 0
    3c9a:	88 0f       	add	r24, r24
    3c9c:	99 1f       	adc	r25, r25
    3c9e:	fc 01       	movw	r30, r24
    3ca0:	e8 5d       	subi	r30, 0xD8	; 216
    3ca2:	fe 4f       	sbci	r31, 0xFE	; 254
    3ca4:	8b 81       	ldd	r24, Y+3	; 0x03
    3ca6:	9c 81       	ldd	r25, Y+4	; 0x04
    3ca8:	91 83       	std	Z+1, r25	; 0x01
    3caa:	80 83       	st	Z, r24
    3cac:	02 c0       	rjmp	.+4      	; 0x3cb2 <EXTI_u8SetCallBack+0x3a>
	}
	else
	{
		Local_u8ErrorStatus= NULL_PTR_ERR;
    3cae:	82 e0       	ldi	r24, 0x02	; 2
    3cb0:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorStatus;
    3cb2:	89 81       	ldd	r24, Y+1	; 0x01
}
    3cb4:	0f 90       	pop	r0
    3cb6:	0f 90       	pop	r0
    3cb8:	0f 90       	pop	r0
    3cba:	0f 90       	pop	r0
    3cbc:	cf 91       	pop	r28
    3cbe:	df 91       	pop	r29
    3cc0:	08 95       	ret

00003cc2 <__vector_1>:

/*INT0 ISR*/
__attribute__((signal)) void __vector_1(void);
void __vector_1(void)
{
    3cc2:	1f 92       	push	r1
    3cc4:	0f 92       	push	r0
    3cc6:	0f b6       	in	r0, 0x3f	; 63
    3cc8:	0f 92       	push	r0
    3cca:	11 24       	eor	r1, r1
    3ccc:	2f 93       	push	r18
    3cce:	3f 93       	push	r19
    3cd0:	4f 93       	push	r20
    3cd2:	5f 93       	push	r21
    3cd4:	6f 93       	push	r22
    3cd6:	7f 93       	push	r23
    3cd8:	8f 93       	push	r24
    3cda:	9f 93       	push	r25
    3cdc:	af 93       	push	r26
    3cde:	bf 93       	push	r27
    3ce0:	ef 93       	push	r30
    3ce2:	ff 93       	push	r31
    3ce4:	df 93       	push	r29
    3ce6:	cf 93       	push	r28
    3ce8:	cd b7       	in	r28, 0x3d	; 61
    3cea:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvCallBack[INT0] != NULL)
    3cec:	80 91 28 01 	lds	r24, 0x0128
    3cf0:	90 91 29 01 	lds	r25, 0x0129
    3cf4:	00 97       	sbiw	r24, 0x00	; 0
    3cf6:	29 f0       	breq	.+10     	; 0x3d02 <__vector_1+0x40>
	{
		EXTI_pvCallBack[INT0]();
    3cf8:	e0 91 28 01 	lds	r30, 0x0128
    3cfc:	f0 91 29 01 	lds	r31, 0x0129
    3d00:	09 95       	icall
	}
}
    3d02:	cf 91       	pop	r28
    3d04:	df 91       	pop	r29
    3d06:	ff 91       	pop	r31
    3d08:	ef 91       	pop	r30
    3d0a:	bf 91       	pop	r27
    3d0c:	af 91       	pop	r26
    3d0e:	9f 91       	pop	r25
    3d10:	8f 91       	pop	r24
    3d12:	7f 91       	pop	r23
    3d14:	6f 91       	pop	r22
    3d16:	5f 91       	pop	r21
    3d18:	4f 91       	pop	r20
    3d1a:	3f 91       	pop	r19
    3d1c:	2f 91       	pop	r18
    3d1e:	0f 90       	pop	r0
    3d20:	0f be       	out	0x3f, r0	; 63
    3d22:	0f 90       	pop	r0
    3d24:	1f 90       	pop	r1
    3d26:	18 95       	reti

00003d28 <__vector_2>:

/*INT1 ISR*/
__attribute__((signal)) void __vector_2(void);
void __vector_2(void)
{
    3d28:	1f 92       	push	r1
    3d2a:	0f 92       	push	r0
    3d2c:	0f b6       	in	r0, 0x3f	; 63
    3d2e:	0f 92       	push	r0
    3d30:	11 24       	eor	r1, r1
    3d32:	2f 93       	push	r18
    3d34:	3f 93       	push	r19
    3d36:	4f 93       	push	r20
    3d38:	5f 93       	push	r21
    3d3a:	6f 93       	push	r22
    3d3c:	7f 93       	push	r23
    3d3e:	8f 93       	push	r24
    3d40:	9f 93       	push	r25
    3d42:	af 93       	push	r26
    3d44:	bf 93       	push	r27
    3d46:	ef 93       	push	r30
    3d48:	ff 93       	push	r31
    3d4a:	df 93       	push	r29
    3d4c:	cf 93       	push	r28
    3d4e:	cd b7       	in	r28, 0x3d	; 61
    3d50:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvCallBack[INT1] != NULL)
    3d52:	80 91 2a 01 	lds	r24, 0x012A
    3d56:	90 91 2b 01 	lds	r25, 0x012B
    3d5a:	00 97       	sbiw	r24, 0x00	; 0
    3d5c:	29 f0       	breq	.+10     	; 0x3d68 <__vector_2+0x40>
	{
		EXTI_pvCallBack[INT1]();
    3d5e:	e0 91 2a 01 	lds	r30, 0x012A
    3d62:	f0 91 2b 01 	lds	r31, 0x012B
    3d66:	09 95       	icall
	}
}
    3d68:	cf 91       	pop	r28
    3d6a:	df 91       	pop	r29
    3d6c:	ff 91       	pop	r31
    3d6e:	ef 91       	pop	r30
    3d70:	bf 91       	pop	r27
    3d72:	af 91       	pop	r26
    3d74:	9f 91       	pop	r25
    3d76:	8f 91       	pop	r24
    3d78:	7f 91       	pop	r23
    3d7a:	6f 91       	pop	r22
    3d7c:	5f 91       	pop	r21
    3d7e:	4f 91       	pop	r20
    3d80:	3f 91       	pop	r19
    3d82:	2f 91       	pop	r18
    3d84:	0f 90       	pop	r0
    3d86:	0f be       	out	0x3f, r0	; 63
    3d88:	0f 90       	pop	r0
    3d8a:	1f 90       	pop	r1
    3d8c:	18 95       	reti

00003d8e <__vector_3>:
/*INT2 ISR*/
__attribute__((signal)) void __vector_3(void);
void __vector_3(void)
{
    3d8e:	1f 92       	push	r1
    3d90:	0f 92       	push	r0
    3d92:	0f b6       	in	r0, 0x3f	; 63
    3d94:	0f 92       	push	r0
    3d96:	11 24       	eor	r1, r1
    3d98:	2f 93       	push	r18
    3d9a:	3f 93       	push	r19
    3d9c:	4f 93       	push	r20
    3d9e:	5f 93       	push	r21
    3da0:	6f 93       	push	r22
    3da2:	7f 93       	push	r23
    3da4:	8f 93       	push	r24
    3da6:	9f 93       	push	r25
    3da8:	af 93       	push	r26
    3daa:	bf 93       	push	r27
    3dac:	ef 93       	push	r30
    3dae:	ff 93       	push	r31
    3db0:	df 93       	push	r29
    3db2:	cf 93       	push	r28
    3db4:	cd b7       	in	r28, 0x3d	; 61
    3db6:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvCallBack[INT2] != NULL)
    3db8:	80 91 2c 01 	lds	r24, 0x012C
    3dbc:	90 91 2d 01 	lds	r25, 0x012D
    3dc0:	00 97       	sbiw	r24, 0x00	; 0
    3dc2:	29 f0       	breq	.+10     	; 0x3dce <__vector_3+0x40>
	{
		EXTI_pvCallBack[INT2]();
    3dc4:	e0 91 2c 01 	lds	r30, 0x012C
    3dc8:	f0 91 2d 01 	lds	r31, 0x012D
    3dcc:	09 95       	icall
	}
}
    3dce:	cf 91       	pop	r28
    3dd0:	df 91       	pop	r29
    3dd2:	ff 91       	pop	r31
    3dd4:	ef 91       	pop	r30
    3dd6:	bf 91       	pop	r27
    3dd8:	af 91       	pop	r26
    3dda:	9f 91       	pop	r25
    3ddc:	8f 91       	pop	r24
    3dde:	7f 91       	pop	r23
    3de0:	6f 91       	pop	r22
    3de2:	5f 91       	pop	r21
    3de4:	4f 91       	pop	r20
    3de6:	3f 91       	pop	r19
    3de8:	2f 91       	pop	r18
    3dea:	0f 90       	pop	r0
    3dec:	0f be       	out	0x3f, r0	; 63
    3dee:	0f 90       	pop	r0
    3df0:	1f 90       	pop	r1
    3df2:	18 95       	reti

00003df4 <GIE_voidEnableGlobal>:
#include "GIE_interface.h"
//MCAL


void GIE_voidEnableGlobal(void)
{
    3df4:	df 93       	push	r29
    3df6:	cf 93       	push	r28
    3df8:	cd b7       	in	r28, 0x3d	; 61
    3dfa:	de b7       	in	r29, 0x3e	; 62
	__asm volatile ("SEI"); //inline assembly :set I_BIT
    3dfc:	78 94       	sei
	// SET_BIT(SREG ,SREG_I);

}
    3dfe:	cf 91       	pop	r28
    3e00:	df 91       	pop	r29
    3e02:	08 95       	ret

00003e04 <GIE_voidDisableGlobal>:
void GIE_voidDisableGlobal (void)
{
    3e04:	df 93       	push	r29
    3e06:	cf 93       	push	r28
    3e08:	cd b7       	in	r28, 0x3d	; 61
    3e0a:	de b7       	in	r29, 0x3e	; 62
	__asm volatile ("CLI"); //inline assembly :CLEAR I_BIT
    3e0c:	f8 94       	cli
	// CLR_BIT(SREG ,SREG_I);
}
    3e0e:	cf 91       	pop	r28
    3e10:	df 91       	pop	r29
    3e12:	08 95       	ret

00003e14 <PORT_voidInit>:
#include "PORT_cfg.h"
#include "PORT_interface.h"
#include "PORT_reg.h"

void PORT_voidInit(void)
{
    3e14:	df 93       	push	r29
    3e16:	cf 93       	push	r28
    3e18:	cd b7       	in	r28, 0x3d	; 61
    3e1a:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR;
    3e1c:	ea e3       	ldi	r30, 0x3A	; 58
    3e1e:	f0 e0       	ldi	r31, 0x00	; 0
    3e20:	8f ef       	ldi	r24, 0xFF	; 255
    3e22:	80 83       	st	Z, r24
	DDRB = PORTB_DIR;
    3e24:	e7 e3       	ldi	r30, 0x37	; 55
    3e26:	f0 e0       	ldi	r31, 0x00	; 0
    3e28:	88 e2       	ldi	r24, 0x28	; 40
    3e2a:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
    3e2c:	e4 e3       	ldi	r30, 0x34	; 52
    3e2e:	f0 e0       	ldi	r31, 0x00	; 0
    3e30:	81 e2       	ldi	r24, 0x21	; 33
    3e32:	80 83       	st	Z, r24
	DDRD = PORTD_DIR;
    3e34:	e1 e3       	ldi	r30, 0x31	; 49
    3e36:	f0 e0       	ldi	r31, 0x00	; 0
    3e38:	88 e3       	ldi	r24, 0x38	; 56
    3e3a:	80 83       	st	Z, r24

	PORTA = PORTA_INIT_VAL;
    3e3c:	eb e3       	ldi	r30, 0x3B	; 59
    3e3e:	f0 e0       	ldi	r31, 0x00	; 0
    3e40:	10 82       	st	Z, r1
	PORTB = PORTB_INIT_VAL;
    3e42:	e8 e3       	ldi	r30, 0x38	; 56
    3e44:	f0 e0       	ldi	r31, 0x00	; 0
    3e46:	80 ef       	ldi	r24, 0xF0	; 240
    3e48:	80 83       	st	Z, r24
	PORTC = PORTC_INIT_VAL;
    3e4a:	e5 e3       	ldi	r30, 0x35	; 53
    3e4c:	f0 e0       	ldi	r31, 0x00	; 0
    3e4e:	8f ef       	ldi	r24, 0xFF	; 255
    3e50:	80 83       	st	Z, r24
	PORTD = PORTD_INIT_VAL;
    3e52:	e2 e3       	ldi	r30, 0x32	; 50
    3e54:	f0 e0       	ldi	r31, 0x00	; 0
    3e56:	8c e3       	ldi	r24, 0x3C	; 60
    3e58:	80 83       	st	Z, r24
}
    3e5a:	cf 91       	pop	r28
    3e5c:	df 91       	pop	r29
    3e5e:	08 95       	ret

00003e60 <Timer0_voidInit>:


static void (* Timer_pvCallBackFunc [8])(void)={NULL};

void Timer0_voidInit()
{
    3e60:	df 93       	push	r29
    3e62:	cf 93       	push	r28
    3e64:	cd b7       	in	r28, 0x3d	; 61
    3e66:	de b7       	in	r29, 0x3e	; 62


    /*Set PWM mode*/
  SET_BIT(TCCR0,TCCR0_WGM00);
    3e68:	a3 e5       	ldi	r26, 0x53	; 83
    3e6a:	b0 e0       	ldi	r27, 0x00	; 0
    3e6c:	e3 e5       	ldi	r30, 0x53	; 83
    3e6e:	f0 e0       	ldi	r31, 0x00	; 0
    3e70:	80 81       	ld	r24, Z
    3e72:	80 64       	ori	r24, 0x40	; 64
    3e74:	8c 93       	st	X, r24
  SET_BIT(TCCR0 , TCCR0_WGM01);
    3e76:	a3 e5       	ldi	r26, 0x53	; 83
    3e78:	b0 e0       	ldi	r27, 0x00	; 0
    3e7a:	e3 e5       	ldi	r30, 0x53	; 83
    3e7c:	f0 e0       	ldi	r31, 0x00	; 0
    3e7e:	80 81       	ld	r24, Z
    3e80:	88 60       	ori	r24, 0x08	; 8
    3e82:	8c 93       	st	X, r24
  /*Set Compare output mose :set on top clear on compare */
   CLR_BIT(TCCR0,TCCR0_COM00);
    3e84:	a3 e5       	ldi	r26, 0x53	; 83
    3e86:	b0 e0       	ldi	r27, 0x00	; 0
    3e88:	e3 e5       	ldi	r30, 0x53	; 83
    3e8a:	f0 e0       	ldi	r31, 0x00	; 0
    3e8c:	80 81       	ld	r24, Z
    3e8e:	8f 7e       	andi	r24, 0xEF	; 239
    3e90:	8c 93       	st	X, r24
   SET_BIT(TCCR0,TCCR0_COM01);
    3e92:	a3 e5       	ldi	r26, 0x53	; 83
    3e94:	b0 e0       	ldi	r27, 0x00	; 0
    3e96:	e3 e5       	ldi	r30, 0x53	; 83
    3e98:	f0 e0       	ldi	r31, 0x00	; 0
    3e9a:	80 81       	ld	r24, Z
    3e9c:	80 62       	ori	r24, 0x20	; 32
    3e9e:	8c 93       	st	X, r24


  /*Clear prescaler bits "AS ENABLE FOR TIMER*/
      TCCR0 &=	0b11111000;
    3ea0:	a3 e5       	ldi	r26, 0x53	; 83
    3ea2:	b0 e0       	ldi	r27, 0x00	; 0
    3ea4:	e3 e5       	ldi	r30, 0x53	; 83
    3ea6:	f0 e0       	ldi	r31, 0x00	; 0
    3ea8:	80 81       	ld	r24, Z
    3eaa:	88 7f       	andi	r24, 0xF8	; 248
    3eac:	8c 93       	st	X, r24

   /*Set prescaler to divide by 64*/
		TCCR0|= 0b011;
    3eae:	a3 e5       	ldi	r26, 0x53	; 83
    3eb0:	b0 e0       	ldi	r27, 0x00	; 0
    3eb2:	e3 e5       	ldi	r30, 0x53	; 83
    3eb4:	f0 e0       	ldi	r31, 0x00	; 0
    3eb6:	80 81       	ld	r24, Z
    3eb8:	83 60       	ori	r24, 0x03	; 3
    3eba:	8c 93       	st	X, r24

}
    3ebc:	cf 91       	pop	r28
    3ebe:	df 91       	pop	r29
    3ec0:	08 95       	ret

00003ec2 <Timer1_voidInit>:
void  Timer1_voidInit(void)
{
    3ec2:	df 93       	push	r29
    3ec4:	cf 93       	push	r28
    3ec6:	cd b7       	in	r28, 0x3d	; 61
    3ec8:	de b7       	in	r29, 0x3e	; 62


	/*set prescaler ,division by 64*/

	  /*Clear prescaler bits "AS ENABLE FOR TIMER*/
	      TCCR1B &=	0b11111000;
    3eca:	ae e4       	ldi	r26, 0x4E	; 78
    3ecc:	b0 e0       	ldi	r27, 0x00	; 0
    3ece:	ee e4       	ldi	r30, 0x4E	; 78
    3ed0:	f0 e0       	ldi	r31, 0x00	; 0
    3ed2:	80 81       	ld	r24, Z
    3ed4:	88 7f       	andi	r24, 0xF8	; 248
    3ed6:	8c 93       	st	X, r24

	   /*Set prescaler to divide by 64*/
			TCCR1B|= 0b011;
    3ed8:	ae e4       	ldi	r26, 0x4E	; 78
    3eda:	b0 e0       	ldi	r27, 0x00	; 0
    3edc:	ee e4       	ldi	r30, 0x4E	; 78
    3ede:	f0 e0       	ldi	r31, 0x00	; 0
    3ee0:	80 81       	ld	r24, Z
    3ee2:	83 60       	ori	r24, 0x03	; 3
    3ee4:	8c 93       	st	X, r24

}
    3ee6:	cf 91       	pop	r28
    3ee8:	df 91       	pop	r29
    3eea:	08 95       	ret

00003eec <Timer1_u16GetTimerValue>:

uint16 Timer1_u16GetTimerValue(void)
{
    3eec:	df 93       	push	r29
    3eee:	cf 93       	push	r28
    3ef0:	cd b7       	in	r28, 0x3d	; 61
    3ef2:	de b7       	in	r29, 0x3e	; 62
	return TCNT1;
    3ef4:	ec e4       	ldi	r30, 0x4C	; 76
    3ef6:	f0 e0       	ldi	r31, 0x00	; 0
    3ef8:	80 81       	ld	r24, Z
    3efa:	91 81       	ldd	r25, Z+1	; 0x01
}
    3efc:	cf 91       	pop	r28
    3efe:	df 91       	pop	r29
    3f00:	08 95       	ret

00003f02 <Timer_u8SetCallBack>:

uint8 Timer_u8SetCallBack(uint8 Copy_u8IntSource,void(*Copy_pvCallBackFunc)(void))
{
    3f02:	df 93       	push	r29
    3f04:	cf 93       	push	r28
    3f06:	00 d0       	rcall	.+0      	; 0x3f08 <Timer_u8SetCallBack+0x6>
    3f08:	00 d0       	rcall	.+0      	; 0x3f0a <Timer_u8SetCallBack+0x8>
    3f0a:	cd b7       	in	r28, 0x3d	; 61
    3f0c:	de b7       	in	r29, 0x3e	; 62
    3f0e:	8a 83       	std	Y+2, r24	; 0x02
    3f10:	7c 83       	std	Y+4, r23	; 0x04
    3f12:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState=  OK	;
    3f14:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvCallBackFunc!=NULL)
    3f16:	8b 81       	ldd	r24, Y+3	; 0x03
    3f18:	9c 81       	ldd	r25, Y+4	; 0x04
    3f1a:	00 97       	sbiw	r24, 0x00	; 0
    3f1c:	69 f0       	breq	.+26     	; 0x3f38 <Timer_u8SetCallBack+0x36>
	{
		Timer_pvCallBackFunc[Copy_u8IntSource]=Copy_pvCallBackFunc;
    3f1e:	8a 81       	ldd	r24, Y+2	; 0x02
    3f20:	88 2f       	mov	r24, r24
    3f22:	90 e0       	ldi	r25, 0x00	; 0
    3f24:	88 0f       	add	r24, r24
    3f26:	99 1f       	adc	r25, r25
    3f28:	fc 01       	movw	r30, r24
    3f2a:	e2 5d       	subi	r30, 0xD2	; 210
    3f2c:	fe 4f       	sbci	r31, 0xFE	; 254
    3f2e:	8b 81       	ldd	r24, Y+3	; 0x03
    3f30:	9c 81       	ldd	r25, Y+4	; 0x04
    3f32:	91 83       	std	Z+1, r25	; 0x01
    3f34:	80 83       	st	Z, r24
    3f36:	02 c0       	rjmp	.+4      	; 0x3f3c <Timer_u8SetCallBack+0x3a>

	}
	else
	{
		Local_u8ErrorState= NULL_PTR_ERR;
    3f38:	82 e0       	ldi	r24, 0x02	; 2
    3f3a:	89 83       	std	Y+1, r24	; 0x01

	}
return Local_u8ErrorState;
    3f3c:	89 81       	ldd	r24, Y+1	; 0x01
}
    3f3e:	0f 90       	pop	r0
    3f40:	0f 90       	pop	r0
    3f42:	0f 90       	pop	r0
    3f44:	0f 90       	pop	r0
    3f46:	cf 91       	pop	r28
    3f48:	df 91       	pop	r29
    3f4a:	08 95       	ret

00003f4c <Timer0_voidSetPreloadValue>:

void Timer0_voidSetPreloadValue(uint8 Copy_u8PreloadVal)
{
    3f4c:	df 93       	push	r29
    3f4e:	cf 93       	push	r28
    3f50:	0f 92       	push	r0
    3f52:	cd b7       	in	r28, 0x3d	; 61
    3f54:	de b7       	in	r29, 0x3e	; 62
    3f56:	89 83       	std	Y+1, r24	; 0x01
    TCNT0 = Copy_u8PreloadVal;
    3f58:	e2 e5       	ldi	r30, 0x52	; 82
    3f5a:	f0 e0       	ldi	r31, 0x00	; 0
    3f5c:	89 81       	ldd	r24, Y+1	; 0x01
    3f5e:	80 83       	st	Z, r24
}
    3f60:	0f 90       	pop	r0
    3f62:	cf 91       	pop	r28
    3f64:	df 91       	pop	r29
    3f66:	08 95       	ret

00003f68 <Timer1_voidSetValue>:

void Timer1_voidSetValue(uint16 Copy_u16Value)
{
    3f68:	df 93       	push	r29
    3f6a:	cf 93       	push	r28
    3f6c:	00 d0       	rcall	.+0      	; 0x3f6e <Timer1_voidSetValue+0x6>
    3f6e:	cd b7       	in	r28, 0x3d	; 61
    3f70:	de b7       	in	r29, 0x3e	; 62
    3f72:	9a 83       	std	Y+2, r25	; 0x02
    3f74:	89 83       	std	Y+1, r24	; 0x01
	TCNT1=Copy_u16Value;
    3f76:	ec e4       	ldi	r30, 0x4C	; 76
    3f78:	f0 e0       	ldi	r31, 0x00	; 0
    3f7a:	89 81       	ldd	r24, Y+1	; 0x01
    3f7c:	9a 81       	ldd	r25, Y+2	; 0x02
    3f7e:	91 83       	std	Z+1, r25	; 0x01
    3f80:	80 83       	st	Z, r24
}
    3f82:	0f 90       	pop	r0
    3f84:	0f 90       	pop	r0
    3f86:	cf 91       	pop	r28
    3f88:	df 91       	pop	r29
    3f8a:	08 95       	ret

00003f8c <Timer0_voidSetCompareMatchValue>:
void Timer0_voidSetCompareMatchValue(uint8 Copy_u8CompareMatchVal)
{
    3f8c:	df 93       	push	r29
    3f8e:	cf 93       	push	r28
    3f90:	0f 92       	push	r0
    3f92:	cd b7       	in	r28, 0x3d	; 61
    3f94:	de b7       	in	r29, 0x3e	; 62
    3f96:	89 83       	std	Y+1, r24	; 0x01
    OCR0 = Copy_u8CompareMatchVal;
    3f98:	ec e5       	ldi	r30, 0x5C	; 92
    3f9a:	f0 e0       	ldi	r31, 0x00	; 0
    3f9c:	89 81       	ldd	r24, Y+1	; 0x01
    3f9e:	80 83       	st	Z, r24
}
    3fa0:	0f 90       	pop	r0
    3fa2:	cf 91       	pop	r28
    3fa4:	df 91       	pop	r29
    3fa6:	08 95       	ret

00003fa8 <__vector_11>:

/*Timer 0 overflow ISR*/
 void __vector_11(void) __attribute__((signal));
 void __vector_11(void)
 {
    3fa8:	1f 92       	push	r1
    3faa:	0f 92       	push	r0
    3fac:	0f b6       	in	r0, 0x3f	; 63
    3fae:	0f 92       	push	r0
    3fb0:	11 24       	eor	r1, r1
    3fb2:	2f 93       	push	r18
    3fb4:	3f 93       	push	r19
    3fb6:	4f 93       	push	r20
    3fb8:	5f 93       	push	r21
    3fba:	6f 93       	push	r22
    3fbc:	7f 93       	push	r23
    3fbe:	8f 93       	push	r24
    3fc0:	9f 93       	push	r25
    3fc2:	af 93       	push	r26
    3fc4:	bf 93       	push	r27
    3fc6:	ef 93       	push	r30
    3fc8:	ff 93       	push	r31
    3fca:	df 93       	push	r29
    3fcc:	cf 93       	push	r28
    3fce:	cd b7       	in	r28, 0x3d	; 61
    3fd0:	de b7       	in	r29, 0x3e	; 62
	if (Timer_pvCallBackFunc[Timer0_OVF_INT]!=NULL)
    3fd2:	80 91 2e 01 	lds	r24, 0x012E
    3fd6:	90 91 2f 01 	lds	r25, 0x012F
    3fda:	00 97       	sbiw	r24, 0x00	; 0
    3fdc:	29 f0       	breq	.+10     	; 0x3fe8 <__vector_11+0x40>

	{

		Timer_pvCallBackFunc[Timer0_OVF_INT]();
    3fde:	e0 91 2e 01 	lds	r30, 0x012E
    3fe2:	f0 91 2f 01 	lds	r31, 0x012F
    3fe6:	09 95       	icall
	}
}
    3fe8:	cf 91       	pop	r28
    3fea:	df 91       	pop	r29
    3fec:	ff 91       	pop	r31
    3fee:	ef 91       	pop	r30
    3ff0:	bf 91       	pop	r27
    3ff2:	af 91       	pop	r26
    3ff4:	9f 91       	pop	r25
    3ff6:	8f 91       	pop	r24
    3ff8:	7f 91       	pop	r23
    3ffa:	6f 91       	pop	r22
    3ffc:	5f 91       	pop	r21
    3ffe:	4f 91       	pop	r20
    4000:	3f 91       	pop	r19
    4002:	2f 91       	pop	r18
    4004:	0f 90       	pop	r0
    4006:	0f be       	out	0x3f, r0	; 63
    4008:	0f 90       	pop	r0
    400a:	1f 90       	pop	r1
    400c:	18 95       	reti

0000400e <__vector_10>:
/*Timer0  compare match ISR	*/
 void __vector_10 (void) __attribute__((signal));	//Timer0 CTC
 void __vector_10 (void)
  {
    400e:	1f 92       	push	r1
    4010:	0f 92       	push	r0
    4012:	0f b6       	in	r0, 0x3f	; 63
    4014:	0f 92       	push	r0
    4016:	11 24       	eor	r1, r1
    4018:	2f 93       	push	r18
    401a:	3f 93       	push	r19
    401c:	4f 93       	push	r20
    401e:	5f 93       	push	r21
    4020:	6f 93       	push	r22
    4022:	7f 93       	push	r23
    4024:	8f 93       	push	r24
    4026:	9f 93       	push	r25
    4028:	af 93       	push	r26
    402a:	bf 93       	push	r27
    402c:	ef 93       	push	r30
    402e:	ff 93       	push	r31
    4030:	df 93       	push	r29
    4032:	cf 93       	push	r28
    4034:	cd b7       	in	r28, 0x3d	; 61
    4036:	de b7       	in	r29, 0x3e	; 62

	  if (Timer_pvCallBackFunc[Timer0_OC_INT]!=NULL)
    4038:	80 91 30 01 	lds	r24, 0x0130
    403c:	90 91 31 01 	lds	r25, 0x0131
    4040:	00 97       	sbiw	r24, 0x00	; 0
    4042:	29 f0       	breq	.+10     	; 0x404e <__vector_10+0x40>

	  	{

		  Timer_pvCallBackFunc[Timer0_OC_INT]();
    4044:	e0 91 30 01 	lds	r30, 0x0130
    4048:	f0 91 31 01 	lds	r31, 0x0131
    404c:	09 95       	icall
	  	}


  }
    404e:	cf 91       	pop	r28
    4050:	df 91       	pop	r29
    4052:	ff 91       	pop	r31
    4054:	ef 91       	pop	r30
    4056:	bf 91       	pop	r27
    4058:	af 91       	pop	r26
    405a:	9f 91       	pop	r25
    405c:	8f 91       	pop	r24
    405e:	7f 91       	pop	r23
    4060:	6f 91       	pop	r22
    4062:	5f 91       	pop	r21
    4064:	4f 91       	pop	r20
    4066:	3f 91       	pop	r19
    4068:	2f 91       	pop	r18
    406a:	0f 90       	pop	r0
    406c:	0f be       	out	0x3f, r0	; 63
    406e:	0f 90       	pop	r0
    4070:	1f 90       	pop	r1
    4072:	18 95       	reti

00004074 <main>:
void ICU_SW (void);
uint16 u16PeriodTicks=0;

uint16 u16OnTicks=0u;
void main (void)
{
    4074:	df 93       	push	r29
    4076:	cf 93       	push	r28
    4078:	cd b7       	in	r28, 0x3d	; 61
    407a:	de b7       	in	r29, 0x3e	; 62


   PORT_voidInit();
    407c:	0e 94 0a 1f 	call	0x3e14	; 0x3e14 <PORT_voidInit>
   CLCD_VoidInit();
    4080:	0e 94 98 06 	call	0xd30	; 0xd30 <CLCD_VoidInit>
   Timer0_voidInit(); //Generate pwm
    4084:	0e 94 30 1f 	call	0x3e60	; 0x3e60 <Timer0_voidInit>
   Timer0_voidSetCompareMatchValue(63u);
    4088:	8f e3       	ldi	r24, 0x3F	; 63
    408a:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <Timer0_voidSetCompareMatchValue>
   Timer1_voidInit();
    408e:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <Timer1_voidInit>
   EXTI_voidInit(); //ISR
    4092:	0e 94 80 1c 	call	0x3900	; 0x3900 <EXTI_voidInit>
   EXTI_u8SetCallBack(INT0,&ICU_SW);
    4096:	2e e7       	ldi	r18, 0x7E	; 126
    4098:	30 e2       	ldi	r19, 0x20	; 32
    409a:	80 e0       	ldi	r24, 0x00	; 0
    409c:	b9 01       	movw	r22, r18
    409e:	0e 94 3c 1e 	call	0x3c78	; 0x3c78 <EXTI_u8SetCallBack>
   GIE_voidEnableGlobal();
    40a2:	0e 94 fa 1e 	call	0x3df4	; 0x3df4 <GIE_voidEnableGlobal>
  while(1)
  {
	  //waiting until both reading are ready
    while((u16PeriodTicks==0)&& (u16OnTicks==0));
    40a6:	80 91 3e 01 	lds	r24, 0x013E
    40aa:	90 91 3f 01 	lds	r25, 0x013F
    40ae:	00 97       	sbiw	r24, 0x00	; 0
    40b0:	31 f4       	brne	.+12     	; 0x40be <main+0x4a>
    40b2:	80 91 40 01 	lds	r24, 0x0140
    40b6:	90 91 41 01 	lds	r25, 0x0141
    40ba:	00 97       	sbiw	r24, 0x00	; 0
    40bc:	a1 f3       	breq	.-24     	; 0x40a6 <main+0x32>

       CLCD_VoidGoToXY(0,0);
    40be:	80 e0       	ldi	r24, 0x00	; 0
    40c0:	60 e0       	ldi	r22, 0x00	; 0
    40c2:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <CLCD_VoidGoToXY>
       CLCD_voidSendNumber(u16OnTicks);
    40c6:	80 91 40 01 	lds	r24, 0x0140
    40ca:	90 91 41 01 	lds	r25, 0x0141
    40ce:	cc 01       	movw	r24, r24
    40d0:	a0 e0       	ldi	r26, 0x00	; 0
    40d2:	b0 e0       	ldi	r27, 0x00	; 0
    40d4:	bc 01       	movw	r22, r24
    40d6:	cd 01       	movw	r24, r26
    40d8:	0e 94 65 07 	call	0xeca	; 0xeca <CLCD_voidSendNumber>
       CLCD_VoidGoToXY(0,1);
    40dc:	80 e0       	ldi	r24, 0x00	; 0
    40de:	61 e0       	ldi	r22, 0x01	; 1
    40e0:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <CLCD_VoidGoToXY>
       CLCD_voidSendNumber(u16PeriodTicks);
    40e4:	80 91 3e 01 	lds	r24, 0x013E
    40e8:	90 91 3f 01 	lds	r25, 0x013F
    40ec:	cc 01       	movw	r24, r24
    40ee:	a0 e0       	ldi	r26, 0x00	; 0
    40f0:	b0 e0       	ldi	r27, 0x00	; 0
    40f2:	bc 01       	movw	r22, r24
    40f4:	cd 01       	movw	r24, r26
    40f6:	0e 94 65 07 	call	0xeca	; 0xeca <CLCD_voidSendNumber>
    40fa:	d5 cf       	rjmp	.-86     	; 0x40a6 <main+0x32>

000040fc <ICU_SW>:



}
void ICU_SW (void)
{
    40fc:	df 93       	push	r29
    40fe:	cf 93       	push	r28
    4100:	cd b7       	in	r28, 0x3d	; 61
    4102:	de b7       	in	r29, 0x3e	; 62
	 volatile static uint8 Local_u8Counter =0u;
	 Local_u8Counter++;
    4104:	80 91 42 01 	lds	r24, 0x0142
    4108:	8f 5f       	subi	r24, 0xFF	; 255
    410a:	80 93 42 01 	sts	0x0142, r24
	 if (Local_u8Counter==1u)
    410e:	80 91 42 01 	lds	r24, 0x0142
    4112:	81 30       	cpi	r24, 0x01	; 1
    4114:	29 f4       	brne	.+10     	; 0x4120 <ICU_SW+0x24>
	 {
      Timer1_voidSetValue(0);
    4116:	80 e0       	ldi	r24, 0x00	; 0
    4118:	90 e0       	ldi	r25, 0x00	; 0
    411a:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <Timer1_voidSetValue>
    411e:	28 c0       	rjmp	.+80     	; 0x4170 <ICU_SW+0x74>
	 }
	 else if (Local_u8Counter== 2u)
    4120:	80 91 42 01 	lds	r24, 0x0142
    4124:	82 30       	cpi	r24, 0x02	; 2
    4126:	59 f4       	brne	.+22     	; 0x413e <ICU_SW+0x42>
	 {
		 /*Get timer reading -> peiod time number of ticks*/
       u16PeriodTicks=Timer1_u16GetTimerValue();
    4128:	0e 94 76 1f 	call	0x3eec	; 0x3eec <Timer1_u16GetTimerValue>
    412c:	90 93 3f 01 	sts	0x013F, r25
    4130:	80 93 3e 01 	sts	0x013E, r24
         /*Set EXTI trigger to falling edge */
       	   EXTI_u8setSenseCtrl(INT0,FALLING_EDGE);
    4134:	80 e0       	ldi	r24, 0x00	; 0
    4136:	62 e0       	ldi	r22, 0x02	; 2
    4138:	0e 94 bf 1c 	call	0x397e	; 0x397e <EXTI_u8setSenseCtrl>
    413c:	19 c0       	rjmp	.+50     	; 0x4170 <ICU_SW+0x74>
	 }
	 else
	 {
      u16OnTicks=Timer1_u16GetTimerValue();
    413e:	0e 94 76 1f 	call	0x3eec	; 0x3eec <Timer1_u16GetTimerValue>
    4142:	90 93 41 01 	sts	0x0141, r25
    4146:	80 93 40 01 	sts	0x0140, r24
      u16OnTicks-= u16PeriodTicks;
    414a:	20 91 40 01 	lds	r18, 0x0140
    414e:	30 91 41 01 	lds	r19, 0x0141
    4152:	80 91 3e 01 	lds	r24, 0x013E
    4156:	90 91 3f 01 	lds	r25, 0x013F
    415a:	a9 01       	movw	r20, r18
    415c:	48 1b       	sub	r20, r24
    415e:	59 0b       	sbc	r21, r25
    4160:	ca 01       	movw	r24, r20
    4162:	90 93 41 01 	sts	0x0141, r25
    4166:	80 93 40 01 	sts	0x0140, r24
      EXTI_u8DisableIntChannel(INT0);
    416a:	80 e0       	ldi	r24, 0x00	; 0
    416c:	0e 94 ff 1d 	call	0x3bfe	; 0x3bfe <EXTI_u8DisableIntChannel>
	 }



}
    4170:	cf 91       	pop	r28
    4172:	df 91       	pop	r29
    4174:	08 95       	ret

00004176 <__udivmodsi4>:
    4176:	a1 e2       	ldi	r26, 0x21	; 33
    4178:	1a 2e       	mov	r1, r26
    417a:	aa 1b       	sub	r26, r26
    417c:	bb 1b       	sub	r27, r27
    417e:	fd 01       	movw	r30, r26
    4180:	0d c0       	rjmp	.+26     	; 0x419c <__udivmodsi4_ep>

00004182 <__udivmodsi4_loop>:
    4182:	aa 1f       	adc	r26, r26
    4184:	bb 1f       	adc	r27, r27
    4186:	ee 1f       	adc	r30, r30
    4188:	ff 1f       	adc	r31, r31
    418a:	a2 17       	cp	r26, r18
    418c:	b3 07       	cpc	r27, r19
    418e:	e4 07       	cpc	r30, r20
    4190:	f5 07       	cpc	r31, r21
    4192:	20 f0       	brcs	.+8      	; 0x419c <__udivmodsi4_ep>
    4194:	a2 1b       	sub	r26, r18
    4196:	b3 0b       	sbc	r27, r19
    4198:	e4 0b       	sbc	r30, r20
    419a:	f5 0b       	sbc	r31, r21

0000419c <__udivmodsi4_ep>:
    419c:	66 1f       	adc	r22, r22
    419e:	77 1f       	adc	r23, r23
    41a0:	88 1f       	adc	r24, r24
    41a2:	99 1f       	adc	r25, r25
    41a4:	1a 94       	dec	r1
    41a6:	69 f7       	brne	.-38     	; 0x4182 <__udivmodsi4_loop>
    41a8:	60 95       	com	r22
    41aa:	70 95       	com	r23
    41ac:	80 95       	com	r24
    41ae:	90 95       	com	r25
    41b0:	9b 01       	movw	r18, r22
    41b2:	ac 01       	movw	r20, r24
    41b4:	bd 01       	movw	r22, r26
    41b6:	cf 01       	movw	r24, r30
    41b8:	08 95       	ret

000041ba <__divmodsi4>:
    41ba:	97 fb       	bst	r25, 7
    41bc:	09 2e       	mov	r0, r25
    41be:	05 26       	eor	r0, r21
    41c0:	0e d0       	rcall	.+28     	; 0x41de <__divmodsi4_neg1>
    41c2:	57 fd       	sbrc	r21, 7
    41c4:	04 d0       	rcall	.+8      	; 0x41ce <__divmodsi4_neg2>
    41c6:	d7 df       	rcall	.-82     	; 0x4176 <__udivmodsi4>
    41c8:	0a d0       	rcall	.+20     	; 0x41de <__divmodsi4_neg1>
    41ca:	00 1c       	adc	r0, r0
    41cc:	38 f4       	brcc	.+14     	; 0x41dc <__divmodsi4_exit>

000041ce <__divmodsi4_neg2>:
    41ce:	50 95       	com	r21
    41d0:	40 95       	com	r20
    41d2:	30 95       	com	r19
    41d4:	21 95       	neg	r18
    41d6:	3f 4f       	sbci	r19, 0xFF	; 255
    41d8:	4f 4f       	sbci	r20, 0xFF	; 255
    41da:	5f 4f       	sbci	r21, 0xFF	; 255

000041dc <__divmodsi4_exit>:
    41dc:	08 95       	ret

000041de <__divmodsi4_neg1>:
    41de:	f6 f7       	brtc	.-4      	; 0x41dc <__divmodsi4_exit>
    41e0:	90 95       	com	r25
    41e2:	80 95       	com	r24
    41e4:	70 95       	com	r23
    41e6:	61 95       	neg	r22
    41e8:	7f 4f       	sbci	r23, 0xFF	; 255
    41ea:	8f 4f       	sbci	r24, 0xFF	; 255
    41ec:	9f 4f       	sbci	r25, 0xFF	; 255
    41ee:	08 95       	ret

000041f0 <__prologue_saves__>:
    41f0:	2f 92       	push	r2
    41f2:	3f 92       	push	r3
    41f4:	4f 92       	push	r4
    41f6:	5f 92       	push	r5
    41f8:	6f 92       	push	r6
    41fa:	7f 92       	push	r7
    41fc:	8f 92       	push	r8
    41fe:	9f 92       	push	r9
    4200:	af 92       	push	r10
    4202:	bf 92       	push	r11
    4204:	cf 92       	push	r12
    4206:	df 92       	push	r13
    4208:	ef 92       	push	r14
    420a:	ff 92       	push	r15
    420c:	0f 93       	push	r16
    420e:	1f 93       	push	r17
    4210:	cf 93       	push	r28
    4212:	df 93       	push	r29
    4214:	cd b7       	in	r28, 0x3d	; 61
    4216:	de b7       	in	r29, 0x3e	; 62
    4218:	ca 1b       	sub	r28, r26
    421a:	db 0b       	sbc	r29, r27
    421c:	0f b6       	in	r0, 0x3f	; 63
    421e:	f8 94       	cli
    4220:	de bf       	out	0x3e, r29	; 62
    4222:	0f be       	out	0x3f, r0	; 63
    4224:	cd bf       	out	0x3d, r28	; 61
    4226:	09 94       	ijmp

00004228 <__epilogue_restores__>:
    4228:	2a 88       	ldd	r2, Y+18	; 0x12
    422a:	39 88       	ldd	r3, Y+17	; 0x11
    422c:	48 88       	ldd	r4, Y+16	; 0x10
    422e:	5f 84       	ldd	r5, Y+15	; 0x0f
    4230:	6e 84       	ldd	r6, Y+14	; 0x0e
    4232:	7d 84       	ldd	r7, Y+13	; 0x0d
    4234:	8c 84       	ldd	r8, Y+12	; 0x0c
    4236:	9b 84       	ldd	r9, Y+11	; 0x0b
    4238:	aa 84       	ldd	r10, Y+10	; 0x0a
    423a:	b9 84       	ldd	r11, Y+9	; 0x09
    423c:	c8 84       	ldd	r12, Y+8	; 0x08
    423e:	df 80       	ldd	r13, Y+7	; 0x07
    4240:	ee 80       	ldd	r14, Y+6	; 0x06
    4242:	fd 80       	ldd	r15, Y+5	; 0x05
    4244:	0c 81       	ldd	r16, Y+4	; 0x04
    4246:	1b 81       	ldd	r17, Y+3	; 0x03
    4248:	aa 81       	ldd	r26, Y+2	; 0x02
    424a:	b9 81       	ldd	r27, Y+1	; 0x01
    424c:	ce 0f       	add	r28, r30
    424e:	d1 1d       	adc	r29, r1
    4250:	0f b6       	in	r0, 0x3f	; 63
    4252:	f8 94       	cli
    4254:	de bf       	out	0x3e, r29	; 62
    4256:	0f be       	out	0x3f, r0	; 63
    4258:	cd bf       	out	0x3d, r28	; 61
    425a:	ed 01       	movw	r28, r26
    425c:	08 95       	ret

0000425e <_exit>:
    425e:	f8 94       	cli

00004260 <__stop_program>:
    4260:	ff cf       	rjmp	.-2      	; 0x4260 <__stop_program>
