
DashBoard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000057f0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000014a  00800060  000057f0  00005864  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00003f00  00000000  00000000  000059b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001134  00000000  00000000  000098b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  0000a9e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  0000ab24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  0000ac94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  0000c8dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  0000d7c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000e578  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000e6d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000e965  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000f133  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ef       	ldi	r30, 0xF0	; 240
      68:	f7 e5       	ldi	r31, 0x57	; 87
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3a       	cpi	r26, 0xAA	; 170
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 f8 27 	call	0x4ff0	; 0x4ff0 <main>
      7a:	0c 94 f6 2b 	jmp	0x57ec	; 0x57ec <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 bf 2b 	jmp	0x577e	; 0x577e <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a4 ef       	ldi	r26, 0xF4	; 244
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 db 2b 	jmp	0x57b6	; 0x57b6 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 cb 2b 	jmp	0x5796	; 0x5796 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 e7 2b 	jmp	0x57ce	; 0x57ce <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 cb 2b 	jmp	0x5796	; 0x5796 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 e7 2b 	jmp	0x57ce	; 0x57ce <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 bf 2b 	jmp	0x577e	; 0x577e <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	84 ef       	ldi	r24, 0xF4	; 244
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 db 2b 	jmp	0x57b6	; 0x57b6 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 cb 2b 	jmp	0x5796	; 0x5796 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 e7 2b 	jmp	0x57ce	; 0x57ce <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 cb 2b 	jmp	0x5796	; 0x5796 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 e7 2b 	jmp	0x57ce	; 0x57ce <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 cb 2b 	jmp	0x5796	; 0x5796 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 e7 2b 	jmp	0x57ce	; 0x57ce <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 cf 2b 	jmp	0x579e	; 0x579e <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 eb 2b 	jmp	0x57d6	; 0x57d6 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <voidSetHalfDataPort>:
#include"CLCD_interface.h"
#include"CLCD_prv.h"
#include"CLCD_cfg.h"
#if CLCD_u8BIT_MODE ==FOUR_BIT
static void voidSetHalfDataPort(uint8 Copy_u8Data)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	0f 92       	push	r0
     b3c:	cd b7       	in	r28, 0x3d	; 61
     b3e:	de b7       	in	r29, 0x3e	; 62
     b40:	89 83       	std	Y+1, r24	; 0x01
DIO_u8SetPinValue(CLCD_u8DATA_PORT,CLCD_u8D4_PIN,GET_BIT(Copy_u8Data,0));
     b42:	89 81       	ldd	r24, Y+1	; 0x01
     b44:	98 2f       	mov	r25, r24
     b46:	91 70       	andi	r25, 0x01	; 1
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	63 e0       	ldi	r22, 0x03	; 3
     b4c:	49 2f       	mov	r20, r25
     b4e:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <DIO_u8SetPinValue>
DIO_u8SetPinValue(CLCD_u8DATA_PORT,CLCD_u8D5_PIN,GET_BIT(Copy_u8Data,1));
     b52:	89 81       	ldd	r24, Y+1	; 0x01
     b54:	86 95       	lsr	r24
     b56:	98 2f       	mov	r25, r24
     b58:	91 70       	andi	r25, 0x01	; 1
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	64 e0       	ldi	r22, 0x04	; 4
     b5e:	49 2f       	mov	r20, r25
     b60:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <DIO_u8SetPinValue>
DIO_u8SetPinValue(CLCD_u8DATA_PORT,CLCD_u8D6_PIN,GET_BIT(Copy_u8Data,2));
     b64:	89 81       	ldd	r24, Y+1	; 0x01
     b66:	86 95       	lsr	r24
     b68:	86 95       	lsr	r24
     b6a:	98 2f       	mov	r25, r24
     b6c:	91 70       	andi	r25, 0x01	; 1
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	65 e0       	ldi	r22, 0x05	; 5
     b72:	49 2f       	mov	r20, r25
     b74:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <DIO_u8SetPinValue>
DIO_u8SetPinValue(CLCD_u8DATA_PORT,CLCD_u8D7_PIN,GET_BIT(Copy_u8Data,3));
     b78:	89 81       	ldd	r24, Y+1	; 0x01
     b7a:	86 95       	lsr	r24
     b7c:	86 95       	lsr	r24
     b7e:	86 95       	lsr	r24
     b80:	98 2f       	mov	r25, r24
     b82:	91 70       	andi	r25, 0x01	; 1
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	66 e0       	ldi	r22, 0x06	; 6
     b88:	49 2f       	mov	r20, r25
     b8a:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <DIO_u8SetPinValue>
}
     b8e:	0f 90       	pop	r0
     b90:	cf 91       	pop	r28
     b92:	df 91       	pop	r29
     b94:	08 95       	ret

00000b96 <voidSendEnablePulse>:
#endif

static void voidSendEnablePulse(void)
{
     b96:	df 93       	push	r29
     b98:	cf 93       	push	r28
     b9a:	cd b7       	in	r28, 0x3d	; 61
     b9c:	de b7       	in	r29, 0x3e	; 62
     b9e:	2e 97       	sbiw	r28, 0x0e	; 14
     ba0:	0f b6       	in	r0, 0x3f	; 63
     ba2:	f8 94       	cli
     ba4:	de bf       	out	0x3e, r29	; 62
     ba6:	0f be       	out	0x3f, r0	; 63
     ba8:	cd bf       	out	0x3d, r28	; 61

	// send enable pulse
	DIO_u8SetPinValue(CLCD_u8CTRL_PORT,CLCD_u8E_PIN,DIO_u8PIN_HIGH );
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	62 e0       	ldi	r22, 0x02	; 2
     bae:	41 e0       	ldi	r20, 0x01	; 1
     bb0:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <DIO_u8SetPinValue>
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	a0 e0       	ldi	r26, 0x00	; 0
     bba:	b0 e4       	ldi	r27, 0x40	; 64
     bbc:	8b 87       	std	Y+11, r24	; 0x0b
     bbe:	9c 87       	std	Y+12, r25	; 0x0c
     bc0:	ad 87       	std	Y+13, r26	; 0x0d
     bc2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bc4:	6b 85       	ldd	r22, Y+11	; 0x0b
     bc6:	7c 85       	ldd	r23, Y+12	; 0x0c
     bc8:	8d 85       	ldd	r24, Y+13	; 0x0d
     bca:	9e 85       	ldd	r25, Y+14	; 0x0e
     bcc:	20 e0       	ldi	r18, 0x00	; 0
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	4a e7       	ldi	r20, 0x7A	; 122
     bd2:	55 e4       	ldi	r21, 0x45	; 69
     bd4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     bd8:	dc 01       	movw	r26, r24
     bda:	cb 01       	movw	r24, r22
     bdc:	8f 83       	std	Y+7, r24	; 0x07
     bde:	98 87       	std	Y+8, r25	; 0x08
     be0:	a9 87       	std	Y+9, r26	; 0x09
     be2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     be4:	6f 81       	ldd	r22, Y+7	; 0x07
     be6:	78 85       	ldd	r23, Y+8	; 0x08
     be8:	89 85       	ldd	r24, Y+9	; 0x09
     bea:	9a 85       	ldd	r25, Y+10	; 0x0a
     bec:	20 e0       	ldi	r18, 0x00	; 0
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	40 e8       	ldi	r20, 0x80	; 128
     bf2:	5f e3       	ldi	r21, 0x3F	; 63
     bf4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     bf8:	88 23       	and	r24, r24
     bfa:	2c f4       	brge	.+10     	; 0xc06 <voidSendEnablePulse+0x70>
		__ticks = 1;
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	9e 83       	std	Y+6, r25	; 0x06
     c02:	8d 83       	std	Y+5, r24	; 0x05
     c04:	3f c0       	rjmp	.+126    	; 0xc84 <voidSendEnablePulse+0xee>
	else if (__tmp > 65535)
     c06:	6f 81       	ldd	r22, Y+7	; 0x07
     c08:	78 85       	ldd	r23, Y+8	; 0x08
     c0a:	89 85       	ldd	r24, Y+9	; 0x09
     c0c:	9a 85       	ldd	r25, Y+10	; 0x0a
     c0e:	20 e0       	ldi	r18, 0x00	; 0
     c10:	3f ef       	ldi	r19, 0xFF	; 255
     c12:	4f e7       	ldi	r20, 0x7F	; 127
     c14:	57 e4       	ldi	r21, 0x47	; 71
     c16:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     c1a:	18 16       	cp	r1, r24
     c1c:	4c f5       	brge	.+82     	; 0xc70 <voidSendEnablePulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c1e:	6b 85       	ldd	r22, Y+11	; 0x0b
     c20:	7c 85       	ldd	r23, Y+12	; 0x0c
     c22:	8d 85       	ldd	r24, Y+13	; 0x0d
     c24:	9e 85       	ldd	r25, Y+14	; 0x0e
     c26:	20 e0       	ldi	r18, 0x00	; 0
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	40 e2       	ldi	r20, 0x20	; 32
     c2c:	51 e4       	ldi	r21, 0x41	; 65
     c2e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     c32:	dc 01       	movw	r26, r24
     c34:	cb 01       	movw	r24, r22
     c36:	bc 01       	movw	r22, r24
     c38:	cd 01       	movw	r24, r26
     c3a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c3e:	dc 01       	movw	r26, r24
     c40:	cb 01       	movw	r24, r22
     c42:	9e 83       	std	Y+6, r25	; 0x06
     c44:	8d 83       	std	Y+5, r24	; 0x05
     c46:	0f c0       	rjmp	.+30     	; 0xc66 <voidSendEnablePulse+0xd0>
     c48:	80 e9       	ldi	r24, 0x90	; 144
     c4a:	91 e0       	ldi	r25, 0x01	; 1
     c4c:	9c 83       	std	Y+4, r25	; 0x04
     c4e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c50:	8b 81       	ldd	r24, Y+3	; 0x03
     c52:	9c 81       	ldd	r25, Y+4	; 0x04
     c54:	01 97       	sbiw	r24, 0x01	; 1
     c56:	f1 f7       	brne	.-4      	; 0xc54 <voidSendEnablePulse+0xbe>
     c58:	9c 83       	std	Y+4, r25	; 0x04
     c5a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c5c:	8d 81       	ldd	r24, Y+5	; 0x05
     c5e:	9e 81       	ldd	r25, Y+6	; 0x06
     c60:	01 97       	sbiw	r24, 0x01	; 1
     c62:	9e 83       	std	Y+6, r25	; 0x06
     c64:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c66:	8d 81       	ldd	r24, Y+5	; 0x05
     c68:	9e 81       	ldd	r25, Y+6	; 0x06
     c6a:	00 97       	sbiw	r24, 0x00	; 0
     c6c:	69 f7       	brne	.-38     	; 0xc48 <voidSendEnablePulse+0xb2>
     c6e:	14 c0       	rjmp	.+40     	; 0xc98 <voidSendEnablePulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c70:	6f 81       	ldd	r22, Y+7	; 0x07
     c72:	78 85       	ldd	r23, Y+8	; 0x08
     c74:	89 85       	ldd	r24, Y+9	; 0x09
     c76:	9a 85       	ldd	r25, Y+10	; 0x0a
     c78:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c7c:	dc 01       	movw	r26, r24
     c7e:	cb 01       	movw	r24, r22
     c80:	9e 83       	std	Y+6, r25	; 0x06
     c82:	8d 83       	std	Y+5, r24	; 0x05
     c84:	8d 81       	ldd	r24, Y+5	; 0x05
     c86:	9e 81       	ldd	r25, Y+6	; 0x06
     c88:	9a 83       	std	Y+2, r25	; 0x02
     c8a:	89 83       	std	Y+1, r24	; 0x01
     c8c:	89 81       	ldd	r24, Y+1	; 0x01
     c8e:	9a 81       	ldd	r25, Y+2	; 0x02
     c90:	01 97       	sbiw	r24, 0x01	; 1
     c92:	f1 f7       	brne	.-4      	; 0xc90 <voidSendEnablePulse+0xfa>
     c94:	9a 83       	std	Y+2, r25	; 0x02
     c96:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_u8CTRL_PORT,CLCD_u8E_PIN,DIO_u8PIN_LOW);
     c98:	80 e0       	ldi	r24, 0x00	; 0
     c9a:	62 e0       	ldi	r22, 0x02	; 2
     c9c:	40 e0       	ldi	r20, 0x00	; 0
     c9e:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <DIO_u8SetPinValue>
}
     ca2:	2e 96       	adiw	r28, 0x0e	; 14
     ca4:	0f b6       	in	r0, 0x3f	; 63
     ca6:	f8 94       	cli
     ca8:	de bf       	out	0x3e, r29	; 62
     caa:	0f be       	out	0x3f, r0	; 63
     cac:	cd bf       	out	0x3d, r28	; 61
     cae:	cf 91       	pop	r28
     cb0:	df 91       	pop	r29
     cb2:	08 95       	ret

00000cb4 <CLCD_voidSendCmd>:


void CLCD_voidSendCmd(uint8 Copy_u8Cmd)
{ //set RS pin to low for command
     cb4:	df 93       	push	r29
     cb6:	cf 93       	push	r28
     cb8:	0f 92       	push	r0
     cba:	cd b7       	in	r28, 0x3d	; 61
     cbc:	de b7       	in	r29, 0x3e	; 62
     cbe:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(CLCD_u8CTRL_PORT,CLCD_u8RS_PIN,DIO_u8PIN_LOW);
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	61 e0       	ldi	r22, 0x01	; 1
     cc4:	40 e0       	ldi	r20, 0x00	; 0
     cc6:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <DIO_u8SetPinValue>
	//send the command
	DIO_u8SetPortValue(CLCD_u8DATA_PORT,Copy_u8Cmd);
	voidSendEnablePulse();
#elif 	CLCD_u8BIT_MODE==FOUR_BIT
	/*Send the 4 Most significant bits of the command first*/
	voidSetHalfDataPort(Copy_u8Cmd >> 4);
     cca:	89 81       	ldd	r24, Y+1	; 0x01
     ccc:	82 95       	swap	r24
     cce:	8f 70       	andi	r24, 0x0F	; 15
     cd0:	0e 94 9b 05 	call	0xb36	; 0xb36 <voidSetHalfDataPort>
	voidSendEnablePulse();
     cd4:	0e 94 cb 05 	call	0xb96	; 0xb96 <voidSendEnablePulse>
	voidSetHalfDataPort(Copy_u8Cmd);
     cd8:	89 81       	ldd	r24, Y+1	; 0x01
     cda:	0e 94 9b 05 	call	0xb36	; 0xb36 <voidSetHalfDataPort>
	voidSendEnablePulse();
     cde:	0e 94 cb 05 	call	0xb96	; 0xb96 <voidSendEnablePulse>
#else
#error wrong CLCD_u8BIT_MODE configuration option
#endif

}
     ce2:	0f 90       	pop	r0
     ce4:	cf 91       	pop	r28
     ce6:	df 91       	pop	r29
     ce8:	08 95       	ret

00000cea <CLCD_voidSendData>:
void CLCD_voidSendData(uint8 Copy_u8Data)
{
     cea:	df 93       	push	r29
     cec:	cf 93       	push	r28
     cee:	0f 92       	push	r0
     cf0:	cd b7       	in	r28, 0x3d	; 61
     cf2:	de b7       	in	r29, 0x3e	; 62
     cf4:	89 83       	std	Y+1, r24	; 0x01

	 //set RS pin to HIGH for DATA
		DIO_u8SetPinValue(CLCD_u8CTRL_PORT,CLCD_u8RS_PIN,DIO_u8PIN_HIGH);
     cf6:	80 e0       	ldi	r24, 0x00	; 0
     cf8:	61 e0       	ldi	r22, 0x01	; 1
     cfa:	41 e0       	ldi	r20, 0x01	; 1
     cfc:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <DIO_u8SetPinValue>
	DIO_u8SetPortValue(CLCD_u8DATA_PORT,Copy_u8Data);//
	voidSendEnablePulse();

#elif CLCD_u8BIT_MODE == FOUR_BIT
	/*Send the 4 Most significant bits of the data first*/
	voidSetHalfDataPort(Copy_u8Data >> 4);
     d00:	89 81       	ldd	r24, Y+1	; 0x01
     d02:	82 95       	swap	r24
     d04:	8f 70       	andi	r24, 0x0F	; 15
     d06:	0e 94 9b 05 	call	0xb36	; 0xb36 <voidSetHalfDataPort>
	voidSendEnablePulse();
     d0a:	0e 94 cb 05 	call	0xb96	; 0xb96 <voidSendEnablePulse>
	voidSetHalfDataPort(Copy_u8Data);
     d0e:	89 81       	ldd	r24, Y+1	; 0x01
     d10:	0e 94 9b 05 	call	0xb36	; 0xb36 <voidSetHalfDataPort>
	voidSendEnablePulse();
     d14:	0e 94 cb 05 	call	0xb96	; 0xb96 <voidSendEnablePulse>

#else
#error wrong CLCD_u8BIT_MODE configuration option
#endif

}
     d18:	0f 90       	pop	r0
     d1a:	cf 91       	pop	r28
     d1c:	df 91       	pop	r29
     d1e:	08 95       	ret

00000d20 <CLCD_VoidInit>:
void CLCD_VoidInit(void)
{//if rs ==0 it is command ..low
     d20:	df 93       	push	r29
     d22:	cf 93       	push	r28
     d24:	cd b7       	in	r28, 0x3d	; 61
     d26:	de b7       	in	r29, 0x3e	; 62
     d28:	2e 97       	sbiw	r28, 0x0e	; 14
     d2a:	0f b6       	in	r0, 0x3f	; 63
     d2c:	f8 94       	cli
     d2e:	de bf       	out	0x3e, r29	; 62
     d30:	0f be       	out	0x3f, r0	; 63
     d32:	cd bf       	out	0x3d, r28	; 61
     d34:	80 e0       	ldi	r24, 0x00	; 0
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	a0 e2       	ldi	r26, 0x20	; 32
     d3a:	b2 e4       	ldi	r27, 0x42	; 66
     d3c:	8b 87       	std	Y+11, r24	; 0x0b
     d3e:	9c 87       	std	Y+12, r25	; 0x0c
     d40:	ad 87       	std	Y+13, r26	; 0x0d
     d42:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d44:	6b 85       	ldd	r22, Y+11	; 0x0b
     d46:	7c 85       	ldd	r23, Y+12	; 0x0c
     d48:	8d 85       	ldd	r24, Y+13	; 0x0d
     d4a:	9e 85       	ldd	r25, Y+14	; 0x0e
     d4c:	20 e0       	ldi	r18, 0x00	; 0
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	4a e7       	ldi	r20, 0x7A	; 122
     d52:	55 e4       	ldi	r21, 0x45	; 69
     d54:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d58:	dc 01       	movw	r26, r24
     d5a:	cb 01       	movw	r24, r22
     d5c:	8f 83       	std	Y+7, r24	; 0x07
     d5e:	98 87       	std	Y+8, r25	; 0x08
     d60:	a9 87       	std	Y+9, r26	; 0x09
     d62:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d64:	6f 81       	ldd	r22, Y+7	; 0x07
     d66:	78 85       	ldd	r23, Y+8	; 0x08
     d68:	89 85       	ldd	r24, Y+9	; 0x09
     d6a:	9a 85       	ldd	r25, Y+10	; 0x0a
     d6c:	20 e0       	ldi	r18, 0x00	; 0
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	40 e8       	ldi	r20, 0x80	; 128
     d72:	5f e3       	ldi	r21, 0x3F	; 63
     d74:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     d78:	88 23       	and	r24, r24
     d7a:	2c f4       	brge	.+10     	; 0xd86 <CLCD_VoidInit+0x66>
		__ticks = 1;
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	9e 83       	std	Y+6, r25	; 0x06
     d82:	8d 83       	std	Y+5, r24	; 0x05
     d84:	3f c0       	rjmp	.+126    	; 0xe04 <CLCD_VoidInit+0xe4>
	else if (__tmp > 65535)
     d86:	6f 81       	ldd	r22, Y+7	; 0x07
     d88:	78 85       	ldd	r23, Y+8	; 0x08
     d8a:	89 85       	ldd	r24, Y+9	; 0x09
     d8c:	9a 85       	ldd	r25, Y+10	; 0x0a
     d8e:	20 e0       	ldi	r18, 0x00	; 0
     d90:	3f ef       	ldi	r19, 0xFF	; 255
     d92:	4f e7       	ldi	r20, 0x7F	; 127
     d94:	57 e4       	ldi	r21, 0x47	; 71
     d96:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     d9a:	18 16       	cp	r1, r24
     d9c:	4c f5       	brge	.+82     	; 0xdf0 <CLCD_VoidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d9e:	6b 85       	ldd	r22, Y+11	; 0x0b
     da0:	7c 85       	ldd	r23, Y+12	; 0x0c
     da2:	8d 85       	ldd	r24, Y+13	; 0x0d
     da4:	9e 85       	ldd	r25, Y+14	; 0x0e
     da6:	20 e0       	ldi	r18, 0x00	; 0
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	40 e2       	ldi	r20, 0x20	; 32
     dac:	51 e4       	ldi	r21, 0x41	; 65
     dae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     db2:	dc 01       	movw	r26, r24
     db4:	cb 01       	movw	r24, r22
     db6:	bc 01       	movw	r22, r24
     db8:	cd 01       	movw	r24, r26
     dba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     dbe:	dc 01       	movw	r26, r24
     dc0:	cb 01       	movw	r24, r22
     dc2:	9e 83       	std	Y+6, r25	; 0x06
     dc4:	8d 83       	std	Y+5, r24	; 0x05
     dc6:	0f c0       	rjmp	.+30     	; 0xde6 <CLCD_VoidInit+0xc6>
     dc8:	80 e9       	ldi	r24, 0x90	; 144
     dca:	91 e0       	ldi	r25, 0x01	; 1
     dcc:	9c 83       	std	Y+4, r25	; 0x04
     dce:	8b 83       	std	Y+3, r24	; 0x03
     dd0:	8b 81       	ldd	r24, Y+3	; 0x03
     dd2:	9c 81       	ldd	r25, Y+4	; 0x04
     dd4:	01 97       	sbiw	r24, 0x01	; 1
     dd6:	f1 f7       	brne	.-4      	; 0xdd4 <CLCD_VoidInit+0xb4>
     dd8:	9c 83       	std	Y+4, r25	; 0x04
     dda:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ddc:	8d 81       	ldd	r24, Y+5	; 0x05
     dde:	9e 81       	ldd	r25, Y+6	; 0x06
     de0:	01 97       	sbiw	r24, 0x01	; 1
     de2:	9e 83       	std	Y+6, r25	; 0x06
     de4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     de6:	8d 81       	ldd	r24, Y+5	; 0x05
     de8:	9e 81       	ldd	r25, Y+6	; 0x06
     dea:	00 97       	sbiw	r24, 0x00	; 0
     dec:	69 f7       	brne	.-38     	; 0xdc8 <CLCD_VoidInit+0xa8>
     dee:	14 c0       	rjmp	.+40     	; 0xe18 <CLCD_VoidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     df0:	6f 81       	ldd	r22, Y+7	; 0x07
     df2:	78 85       	ldd	r23, Y+8	; 0x08
     df4:	89 85       	ldd	r24, Y+9	; 0x09
     df6:	9a 85       	ldd	r25, Y+10	; 0x0a
     df8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     dfc:	dc 01       	movw	r26, r24
     dfe:	cb 01       	movw	r24, r22
     e00:	9e 83       	std	Y+6, r25	; 0x06
     e02:	8d 83       	std	Y+5, r24	; 0x05
     e04:	8d 81       	ldd	r24, Y+5	; 0x05
     e06:	9e 81       	ldd	r25, Y+6	; 0x06
     e08:	9a 83       	std	Y+2, r25	; 0x02
     e0a:	89 83       	std	Y+1, r24	; 0x01
     e0c:	89 81       	ldd	r24, Y+1	; 0x01
     e0e:	9a 81       	ldd	r25, Y+2	; 0x02
     e10:	01 97       	sbiw	r24, 0x01	; 1
     e12:	f1 f7       	brne	.-4      	; 0xe10 <CLCD_VoidInit+0xf0>
     e14:	9a 83       	std	Y+2, r25	; 0x02
     e16:	89 83       	std	Y+1, r24	; 0x01
#if  CLCD_u8BIT_MODE == EIGHT_BIT
	//function set command :2lines , font size 5*11
	CLCD_voidSendCmd(0b00111100);

#elif  CLCD_u8BIT_MODE == FOUR_BIT
		voidSetHalfDataPort(0b0010);
     e18:	82 e0       	ldi	r24, 0x02	; 2
     e1a:	0e 94 9b 05 	call	0xb36	; 0xb36 <voidSetHalfDataPort>
		voidSendEnablePulse();
     e1e:	0e 94 cb 05 	call	0xb96	; 0xb96 <voidSendEnablePulse>
		voidSetHalfDataPort(0b0010);
     e22:	82 e0       	ldi	r24, 0x02	; 2
     e24:	0e 94 9b 05 	call	0xb36	; 0xb36 <voidSetHalfDataPort>
		voidSendEnablePulse();
     e28:	0e 94 cb 05 	call	0xb96	; 0xb96 <voidSendEnablePulse>
		voidSetHalfDataPort(0b1000);
     e2c:	88 e0       	ldi	r24, 0x08	; 8
     e2e:	0e 94 9b 05 	call	0xb36	; 0xb36 <voidSetHalfDataPort>
		voidSendEnablePulse();
     e32:	0e 94 cb 05 	call	0xb96	; 0xb96 <voidSendEnablePulse>

	#endif

	//display on off control: display on, cursor off , blink cursor off
	CLCD_voidSendCmd(0b00001100);
     e36:	8c e0       	ldi	r24, 0x0C	; 12
     e38:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendCmd>
	//clear display
	CLCD_voidSendCmd(1);
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendCmd>

}
     e42:	2e 96       	adiw	r28, 0x0e	; 14
     e44:	0f b6       	in	r0, 0x3f	; 63
     e46:	f8 94       	cli
     e48:	de bf       	out	0x3e, r29	; 62
     e4a:	0f be       	out	0x3f, r0	; 63
     e4c:	cd bf       	out	0x3d, r28	; 61
     e4e:	cf 91       	pop	r28
     e50:	df 91       	pop	r29
     e52:	08 95       	ret

00000e54 <CLCD_u8SendString>:

uint8 CLCD_u8SendString(const char* Copy_pchString)
{
     e54:	df 93       	push	r29
     e56:	cf 93       	push	r28
     e58:	00 d0       	rcall	.+0      	; 0xe5a <CLCD_u8SendString+0x6>
     e5a:	00 d0       	rcall	.+0      	; 0xe5c <CLCD_u8SendString+0x8>
     e5c:	cd b7       	in	r28, 0x3d	; 61
     e5e:	de b7       	in	r29, 0x3e	; 62
     e60:	9c 83       	std	Y+4, r25	; 0x04
     e62:	8b 83       	std	Y+3, r24	; 0x03

uint8 Local_u8ErrorState=OK;
     e64:	1a 82       	std	Y+2, r1	; 0x02
 if(Copy_pchString!=NULL)
     e66:	8b 81       	ldd	r24, Y+3	; 0x03
     e68:	9c 81       	ldd	r25, Y+4	; 0x04
     e6a:	00 97       	sbiw	r24, 0x00	; 0
     e6c:	e1 f0       	breq	.+56     	; 0xea6 <CLCD_u8SendString+0x52>
 {
  uint8 Local_u8Iteratot=0u;
     e6e:	19 82       	std	Y+1, r1	; 0x01
     e70:	0e c0       	rjmp	.+28     	; 0xe8e <CLCD_u8SendString+0x3a>
   while(Copy_pchString[Local_u8Iteratot]!='\0')
      {
	    CLCD_voidSendData(Copy_pchString[Local_u8Iteratot]);
     e72:	89 81       	ldd	r24, Y+1	; 0x01
     e74:	28 2f       	mov	r18, r24
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	8b 81       	ldd	r24, Y+3	; 0x03
     e7a:	9c 81       	ldd	r25, Y+4	; 0x04
     e7c:	fc 01       	movw	r30, r24
     e7e:	e2 0f       	add	r30, r18
     e80:	f3 1f       	adc	r31, r19
     e82:	80 81       	ld	r24, Z
     e84:	0e 94 75 06 	call	0xcea	; 0xcea <CLCD_voidSendData>
	    Local_u8Iteratot++;
     e88:	89 81       	ldd	r24, Y+1	; 0x01
     e8a:	8f 5f       	subi	r24, 0xFF	; 255
     e8c:	89 83       	std	Y+1, r24	; 0x01

uint8 Local_u8ErrorState=OK;
 if(Copy_pchString!=NULL)
 {
  uint8 Local_u8Iteratot=0u;
   while(Copy_pchString[Local_u8Iteratot]!='\0')
     e8e:	89 81       	ldd	r24, Y+1	; 0x01
     e90:	28 2f       	mov	r18, r24
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	8b 81       	ldd	r24, Y+3	; 0x03
     e96:	9c 81       	ldd	r25, Y+4	; 0x04
     e98:	fc 01       	movw	r30, r24
     e9a:	e2 0f       	add	r30, r18
     e9c:	f3 1f       	adc	r31, r19
     e9e:	80 81       	ld	r24, Z
     ea0:	88 23       	and	r24, r24
     ea2:	39 f7       	brne	.-50     	; 0xe72 <CLCD_u8SendString+0x1e>
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <CLCD_u8SendString+0x56>
      }

 }
 else
  {
 	Local_u8ErrorState=  NULL_PTR_ERR;
     ea6:	82 e0       	ldi	r24, 0x02	; 2
     ea8:	8a 83       	std	Y+2, r24	; 0x02
  }
 return Local_u8ErrorState;
     eaa:	8a 81       	ldd	r24, Y+2	; 0x02
}
     eac:	0f 90       	pop	r0
     eae:	0f 90       	pop	r0
     eb0:	0f 90       	pop	r0
     eb2:	0f 90       	pop	r0
     eb4:	cf 91       	pop	r28
     eb6:	df 91       	pop	r29
     eb8:	08 95       	ret

00000eba <CLCD_voidSendNumber>:
void CLCD_voidSendNumber(sint32 Copy_s32Number )
{ char Local_chNumber[10];
     eba:	df 93       	push	r29
     ebc:	cf 93       	push	r28
     ebe:	cd b7       	in	r28, 0x3d	; 61
     ec0:	de b7       	in	r29, 0x3e	; 62
     ec2:	61 97       	sbiw	r28, 0x11	; 17
     ec4:	0f b6       	in	r0, 0x3f	; 63
     ec6:	f8 94       	cli
     ec8:	de bf       	out	0x3e, r29	; 62
     eca:	0f be       	out	0x3f, r0	; 63
     ecc:	cd bf       	out	0x3d, r28	; 61
     ece:	6e 87       	std	Y+14, r22	; 0x0e
     ed0:	7f 87       	std	Y+15, r23	; 0x0f
     ed2:	88 8b       	std	Y+16, r24	; 0x10
     ed4:	99 8b       	std	Y+17, r25	; 0x11
  uint8 Local_u8RightDigit,Local_u8Counter1=0u;
     ed6:	1a 82       	std	Y+2, r1	; 0x02
  sint8 Local_s8Counter2=0;
     ed8:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_s32Number==0)
     eda:	8e 85       	ldd	r24, Y+14	; 0x0e
     edc:	9f 85       	ldd	r25, Y+15	; 0x0f
     ede:	a8 89       	ldd	r26, Y+16	; 0x10
     ee0:	b9 89       	ldd	r27, Y+17	; 0x11
     ee2:	00 97       	sbiw	r24, 0x00	; 0
     ee4:	a1 05       	cpc	r26, r1
     ee6:	b1 05       	cpc	r27, r1
     ee8:	21 f4       	brne	.+8      	; 0xef2 <CLCD_voidSendNumber+0x38>
	{
		CLCD_voidSendData('0');
     eea:	80 e3       	ldi	r24, 0x30	; 48
     eec:	0e 94 75 06 	call	0xcea	; 0xcea <CLCD_voidSendData>
     ef0:	67 c0       	rjmp	.+206    	; 0xfc0 <CLCD_voidSendNumber+0x106>
		return;
	}
	else if (Copy_s32Number<0)
     ef2:	8e 85       	ldd	r24, Y+14	; 0x0e
     ef4:	9f 85       	ldd	r25, Y+15	; 0x0f
     ef6:	a8 89       	ldd	r26, Y+16	; 0x10
     ef8:	b9 89       	ldd	r27, Y+17	; 0x11
     efa:	bb 23       	and	r27, r27
     efc:	0c f0       	brlt	.+2      	; 0xf00 <CLCD_voidSendNumber+0x46>
     efe:	43 c0       	rjmp	.+134    	; 0xf86 <CLCD_voidSendNumber+0xcc>
	{ //make -ve -> +ve and print - "sign" on clcd
		Copy_s32Number *=-1;
     f00:	8e 85       	ldd	r24, Y+14	; 0x0e
     f02:	9f 85       	ldd	r25, Y+15	; 0x0f
     f04:	a8 89       	ldd	r26, Y+16	; 0x10
     f06:	b9 89       	ldd	r27, Y+17	; 0x11
     f08:	b0 95       	com	r27
     f0a:	a0 95       	com	r26
     f0c:	90 95       	com	r25
     f0e:	81 95       	neg	r24
     f10:	9f 4f       	sbci	r25, 0xFF	; 255
     f12:	af 4f       	sbci	r26, 0xFF	; 255
     f14:	bf 4f       	sbci	r27, 0xFF	; 255
     f16:	8e 87       	std	Y+14, r24	; 0x0e
     f18:	9f 87       	std	Y+15, r25	; 0x0f
     f1a:	a8 8b       	std	Y+16, r26	; 0x10
     f1c:	b9 8b       	std	Y+17, r27	; 0x11
		CLCD_voidSendData('-');
     f1e:	8d e2       	ldi	r24, 0x2D	; 45
     f20:	0e 94 75 06 	call	0xcea	; 0xcea <CLCD_voidSendData>
     f24:	30 c0       	rjmp	.+96     	; 0xf86 <CLCD_voidSendNumber+0xcc>

	}
	while(Copy_s32Number!=0)
	{
		Local_u8RightDigit=(uint8)((uint32)Copy_s32Number %10);//get right most digit
     f26:	8e 85       	ldd	r24, Y+14	; 0x0e
     f28:	9f 85       	ldd	r25, Y+15	; 0x0f
     f2a:	a8 89       	ldd	r26, Y+16	; 0x10
     f2c:	b9 89       	ldd	r27, Y+17	; 0x11
     f2e:	2a e0       	ldi	r18, 0x0A	; 10
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	40 e0       	ldi	r20, 0x00	; 0
     f34:	50 e0       	ldi	r21, 0x00	; 0
     f36:	bc 01       	movw	r22, r24
     f38:	cd 01       	movw	r24, r26
     f3a:	0e 94 82 2b 	call	0x5704	; 0x5704 <__udivmodsi4>
     f3e:	dc 01       	movw	r26, r24
     f40:	cb 01       	movw	r24, r22
     f42:	8b 83       	std	Y+3, r24	; 0x03
		Copy_s32Number/=10; //remove right digit
     f44:	8e 85       	ldd	r24, Y+14	; 0x0e
     f46:	9f 85       	ldd	r25, Y+15	; 0x0f
     f48:	a8 89       	ldd	r26, Y+16	; 0x10
     f4a:	b9 89       	ldd	r27, Y+17	; 0x11
     f4c:	2a e0       	ldi	r18, 0x0A	; 10
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	40 e0       	ldi	r20, 0x00	; 0
     f52:	50 e0       	ldi	r21, 0x00	; 0
     f54:	bc 01       	movw	r22, r24
     f56:	cd 01       	movw	r24, r26
     f58:	0e 94 a4 2b 	call	0x5748	; 0x5748 <__divmodsi4>
     f5c:	da 01       	movw	r26, r20
     f5e:	c9 01       	movw	r24, r18
     f60:	8e 87       	std	Y+14, r24	; 0x0e
     f62:	9f 87       	std	Y+15, r25	; 0x0f
     f64:	a8 8b       	std	Y+16, r26	; 0x10
     f66:	b9 8b       	std	Y+17, r27	; 0x11
		Local_chNumber[Local_u8Counter1]=Local_u8RightDigit+'0'; //CONVERT TO ASCII
     f68:	8a 81       	ldd	r24, Y+2	; 0x02
     f6a:	28 2f       	mov	r18, r24
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	8b 81       	ldd	r24, Y+3	; 0x03
     f70:	48 2f       	mov	r20, r24
     f72:	40 5d       	subi	r20, 0xD0	; 208
     f74:	ce 01       	movw	r24, r28
     f76:	04 96       	adiw	r24, 0x04	; 4
     f78:	fc 01       	movw	r30, r24
     f7a:	e2 0f       	add	r30, r18
     f7c:	f3 1f       	adc	r31, r19
     f7e:	40 83       	st	Z, r20
		Local_u8Counter1++;
     f80:	8a 81       	ldd	r24, Y+2	; 0x02
     f82:	8f 5f       	subi	r24, 0xFF	; 255
     f84:	8a 83       	std	Y+2, r24	; 0x02
	{ //make -ve -> +ve and print - "sign" on clcd
		Copy_s32Number *=-1;
		CLCD_voidSendData('-');

	}
	while(Copy_s32Number!=0)
     f86:	8e 85       	ldd	r24, Y+14	; 0x0e
     f88:	9f 85       	ldd	r25, Y+15	; 0x0f
     f8a:	a8 89       	ldd	r26, Y+16	; 0x10
     f8c:	b9 89       	ldd	r27, Y+17	; 0x11
     f8e:	00 97       	sbiw	r24, 0x00	; 0
     f90:	a1 05       	cpc	r26, r1
     f92:	b1 05       	cpc	r27, r1
     f94:	41 f6       	brne	.-112    	; 0xf26 <CLCD_voidSendNumber+0x6c>
		Local_u8Counter1++;


	}
	/////////////
	for(Local_s8Counter2 =(sint8)Local_u8Counter1-1; Local_s8Counter2>=0;Local_s8Counter2--)
     f96:	8a 81       	ldd	r24, Y+2	; 0x02
     f98:	81 50       	subi	r24, 0x01	; 1
     f9a:	89 83       	std	Y+1, r24	; 0x01
     f9c:	0e c0       	rjmp	.+28     	; 0xfba <CLCD_voidSendNumber+0x100>

	{
		CLCD_voidSendData(Local_chNumber[(uint8)Local_s8Counter2]);
     f9e:	89 81       	ldd	r24, Y+1	; 0x01
     fa0:	28 2f       	mov	r18, r24
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	ce 01       	movw	r24, r28
     fa6:	04 96       	adiw	r24, 0x04	; 4
     fa8:	fc 01       	movw	r30, r24
     faa:	e2 0f       	add	r30, r18
     fac:	f3 1f       	adc	r31, r19
     fae:	80 81       	ld	r24, Z
     fb0:	0e 94 75 06 	call	0xcea	; 0xcea <CLCD_voidSendData>
		Local_u8Counter1++;


	}
	/////////////
	for(Local_s8Counter2 =(sint8)Local_u8Counter1-1; Local_s8Counter2>=0;Local_s8Counter2--)
     fb4:	89 81       	ldd	r24, Y+1	; 0x01
     fb6:	81 50       	subi	r24, 0x01	; 1
     fb8:	89 83       	std	Y+1, r24	; 0x01
     fba:	89 81       	ldd	r24, Y+1	; 0x01
     fbc:	88 23       	and	r24, r24
     fbe:	7c f7       	brge	.-34     	; 0xf9e <CLCD_voidSendNumber+0xe4>

	{
		CLCD_voidSendData(Local_chNumber[(uint8)Local_s8Counter2]);
	}
}
     fc0:	61 96       	adiw	r28, 0x11	; 17
     fc2:	0f b6       	in	r0, 0x3f	; 63
     fc4:	f8 94       	cli
     fc6:	de bf       	out	0x3e, r29	; 62
     fc8:	0f be       	out	0x3f, r0	; 63
     fca:	cd bf       	out	0x3d, r28	; 61
     fcc:	cf 91       	pop	r28
     fce:	df 91       	pop	r29
     fd0:	08 95       	ret

00000fd2 <CLCD_VoidGoToXY>:
void CLCD_VoidGoToXY(uint8 Copy_u8Xpos,uint8 Copy_u8Ypos)
{
     fd2:	df 93       	push	r29
     fd4:	cf 93       	push	r28
     fd6:	00 d0       	rcall	.+0      	; 0xfd8 <CLCD_VoidGoToXY+0x6>
     fd8:	0f 92       	push	r0
     fda:	cd b7       	in	r28, 0x3d	; 61
     fdc:	de b7       	in	r29, 0x3e	; 62
     fde:	8a 83       	std	Y+2, r24	; 0x02
     fe0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8Adress ;
	if(Copy_u8Ypos==0u)
     fe2:	8b 81       	ldd	r24, Y+3	; 0x03
     fe4:	88 23       	and	r24, r24
     fe6:	19 f4       	brne	.+6      	; 0xfee <CLCD_VoidGoToXY+0x1c>
	{
		Local_u8Adress=Copy_u8Xpos;
     fe8:	8a 81       	ldd	r24, Y+2	; 0x02
     fea:	89 83       	std	Y+1, r24	; 0x01
     fec:	06 c0       	rjmp	.+12     	; 0xffa <CLCD_VoidGoToXY+0x28>
	}
	else if(Copy_u8Ypos==1u)
     fee:	8b 81       	ldd	r24, Y+3	; 0x03
     ff0:	81 30       	cpi	r24, 0x01	; 1
     ff2:	19 f4       	brne	.+6      	; 0xffa <CLCD_VoidGoToXY+0x28>
	{
		Local_u8Adress=0x40+Copy_u8Xpos;
     ff4:	8a 81       	ldd	r24, Y+2	; 0x02
     ff6:	80 5c       	subi	r24, 0xC0	; 192
     ff8:	89 83       	std	Y+1, r24	; 0x01

	}
	// WE CAN USE IT INSTEAD OF IF.IFELSE :Local_u8Adress=ox40*Copy_u8Ypos+Copy_u8Xpos;
   // SET BIT 7 FOR SET DDRAM ADDRESS COMMAND
	SET_BIT(Local_u8Adress,7);
     ffa:	89 81       	ldd	r24, Y+1	; 0x01
     ffc:	80 68       	ori	r24, 0x80	; 128
     ffe:	89 83       	std	Y+1, r24	; 0x01
	//EXECUTE SET DDRam address command
   CLCD_voidSendCmd(Local_u8Adress);
    1000:	89 81       	ldd	r24, Y+1	; 0x01
    1002:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendCmd>

}
    1006:	0f 90       	pop	r0
    1008:	0f 90       	pop	r0
    100a:	0f 90       	pop	r0
    100c:	cf 91       	pop	r28
    100e:	df 91       	pop	r29
    1010:	08 95       	ret

00001012 <CLCD_u8SpecialCharacter>:
uint8 CLCD_u8SpecialCharacter(uint8 Copy_u8LocationNum, uint8 * Copy_puPattern,uint8 Copy_u8Xpos,uint8 Copy_u8Ypos)
{
    1012:	df 93       	push	r29
    1014:	cf 93       	push	r28
    1016:	cd b7       	in	r28, 0x3d	; 61
    1018:	de b7       	in	r29, 0x3e	; 62
    101a:	28 97       	sbiw	r28, 0x08	; 8
    101c:	0f b6       	in	r0, 0x3f	; 63
    101e:	f8 94       	cli
    1020:	de bf       	out	0x3e, r29	; 62
    1022:	0f be       	out	0x3f, r0	; 63
    1024:	cd bf       	out	0x3d, r28	; 61
    1026:	8c 83       	std	Y+4, r24	; 0x04
    1028:	7e 83       	std	Y+6, r23	; 0x06
    102a:	6d 83       	std	Y+5, r22	; 0x05
    102c:	4f 83       	std	Y+7, r20	; 0x07
    102e:	28 87       	std	Y+8, r18	; 0x08
uint8 Local_u8ErrorState=OK;
    1030:	1b 82       	std	Y+3, r1	; 0x03
uint8 Local_u8Counter=0;
    1032:	1a 82       	std	Y+2, r1	; 0x02
if(Copy_puPattern!=NULL)
    1034:	8d 81       	ldd	r24, Y+5	; 0x05
    1036:	9e 81       	ldd	r25, Y+6	; 0x06
    1038:	00 97       	sbiw	r24, 0x00	; 0
    103a:	59 f1       	breq	.+86     	; 0x1092 <CLCD_u8SpecialCharacter+0x80>
{
	uint8 Local_u8CGRAMAddress= Copy_u8LocationNum*8;
    103c:	8c 81       	ldd	r24, Y+4	; 0x04
    103e:	88 2f       	mov	r24, r24
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	88 0f       	add	r24, r24
    1044:	99 1f       	adc	r25, r25
    1046:	88 0f       	add	r24, r24
    1048:	99 1f       	adc	r25, r25
    104a:	88 0f       	add	r24, r24
    104c:	99 1f       	adc	r25, r25
    104e:	89 83       	std	Y+1, r24	; 0x01
	//set bit 6 for CGRAM ADDRESS  command
	SET_BIT(Local_u8CGRAMAddress,6u);
    1050:	89 81       	ldd	r24, Y+1	; 0x01
    1052:	80 64       	ori	r24, 0x40	; 64
    1054:	89 83       	std	Y+1, r24	; 0x01
	// set CGRAM address
	CLCD_voidSendCmd(Local_u8CGRAMAddress);
    1056:	89 81       	ldd	r24, Y+1	; 0x01
    1058:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendCmd>
	//write the input pattern inside cGRAM
	for(Local_u8Counter=0;Local_u8Counter<8;Local_u8Counter++)
    105c:	1a 82       	std	Y+2, r1	; 0x02
    105e:	0e c0       	rjmp	.+28     	; 0x107c <CLCD_u8SpecialCharacter+0x6a>
	{
		CLCD_voidSendData(Copy_puPattern[Local_u8Counter]);
    1060:	8a 81       	ldd	r24, Y+2	; 0x02
    1062:	28 2f       	mov	r18, r24
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	8d 81       	ldd	r24, Y+5	; 0x05
    1068:	9e 81       	ldd	r25, Y+6	; 0x06
    106a:	fc 01       	movw	r30, r24
    106c:	e2 0f       	add	r30, r18
    106e:	f3 1f       	adc	r31, r19
    1070:	80 81       	ld	r24, Z
    1072:	0e 94 75 06 	call	0xcea	; 0xcea <CLCD_voidSendData>
	//set bit 6 for CGRAM ADDRESS  command
	SET_BIT(Local_u8CGRAMAddress,6u);
	// set CGRAM address
	CLCD_voidSendCmd(Local_u8CGRAMAddress);
	//write the input pattern inside cGRAM
	for(Local_u8Counter=0;Local_u8Counter<8;Local_u8Counter++)
    1076:	8a 81       	ldd	r24, Y+2	; 0x02
    1078:	8f 5f       	subi	r24, 0xFF	; 255
    107a:	8a 83       	std	Y+2, r24	; 0x02
    107c:	8a 81       	ldd	r24, Y+2	; 0x02
    107e:	88 30       	cpi	r24, 0x08	; 8
    1080:	78 f3       	brcs	.-34     	; 0x1060 <CLCD_u8SpecialCharacter+0x4e>
	{
		CLCD_voidSendData(Copy_puPattern[Local_u8Counter]);
	}
	//GO BACK TO DDRAM
	CLCD_VoidGoToXY(Copy_u8Xpos,Copy_u8Ypos);
    1082:	8f 81       	ldd	r24, Y+7	; 0x07
    1084:	68 85       	ldd	r22, Y+8	; 0x08
    1086:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <CLCD_VoidGoToXY>
	//WRITE SPECIAL PATTERN INSIDE CGRAM " DISPLAY
	CLCD_voidSendData(Copy_u8LocationNum);
    108a:	8c 81       	ldd	r24, Y+4	; 0x04
    108c:	0e 94 75 06 	call	0xcea	; 0xcea <CLCD_voidSendData>
    1090:	02 c0       	rjmp	.+4      	; 0x1096 <CLCD_u8SpecialCharacter+0x84>
}
else
{
	Local_u8ErrorState=NULL_PTR_ERR;
    1092:	82 e0       	ldi	r24, 0x02	; 2
    1094:	8b 83       	std	Y+3, r24	; 0x03
}
return Local_u8ErrorState;
    1096:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1098:	28 96       	adiw	r28, 0x08	; 8
    109a:	0f b6       	in	r0, 0x3f	; 63
    109c:	f8 94       	cli
    109e:	de bf       	out	0x3e, r29	; 62
    10a0:	0f be       	out	0x3f, r0	; 63
    10a2:	cd bf       	out	0x3d, r28	; 61
    10a4:	cf 91       	pop	r28
    10a6:	df 91       	pop	r29
    10a8:	08 95       	ret

000010aa <CLCD_voidClear>:

void CLCD_voidClear()
{
    10aa:	df 93       	push	r29
    10ac:	cf 93       	push	r28
    10ae:	cd b7       	in	r28, 0x3d	; 61
    10b0:	de b7       	in	r29, 0x3e	; 62
CLCD_voidSendCmd(1);
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <CLCD_voidSendCmd>
}
    10b8:	cf 91       	pop	r28
    10ba:	df 91       	pop	r29
    10bc:	08 95       	ret

000010be <CLCD_voidHamoksha>:

void CLCD_voidHamoksha()
{
    10be:	0f 93       	push	r16
    10c0:	1f 93       	push	r17
    10c2:	df 93       	push	r29
    10c4:	cf 93       	push	r28
    10c6:	cd b7       	in	r28, 0x3d	; 61
    10c8:	de b7       	in	r29, 0x3e	; 62
    10ca:	c3 56       	subi	r28, 0x63	; 99
    10cc:	d1 40       	sbci	r29, 0x01	; 1
    10ce:	0f b6       	in	r0, 0x3f	; 63
    10d0:	f8 94       	cli
    10d2:	de bf       	out	0x3e, r29	; 62
    10d4:	0f be       	out	0x3f, r0	; 63
    10d6:	cd bf       	out	0x3d, r28	; 61
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000001
           ,0b00011111,
            0b00011111,0};
    10d8:	ce 01       	movw	r24, r28
    10da:	8e 51       	subi	r24, 0x1E	; 30
    10dc:	9f 4f       	sbci	r25, 0xFF	; 255
    10de:	ce 5c       	subi	r28, 0xCE	; 206
    10e0:	de 4f       	sbci	r29, 0xFE	; 254
    10e2:	99 83       	std	Y+1, r25	; 0x01
    10e4:	88 83       	st	Y, r24
    10e6:	c2 53       	subi	r28, 0x32	; 50
    10e8:	d1 40       	sbci	r29, 0x01	; 1
    10ea:	89 e4       	ldi	r24, 0x49	; 73
    10ec:	91 e0       	ldi	r25, 0x01	; 1
    10ee:	cc 5c       	subi	r28, 0xCC	; 204
    10f0:	de 4f       	sbci	r29, 0xFE	; 254
    10f2:	99 83       	std	Y+1, r25	; 0x01
    10f4:	88 83       	st	Y, r24
    10f6:	c4 53       	subi	r28, 0x34	; 52
    10f8:	d1 40       	sbci	r29, 0x01	; 1
    10fa:	98 e0       	ldi	r25, 0x08	; 8
    10fc:	ca 5c       	subi	r28, 0xCA	; 202
    10fe:	de 4f       	sbci	r29, 0xFE	; 254
    1100:	98 83       	st	Y, r25
    1102:	c6 53       	subi	r28, 0x36	; 54
    1104:	d1 40       	sbci	r29, 0x01	; 1
    1106:	cc 5c       	subi	r28, 0xCC	; 204
    1108:	de 4f       	sbci	r29, 0xFE	; 254
    110a:	e8 81       	ld	r30, Y
    110c:	f9 81       	ldd	r31, Y+1	; 0x01
    110e:	c4 53       	subi	r28, 0x34	; 52
    1110:	d1 40       	sbci	r29, 0x01	; 1
    1112:	00 80       	ld	r0, Z
    1114:	cc 5c       	subi	r28, 0xCC	; 204
    1116:	de 4f       	sbci	r29, 0xFE	; 254
    1118:	88 81       	ld	r24, Y
    111a:	99 81       	ldd	r25, Y+1	; 0x01
    111c:	c4 53       	subi	r28, 0x34	; 52
    111e:	d1 40       	sbci	r29, 0x01	; 1
    1120:	01 96       	adiw	r24, 0x01	; 1
    1122:	cc 5c       	subi	r28, 0xCC	; 204
    1124:	de 4f       	sbci	r29, 0xFE	; 254
    1126:	99 83       	std	Y+1, r25	; 0x01
    1128:	88 83       	st	Y, r24
    112a:	c4 53       	subi	r28, 0x34	; 52
    112c:	d1 40       	sbci	r29, 0x01	; 1
    112e:	ce 5c       	subi	r28, 0xCE	; 206
    1130:	de 4f       	sbci	r29, 0xFE	; 254
    1132:	e8 81       	ld	r30, Y
    1134:	f9 81       	ldd	r31, Y+1	; 0x01
    1136:	c2 53       	subi	r28, 0x32	; 50
    1138:	d1 40       	sbci	r29, 0x01	; 1
    113a:	00 82       	st	Z, r0
    113c:	ce 5c       	subi	r28, 0xCE	; 206
    113e:	de 4f       	sbci	r29, 0xFE	; 254
    1140:	88 81       	ld	r24, Y
    1142:	99 81       	ldd	r25, Y+1	; 0x01
    1144:	c2 53       	subi	r28, 0x32	; 50
    1146:	d1 40       	sbci	r29, 0x01	; 1
    1148:	01 96       	adiw	r24, 0x01	; 1
    114a:	ce 5c       	subi	r28, 0xCE	; 206
    114c:	de 4f       	sbci	r29, 0xFE	; 254
    114e:	99 83       	std	Y+1, r25	; 0x01
    1150:	88 83       	st	Y, r24
    1152:	c2 53       	subi	r28, 0x32	; 50
    1154:	d1 40       	sbci	r29, 0x01	; 1
    1156:	ca 5c       	subi	r28, 0xCA	; 202
    1158:	de 4f       	sbci	r29, 0xFE	; 254
    115a:	98 81       	ld	r25, Y
    115c:	c6 53       	subi	r28, 0x36	; 54
    115e:	d1 40       	sbci	r29, 0x01	; 1
    1160:	91 50       	subi	r25, 0x01	; 1
    1162:	ca 5c       	subi	r28, 0xCA	; 202
    1164:	de 4f       	sbci	r29, 0xFE	; 254
    1166:	98 83       	st	Y, r25
    1168:	c6 53       	subi	r28, 0x36	; 54
    116a:	d1 40       	sbci	r29, 0x01	; 1
    116c:	ca 5c       	subi	r28, 0xCA	; 202
    116e:	de 4f       	sbci	r29, 0xFE	; 254
    1170:	e8 81       	ld	r30, Y
    1172:	c6 53       	subi	r28, 0x36	; 54
    1174:	d1 40       	sbci	r29, 0x01	; 1
    1176:	ee 23       	and	r30, r30
    1178:	31 f6       	brne	.-116    	; 0x1106 <CLCD_voidHamoksha+0x48>
                                         0b00001110,
                                         0b00010101,
                                         0b00010101,
                                         0b00000100
                                        ,0b00001010,
                                         0b00001010,0};
    117a:	ce 01       	movw	r24, r28
    117c:	86 51       	subi	r24, 0x16	; 22
    117e:	9f 4f       	sbci	r25, 0xFF	; 255
    1180:	c9 5c       	subi	r28, 0xC9	; 201
    1182:	de 4f       	sbci	r29, 0xFE	; 254
    1184:	99 83       	std	Y+1, r25	; 0x01
    1186:	88 83       	st	Y, r24
    1188:	c7 53       	subi	r28, 0x37	; 55
    118a:	d1 40       	sbci	r29, 0x01	; 1
    118c:	81 e4       	ldi	r24, 0x41	; 65
    118e:	91 e0       	ldi	r25, 0x01	; 1
    1190:	c7 5c       	subi	r28, 0xC7	; 199
    1192:	de 4f       	sbci	r29, 0xFE	; 254
    1194:	99 83       	std	Y+1, r25	; 0x01
    1196:	88 83       	st	Y, r24
    1198:	c9 53       	subi	r28, 0x39	; 57
    119a:	d1 40       	sbci	r29, 0x01	; 1
    119c:	98 e0       	ldi	r25, 0x08	; 8
    119e:	c5 5c       	subi	r28, 0xC5	; 197
    11a0:	de 4f       	sbci	r29, 0xFE	; 254
    11a2:	98 83       	st	Y, r25
    11a4:	cb 53       	subi	r28, 0x3B	; 59
    11a6:	d1 40       	sbci	r29, 0x01	; 1
    11a8:	c7 5c       	subi	r28, 0xC7	; 199
    11aa:	de 4f       	sbci	r29, 0xFE	; 254
    11ac:	e8 81       	ld	r30, Y
    11ae:	f9 81       	ldd	r31, Y+1	; 0x01
    11b0:	c9 53       	subi	r28, 0x39	; 57
    11b2:	d1 40       	sbci	r29, 0x01	; 1
    11b4:	00 80       	ld	r0, Z
    11b6:	c7 5c       	subi	r28, 0xC7	; 199
    11b8:	de 4f       	sbci	r29, 0xFE	; 254
    11ba:	88 81       	ld	r24, Y
    11bc:	99 81       	ldd	r25, Y+1	; 0x01
    11be:	c9 53       	subi	r28, 0x39	; 57
    11c0:	d1 40       	sbci	r29, 0x01	; 1
    11c2:	01 96       	adiw	r24, 0x01	; 1
    11c4:	c7 5c       	subi	r28, 0xC7	; 199
    11c6:	de 4f       	sbci	r29, 0xFE	; 254
    11c8:	99 83       	std	Y+1, r25	; 0x01
    11ca:	88 83       	st	Y, r24
    11cc:	c9 53       	subi	r28, 0x39	; 57
    11ce:	d1 40       	sbci	r29, 0x01	; 1
    11d0:	c9 5c       	subi	r28, 0xC9	; 201
    11d2:	de 4f       	sbci	r29, 0xFE	; 254
    11d4:	e8 81       	ld	r30, Y
    11d6:	f9 81       	ldd	r31, Y+1	; 0x01
    11d8:	c7 53       	subi	r28, 0x37	; 55
    11da:	d1 40       	sbci	r29, 0x01	; 1
    11dc:	00 82       	st	Z, r0
    11de:	c9 5c       	subi	r28, 0xC9	; 201
    11e0:	de 4f       	sbci	r29, 0xFE	; 254
    11e2:	88 81       	ld	r24, Y
    11e4:	99 81       	ldd	r25, Y+1	; 0x01
    11e6:	c7 53       	subi	r28, 0x37	; 55
    11e8:	d1 40       	sbci	r29, 0x01	; 1
    11ea:	01 96       	adiw	r24, 0x01	; 1
    11ec:	c9 5c       	subi	r28, 0xC9	; 201
    11ee:	de 4f       	sbci	r29, 0xFE	; 254
    11f0:	99 83       	std	Y+1, r25	; 0x01
    11f2:	88 83       	st	Y, r24
    11f4:	c7 53       	subi	r28, 0x37	; 55
    11f6:	d1 40       	sbci	r29, 0x01	; 1
    11f8:	c5 5c       	subi	r28, 0xC5	; 197
    11fa:	de 4f       	sbci	r29, 0xFE	; 254
    11fc:	98 81       	ld	r25, Y
    11fe:	cb 53       	subi	r28, 0x3B	; 59
    1200:	d1 40       	sbci	r29, 0x01	; 1
    1202:	91 50       	subi	r25, 0x01	; 1
    1204:	c5 5c       	subi	r28, 0xC5	; 197
    1206:	de 4f       	sbci	r29, 0xFE	; 254
    1208:	98 83       	st	Y, r25
    120a:	cb 53       	subi	r28, 0x3B	; 59
    120c:	d1 40       	sbci	r29, 0x01	; 1
    120e:	c5 5c       	subi	r28, 0xC5	; 197
    1210:	de 4f       	sbci	r29, 0xFE	; 254
    1212:	e8 81       	ld	r30, Y
    1214:	cb 53       	subi	r28, 0x3B	; 59
    1216:	d1 40       	sbci	r29, 0x01	; 1
    1218:	ee 23       	and	r30, r30
    121a:	31 f6       	brne	.-116    	; 0x11a8 <CLCD_voidHamoksha+0xea>
	                                         0b00011111,
	                                         0b00010101,
	                                         0b00000100,
	                                         0b00000100
	                                        ,0b00010001,
	                                         0b00010001,0};
    121c:	ce 01       	movw	r24, r28
    121e:	8e 50       	subi	r24, 0x0E	; 14
    1220:	9f 4f       	sbci	r25, 0xFF	; 255
    1222:	c4 5c       	subi	r28, 0xC4	; 196
    1224:	de 4f       	sbci	r29, 0xFE	; 254
    1226:	99 83       	std	Y+1, r25	; 0x01
    1228:	88 83       	st	Y, r24
    122a:	cc 53       	subi	r28, 0x3C	; 60
    122c:	d1 40       	sbci	r29, 0x01	; 1
    122e:	89 e3       	ldi	r24, 0x39	; 57
    1230:	91 e0       	ldi	r25, 0x01	; 1
    1232:	c2 5c       	subi	r28, 0xC2	; 194
    1234:	de 4f       	sbci	r29, 0xFE	; 254
    1236:	99 83       	std	Y+1, r25	; 0x01
    1238:	88 83       	st	Y, r24
    123a:	ce 53       	subi	r28, 0x3E	; 62
    123c:	d1 40       	sbci	r29, 0x01	; 1
    123e:	98 e0       	ldi	r25, 0x08	; 8
    1240:	c0 5c       	subi	r28, 0xC0	; 192
    1242:	de 4f       	sbci	r29, 0xFE	; 254
    1244:	98 83       	st	Y, r25
    1246:	c0 54       	subi	r28, 0x40	; 64
    1248:	d1 40       	sbci	r29, 0x01	; 1
    124a:	c2 5c       	subi	r28, 0xC2	; 194
    124c:	de 4f       	sbci	r29, 0xFE	; 254
    124e:	e8 81       	ld	r30, Y
    1250:	f9 81       	ldd	r31, Y+1	; 0x01
    1252:	ce 53       	subi	r28, 0x3E	; 62
    1254:	d1 40       	sbci	r29, 0x01	; 1
    1256:	00 80       	ld	r0, Z
    1258:	c2 5c       	subi	r28, 0xC2	; 194
    125a:	de 4f       	sbci	r29, 0xFE	; 254
    125c:	88 81       	ld	r24, Y
    125e:	99 81       	ldd	r25, Y+1	; 0x01
    1260:	ce 53       	subi	r28, 0x3E	; 62
    1262:	d1 40       	sbci	r29, 0x01	; 1
    1264:	01 96       	adiw	r24, 0x01	; 1
    1266:	c2 5c       	subi	r28, 0xC2	; 194
    1268:	de 4f       	sbci	r29, 0xFE	; 254
    126a:	99 83       	std	Y+1, r25	; 0x01
    126c:	88 83       	st	Y, r24
    126e:	ce 53       	subi	r28, 0x3E	; 62
    1270:	d1 40       	sbci	r29, 0x01	; 1
    1272:	c4 5c       	subi	r28, 0xC4	; 196
    1274:	de 4f       	sbci	r29, 0xFE	; 254
    1276:	e8 81       	ld	r30, Y
    1278:	f9 81       	ldd	r31, Y+1	; 0x01
    127a:	cc 53       	subi	r28, 0x3C	; 60
    127c:	d1 40       	sbci	r29, 0x01	; 1
    127e:	00 82       	st	Z, r0
    1280:	c4 5c       	subi	r28, 0xC4	; 196
    1282:	de 4f       	sbci	r29, 0xFE	; 254
    1284:	88 81       	ld	r24, Y
    1286:	99 81       	ldd	r25, Y+1	; 0x01
    1288:	cc 53       	subi	r28, 0x3C	; 60
    128a:	d1 40       	sbci	r29, 0x01	; 1
    128c:	01 96       	adiw	r24, 0x01	; 1
    128e:	c4 5c       	subi	r28, 0xC4	; 196
    1290:	de 4f       	sbci	r29, 0xFE	; 254
    1292:	99 83       	std	Y+1, r25	; 0x01
    1294:	88 83       	st	Y, r24
    1296:	cc 53       	subi	r28, 0x3C	; 60
    1298:	d1 40       	sbci	r29, 0x01	; 1
    129a:	c0 5c       	subi	r28, 0xC0	; 192
    129c:	de 4f       	sbci	r29, 0xFE	; 254
    129e:	98 81       	ld	r25, Y
    12a0:	c0 54       	subi	r28, 0x40	; 64
    12a2:	d1 40       	sbci	r29, 0x01	; 1
    12a4:	91 50       	subi	r25, 0x01	; 1
    12a6:	c0 5c       	subi	r28, 0xC0	; 192
    12a8:	de 4f       	sbci	r29, 0xFE	; 254
    12aa:	98 83       	st	Y, r25
    12ac:	c0 54       	subi	r28, 0x40	; 64
    12ae:	d1 40       	sbci	r29, 0x01	; 1
    12b0:	c0 5c       	subi	r28, 0xC0	; 192
    12b2:	de 4f       	sbci	r29, 0xFE	; 254
    12b4:	e8 81       	ld	r30, Y
    12b6:	c0 54       	subi	r28, 0x40	; 64
    12b8:	d1 40       	sbci	r29, 0x01	; 1
    12ba:	ee 23       	and	r30, r30
    12bc:	31 f6       	brne	.-116    	; 0x124a <CLCD_voidHamoksha+0x18c>
	                                         0b00011111,
	                                         0b00010101,
	                                         0b00000100,
	                                         0b00000100
	                                        ,0b00001010,
	                                         0b00001010,0};
    12be:	ce 01       	movw	r24, r28
    12c0:	86 50       	subi	r24, 0x06	; 6
    12c2:	9f 4f       	sbci	r25, 0xFF	; 255
    12c4:	cf 5b       	subi	r28, 0xBF	; 191
    12c6:	de 4f       	sbci	r29, 0xFE	; 254
    12c8:	99 83       	std	Y+1, r25	; 0x01
    12ca:	88 83       	st	Y, r24
    12cc:	c1 54       	subi	r28, 0x41	; 65
    12ce:	d1 40       	sbci	r29, 0x01	; 1
    12d0:	81 e3       	ldi	r24, 0x31	; 49
    12d2:	91 e0       	ldi	r25, 0x01	; 1
    12d4:	cd 5b       	subi	r28, 0xBD	; 189
    12d6:	de 4f       	sbci	r29, 0xFE	; 254
    12d8:	99 83       	std	Y+1, r25	; 0x01
    12da:	88 83       	st	Y, r24
    12dc:	c3 54       	subi	r28, 0x43	; 67
    12de:	d1 40       	sbci	r29, 0x01	; 1
    12e0:	98 e0       	ldi	r25, 0x08	; 8
    12e2:	cb 5b       	subi	r28, 0xBB	; 187
    12e4:	de 4f       	sbci	r29, 0xFE	; 254
    12e6:	98 83       	st	Y, r25
    12e8:	c5 54       	subi	r28, 0x45	; 69
    12ea:	d1 40       	sbci	r29, 0x01	; 1
    12ec:	cd 5b       	subi	r28, 0xBD	; 189
    12ee:	de 4f       	sbci	r29, 0xFE	; 254
    12f0:	e8 81       	ld	r30, Y
    12f2:	f9 81       	ldd	r31, Y+1	; 0x01
    12f4:	c3 54       	subi	r28, 0x43	; 67
    12f6:	d1 40       	sbci	r29, 0x01	; 1
    12f8:	00 80       	ld	r0, Z
    12fa:	cd 5b       	subi	r28, 0xBD	; 189
    12fc:	de 4f       	sbci	r29, 0xFE	; 254
    12fe:	88 81       	ld	r24, Y
    1300:	99 81       	ldd	r25, Y+1	; 0x01
    1302:	c3 54       	subi	r28, 0x43	; 67
    1304:	d1 40       	sbci	r29, 0x01	; 1
    1306:	01 96       	adiw	r24, 0x01	; 1
    1308:	cd 5b       	subi	r28, 0xBD	; 189
    130a:	de 4f       	sbci	r29, 0xFE	; 254
    130c:	99 83       	std	Y+1, r25	; 0x01
    130e:	88 83       	st	Y, r24
    1310:	c3 54       	subi	r28, 0x43	; 67
    1312:	d1 40       	sbci	r29, 0x01	; 1
    1314:	cf 5b       	subi	r28, 0xBF	; 191
    1316:	de 4f       	sbci	r29, 0xFE	; 254
    1318:	e8 81       	ld	r30, Y
    131a:	f9 81       	ldd	r31, Y+1	; 0x01
    131c:	c1 54       	subi	r28, 0x41	; 65
    131e:	d1 40       	sbci	r29, 0x01	; 1
    1320:	00 82       	st	Z, r0
    1322:	cf 5b       	subi	r28, 0xBF	; 191
    1324:	de 4f       	sbci	r29, 0xFE	; 254
    1326:	88 81       	ld	r24, Y
    1328:	99 81       	ldd	r25, Y+1	; 0x01
    132a:	c1 54       	subi	r28, 0x41	; 65
    132c:	d1 40       	sbci	r29, 0x01	; 1
    132e:	01 96       	adiw	r24, 0x01	; 1
    1330:	cf 5b       	subi	r28, 0xBF	; 191
    1332:	de 4f       	sbci	r29, 0xFE	; 254
    1334:	99 83       	std	Y+1, r25	; 0x01
    1336:	88 83       	st	Y, r24
    1338:	c1 54       	subi	r28, 0x41	; 65
    133a:	d1 40       	sbci	r29, 0x01	; 1
    133c:	cb 5b       	subi	r28, 0xBB	; 187
    133e:	de 4f       	sbci	r29, 0xFE	; 254
    1340:	98 81       	ld	r25, Y
    1342:	c5 54       	subi	r28, 0x45	; 69
    1344:	d1 40       	sbci	r29, 0x01	; 1
    1346:	91 50       	subi	r25, 0x01	; 1
    1348:	cb 5b       	subi	r28, 0xBB	; 187
    134a:	de 4f       	sbci	r29, 0xFE	; 254
    134c:	98 83       	st	Y, r25
    134e:	c5 54       	subi	r28, 0x45	; 69
    1350:	d1 40       	sbci	r29, 0x01	; 1
    1352:	cb 5b       	subi	r28, 0xBB	; 187
    1354:	de 4f       	sbci	r29, 0xFE	; 254
    1356:	e8 81       	ld	r30, Y
    1358:	c5 54       	subi	r28, 0x45	; 69
    135a:	d1 40       	sbci	r29, 0x01	; 1
    135c:	ee 23       	and	r30, r30
    135e:	31 f6       	brne	.-116    	; 0x12ec <CLCD_voidHamoksha+0x22e>
                                         0b00001110,
                                         0b00000100,
                                         0b00000100,
                                         0b00000100
                                        ,0b00001010,
                                         0b00001010,0};
    1360:	ce 01       	movw	r24, r28
    1362:	8e 5f       	subi	r24, 0xFE	; 254
    1364:	9e 4f       	sbci	r25, 0xFE	; 254
    1366:	ca 5b       	subi	r28, 0xBA	; 186
    1368:	de 4f       	sbci	r29, 0xFE	; 254
    136a:	99 83       	std	Y+1, r25	; 0x01
    136c:	88 83       	st	Y, r24
    136e:	c6 54       	subi	r28, 0x46	; 70
    1370:	d1 40       	sbci	r29, 0x01	; 1
    1372:	89 e2       	ldi	r24, 0x29	; 41
    1374:	91 e0       	ldi	r25, 0x01	; 1
    1376:	c8 5b       	subi	r28, 0xB8	; 184
    1378:	de 4f       	sbci	r29, 0xFE	; 254
    137a:	99 83       	std	Y+1, r25	; 0x01
    137c:	88 83       	st	Y, r24
    137e:	c8 54       	subi	r28, 0x48	; 72
    1380:	d1 40       	sbci	r29, 0x01	; 1
    1382:	98 e0       	ldi	r25, 0x08	; 8
    1384:	c6 5b       	subi	r28, 0xB6	; 182
    1386:	de 4f       	sbci	r29, 0xFE	; 254
    1388:	98 83       	st	Y, r25
    138a:	ca 54       	subi	r28, 0x4A	; 74
    138c:	d1 40       	sbci	r29, 0x01	; 1
    138e:	c8 5b       	subi	r28, 0xB8	; 184
    1390:	de 4f       	sbci	r29, 0xFE	; 254
    1392:	e8 81       	ld	r30, Y
    1394:	f9 81       	ldd	r31, Y+1	; 0x01
    1396:	c8 54       	subi	r28, 0x48	; 72
    1398:	d1 40       	sbci	r29, 0x01	; 1
    139a:	00 80       	ld	r0, Z
    139c:	c8 5b       	subi	r28, 0xB8	; 184
    139e:	de 4f       	sbci	r29, 0xFE	; 254
    13a0:	88 81       	ld	r24, Y
    13a2:	99 81       	ldd	r25, Y+1	; 0x01
    13a4:	c8 54       	subi	r28, 0x48	; 72
    13a6:	d1 40       	sbci	r29, 0x01	; 1
    13a8:	01 96       	adiw	r24, 0x01	; 1
    13aa:	c8 5b       	subi	r28, 0xB8	; 184
    13ac:	de 4f       	sbci	r29, 0xFE	; 254
    13ae:	99 83       	std	Y+1, r25	; 0x01
    13b0:	88 83       	st	Y, r24
    13b2:	c8 54       	subi	r28, 0x48	; 72
    13b4:	d1 40       	sbci	r29, 0x01	; 1
    13b6:	ca 5b       	subi	r28, 0xBA	; 186
    13b8:	de 4f       	sbci	r29, 0xFE	; 254
    13ba:	e8 81       	ld	r30, Y
    13bc:	f9 81       	ldd	r31, Y+1	; 0x01
    13be:	c6 54       	subi	r28, 0x46	; 70
    13c0:	d1 40       	sbci	r29, 0x01	; 1
    13c2:	00 82       	st	Z, r0
    13c4:	ca 5b       	subi	r28, 0xBA	; 186
    13c6:	de 4f       	sbci	r29, 0xFE	; 254
    13c8:	88 81       	ld	r24, Y
    13ca:	99 81       	ldd	r25, Y+1	; 0x01
    13cc:	c6 54       	subi	r28, 0x46	; 70
    13ce:	d1 40       	sbci	r29, 0x01	; 1
    13d0:	01 96       	adiw	r24, 0x01	; 1
    13d2:	ca 5b       	subi	r28, 0xBA	; 186
    13d4:	de 4f       	sbci	r29, 0xFE	; 254
    13d6:	99 83       	std	Y+1, r25	; 0x01
    13d8:	88 83       	st	Y, r24
    13da:	c6 54       	subi	r28, 0x46	; 70
    13dc:	d1 40       	sbci	r29, 0x01	; 1
    13de:	c6 5b       	subi	r28, 0xB6	; 182
    13e0:	de 4f       	sbci	r29, 0xFE	; 254
    13e2:	98 81       	ld	r25, Y
    13e4:	ca 54       	subi	r28, 0x4A	; 74
    13e6:	d1 40       	sbci	r29, 0x01	; 1
    13e8:	91 50       	subi	r25, 0x01	; 1
    13ea:	c6 5b       	subi	r28, 0xB6	; 182
    13ec:	de 4f       	sbci	r29, 0xFE	; 254
    13ee:	98 83       	st	Y, r25
    13f0:	ca 54       	subi	r28, 0x4A	; 74
    13f2:	d1 40       	sbci	r29, 0x01	; 1
    13f4:	c6 5b       	subi	r28, 0xB6	; 182
    13f6:	de 4f       	sbci	r29, 0xFE	; 254
    13f8:	e8 81       	ld	r30, Y
    13fa:	ca 54       	subi	r28, 0x4A	; 74
    13fc:	d1 40       	sbci	r29, 0x01	; 1
    13fe:	ee 23       	and	r30, r30
    1400:	31 f6       	brne	.-116    	; 0x138e <CLCD_voidHamoksha+0x2d0>
                                         0b00001110,
                                         0b00000100,
                                         0b00000100,
                                         0b00000100
                                        ,0b00001001,
                                         0b00001001,0};
    1402:	ce 01       	movw	r24, r28
    1404:	86 5f       	subi	r24, 0xF6	; 246
    1406:	9e 4f       	sbci	r25, 0xFE	; 254
    1408:	c5 5b       	subi	r28, 0xB5	; 181
    140a:	de 4f       	sbci	r29, 0xFE	; 254
    140c:	99 83       	std	Y+1, r25	; 0x01
    140e:	88 83       	st	Y, r24
    1410:	cb 54       	subi	r28, 0x4B	; 75
    1412:	d1 40       	sbci	r29, 0x01	; 1
    1414:	81 e2       	ldi	r24, 0x21	; 33
    1416:	91 e0       	ldi	r25, 0x01	; 1
    1418:	c3 5b       	subi	r28, 0xB3	; 179
    141a:	de 4f       	sbci	r29, 0xFE	; 254
    141c:	99 83       	std	Y+1, r25	; 0x01
    141e:	88 83       	st	Y, r24
    1420:	cd 54       	subi	r28, 0x4D	; 77
    1422:	d1 40       	sbci	r29, 0x01	; 1
    1424:	98 e0       	ldi	r25, 0x08	; 8
    1426:	c1 5b       	subi	r28, 0xB1	; 177
    1428:	de 4f       	sbci	r29, 0xFE	; 254
    142a:	98 83       	st	Y, r25
    142c:	cf 54       	subi	r28, 0x4F	; 79
    142e:	d1 40       	sbci	r29, 0x01	; 1
    1430:	c3 5b       	subi	r28, 0xB3	; 179
    1432:	de 4f       	sbci	r29, 0xFE	; 254
    1434:	e8 81       	ld	r30, Y
    1436:	f9 81       	ldd	r31, Y+1	; 0x01
    1438:	cd 54       	subi	r28, 0x4D	; 77
    143a:	d1 40       	sbci	r29, 0x01	; 1
    143c:	00 80       	ld	r0, Z
    143e:	c3 5b       	subi	r28, 0xB3	; 179
    1440:	de 4f       	sbci	r29, 0xFE	; 254
    1442:	88 81       	ld	r24, Y
    1444:	99 81       	ldd	r25, Y+1	; 0x01
    1446:	cd 54       	subi	r28, 0x4D	; 77
    1448:	d1 40       	sbci	r29, 0x01	; 1
    144a:	01 96       	adiw	r24, 0x01	; 1
    144c:	c3 5b       	subi	r28, 0xB3	; 179
    144e:	de 4f       	sbci	r29, 0xFE	; 254
    1450:	99 83       	std	Y+1, r25	; 0x01
    1452:	88 83       	st	Y, r24
    1454:	cd 54       	subi	r28, 0x4D	; 77
    1456:	d1 40       	sbci	r29, 0x01	; 1
    1458:	c5 5b       	subi	r28, 0xB5	; 181
    145a:	de 4f       	sbci	r29, 0xFE	; 254
    145c:	e8 81       	ld	r30, Y
    145e:	f9 81       	ldd	r31, Y+1	; 0x01
    1460:	cb 54       	subi	r28, 0x4B	; 75
    1462:	d1 40       	sbci	r29, 0x01	; 1
    1464:	00 82       	st	Z, r0
    1466:	c5 5b       	subi	r28, 0xB5	; 181
    1468:	de 4f       	sbci	r29, 0xFE	; 254
    146a:	88 81       	ld	r24, Y
    146c:	99 81       	ldd	r25, Y+1	; 0x01
    146e:	cb 54       	subi	r28, 0x4B	; 75
    1470:	d1 40       	sbci	r29, 0x01	; 1
    1472:	01 96       	adiw	r24, 0x01	; 1
    1474:	c5 5b       	subi	r28, 0xB5	; 181
    1476:	de 4f       	sbci	r29, 0xFE	; 254
    1478:	99 83       	std	Y+1, r25	; 0x01
    147a:	88 83       	st	Y, r24
    147c:	cb 54       	subi	r28, 0x4B	; 75
    147e:	d1 40       	sbci	r29, 0x01	; 1
    1480:	c1 5b       	subi	r28, 0xB1	; 177
    1482:	de 4f       	sbci	r29, 0xFE	; 254
    1484:	98 81       	ld	r25, Y
    1486:	cf 54       	subi	r28, 0x4F	; 79
    1488:	d1 40       	sbci	r29, 0x01	; 1
    148a:	91 50       	subi	r25, 0x01	; 1
    148c:	c1 5b       	subi	r28, 0xB1	; 177
    148e:	de 4f       	sbci	r29, 0xFE	; 254
    1490:	98 83       	st	Y, r25
    1492:	cf 54       	subi	r28, 0x4F	; 79
    1494:	d1 40       	sbci	r29, 0x01	; 1
    1496:	c1 5b       	subi	r28, 0xB1	; 177
    1498:	de 4f       	sbci	r29, 0xFE	; 254
    149a:	e8 81       	ld	r30, Y
    149c:	cf 54       	subi	r28, 0x4F	; 79
    149e:	d1 40       	sbci	r29, 0x01	; 1
    14a0:	ee 23       	and	r30, r30
    14a2:	31 f6       	brne	.-116    	; 0x1430 <CLCD_voidHamoksha+0x372>
	                                         0b00001110,
	                                         0b00000100,
	                                         0b00000101,
	                                         0b00000101
	                                        ,0b00001010,
	                                         0b00001000,0};
    14a4:	ce 01       	movw	r24, r28
    14a6:	8e 5e       	subi	r24, 0xEE	; 238
    14a8:	9e 4f       	sbci	r25, 0xFE	; 254
    14aa:	c0 5b       	subi	r28, 0xB0	; 176
    14ac:	de 4f       	sbci	r29, 0xFE	; 254
    14ae:	99 83       	std	Y+1, r25	; 0x01
    14b0:	88 83       	st	Y, r24
    14b2:	c0 55       	subi	r28, 0x50	; 80
    14b4:	d1 40       	sbci	r29, 0x01	; 1
    14b6:	89 e1       	ldi	r24, 0x19	; 25
    14b8:	91 e0       	ldi	r25, 0x01	; 1
    14ba:	ce 5a       	subi	r28, 0xAE	; 174
    14bc:	de 4f       	sbci	r29, 0xFE	; 254
    14be:	99 83       	std	Y+1, r25	; 0x01
    14c0:	88 83       	st	Y, r24
    14c2:	c2 55       	subi	r28, 0x52	; 82
    14c4:	d1 40       	sbci	r29, 0x01	; 1
    14c6:	98 e0       	ldi	r25, 0x08	; 8
    14c8:	cc 5a       	subi	r28, 0xAC	; 172
    14ca:	de 4f       	sbci	r29, 0xFE	; 254
    14cc:	98 83       	st	Y, r25
    14ce:	c4 55       	subi	r28, 0x54	; 84
    14d0:	d1 40       	sbci	r29, 0x01	; 1
    14d2:	ce 5a       	subi	r28, 0xAE	; 174
    14d4:	de 4f       	sbci	r29, 0xFE	; 254
    14d6:	e8 81       	ld	r30, Y
    14d8:	f9 81       	ldd	r31, Y+1	; 0x01
    14da:	c2 55       	subi	r28, 0x52	; 82
    14dc:	d1 40       	sbci	r29, 0x01	; 1
    14de:	00 80       	ld	r0, Z
    14e0:	ce 5a       	subi	r28, 0xAE	; 174
    14e2:	de 4f       	sbci	r29, 0xFE	; 254
    14e4:	88 81       	ld	r24, Y
    14e6:	99 81       	ldd	r25, Y+1	; 0x01
    14e8:	c2 55       	subi	r28, 0x52	; 82
    14ea:	d1 40       	sbci	r29, 0x01	; 1
    14ec:	01 96       	adiw	r24, 0x01	; 1
    14ee:	ce 5a       	subi	r28, 0xAE	; 174
    14f0:	de 4f       	sbci	r29, 0xFE	; 254
    14f2:	99 83       	std	Y+1, r25	; 0x01
    14f4:	88 83       	st	Y, r24
    14f6:	c2 55       	subi	r28, 0x52	; 82
    14f8:	d1 40       	sbci	r29, 0x01	; 1
    14fa:	c0 5b       	subi	r28, 0xB0	; 176
    14fc:	de 4f       	sbci	r29, 0xFE	; 254
    14fe:	e8 81       	ld	r30, Y
    1500:	f9 81       	ldd	r31, Y+1	; 0x01
    1502:	c0 55       	subi	r28, 0x50	; 80
    1504:	d1 40       	sbci	r29, 0x01	; 1
    1506:	00 82       	st	Z, r0
    1508:	c0 5b       	subi	r28, 0xB0	; 176
    150a:	de 4f       	sbci	r29, 0xFE	; 254
    150c:	88 81       	ld	r24, Y
    150e:	99 81       	ldd	r25, Y+1	; 0x01
    1510:	c0 55       	subi	r28, 0x50	; 80
    1512:	d1 40       	sbci	r29, 0x01	; 1
    1514:	01 96       	adiw	r24, 0x01	; 1
    1516:	c0 5b       	subi	r28, 0xB0	; 176
    1518:	de 4f       	sbci	r29, 0xFE	; 254
    151a:	99 83       	std	Y+1, r25	; 0x01
    151c:	88 83       	st	Y, r24
    151e:	c0 55       	subi	r28, 0x50	; 80
    1520:	d1 40       	sbci	r29, 0x01	; 1
    1522:	cc 5a       	subi	r28, 0xAC	; 172
    1524:	de 4f       	sbci	r29, 0xFE	; 254
    1526:	98 81       	ld	r25, Y
    1528:	c4 55       	subi	r28, 0x54	; 84
    152a:	d1 40       	sbci	r29, 0x01	; 1
    152c:	91 50       	subi	r25, 0x01	; 1
    152e:	cc 5a       	subi	r28, 0xAC	; 172
    1530:	de 4f       	sbci	r29, 0xFE	; 254
    1532:	98 83       	st	Y, r25
    1534:	c4 55       	subi	r28, 0x54	; 84
    1536:	d1 40       	sbci	r29, 0x01	; 1
    1538:	cc 5a       	subi	r28, 0xAC	; 172
    153a:	de 4f       	sbci	r29, 0xFE	; 254
    153c:	e8 81       	ld	r30, Y
    153e:	c4 55       	subi	r28, 0x54	; 84
    1540:	d1 40       	sbci	r29, 0x01	; 1
    1542:	ee 23       	and	r30, r30
    1544:	31 f6       	brne	.-116    	; 0x14d2 <CLCD_voidHamoksha+0x414>
            0b00011111,
            0b00011111,
            0b00011111,
            0b00011111
           ,0b00011111,
            0b00011111,0};
    1546:	ce 01       	movw	r24, r28
    1548:	86 5e       	subi	r24, 0xE6	; 230
    154a:	9e 4f       	sbci	r25, 0xFE	; 254
    154c:	cb 5a       	subi	r28, 0xAB	; 171
    154e:	de 4f       	sbci	r29, 0xFE	; 254
    1550:	99 83       	std	Y+1, r25	; 0x01
    1552:	88 83       	st	Y, r24
    1554:	c5 55       	subi	r28, 0x55	; 85
    1556:	d1 40       	sbci	r29, 0x01	; 1
    1558:	81 e1       	ldi	r24, 0x11	; 17
    155a:	91 e0       	ldi	r25, 0x01	; 1
    155c:	c9 5a       	subi	r28, 0xA9	; 169
    155e:	de 4f       	sbci	r29, 0xFE	; 254
    1560:	99 83       	std	Y+1, r25	; 0x01
    1562:	88 83       	st	Y, r24
    1564:	c7 55       	subi	r28, 0x57	; 87
    1566:	d1 40       	sbci	r29, 0x01	; 1
    1568:	98 e0       	ldi	r25, 0x08	; 8
    156a:	c7 5a       	subi	r28, 0xA7	; 167
    156c:	de 4f       	sbci	r29, 0xFE	; 254
    156e:	98 83       	st	Y, r25
    1570:	c9 55       	subi	r28, 0x59	; 89
    1572:	d1 40       	sbci	r29, 0x01	; 1
    1574:	c9 5a       	subi	r28, 0xA9	; 169
    1576:	de 4f       	sbci	r29, 0xFE	; 254
    1578:	e8 81       	ld	r30, Y
    157a:	f9 81       	ldd	r31, Y+1	; 0x01
    157c:	c7 55       	subi	r28, 0x57	; 87
    157e:	d1 40       	sbci	r29, 0x01	; 1
    1580:	00 80       	ld	r0, Z
    1582:	c9 5a       	subi	r28, 0xA9	; 169
    1584:	de 4f       	sbci	r29, 0xFE	; 254
    1586:	88 81       	ld	r24, Y
    1588:	99 81       	ldd	r25, Y+1	; 0x01
    158a:	c7 55       	subi	r28, 0x57	; 87
    158c:	d1 40       	sbci	r29, 0x01	; 1
    158e:	01 96       	adiw	r24, 0x01	; 1
    1590:	c9 5a       	subi	r28, 0xA9	; 169
    1592:	de 4f       	sbci	r29, 0xFE	; 254
    1594:	99 83       	std	Y+1, r25	; 0x01
    1596:	88 83       	st	Y, r24
    1598:	c7 55       	subi	r28, 0x57	; 87
    159a:	d1 40       	sbci	r29, 0x01	; 1
    159c:	cb 5a       	subi	r28, 0xAB	; 171
    159e:	de 4f       	sbci	r29, 0xFE	; 254
    15a0:	e8 81       	ld	r30, Y
    15a2:	f9 81       	ldd	r31, Y+1	; 0x01
    15a4:	c5 55       	subi	r28, 0x55	; 85
    15a6:	d1 40       	sbci	r29, 0x01	; 1
    15a8:	00 82       	st	Z, r0
    15aa:	cb 5a       	subi	r28, 0xAB	; 171
    15ac:	de 4f       	sbci	r29, 0xFE	; 254
    15ae:	88 81       	ld	r24, Y
    15b0:	99 81       	ldd	r25, Y+1	; 0x01
    15b2:	c5 55       	subi	r28, 0x55	; 85
    15b4:	d1 40       	sbci	r29, 0x01	; 1
    15b6:	01 96       	adiw	r24, 0x01	; 1
    15b8:	cb 5a       	subi	r28, 0xAB	; 171
    15ba:	de 4f       	sbci	r29, 0xFE	; 254
    15bc:	99 83       	std	Y+1, r25	; 0x01
    15be:	88 83       	st	Y, r24
    15c0:	c5 55       	subi	r28, 0x55	; 85
    15c2:	d1 40       	sbci	r29, 0x01	; 1
    15c4:	c7 5a       	subi	r28, 0xA7	; 167
    15c6:	de 4f       	sbci	r29, 0xFE	; 254
    15c8:	98 81       	ld	r25, Y
    15ca:	c9 55       	subi	r28, 0x59	; 89
    15cc:	d1 40       	sbci	r29, 0x01	; 1
    15ce:	91 50       	subi	r25, 0x01	; 1
    15d0:	c7 5a       	subi	r28, 0xA7	; 167
    15d2:	de 4f       	sbci	r29, 0xFE	; 254
    15d4:	98 83       	st	Y, r25
    15d6:	c9 55       	subi	r28, 0x59	; 89
    15d8:	d1 40       	sbci	r29, 0x01	; 1
    15da:	c7 5a       	subi	r28, 0xA7	; 167
    15dc:	de 4f       	sbci	r29, 0xFE	; 254
    15de:	e8 81       	ld	r30, Y
    15e0:	c9 55       	subi	r28, 0x59	; 89
    15e2:	d1 40       	sbci	r29, 0x01	; 1
    15e4:	ee 23       	and	r30, r30
    15e6:	31 f6       	brne	.-116    	; 0x1574 <CLCD_voidHamoksha+0x4b6>
	            0b00011111,
	            0b00011111,
	            0b00011111,
	            0b00000000
	           ,0b00000000,
	            0b00000000,0};
    15e8:	ce 01       	movw	r24, r28
    15ea:	8e 5d       	subi	r24, 0xDE	; 222
    15ec:	9e 4f       	sbci	r25, 0xFE	; 254
    15ee:	c6 5a       	subi	r28, 0xA6	; 166
    15f0:	de 4f       	sbci	r29, 0xFE	; 254
    15f2:	99 83       	std	Y+1, r25	; 0x01
    15f4:	88 83       	st	Y, r24
    15f6:	ca 55       	subi	r28, 0x5A	; 90
    15f8:	d1 40       	sbci	r29, 0x01	; 1
    15fa:	89 e0       	ldi	r24, 0x09	; 9
    15fc:	91 e0       	ldi	r25, 0x01	; 1
    15fe:	c4 5a       	subi	r28, 0xA4	; 164
    1600:	de 4f       	sbci	r29, 0xFE	; 254
    1602:	99 83       	std	Y+1, r25	; 0x01
    1604:	88 83       	st	Y, r24
    1606:	cc 55       	subi	r28, 0x5C	; 92
    1608:	d1 40       	sbci	r29, 0x01	; 1
    160a:	98 e0       	ldi	r25, 0x08	; 8
    160c:	c2 5a       	subi	r28, 0xA2	; 162
    160e:	de 4f       	sbci	r29, 0xFE	; 254
    1610:	98 83       	st	Y, r25
    1612:	ce 55       	subi	r28, 0x5E	; 94
    1614:	d1 40       	sbci	r29, 0x01	; 1
    1616:	c4 5a       	subi	r28, 0xA4	; 164
    1618:	de 4f       	sbci	r29, 0xFE	; 254
    161a:	e8 81       	ld	r30, Y
    161c:	f9 81       	ldd	r31, Y+1	; 0x01
    161e:	cc 55       	subi	r28, 0x5C	; 92
    1620:	d1 40       	sbci	r29, 0x01	; 1
    1622:	00 80       	ld	r0, Z
    1624:	c4 5a       	subi	r28, 0xA4	; 164
    1626:	de 4f       	sbci	r29, 0xFE	; 254
    1628:	88 81       	ld	r24, Y
    162a:	99 81       	ldd	r25, Y+1	; 0x01
    162c:	cc 55       	subi	r28, 0x5C	; 92
    162e:	d1 40       	sbci	r29, 0x01	; 1
    1630:	01 96       	adiw	r24, 0x01	; 1
    1632:	c4 5a       	subi	r28, 0xA4	; 164
    1634:	de 4f       	sbci	r29, 0xFE	; 254
    1636:	99 83       	std	Y+1, r25	; 0x01
    1638:	88 83       	st	Y, r24
    163a:	cc 55       	subi	r28, 0x5C	; 92
    163c:	d1 40       	sbci	r29, 0x01	; 1
    163e:	c6 5a       	subi	r28, 0xA6	; 166
    1640:	de 4f       	sbci	r29, 0xFE	; 254
    1642:	e8 81       	ld	r30, Y
    1644:	f9 81       	ldd	r31, Y+1	; 0x01
    1646:	ca 55       	subi	r28, 0x5A	; 90
    1648:	d1 40       	sbci	r29, 0x01	; 1
    164a:	00 82       	st	Z, r0
    164c:	c6 5a       	subi	r28, 0xA6	; 166
    164e:	de 4f       	sbci	r29, 0xFE	; 254
    1650:	88 81       	ld	r24, Y
    1652:	99 81       	ldd	r25, Y+1	; 0x01
    1654:	ca 55       	subi	r28, 0x5A	; 90
    1656:	d1 40       	sbci	r29, 0x01	; 1
    1658:	01 96       	adiw	r24, 0x01	; 1
    165a:	c6 5a       	subi	r28, 0xA6	; 166
    165c:	de 4f       	sbci	r29, 0xFE	; 254
    165e:	99 83       	std	Y+1, r25	; 0x01
    1660:	88 83       	st	Y, r24
    1662:	ca 55       	subi	r28, 0x5A	; 90
    1664:	d1 40       	sbci	r29, 0x01	; 1
    1666:	c2 5a       	subi	r28, 0xA2	; 162
    1668:	de 4f       	sbci	r29, 0xFE	; 254
    166a:	98 81       	ld	r25, Y
    166c:	ce 55       	subi	r28, 0x5E	; 94
    166e:	d1 40       	sbci	r29, 0x01	; 1
    1670:	91 50       	subi	r25, 0x01	; 1
    1672:	c2 5a       	subi	r28, 0xA2	; 162
    1674:	de 4f       	sbci	r29, 0xFE	; 254
    1676:	98 83       	st	Y, r25
    1678:	ce 55       	subi	r28, 0x5E	; 94
    167a:	d1 40       	sbci	r29, 0x01	; 1
    167c:	c2 5a       	subi	r28, 0xA2	; 162
    167e:	de 4f       	sbci	r29, 0xFE	; 254
    1680:	e8 81       	ld	r30, Y
    1682:	ce 55       	subi	r28, 0x5E	; 94
    1684:	d1 40       	sbci	r29, 0x01	; 1
    1686:	ee 23       	and	r30, r30
    1688:	31 f6       	brne	.-116    	; 0x1616 <CLCD_voidHamoksha+0x558>
                                   0b00001110,
                                   0b00001110,
                                   0b00000000,
                                   0b00000000
                                  ,0b00000000,
                                   0b00000000,0};
    168a:	ce 01       	movw	r24, r28
    168c:	86 5d       	subi	r24, 0xD6	; 214
    168e:	9e 4f       	sbci	r25, 0xFE	; 254
    1690:	c1 5a       	subi	r28, 0xA1	; 161
    1692:	de 4f       	sbci	r29, 0xFE	; 254
    1694:	99 83       	std	Y+1, r25	; 0x01
    1696:	88 83       	st	Y, r24
    1698:	cf 55       	subi	r28, 0x5F	; 95
    169a:	d1 40       	sbci	r29, 0x01	; 1
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	91 e0       	ldi	r25, 0x01	; 1
    16a0:	cf 59       	subi	r28, 0x9F	; 159
    16a2:	de 4f       	sbci	r29, 0xFE	; 254
    16a4:	99 83       	std	Y+1, r25	; 0x01
    16a6:	88 83       	st	Y, r24
    16a8:	c1 56       	subi	r28, 0x61	; 97
    16aa:	d1 40       	sbci	r29, 0x01	; 1
    16ac:	98 e0       	ldi	r25, 0x08	; 8
    16ae:	cd 59       	subi	r28, 0x9D	; 157
    16b0:	de 4f       	sbci	r29, 0xFE	; 254
    16b2:	98 83       	st	Y, r25
    16b4:	c3 56       	subi	r28, 0x63	; 99
    16b6:	d1 40       	sbci	r29, 0x01	; 1
    16b8:	cf 59       	subi	r28, 0x9F	; 159
    16ba:	de 4f       	sbci	r29, 0xFE	; 254
    16bc:	e8 81       	ld	r30, Y
    16be:	f9 81       	ldd	r31, Y+1	; 0x01
    16c0:	c1 56       	subi	r28, 0x61	; 97
    16c2:	d1 40       	sbci	r29, 0x01	; 1
    16c4:	00 80       	ld	r0, Z
    16c6:	cf 59       	subi	r28, 0x9F	; 159
    16c8:	de 4f       	sbci	r29, 0xFE	; 254
    16ca:	88 81       	ld	r24, Y
    16cc:	99 81       	ldd	r25, Y+1	; 0x01
    16ce:	c1 56       	subi	r28, 0x61	; 97
    16d0:	d1 40       	sbci	r29, 0x01	; 1
    16d2:	01 96       	adiw	r24, 0x01	; 1
    16d4:	cf 59       	subi	r28, 0x9F	; 159
    16d6:	de 4f       	sbci	r29, 0xFE	; 254
    16d8:	99 83       	std	Y+1, r25	; 0x01
    16da:	88 83       	st	Y, r24
    16dc:	c1 56       	subi	r28, 0x61	; 97
    16de:	d1 40       	sbci	r29, 0x01	; 1
    16e0:	c1 5a       	subi	r28, 0xA1	; 161
    16e2:	de 4f       	sbci	r29, 0xFE	; 254
    16e4:	e8 81       	ld	r30, Y
    16e6:	f9 81       	ldd	r31, Y+1	; 0x01
    16e8:	cf 55       	subi	r28, 0x5F	; 95
    16ea:	d1 40       	sbci	r29, 0x01	; 1
    16ec:	00 82       	st	Z, r0
    16ee:	c1 5a       	subi	r28, 0xA1	; 161
    16f0:	de 4f       	sbci	r29, 0xFE	; 254
    16f2:	88 81       	ld	r24, Y
    16f4:	99 81       	ldd	r25, Y+1	; 0x01
    16f6:	cf 55       	subi	r28, 0x5F	; 95
    16f8:	d1 40       	sbci	r29, 0x01	; 1
    16fa:	01 96       	adiw	r24, 0x01	; 1
    16fc:	c1 5a       	subi	r28, 0xA1	; 161
    16fe:	de 4f       	sbci	r29, 0xFE	; 254
    1700:	99 83       	std	Y+1, r25	; 0x01
    1702:	88 83       	st	Y, r24
    1704:	cf 55       	subi	r28, 0x5F	; 95
    1706:	d1 40       	sbci	r29, 0x01	; 1
    1708:	cd 59       	subi	r28, 0x9D	; 157
    170a:	de 4f       	sbci	r29, 0xFE	; 254
    170c:	98 81       	ld	r25, Y
    170e:	c3 56       	subi	r28, 0x63	; 99
    1710:	d1 40       	sbci	r29, 0x01	; 1
    1712:	91 50       	subi	r25, 0x01	; 1
    1714:	cd 59       	subi	r28, 0x9D	; 157
    1716:	de 4f       	sbci	r29, 0xFE	; 254
    1718:	98 83       	st	Y, r25
    171a:	c3 56       	subi	r28, 0x63	; 99
    171c:	d1 40       	sbci	r29, 0x01	; 1
    171e:	cd 59       	subi	r28, 0x9D	; 157
    1720:	de 4f       	sbci	r29, 0xFE	; 254
    1722:	e8 81       	ld	r30, Y
    1724:	c3 56       	subi	r28, 0x63	; 99
    1726:	d1 40       	sbci	r29, 0x01	; 1
    1728:	ee 23       	and	r30, r30
    172a:	31 f6       	brne	.-116    	; 0x16b8 <CLCD_voidHamoksha+0x5fa>





CLCD_voidClear();
    172c:	0e 94 55 08 	call	0x10aa	; 0x10aa <CLCD_voidClear>
	CLCD_VoidGoToXY(0,0);
    1730:	80 e0       	ldi	r24, 0x00	; 0
    1732:	60 e0       	ldi	r22, 0x00	; 0
    1734:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <CLCD_VoidGoToXY>
	CLCD_u8SendString("HI I AM HAMOKSHA");
    1738:	80 e6       	ldi	r24, 0x60	; 96
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	0e 94 2a 07 	call	0xe54	; 0xe54 <CLCD_u8SendString>

	CLCD_u8SpecialCharacter(0,Local_u8HamokshaPattern1,7,1);
    1740:	9e 01       	movw	r18, r28
    1742:	26 51       	subi	r18, 0x16	; 22
    1744:	3f 4f       	sbci	r19, 0xFF	; 255
    1746:	80 e0       	ldi	r24, 0x00	; 0
    1748:	b9 01       	movw	r22, r18
    174a:	47 e0       	ldi	r20, 0x07	; 7
    174c:	21 e0       	ldi	r18, 0x01	; 1
    174e:	0e 94 09 08 	call	0x1012	; 0x1012 <CLCD_u8SpecialCharacter>
    1752:	fe 01       	movw	r30, r28
    1754:	e3 52       	subi	r30, 0x23	; 35
    1756:	ff 4f       	sbci	r31, 0xFF	; 255
    1758:	80 e0       	ldi	r24, 0x00	; 0
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	af e2       	ldi	r26, 0x2F	; 47
    175e:	b4 e4       	ldi	r27, 0x44	; 68
    1760:	80 83       	st	Z, r24
    1762:	91 83       	std	Z+1, r25	; 0x01
    1764:	a2 83       	std	Z+2, r26	; 0x02
    1766:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1768:	8e 01       	movw	r16, r28
    176a:	07 52       	subi	r16, 0x27	; 39
    176c:	1f 4f       	sbci	r17, 0xFF	; 255
    176e:	fe 01       	movw	r30, r28
    1770:	e3 52       	subi	r30, 0x23	; 35
    1772:	ff 4f       	sbci	r31, 0xFF	; 255
    1774:	60 81       	ld	r22, Z
    1776:	71 81       	ldd	r23, Z+1	; 0x01
    1778:	82 81       	ldd	r24, Z+2	; 0x02
    177a:	93 81       	ldd	r25, Z+3	; 0x03
    177c:	20 e0       	ldi	r18, 0x00	; 0
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	4a e7       	ldi	r20, 0x7A	; 122
    1782:	55 e4       	ldi	r21, 0x45	; 69
    1784:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1788:	dc 01       	movw	r26, r24
    178a:	cb 01       	movw	r24, r22
    178c:	f8 01       	movw	r30, r16
    178e:	80 83       	st	Z, r24
    1790:	91 83       	std	Z+1, r25	; 0x01
    1792:	a2 83       	std	Z+2, r26	; 0x02
    1794:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1796:	fe 01       	movw	r30, r28
    1798:	e7 52       	subi	r30, 0x27	; 39
    179a:	ff 4f       	sbci	r31, 0xFF	; 255
    179c:	60 81       	ld	r22, Z
    179e:	71 81       	ldd	r23, Z+1	; 0x01
    17a0:	82 81       	ldd	r24, Z+2	; 0x02
    17a2:	93 81       	ldd	r25, Z+3	; 0x03
    17a4:	20 e0       	ldi	r18, 0x00	; 0
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	40 e8       	ldi	r20, 0x80	; 128
    17aa:	5f e3       	ldi	r21, 0x3F	; 63
    17ac:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    17b0:	88 23       	and	r24, r24
    17b2:	44 f4       	brge	.+16     	; 0x17c4 <CLCD_voidHamoksha+0x706>
		__ticks = 1;
    17b4:	fe 01       	movw	r30, r28
    17b6:	e9 52       	subi	r30, 0x29	; 41
    17b8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	91 83       	std	Z+1, r25	; 0x01
    17c0:	80 83       	st	Z, r24
    17c2:	64 c0       	rjmp	.+200    	; 0x188c <CLCD_voidHamoksha+0x7ce>
	else if (__tmp > 65535)
    17c4:	fe 01       	movw	r30, r28
    17c6:	e7 52       	subi	r30, 0x27	; 39
    17c8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ca:	60 81       	ld	r22, Z
    17cc:	71 81       	ldd	r23, Z+1	; 0x01
    17ce:	82 81       	ldd	r24, Z+2	; 0x02
    17d0:	93 81       	ldd	r25, Z+3	; 0x03
    17d2:	20 e0       	ldi	r18, 0x00	; 0
    17d4:	3f ef       	ldi	r19, 0xFF	; 255
    17d6:	4f e7       	ldi	r20, 0x7F	; 127
    17d8:	57 e4       	ldi	r21, 0x47	; 71
    17da:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    17de:	18 16       	cp	r1, r24
    17e0:	0c f0       	brlt	.+2      	; 0x17e4 <CLCD_voidHamoksha+0x726>
    17e2:	43 c0       	rjmp	.+134    	; 0x186a <CLCD_voidHamoksha+0x7ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17e4:	fe 01       	movw	r30, r28
    17e6:	e3 52       	subi	r30, 0x23	; 35
    17e8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ea:	60 81       	ld	r22, Z
    17ec:	71 81       	ldd	r23, Z+1	; 0x01
    17ee:	82 81       	ldd	r24, Z+2	; 0x02
    17f0:	93 81       	ldd	r25, Z+3	; 0x03
    17f2:	20 e0       	ldi	r18, 0x00	; 0
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	40 e2       	ldi	r20, 0x20	; 32
    17f8:	51 e4       	ldi	r21, 0x41	; 65
    17fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17fe:	dc 01       	movw	r26, r24
    1800:	cb 01       	movw	r24, r22
    1802:	8e 01       	movw	r16, r28
    1804:	09 52       	subi	r16, 0x29	; 41
    1806:	1f 4f       	sbci	r17, 0xFF	; 255
    1808:	bc 01       	movw	r22, r24
    180a:	cd 01       	movw	r24, r26
    180c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1810:	dc 01       	movw	r26, r24
    1812:	cb 01       	movw	r24, r22
    1814:	f8 01       	movw	r30, r16
    1816:	91 83       	std	Z+1, r25	; 0x01
    1818:	80 83       	st	Z, r24
    181a:	1f c0       	rjmp	.+62     	; 0x185a <CLCD_voidHamoksha+0x79c>
    181c:	fe 01       	movw	r30, r28
    181e:	eb 52       	subi	r30, 0x2B	; 43
    1820:	ff 4f       	sbci	r31, 0xFF	; 255
    1822:	80 e9       	ldi	r24, 0x90	; 144
    1824:	91 e0       	ldi	r25, 0x01	; 1
    1826:	91 83       	std	Z+1, r25	; 0x01
    1828:	80 83       	st	Z, r24
    182a:	fe 01       	movw	r30, r28
    182c:	eb 52       	subi	r30, 0x2B	; 43
    182e:	ff 4f       	sbci	r31, 0xFF	; 255
    1830:	80 81       	ld	r24, Z
    1832:	91 81       	ldd	r25, Z+1	; 0x01
    1834:	01 97       	sbiw	r24, 0x01	; 1
    1836:	f1 f7       	brne	.-4      	; 0x1834 <CLCD_voidHamoksha+0x776>
    1838:	fe 01       	movw	r30, r28
    183a:	eb 52       	subi	r30, 0x2B	; 43
    183c:	ff 4f       	sbci	r31, 0xFF	; 255
    183e:	91 83       	std	Z+1, r25	; 0x01
    1840:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1842:	de 01       	movw	r26, r28
    1844:	a9 52       	subi	r26, 0x29	; 41
    1846:	bf 4f       	sbci	r27, 0xFF	; 255
    1848:	fe 01       	movw	r30, r28
    184a:	e9 52       	subi	r30, 0x29	; 41
    184c:	ff 4f       	sbci	r31, 0xFF	; 255
    184e:	80 81       	ld	r24, Z
    1850:	91 81       	ldd	r25, Z+1	; 0x01
    1852:	01 97       	sbiw	r24, 0x01	; 1
    1854:	11 96       	adiw	r26, 0x01	; 1
    1856:	9c 93       	st	X, r25
    1858:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    185a:	fe 01       	movw	r30, r28
    185c:	e9 52       	subi	r30, 0x29	; 41
    185e:	ff 4f       	sbci	r31, 0xFF	; 255
    1860:	80 81       	ld	r24, Z
    1862:	91 81       	ldd	r25, Z+1	; 0x01
    1864:	00 97       	sbiw	r24, 0x00	; 0
    1866:	d1 f6       	brne	.-76     	; 0x181c <CLCD_voidHamoksha+0x75e>
    1868:	27 c0       	rjmp	.+78     	; 0x18b8 <CLCD_voidHamoksha+0x7fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    186a:	8e 01       	movw	r16, r28
    186c:	09 52       	subi	r16, 0x29	; 41
    186e:	1f 4f       	sbci	r17, 0xFF	; 255
    1870:	fe 01       	movw	r30, r28
    1872:	e7 52       	subi	r30, 0x27	; 39
    1874:	ff 4f       	sbci	r31, 0xFF	; 255
    1876:	60 81       	ld	r22, Z
    1878:	71 81       	ldd	r23, Z+1	; 0x01
    187a:	82 81       	ldd	r24, Z+2	; 0x02
    187c:	93 81       	ldd	r25, Z+3	; 0x03
    187e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1882:	dc 01       	movw	r26, r24
    1884:	cb 01       	movw	r24, r22
    1886:	f8 01       	movw	r30, r16
    1888:	91 83       	std	Z+1, r25	; 0x01
    188a:	80 83       	st	Z, r24
    188c:	de 01       	movw	r26, r28
    188e:	ad 52       	subi	r26, 0x2D	; 45
    1890:	bf 4f       	sbci	r27, 0xFF	; 255
    1892:	fe 01       	movw	r30, r28
    1894:	e9 52       	subi	r30, 0x29	; 41
    1896:	ff 4f       	sbci	r31, 0xFF	; 255
    1898:	80 81       	ld	r24, Z
    189a:	91 81       	ldd	r25, Z+1	; 0x01
    189c:	8d 93       	st	X+, r24
    189e:	9c 93       	st	X, r25
    18a0:	fe 01       	movw	r30, r28
    18a2:	ed 52       	subi	r30, 0x2D	; 45
    18a4:	ff 4f       	sbci	r31, 0xFF	; 255
    18a6:	80 81       	ld	r24, Z
    18a8:	91 81       	ldd	r25, Z+1	; 0x01
    18aa:	01 97       	sbiw	r24, 0x01	; 1
    18ac:	f1 f7       	brne	.-4      	; 0x18aa <CLCD_voidHamoksha+0x7ec>
    18ae:	fe 01       	movw	r30, r28
    18b0:	ed 52       	subi	r30, 0x2D	; 45
    18b2:	ff 4f       	sbci	r31, 0xFF	; 255
    18b4:	91 83       	std	Z+1, r25	; 0x01
    18b6:	80 83       	st	Z, r24
	_delay_ms(700);
	CLCD_voidClear();
    18b8:	0e 94 55 08 	call	0x10aa	; 0x10aa <CLCD_voidClear>
	CLCD_VoidGoToXY(0,0);
    18bc:	80 e0       	ldi	r24, 0x00	; 0
    18be:	60 e0       	ldi	r22, 0x00	; 0
    18c0:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <CLCD_VoidGoToXY>
	CLCD_u8SendString("I CAN RUN");
    18c4:	81 e7       	ldi	r24, 0x71	; 113
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	0e 94 2a 07 	call	0xe54	; 0xe54 <CLCD_u8SendString>
    18cc:	fe 01       	movw	r30, r28
    18ce:	e1 53       	subi	r30, 0x31	; 49
    18d0:	ff 4f       	sbci	r31, 0xFF	; 255
    18d2:	80 e0       	ldi	r24, 0x00	; 0
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	a6 e1       	ldi	r26, 0x16	; 22
    18d8:	b4 e4       	ldi	r27, 0x44	; 68
    18da:	80 83       	st	Z, r24
    18dc:	91 83       	std	Z+1, r25	; 0x01
    18de:	a2 83       	std	Z+2, r26	; 0x02
    18e0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18e2:	8e 01       	movw	r16, r28
    18e4:	05 53       	subi	r16, 0x35	; 53
    18e6:	1f 4f       	sbci	r17, 0xFF	; 255
    18e8:	fe 01       	movw	r30, r28
    18ea:	e1 53       	subi	r30, 0x31	; 49
    18ec:	ff 4f       	sbci	r31, 0xFF	; 255
    18ee:	60 81       	ld	r22, Z
    18f0:	71 81       	ldd	r23, Z+1	; 0x01
    18f2:	82 81       	ldd	r24, Z+2	; 0x02
    18f4:	93 81       	ldd	r25, Z+3	; 0x03
    18f6:	20 e0       	ldi	r18, 0x00	; 0
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	4a e7       	ldi	r20, 0x7A	; 122
    18fc:	55 e4       	ldi	r21, 0x45	; 69
    18fe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1902:	dc 01       	movw	r26, r24
    1904:	cb 01       	movw	r24, r22
    1906:	f8 01       	movw	r30, r16
    1908:	80 83       	st	Z, r24
    190a:	91 83       	std	Z+1, r25	; 0x01
    190c:	a2 83       	std	Z+2, r26	; 0x02
    190e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1910:	fe 01       	movw	r30, r28
    1912:	e5 53       	subi	r30, 0x35	; 53
    1914:	ff 4f       	sbci	r31, 0xFF	; 255
    1916:	60 81       	ld	r22, Z
    1918:	71 81       	ldd	r23, Z+1	; 0x01
    191a:	82 81       	ldd	r24, Z+2	; 0x02
    191c:	93 81       	ldd	r25, Z+3	; 0x03
    191e:	20 e0       	ldi	r18, 0x00	; 0
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	40 e8       	ldi	r20, 0x80	; 128
    1924:	5f e3       	ldi	r21, 0x3F	; 63
    1926:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    192a:	88 23       	and	r24, r24
    192c:	44 f4       	brge	.+16     	; 0x193e <CLCD_voidHamoksha+0x880>
		__ticks = 1;
    192e:	fe 01       	movw	r30, r28
    1930:	e7 53       	subi	r30, 0x37	; 55
    1932:	ff 4f       	sbci	r31, 0xFF	; 255
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	91 83       	std	Z+1, r25	; 0x01
    193a:	80 83       	st	Z, r24
    193c:	64 c0       	rjmp	.+200    	; 0x1a06 <CLCD_voidHamoksha+0x948>
	else if (__tmp > 65535)
    193e:	fe 01       	movw	r30, r28
    1940:	e5 53       	subi	r30, 0x35	; 53
    1942:	ff 4f       	sbci	r31, 0xFF	; 255
    1944:	60 81       	ld	r22, Z
    1946:	71 81       	ldd	r23, Z+1	; 0x01
    1948:	82 81       	ldd	r24, Z+2	; 0x02
    194a:	93 81       	ldd	r25, Z+3	; 0x03
    194c:	20 e0       	ldi	r18, 0x00	; 0
    194e:	3f ef       	ldi	r19, 0xFF	; 255
    1950:	4f e7       	ldi	r20, 0x7F	; 127
    1952:	57 e4       	ldi	r21, 0x47	; 71
    1954:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1958:	18 16       	cp	r1, r24
    195a:	0c f0       	brlt	.+2      	; 0x195e <CLCD_voidHamoksha+0x8a0>
    195c:	43 c0       	rjmp	.+134    	; 0x19e4 <CLCD_voidHamoksha+0x926>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    195e:	fe 01       	movw	r30, r28
    1960:	e1 53       	subi	r30, 0x31	; 49
    1962:	ff 4f       	sbci	r31, 0xFF	; 255
    1964:	60 81       	ld	r22, Z
    1966:	71 81       	ldd	r23, Z+1	; 0x01
    1968:	82 81       	ldd	r24, Z+2	; 0x02
    196a:	93 81       	ldd	r25, Z+3	; 0x03
    196c:	20 e0       	ldi	r18, 0x00	; 0
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	40 e2       	ldi	r20, 0x20	; 32
    1972:	51 e4       	ldi	r21, 0x41	; 65
    1974:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1978:	dc 01       	movw	r26, r24
    197a:	cb 01       	movw	r24, r22
    197c:	8e 01       	movw	r16, r28
    197e:	07 53       	subi	r16, 0x37	; 55
    1980:	1f 4f       	sbci	r17, 0xFF	; 255
    1982:	bc 01       	movw	r22, r24
    1984:	cd 01       	movw	r24, r26
    1986:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    198a:	dc 01       	movw	r26, r24
    198c:	cb 01       	movw	r24, r22
    198e:	f8 01       	movw	r30, r16
    1990:	91 83       	std	Z+1, r25	; 0x01
    1992:	80 83       	st	Z, r24
    1994:	1f c0       	rjmp	.+62     	; 0x19d4 <CLCD_voidHamoksha+0x916>
    1996:	fe 01       	movw	r30, r28
    1998:	e9 53       	subi	r30, 0x39	; 57
    199a:	ff 4f       	sbci	r31, 0xFF	; 255
    199c:	80 e9       	ldi	r24, 0x90	; 144
    199e:	91 e0       	ldi	r25, 0x01	; 1
    19a0:	91 83       	std	Z+1, r25	; 0x01
    19a2:	80 83       	st	Z, r24
    19a4:	fe 01       	movw	r30, r28
    19a6:	e9 53       	subi	r30, 0x39	; 57
    19a8:	ff 4f       	sbci	r31, 0xFF	; 255
    19aa:	80 81       	ld	r24, Z
    19ac:	91 81       	ldd	r25, Z+1	; 0x01
    19ae:	01 97       	sbiw	r24, 0x01	; 1
    19b0:	f1 f7       	brne	.-4      	; 0x19ae <CLCD_voidHamoksha+0x8f0>
    19b2:	fe 01       	movw	r30, r28
    19b4:	e9 53       	subi	r30, 0x39	; 57
    19b6:	ff 4f       	sbci	r31, 0xFF	; 255
    19b8:	91 83       	std	Z+1, r25	; 0x01
    19ba:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19bc:	de 01       	movw	r26, r28
    19be:	a7 53       	subi	r26, 0x37	; 55
    19c0:	bf 4f       	sbci	r27, 0xFF	; 255
    19c2:	fe 01       	movw	r30, r28
    19c4:	e7 53       	subi	r30, 0x37	; 55
    19c6:	ff 4f       	sbci	r31, 0xFF	; 255
    19c8:	80 81       	ld	r24, Z
    19ca:	91 81       	ldd	r25, Z+1	; 0x01
    19cc:	01 97       	sbiw	r24, 0x01	; 1
    19ce:	11 96       	adiw	r26, 0x01	; 1
    19d0:	9c 93       	st	X, r25
    19d2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19d4:	fe 01       	movw	r30, r28
    19d6:	e7 53       	subi	r30, 0x37	; 55
    19d8:	ff 4f       	sbci	r31, 0xFF	; 255
    19da:	80 81       	ld	r24, Z
    19dc:	91 81       	ldd	r25, Z+1	; 0x01
    19de:	00 97       	sbiw	r24, 0x00	; 0
    19e0:	d1 f6       	brne	.-76     	; 0x1996 <CLCD_voidHamoksha+0x8d8>
    19e2:	28 c0       	rjmp	.+80     	; 0x1a34 <CLCD_voidHamoksha+0x976>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19e4:	8e 01       	movw	r16, r28
    19e6:	07 53       	subi	r16, 0x37	; 55
    19e8:	1f 4f       	sbci	r17, 0xFF	; 255
    19ea:	fe 01       	movw	r30, r28
    19ec:	e5 53       	subi	r30, 0x35	; 53
    19ee:	ff 4f       	sbci	r31, 0xFF	; 255
    19f0:	60 81       	ld	r22, Z
    19f2:	71 81       	ldd	r23, Z+1	; 0x01
    19f4:	82 81       	ldd	r24, Z+2	; 0x02
    19f6:	93 81       	ldd	r25, Z+3	; 0x03
    19f8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19fc:	dc 01       	movw	r26, r24
    19fe:	cb 01       	movw	r24, r22
    1a00:	f8 01       	movw	r30, r16
    1a02:	91 83       	std	Z+1, r25	; 0x01
    1a04:	80 83       	st	Z, r24
    1a06:	de 01       	movw	r26, r28
    1a08:	ab 53       	subi	r26, 0x3B	; 59
    1a0a:	bf 4f       	sbci	r27, 0xFF	; 255
    1a0c:	fe 01       	movw	r30, r28
    1a0e:	e7 53       	subi	r30, 0x37	; 55
    1a10:	ff 4f       	sbci	r31, 0xFF	; 255
    1a12:	80 81       	ld	r24, Z
    1a14:	91 81       	ldd	r25, Z+1	; 0x01
    1a16:	11 96       	adiw	r26, 0x01	; 1
    1a18:	9c 93       	st	X, r25
    1a1a:	8e 93       	st	-X, r24
    1a1c:	fe 01       	movw	r30, r28
    1a1e:	eb 53       	subi	r30, 0x3B	; 59
    1a20:	ff 4f       	sbci	r31, 0xFF	; 255
    1a22:	80 81       	ld	r24, Z
    1a24:	91 81       	ldd	r25, Z+1	; 0x01
    1a26:	01 97       	sbiw	r24, 0x01	; 1
    1a28:	f1 f7       	brne	.-4      	; 0x1a26 <CLCD_voidHamoksha+0x968>
    1a2a:	fe 01       	movw	r30, r28
    1a2c:	eb 53       	subi	r30, 0x3B	; 59
    1a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a30:	91 83       	std	Z+1, r25	; 0x01
    1a32:	80 83       	st	Z, r24
	_delay_ms(600);
uint8 i=0;
    1a34:	fe 01       	movw	r30, r28
    1a36:	ef 51       	subi	r30, 0x1F	; 31
    1a38:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3a:	10 82       	st	Z, r1
    1a3c:	93 c1       	rjmp	.+806    	; 0x1d64 <CLCD_voidHamoksha+0xca6>
while(i<16)
	{   CLCD_voidClear();
    1a3e:	0e 94 55 08 	call	0x10aa	; 0x10aa <CLCD_voidClear>
		CLCD_u8SpecialCharacter(0,Local_u8HamokshaPattern4,i++,1);
    1a42:	fe 01       	movw	r30, r28
    1a44:	ef 51       	subi	r30, 0x1F	; 31
    1a46:	ff 4f       	sbci	r31, 0xFF	; 255
    1a48:	90 81       	ld	r25, Z
    1a4a:	de 01       	movw	r26, r28
    1a4c:	af 51       	subi	r26, 0x1F	; 31
    1a4e:	bf 4f       	sbci	r27, 0xFF	; 255
    1a50:	fe 01       	movw	r30, r28
    1a52:	ef 51       	subi	r30, 0x1F	; 31
    1a54:	ff 4f       	sbci	r31, 0xFF	; 255
    1a56:	80 81       	ld	r24, Z
    1a58:	8f 5f       	subi	r24, 0xFF	; 255
    1a5a:	8c 93       	st	X, r24
    1a5c:	9e 01       	movw	r18, r28
    1a5e:	2e 5f       	subi	r18, 0xFE	; 254
    1a60:	3e 4f       	sbci	r19, 0xFE	; 254
    1a62:	80 e0       	ldi	r24, 0x00	; 0
    1a64:	b9 01       	movw	r22, r18
    1a66:	49 2f       	mov	r20, r25
    1a68:	21 e0       	ldi	r18, 0x01	; 1
    1a6a:	0e 94 09 08 	call	0x1012	; 0x1012 <CLCD_u8SpecialCharacter>
    1a6e:	fe 01       	movw	r30, r28
    1a70:	ef 53       	subi	r30, 0x3F	; 63
    1a72:	ff 4f       	sbci	r31, 0xFF	; 255
    1a74:	80 e0       	ldi	r24, 0x00	; 0
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	a0 e2       	ldi	r26, 0x20	; 32
    1a7a:	b2 e4       	ldi	r27, 0x42	; 66
    1a7c:	80 83       	st	Z, r24
    1a7e:	91 83       	std	Z+1, r25	; 0x01
    1a80:	a2 83       	std	Z+2, r26	; 0x02
    1a82:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a84:	8e 01       	movw	r16, r28
    1a86:	03 54       	subi	r16, 0x43	; 67
    1a88:	1f 4f       	sbci	r17, 0xFF	; 255
    1a8a:	fe 01       	movw	r30, r28
    1a8c:	ef 53       	subi	r30, 0x3F	; 63
    1a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a90:	60 81       	ld	r22, Z
    1a92:	71 81       	ldd	r23, Z+1	; 0x01
    1a94:	82 81       	ldd	r24, Z+2	; 0x02
    1a96:	93 81       	ldd	r25, Z+3	; 0x03
    1a98:	20 e0       	ldi	r18, 0x00	; 0
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	4a e7       	ldi	r20, 0x7A	; 122
    1a9e:	55 e4       	ldi	r21, 0x45	; 69
    1aa0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1aa4:	dc 01       	movw	r26, r24
    1aa6:	cb 01       	movw	r24, r22
    1aa8:	f8 01       	movw	r30, r16
    1aaa:	80 83       	st	Z, r24
    1aac:	91 83       	std	Z+1, r25	; 0x01
    1aae:	a2 83       	std	Z+2, r26	; 0x02
    1ab0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ab2:	fe 01       	movw	r30, r28
    1ab4:	e3 54       	subi	r30, 0x43	; 67
    1ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab8:	60 81       	ld	r22, Z
    1aba:	71 81       	ldd	r23, Z+1	; 0x01
    1abc:	82 81       	ldd	r24, Z+2	; 0x02
    1abe:	93 81       	ldd	r25, Z+3	; 0x03
    1ac0:	20 e0       	ldi	r18, 0x00	; 0
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	40 e8       	ldi	r20, 0x80	; 128
    1ac6:	5f e3       	ldi	r21, 0x3F	; 63
    1ac8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1acc:	88 23       	and	r24, r24
    1ace:	44 f4       	brge	.+16     	; 0x1ae0 <CLCD_voidHamoksha+0xa22>
		__ticks = 1;
    1ad0:	fe 01       	movw	r30, r28
    1ad2:	e5 54       	subi	r30, 0x45	; 69
    1ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad6:	81 e0       	ldi	r24, 0x01	; 1
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	91 83       	std	Z+1, r25	; 0x01
    1adc:	80 83       	st	Z, r24
    1ade:	64 c0       	rjmp	.+200    	; 0x1ba8 <CLCD_voidHamoksha+0xaea>
	else if (__tmp > 65535)
    1ae0:	fe 01       	movw	r30, r28
    1ae2:	e3 54       	subi	r30, 0x43	; 67
    1ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae6:	60 81       	ld	r22, Z
    1ae8:	71 81       	ldd	r23, Z+1	; 0x01
    1aea:	82 81       	ldd	r24, Z+2	; 0x02
    1aec:	93 81       	ldd	r25, Z+3	; 0x03
    1aee:	20 e0       	ldi	r18, 0x00	; 0
    1af0:	3f ef       	ldi	r19, 0xFF	; 255
    1af2:	4f e7       	ldi	r20, 0x7F	; 127
    1af4:	57 e4       	ldi	r21, 0x47	; 71
    1af6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1afa:	18 16       	cp	r1, r24
    1afc:	0c f0       	brlt	.+2      	; 0x1b00 <CLCD_voidHamoksha+0xa42>
    1afe:	43 c0       	rjmp	.+134    	; 0x1b86 <CLCD_voidHamoksha+0xac8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b00:	fe 01       	movw	r30, r28
    1b02:	ef 53       	subi	r30, 0x3F	; 63
    1b04:	ff 4f       	sbci	r31, 0xFF	; 255
    1b06:	60 81       	ld	r22, Z
    1b08:	71 81       	ldd	r23, Z+1	; 0x01
    1b0a:	82 81       	ldd	r24, Z+2	; 0x02
    1b0c:	93 81       	ldd	r25, Z+3	; 0x03
    1b0e:	20 e0       	ldi	r18, 0x00	; 0
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	40 e2       	ldi	r20, 0x20	; 32
    1b14:	51 e4       	ldi	r21, 0x41	; 65
    1b16:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b1a:	dc 01       	movw	r26, r24
    1b1c:	cb 01       	movw	r24, r22
    1b1e:	8e 01       	movw	r16, r28
    1b20:	05 54       	subi	r16, 0x45	; 69
    1b22:	1f 4f       	sbci	r17, 0xFF	; 255
    1b24:	bc 01       	movw	r22, r24
    1b26:	cd 01       	movw	r24, r26
    1b28:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b2c:	dc 01       	movw	r26, r24
    1b2e:	cb 01       	movw	r24, r22
    1b30:	f8 01       	movw	r30, r16
    1b32:	91 83       	std	Z+1, r25	; 0x01
    1b34:	80 83       	st	Z, r24
    1b36:	1f c0       	rjmp	.+62     	; 0x1b76 <CLCD_voidHamoksha+0xab8>
    1b38:	fe 01       	movw	r30, r28
    1b3a:	e7 54       	subi	r30, 0x47	; 71
    1b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3e:	80 e9       	ldi	r24, 0x90	; 144
    1b40:	91 e0       	ldi	r25, 0x01	; 1
    1b42:	91 83       	std	Z+1, r25	; 0x01
    1b44:	80 83       	st	Z, r24
    1b46:	fe 01       	movw	r30, r28
    1b48:	e7 54       	subi	r30, 0x47	; 71
    1b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4c:	80 81       	ld	r24, Z
    1b4e:	91 81       	ldd	r25, Z+1	; 0x01
    1b50:	01 97       	sbiw	r24, 0x01	; 1
    1b52:	f1 f7       	brne	.-4      	; 0x1b50 <CLCD_voidHamoksha+0xa92>
    1b54:	fe 01       	movw	r30, r28
    1b56:	e7 54       	subi	r30, 0x47	; 71
    1b58:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5a:	91 83       	std	Z+1, r25	; 0x01
    1b5c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b5e:	de 01       	movw	r26, r28
    1b60:	a5 54       	subi	r26, 0x45	; 69
    1b62:	bf 4f       	sbci	r27, 0xFF	; 255
    1b64:	fe 01       	movw	r30, r28
    1b66:	e5 54       	subi	r30, 0x45	; 69
    1b68:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6a:	80 81       	ld	r24, Z
    1b6c:	91 81       	ldd	r25, Z+1	; 0x01
    1b6e:	01 97       	sbiw	r24, 0x01	; 1
    1b70:	11 96       	adiw	r26, 0x01	; 1
    1b72:	9c 93       	st	X, r25
    1b74:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b76:	fe 01       	movw	r30, r28
    1b78:	e5 54       	subi	r30, 0x45	; 69
    1b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7c:	80 81       	ld	r24, Z
    1b7e:	91 81       	ldd	r25, Z+1	; 0x01
    1b80:	00 97       	sbiw	r24, 0x00	; 0
    1b82:	d1 f6       	brne	.-76     	; 0x1b38 <CLCD_voidHamoksha+0xa7a>
    1b84:	27 c0       	rjmp	.+78     	; 0x1bd4 <CLCD_voidHamoksha+0xb16>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b86:	8e 01       	movw	r16, r28
    1b88:	05 54       	subi	r16, 0x45	; 69
    1b8a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b8c:	fe 01       	movw	r30, r28
    1b8e:	e3 54       	subi	r30, 0x43	; 67
    1b90:	ff 4f       	sbci	r31, 0xFF	; 255
    1b92:	60 81       	ld	r22, Z
    1b94:	71 81       	ldd	r23, Z+1	; 0x01
    1b96:	82 81       	ldd	r24, Z+2	; 0x02
    1b98:	93 81       	ldd	r25, Z+3	; 0x03
    1b9a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b9e:	dc 01       	movw	r26, r24
    1ba0:	cb 01       	movw	r24, r22
    1ba2:	f8 01       	movw	r30, r16
    1ba4:	91 83       	std	Z+1, r25	; 0x01
    1ba6:	80 83       	st	Z, r24
    1ba8:	de 01       	movw	r26, r28
    1baa:	a9 54       	subi	r26, 0x49	; 73
    1bac:	bf 4f       	sbci	r27, 0xFF	; 255
    1bae:	fe 01       	movw	r30, r28
    1bb0:	e5 54       	subi	r30, 0x45	; 69
    1bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb4:	80 81       	ld	r24, Z
    1bb6:	91 81       	ldd	r25, Z+1	; 0x01
    1bb8:	8d 93       	st	X+, r24
    1bba:	9c 93       	st	X, r25
    1bbc:	fe 01       	movw	r30, r28
    1bbe:	e9 54       	subi	r30, 0x49	; 73
    1bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc2:	80 81       	ld	r24, Z
    1bc4:	91 81       	ldd	r25, Z+1	; 0x01
    1bc6:	01 97       	sbiw	r24, 0x01	; 1
    1bc8:	f1 f7       	brne	.-4      	; 0x1bc6 <CLCD_voidHamoksha+0xb08>
    1bca:	fe 01       	movw	r30, r28
    1bcc:	e9 54       	subi	r30, 0x49	; 73
    1bce:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd0:	91 83       	std	Z+1, r25	; 0x01
    1bd2:	80 83       	st	Z, r24
		_delay_ms(40);
		CLCD_u8SpecialCharacter(0,Local_u8HamokshaPattern5,i,1);
    1bd4:	9e 01       	movw	r18, r28
    1bd6:	26 5f       	subi	r18, 0xF6	; 246
    1bd8:	3e 4f       	sbci	r19, 0xFE	; 254
    1bda:	fe 01       	movw	r30, r28
    1bdc:	ef 51       	subi	r30, 0x1F	; 31
    1bde:	ff 4f       	sbci	r31, 0xFF	; 255
    1be0:	80 e0       	ldi	r24, 0x00	; 0
    1be2:	b9 01       	movw	r22, r18
    1be4:	40 81       	ld	r20, Z
    1be6:	21 e0       	ldi	r18, 0x01	; 1
    1be8:	0e 94 09 08 	call	0x1012	; 0x1012 <CLCD_u8SpecialCharacter>
    1bec:	fe 01       	movw	r30, r28
    1bee:	ed 54       	subi	r30, 0x4D	; 77
    1bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf2:	80 e0       	ldi	r24, 0x00	; 0
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	a0 e2       	ldi	r26, 0x20	; 32
    1bf8:	b2 e4       	ldi	r27, 0x42	; 66
    1bfa:	80 83       	st	Z, r24
    1bfc:	91 83       	std	Z+1, r25	; 0x01
    1bfe:	a2 83       	std	Z+2, r26	; 0x02
    1c00:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c02:	8e 01       	movw	r16, r28
    1c04:	01 55       	subi	r16, 0x51	; 81
    1c06:	1f 4f       	sbci	r17, 0xFF	; 255
    1c08:	fe 01       	movw	r30, r28
    1c0a:	ed 54       	subi	r30, 0x4D	; 77
    1c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0e:	60 81       	ld	r22, Z
    1c10:	71 81       	ldd	r23, Z+1	; 0x01
    1c12:	82 81       	ldd	r24, Z+2	; 0x02
    1c14:	93 81       	ldd	r25, Z+3	; 0x03
    1c16:	20 e0       	ldi	r18, 0x00	; 0
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	4a e7       	ldi	r20, 0x7A	; 122
    1c1c:	55 e4       	ldi	r21, 0x45	; 69
    1c1e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c22:	dc 01       	movw	r26, r24
    1c24:	cb 01       	movw	r24, r22
    1c26:	f8 01       	movw	r30, r16
    1c28:	80 83       	st	Z, r24
    1c2a:	91 83       	std	Z+1, r25	; 0x01
    1c2c:	a2 83       	std	Z+2, r26	; 0x02
    1c2e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c30:	fe 01       	movw	r30, r28
    1c32:	e1 55       	subi	r30, 0x51	; 81
    1c34:	ff 4f       	sbci	r31, 0xFF	; 255
    1c36:	60 81       	ld	r22, Z
    1c38:	71 81       	ldd	r23, Z+1	; 0x01
    1c3a:	82 81       	ldd	r24, Z+2	; 0x02
    1c3c:	93 81       	ldd	r25, Z+3	; 0x03
    1c3e:	20 e0       	ldi	r18, 0x00	; 0
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	40 e8       	ldi	r20, 0x80	; 128
    1c44:	5f e3       	ldi	r21, 0x3F	; 63
    1c46:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c4a:	88 23       	and	r24, r24
    1c4c:	44 f4       	brge	.+16     	; 0x1c5e <CLCD_voidHamoksha+0xba0>
		__ticks = 1;
    1c4e:	fe 01       	movw	r30, r28
    1c50:	e3 55       	subi	r30, 0x53	; 83
    1c52:	ff 4f       	sbci	r31, 0xFF	; 255
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	91 83       	std	Z+1, r25	; 0x01
    1c5a:	80 83       	st	Z, r24
    1c5c:	64 c0       	rjmp	.+200    	; 0x1d26 <CLCD_voidHamoksha+0xc68>
	else if (__tmp > 65535)
    1c5e:	fe 01       	movw	r30, r28
    1c60:	e1 55       	subi	r30, 0x51	; 81
    1c62:	ff 4f       	sbci	r31, 0xFF	; 255
    1c64:	60 81       	ld	r22, Z
    1c66:	71 81       	ldd	r23, Z+1	; 0x01
    1c68:	82 81       	ldd	r24, Z+2	; 0x02
    1c6a:	93 81       	ldd	r25, Z+3	; 0x03
    1c6c:	20 e0       	ldi	r18, 0x00	; 0
    1c6e:	3f ef       	ldi	r19, 0xFF	; 255
    1c70:	4f e7       	ldi	r20, 0x7F	; 127
    1c72:	57 e4       	ldi	r21, 0x47	; 71
    1c74:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c78:	18 16       	cp	r1, r24
    1c7a:	0c f0       	brlt	.+2      	; 0x1c7e <CLCD_voidHamoksha+0xbc0>
    1c7c:	43 c0       	rjmp	.+134    	; 0x1d04 <CLCD_voidHamoksha+0xc46>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c7e:	fe 01       	movw	r30, r28
    1c80:	ed 54       	subi	r30, 0x4D	; 77
    1c82:	ff 4f       	sbci	r31, 0xFF	; 255
    1c84:	60 81       	ld	r22, Z
    1c86:	71 81       	ldd	r23, Z+1	; 0x01
    1c88:	82 81       	ldd	r24, Z+2	; 0x02
    1c8a:	93 81       	ldd	r25, Z+3	; 0x03
    1c8c:	20 e0       	ldi	r18, 0x00	; 0
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	40 e2       	ldi	r20, 0x20	; 32
    1c92:	51 e4       	ldi	r21, 0x41	; 65
    1c94:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c98:	dc 01       	movw	r26, r24
    1c9a:	cb 01       	movw	r24, r22
    1c9c:	8e 01       	movw	r16, r28
    1c9e:	03 55       	subi	r16, 0x53	; 83
    1ca0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ca2:	bc 01       	movw	r22, r24
    1ca4:	cd 01       	movw	r24, r26
    1ca6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1caa:	dc 01       	movw	r26, r24
    1cac:	cb 01       	movw	r24, r22
    1cae:	f8 01       	movw	r30, r16
    1cb0:	91 83       	std	Z+1, r25	; 0x01
    1cb2:	80 83       	st	Z, r24
    1cb4:	1f c0       	rjmp	.+62     	; 0x1cf4 <CLCD_voidHamoksha+0xc36>
    1cb6:	fe 01       	movw	r30, r28
    1cb8:	e5 55       	subi	r30, 0x55	; 85
    1cba:	ff 4f       	sbci	r31, 0xFF	; 255
    1cbc:	80 e9       	ldi	r24, 0x90	; 144
    1cbe:	91 e0       	ldi	r25, 0x01	; 1
    1cc0:	91 83       	std	Z+1, r25	; 0x01
    1cc2:	80 83       	st	Z, r24
    1cc4:	fe 01       	movw	r30, r28
    1cc6:	e5 55       	subi	r30, 0x55	; 85
    1cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cca:	80 81       	ld	r24, Z
    1ccc:	91 81       	ldd	r25, Z+1	; 0x01
    1cce:	01 97       	sbiw	r24, 0x01	; 1
    1cd0:	f1 f7       	brne	.-4      	; 0x1cce <CLCD_voidHamoksha+0xc10>
    1cd2:	fe 01       	movw	r30, r28
    1cd4:	e5 55       	subi	r30, 0x55	; 85
    1cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd8:	91 83       	std	Z+1, r25	; 0x01
    1cda:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cdc:	de 01       	movw	r26, r28
    1cde:	a3 55       	subi	r26, 0x53	; 83
    1ce0:	bf 4f       	sbci	r27, 0xFF	; 255
    1ce2:	fe 01       	movw	r30, r28
    1ce4:	e3 55       	subi	r30, 0x53	; 83
    1ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce8:	80 81       	ld	r24, Z
    1cea:	91 81       	ldd	r25, Z+1	; 0x01
    1cec:	01 97       	sbiw	r24, 0x01	; 1
    1cee:	11 96       	adiw	r26, 0x01	; 1
    1cf0:	9c 93       	st	X, r25
    1cf2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cf4:	fe 01       	movw	r30, r28
    1cf6:	e3 55       	subi	r30, 0x53	; 83
    1cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfa:	80 81       	ld	r24, Z
    1cfc:	91 81       	ldd	r25, Z+1	; 0x01
    1cfe:	00 97       	sbiw	r24, 0x00	; 0
    1d00:	d1 f6       	brne	.-76     	; 0x1cb6 <CLCD_voidHamoksha+0xbf8>
    1d02:	27 c0       	rjmp	.+78     	; 0x1d52 <CLCD_voidHamoksha+0xc94>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d04:	8e 01       	movw	r16, r28
    1d06:	03 55       	subi	r16, 0x53	; 83
    1d08:	1f 4f       	sbci	r17, 0xFF	; 255
    1d0a:	fe 01       	movw	r30, r28
    1d0c:	e1 55       	subi	r30, 0x51	; 81
    1d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d10:	60 81       	ld	r22, Z
    1d12:	71 81       	ldd	r23, Z+1	; 0x01
    1d14:	82 81       	ldd	r24, Z+2	; 0x02
    1d16:	93 81       	ldd	r25, Z+3	; 0x03
    1d18:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d1c:	dc 01       	movw	r26, r24
    1d1e:	cb 01       	movw	r24, r22
    1d20:	f8 01       	movw	r30, r16
    1d22:	91 83       	std	Z+1, r25	; 0x01
    1d24:	80 83       	st	Z, r24
    1d26:	de 01       	movw	r26, r28
    1d28:	a7 55       	subi	r26, 0x57	; 87
    1d2a:	bf 4f       	sbci	r27, 0xFF	; 255
    1d2c:	fe 01       	movw	r30, r28
    1d2e:	e3 55       	subi	r30, 0x53	; 83
    1d30:	ff 4f       	sbci	r31, 0xFF	; 255
    1d32:	80 81       	ld	r24, Z
    1d34:	91 81       	ldd	r25, Z+1	; 0x01
    1d36:	8d 93       	st	X+, r24
    1d38:	9c 93       	st	X, r25
    1d3a:	fe 01       	movw	r30, r28
    1d3c:	e7 55       	subi	r30, 0x57	; 87
    1d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d40:	80 81       	ld	r24, Z
    1d42:	91 81       	ldd	r25, Z+1	; 0x01
    1d44:	01 97       	sbiw	r24, 0x01	; 1
    1d46:	f1 f7       	brne	.-4      	; 0x1d44 <CLCD_voidHamoksha+0xc86>
    1d48:	fe 01       	movw	r30, r28
    1d4a:	e7 55       	subi	r30, 0x57	; 87
    1d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4e:	91 83       	std	Z+1, r25	; 0x01
    1d50:	80 83       	st	Z, r24
		_delay_ms(40);
		        i++;
    1d52:	de 01       	movw	r26, r28
    1d54:	af 51       	subi	r26, 0x1F	; 31
    1d56:	bf 4f       	sbci	r27, 0xFF	; 255
    1d58:	fe 01       	movw	r30, r28
    1d5a:	ef 51       	subi	r30, 0x1F	; 31
    1d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5e:	80 81       	ld	r24, Z
    1d60:	8f 5f       	subi	r24, 0xFF	; 255
    1d62:	8c 93       	st	X, r24
	CLCD_voidClear();
	CLCD_VoidGoToXY(0,0);
	CLCD_u8SendString("I CAN RUN");
	_delay_ms(600);
uint8 i=0;
while(i<16)
    1d64:	fe 01       	movw	r30, r28
    1d66:	ef 51       	subi	r30, 0x1F	; 31
    1d68:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6a:	80 81       	ld	r24, Z
    1d6c:	80 31       	cpi	r24, 0x10	; 16
    1d6e:	08 f4       	brcc	.+2      	; 0x1d72 <CLCD_voidHamoksha+0xcb4>
    1d70:	66 ce       	rjmp	.-820    	; 0x1a3e <CLCD_voidHamoksha+0x980>
		CLCD_u8SpecialCharacter(0,Local_u8HamokshaPattern5,i,1);
		_delay_ms(40);
		        i++;

	}
CLCD_voidClear();
    1d72:	0e 94 55 08 	call	0x10aa	; 0x10aa <CLCD_voidClear>
CLCD_VoidGoToXY(0,0);
    1d76:	80 e0       	ldi	r24, 0x00	; 0
    1d78:	60 e0       	ldi	r22, 0x00	; 0
    1d7a:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <CLCD_VoidGoToXY>
	CLCD_u8SendString("I CAN DANCE");
    1d7e:	8b e7       	ldi	r24, 0x7B	; 123
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	0e 94 2a 07 	call	0xe54	; 0xe54 <CLCD_u8SendString>
    1d86:	fe 01       	movw	r30, r28
    1d88:	eb 55       	subi	r30, 0x5B	; 91
    1d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8c:	80 e0       	ldi	r24, 0x00	; 0
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	a6 e1       	ldi	r26, 0x16	; 22
    1d92:	b4 e4       	ldi	r27, 0x44	; 68
    1d94:	80 83       	st	Z, r24
    1d96:	91 83       	std	Z+1, r25	; 0x01
    1d98:	a2 83       	std	Z+2, r26	; 0x02
    1d9a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d9c:	8e 01       	movw	r16, r28
    1d9e:	0f 55       	subi	r16, 0x5F	; 95
    1da0:	1f 4f       	sbci	r17, 0xFF	; 255
    1da2:	fe 01       	movw	r30, r28
    1da4:	eb 55       	subi	r30, 0x5B	; 91
    1da6:	ff 4f       	sbci	r31, 0xFF	; 255
    1da8:	60 81       	ld	r22, Z
    1daa:	71 81       	ldd	r23, Z+1	; 0x01
    1dac:	82 81       	ldd	r24, Z+2	; 0x02
    1dae:	93 81       	ldd	r25, Z+3	; 0x03
    1db0:	20 e0       	ldi	r18, 0x00	; 0
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	4a e7       	ldi	r20, 0x7A	; 122
    1db6:	55 e4       	ldi	r21, 0x45	; 69
    1db8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dbc:	dc 01       	movw	r26, r24
    1dbe:	cb 01       	movw	r24, r22
    1dc0:	f8 01       	movw	r30, r16
    1dc2:	80 83       	st	Z, r24
    1dc4:	91 83       	std	Z+1, r25	; 0x01
    1dc6:	a2 83       	std	Z+2, r26	; 0x02
    1dc8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1dca:	fe 01       	movw	r30, r28
    1dcc:	ef 55       	subi	r30, 0x5F	; 95
    1dce:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd0:	60 81       	ld	r22, Z
    1dd2:	71 81       	ldd	r23, Z+1	; 0x01
    1dd4:	82 81       	ldd	r24, Z+2	; 0x02
    1dd6:	93 81       	ldd	r25, Z+3	; 0x03
    1dd8:	20 e0       	ldi	r18, 0x00	; 0
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	40 e8       	ldi	r20, 0x80	; 128
    1dde:	5f e3       	ldi	r21, 0x3F	; 63
    1de0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1de4:	88 23       	and	r24, r24
    1de6:	44 f4       	brge	.+16     	; 0x1df8 <CLCD_voidHamoksha+0xd3a>
		__ticks = 1;
    1de8:	fe 01       	movw	r30, r28
    1dea:	e1 56       	subi	r30, 0x61	; 97
    1dec:	ff 4f       	sbci	r31, 0xFF	; 255
    1dee:	81 e0       	ldi	r24, 0x01	; 1
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	91 83       	std	Z+1, r25	; 0x01
    1df4:	80 83       	st	Z, r24
    1df6:	64 c0       	rjmp	.+200    	; 0x1ec0 <CLCD_voidHamoksha+0xe02>
	else if (__tmp > 65535)
    1df8:	fe 01       	movw	r30, r28
    1dfa:	ef 55       	subi	r30, 0x5F	; 95
    1dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfe:	60 81       	ld	r22, Z
    1e00:	71 81       	ldd	r23, Z+1	; 0x01
    1e02:	82 81       	ldd	r24, Z+2	; 0x02
    1e04:	93 81       	ldd	r25, Z+3	; 0x03
    1e06:	20 e0       	ldi	r18, 0x00	; 0
    1e08:	3f ef       	ldi	r19, 0xFF	; 255
    1e0a:	4f e7       	ldi	r20, 0x7F	; 127
    1e0c:	57 e4       	ldi	r21, 0x47	; 71
    1e0e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e12:	18 16       	cp	r1, r24
    1e14:	0c f0       	brlt	.+2      	; 0x1e18 <CLCD_voidHamoksha+0xd5a>
    1e16:	43 c0       	rjmp	.+134    	; 0x1e9e <CLCD_voidHamoksha+0xde0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e18:	fe 01       	movw	r30, r28
    1e1a:	eb 55       	subi	r30, 0x5B	; 91
    1e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1e:	60 81       	ld	r22, Z
    1e20:	71 81       	ldd	r23, Z+1	; 0x01
    1e22:	82 81       	ldd	r24, Z+2	; 0x02
    1e24:	93 81       	ldd	r25, Z+3	; 0x03
    1e26:	20 e0       	ldi	r18, 0x00	; 0
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	40 e2       	ldi	r20, 0x20	; 32
    1e2c:	51 e4       	ldi	r21, 0x41	; 65
    1e2e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e32:	dc 01       	movw	r26, r24
    1e34:	cb 01       	movw	r24, r22
    1e36:	8e 01       	movw	r16, r28
    1e38:	01 56       	subi	r16, 0x61	; 97
    1e3a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e3c:	bc 01       	movw	r22, r24
    1e3e:	cd 01       	movw	r24, r26
    1e40:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e44:	dc 01       	movw	r26, r24
    1e46:	cb 01       	movw	r24, r22
    1e48:	f8 01       	movw	r30, r16
    1e4a:	91 83       	std	Z+1, r25	; 0x01
    1e4c:	80 83       	st	Z, r24
    1e4e:	1f c0       	rjmp	.+62     	; 0x1e8e <CLCD_voidHamoksha+0xdd0>
    1e50:	fe 01       	movw	r30, r28
    1e52:	e3 56       	subi	r30, 0x63	; 99
    1e54:	ff 4f       	sbci	r31, 0xFF	; 255
    1e56:	80 e9       	ldi	r24, 0x90	; 144
    1e58:	91 e0       	ldi	r25, 0x01	; 1
    1e5a:	91 83       	std	Z+1, r25	; 0x01
    1e5c:	80 83       	st	Z, r24
    1e5e:	fe 01       	movw	r30, r28
    1e60:	e3 56       	subi	r30, 0x63	; 99
    1e62:	ff 4f       	sbci	r31, 0xFF	; 255
    1e64:	80 81       	ld	r24, Z
    1e66:	91 81       	ldd	r25, Z+1	; 0x01
    1e68:	01 97       	sbiw	r24, 0x01	; 1
    1e6a:	f1 f7       	brne	.-4      	; 0x1e68 <CLCD_voidHamoksha+0xdaa>
    1e6c:	fe 01       	movw	r30, r28
    1e6e:	e3 56       	subi	r30, 0x63	; 99
    1e70:	ff 4f       	sbci	r31, 0xFF	; 255
    1e72:	91 83       	std	Z+1, r25	; 0x01
    1e74:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e76:	de 01       	movw	r26, r28
    1e78:	a1 56       	subi	r26, 0x61	; 97
    1e7a:	bf 4f       	sbci	r27, 0xFF	; 255
    1e7c:	fe 01       	movw	r30, r28
    1e7e:	e1 56       	subi	r30, 0x61	; 97
    1e80:	ff 4f       	sbci	r31, 0xFF	; 255
    1e82:	80 81       	ld	r24, Z
    1e84:	91 81       	ldd	r25, Z+1	; 0x01
    1e86:	01 97       	sbiw	r24, 0x01	; 1
    1e88:	11 96       	adiw	r26, 0x01	; 1
    1e8a:	9c 93       	st	X, r25
    1e8c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e8e:	fe 01       	movw	r30, r28
    1e90:	e1 56       	subi	r30, 0x61	; 97
    1e92:	ff 4f       	sbci	r31, 0xFF	; 255
    1e94:	80 81       	ld	r24, Z
    1e96:	91 81       	ldd	r25, Z+1	; 0x01
    1e98:	00 97       	sbiw	r24, 0x00	; 0
    1e9a:	d1 f6       	brne	.-76     	; 0x1e50 <CLCD_voidHamoksha+0xd92>
    1e9c:	28 c0       	rjmp	.+80     	; 0x1eee <CLCD_voidHamoksha+0xe30>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e9e:	8e 01       	movw	r16, r28
    1ea0:	01 56       	subi	r16, 0x61	; 97
    1ea2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ea4:	fe 01       	movw	r30, r28
    1ea6:	ef 55       	subi	r30, 0x5F	; 95
    1ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eaa:	60 81       	ld	r22, Z
    1eac:	71 81       	ldd	r23, Z+1	; 0x01
    1eae:	82 81       	ldd	r24, Z+2	; 0x02
    1eb0:	93 81       	ldd	r25, Z+3	; 0x03
    1eb2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1eb6:	dc 01       	movw	r26, r24
    1eb8:	cb 01       	movw	r24, r22
    1eba:	f8 01       	movw	r30, r16
    1ebc:	91 83       	std	Z+1, r25	; 0x01
    1ebe:	80 83       	st	Z, r24
    1ec0:	de 01       	movw	r26, r28
    1ec2:	a5 56       	subi	r26, 0x65	; 101
    1ec4:	bf 4f       	sbci	r27, 0xFF	; 255
    1ec6:	fe 01       	movw	r30, r28
    1ec8:	e1 56       	subi	r30, 0x61	; 97
    1eca:	ff 4f       	sbci	r31, 0xFF	; 255
    1ecc:	80 81       	ld	r24, Z
    1ece:	91 81       	ldd	r25, Z+1	; 0x01
    1ed0:	11 96       	adiw	r26, 0x01	; 1
    1ed2:	9c 93       	st	X, r25
    1ed4:	8e 93       	st	-X, r24
    1ed6:	fe 01       	movw	r30, r28
    1ed8:	e5 56       	subi	r30, 0x65	; 101
    1eda:	ff 4f       	sbci	r31, 0xFF	; 255
    1edc:	80 81       	ld	r24, Z
    1ede:	91 81       	ldd	r25, Z+1	; 0x01
    1ee0:	01 97       	sbiw	r24, 0x01	; 1
    1ee2:	f1 f7       	brne	.-4      	; 0x1ee0 <CLCD_voidHamoksha+0xe22>
    1ee4:	fe 01       	movw	r30, r28
    1ee6:	e5 56       	subi	r30, 0x65	; 101
    1ee8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eea:	91 83       	std	Z+1, r25	; 0x01
    1eec:	80 83       	st	Z, r24
	_delay_ms(600);
	 i=0;
    1eee:	fe 01       	movw	r30, r28
    1ef0:	ef 51       	subi	r30, 0x1F	; 31
    1ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef4:	10 82       	st	Z, r1
    1ef6:	3d c2       	rjmp	.+1146   	; 0x2372 <CLCD_voidHamoksha+0x12b4>
	while(i<10)
	{
		CLCD_u8SpecialCharacter(0,Local_u8HamokshaPattern1,7,1);
    1ef8:	9e 01       	movw	r18, r28
    1efa:	26 51       	subi	r18, 0x16	; 22
    1efc:	3f 4f       	sbci	r19, 0xFF	; 255
    1efe:	80 e0       	ldi	r24, 0x00	; 0
    1f00:	b9 01       	movw	r22, r18
    1f02:	47 e0       	ldi	r20, 0x07	; 7
    1f04:	21 e0       	ldi	r18, 0x01	; 1
    1f06:	0e 94 09 08 	call	0x1012	; 0x1012 <CLCD_u8SpecialCharacter>
    1f0a:	fe 01       	movw	r30, r28
    1f0c:	e9 56       	subi	r30, 0x69	; 105
    1f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f10:	80 e0       	ldi	r24, 0x00	; 0
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	a0 e2       	ldi	r26, 0x20	; 32
    1f16:	b2 e4       	ldi	r27, 0x42	; 66
    1f18:	80 83       	st	Z, r24
    1f1a:	91 83       	std	Z+1, r25	; 0x01
    1f1c:	a2 83       	std	Z+2, r26	; 0x02
    1f1e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f20:	8e 01       	movw	r16, r28
    1f22:	0d 56       	subi	r16, 0x6D	; 109
    1f24:	1f 4f       	sbci	r17, 0xFF	; 255
    1f26:	fe 01       	movw	r30, r28
    1f28:	e9 56       	subi	r30, 0x69	; 105
    1f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2c:	60 81       	ld	r22, Z
    1f2e:	71 81       	ldd	r23, Z+1	; 0x01
    1f30:	82 81       	ldd	r24, Z+2	; 0x02
    1f32:	93 81       	ldd	r25, Z+3	; 0x03
    1f34:	20 e0       	ldi	r18, 0x00	; 0
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	4a e7       	ldi	r20, 0x7A	; 122
    1f3a:	55 e4       	ldi	r21, 0x45	; 69
    1f3c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f40:	dc 01       	movw	r26, r24
    1f42:	cb 01       	movw	r24, r22
    1f44:	f8 01       	movw	r30, r16
    1f46:	80 83       	st	Z, r24
    1f48:	91 83       	std	Z+1, r25	; 0x01
    1f4a:	a2 83       	std	Z+2, r26	; 0x02
    1f4c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f4e:	fe 01       	movw	r30, r28
    1f50:	ed 56       	subi	r30, 0x6D	; 109
    1f52:	ff 4f       	sbci	r31, 0xFF	; 255
    1f54:	60 81       	ld	r22, Z
    1f56:	71 81       	ldd	r23, Z+1	; 0x01
    1f58:	82 81       	ldd	r24, Z+2	; 0x02
    1f5a:	93 81       	ldd	r25, Z+3	; 0x03
    1f5c:	20 e0       	ldi	r18, 0x00	; 0
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	40 e8       	ldi	r20, 0x80	; 128
    1f62:	5f e3       	ldi	r21, 0x3F	; 63
    1f64:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f68:	88 23       	and	r24, r24
    1f6a:	44 f4       	brge	.+16     	; 0x1f7c <CLCD_voidHamoksha+0xebe>
		__ticks = 1;
    1f6c:	fe 01       	movw	r30, r28
    1f6e:	ef 56       	subi	r30, 0x6F	; 111
    1f70:	ff 4f       	sbci	r31, 0xFF	; 255
    1f72:	81 e0       	ldi	r24, 0x01	; 1
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	91 83       	std	Z+1, r25	; 0x01
    1f78:	80 83       	st	Z, r24
    1f7a:	64 c0       	rjmp	.+200    	; 0x2044 <CLCD_voidHamoksha+0xf86>
	else if (__tmp > 65535)
    1f7c:	fe 01       	movw	r30, r28
    1f7e:	ed 56       	subi	r30, 0x6D	; 109
    1f80:	ff 4f       	sbci	r31, 0xFF	; 255
    1f82:	60 81       	ld	r22, Z
    1f84:	71 81       	ldd	r23, Z+1	; 0x01
    1f86:	82 81       	ldd	r24, Z+2	; 0x02
    1f88:	93 81       	ldd	r25, Z+3	; 0x03
    1f8a:	20 e0       	ldi	r18, 0x00	; 0
    1f8c:	3f ef       	ldi	r19, 0xFF	; 255
    1f8e:	4f e7       	ldi	r20, 0x7F	; 127
    1f90:	57 e4       	ldi	r21, 0x47	; 71
    1f92:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f96:	18 16       	cp	r1, r24
    1f98:	0c f0       	brlt	.+2      	; 0x1f9c <CLCD_voidHamoksha+0xede>
    1f9a:	43 c0       	rjmp	.+134    	; 0x2022 <CLCD_voidHamoksha+0xf64>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f9c:	fe 01       	movw	r30, r28
    1f9e:	e9 56       	subi	r30, 0x69	; 105
    1fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa2:	60 81       	ld	r22, Z
    1fa4:	71 81       	ldd	r23, Z+1	; 0x01
    1fa6:	82 81       	ldd	r24, Z+2	; 0x02
    1fa8:	93 81       	ldd	r25, Z+3	; 0x03
    1faa:	20 e0       	ldi	r18, 0x00	; 0
    1fac:	30 e0       	ldi	r19, 0x00	; 0
    1fae:	40 e2       	ldi	r20, 0x20	; 32
    1fb0:	51 e4       	ldi	r21, 0x41	; 65
    1fb2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fb6:	dc 01       	movw	r26, r24
    1fb8:	cb 01       	movw	r24, r22
    1fba:	8e 01       	movw	r16, r28
    1fbc:	0f 56       	subi	r16, 0x6F	; 111
    1fbe:	1f 4f       	sbci	r17, 0xFF	; 255
    1fc0:	bc 01       	movw	r22, r24
    1fc2:	cd 01       	movw	r24, r26
    1fc4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fc8:	dc 01       	movw	r26, r24
    1fca:	cb 01       	movw	r24, r22
    1fcc:	f8 01       	movw	r30, r16
    1fce:	91 83       	std	Z+1, r25	; 0x01
    1fd0:	80 83       	st	Z, r24
    1fd2:	1f c0       	rjmp	.+62     	; 0x2012 <CLCD_voidHamoksha+0xf54>
    1fd4:	fe 01       	movw	r30, r28
    1fd6:	e1 57       	subi	r30, 0x71	; 113
    1fd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fda:	80 e9       	ldi	r24, 0x90	; 144
    1fdc:	91 e0       	ldi	r25, 0x01	; 1
    1fde:	91 83       	std	Z+1, r25	; 0x01
    1fe0:	80 83       	st	Z, r24
    1fe2:	fe 01       	movw	r30, r28
    1fe4:	e1 57       	subi	r30, 0x71	; 113
    1fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe8:	80 81       	ld	r24, Z
    1fea:	91 81       	ldd	r25, Z+1	; 0x01
    1fec:	01 97       	sbiw	r24, 0x01	; 1
    1fee:	f1 f7       	brne	.-4      	; 0x1fec <CLCD_voidHamoksha+0xf2e>
    1ff0:	fe 01       	movw	r30, r28
    1ff2:	e1 57       	subi	r30, 0x71	; 113
    1ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff6:	91 83       	std	Z+1, r25	; 0x01
    1ff8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ffa:	de 01       	movw	r26, r28
    1ffc:	af 56       	subi	r26, 0x6F	; 111
    1ffe:	bf 4f       	sbci	r27, 0xFF	; 255
    2000:	fe 01       	movw	r30, r28
    2002:	ef 56       	subi	r30, 0x6F	; 111
    2004:	ff 4f       	sbci	r31, 0xFF	; 255
    2006:	80 81       	ld	r24, Z
    2008:	91 81       	ldd	r25, Z+1	; 0x01
    200a:	01 97       	sbiw	r24, 0x01	; 1
    200c:	11 96       	adiw	r26, 0x01	; 1
    200e:	9c 93       	st	X, r25
    2010:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2012:	fe 01       	movw	r30, r28
    2014:	ef 56       	subi	r30, 0x6F	; 111
    2016:	ff 4f       	sbci	r31, 0xFF	; 255
    2018:	80 81       	ld	r24, Z
    201a:	91 81       	ldd	r25, Z+1	; 0x01
    201c:	00 97       	sbiw	r24, 0x00	; 0
    201e:	d1 f6       	brne	.-76     	; 0x1fd4 <CLCD_voidHamoksha+0xf16>
    2020:	27 c0       	rjmp	.+78     	; 0x2070 <CLCD_voidHamoksha+0xfb2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2022:	8e 01       	movw	r16, r28
    2024:	0f 56       	subi	r16, 0x6F	; 111
    2026:	1f 4f       	sbci	r17, 0xFF	; 255
    2028:	fe 01       	movw	r30, r28
    202a:	ed 56       	subi	r30, 0x6D	; 109
    202c:	ff 4f       	sbci	r31, 0xFF	; 255
    202e:	60 81       	ld	r22, Z
    2030:	71 81       	ldd	r23, Z+1	; 0x01
    2032:	82 81       	ldd	r24, Z+2	; 0x02
    2034:	93 81       	ldd	r25, Z+3	; 0x03
    2036:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    203a:	dc 01       	movw	r26, r24
    203c:	cb 01       	movw	r24, r22
    203e:	f8 01       	movw	r30, r16
    2040:	91 83       	std	Z+1, r25	; 0x01
    2042:	80 83       	st	Z, r24
    2044:	de 01       	movw	r26, r28
    2046:	a3 57       	subi	r26, 0x73	; 115
    2048:	bf 4f       	sbci	r27, 0xFF	; 255
    204a:	fe 01       	movw	r30, r28
    204c:	ef 56       	subi	r30, 0x6F	; 111
    204e:	ff 4f       	sbci	r31, 0xFF	; 255
    2050:	80 81       	ld	r24, Z
    2052:	91 81       	ldd	r25, Z+1	; 0x01
    2054:	8d 93       	st	X+, r24
    2056:	9c 93       	st	X, r25
    2058:	fe 01       	movw	r30, r28
    205a:	e3 57       	subi	r30, 0x73	; 115
    205c:	ff 4f       	sbci	r31, 0xFF	; 255
    205e:	80 81       	ld	r24, Z
    2060:	91 81       	ldd	r25, Z+1	; 0x01
    2062:	01 97       	sbiw	r24, 0x01	; 1
    2064:	f1 f7       	brne	.-4      	; 0x2062 <CLCD_voidHamoksha+0xfa4>
    2066:	fe 01       	movw	r30, r28
    2068:	e3 57       	subi	r30, 0x73	; 115
    206a:	ff 4f       	sbci	r31, 0xFF	; 255
    206c:	91 83       	std	Z+1, r25	; 0x01
    206e:	80 83       	st	Z, r24
		_delay_ms(40);
		CLCD_u8SpecialCharacter(1,Local_u8HamokshaPattern2,7,1);
    2070:	9e 01       	movw	r18, r28
    2072:	2e 50       	subi	r18, 0x0E	; 14
    2074:	3f 4f       	sbci	r19, 0xFF	; 255
    2076:	81 e0       	ldi	r24, 0x01	; 1
    2078:	b9 01       	movw	r22, r18
    207a:	47 e0       	ldi	r20, 0x07	; 7
    207c:	21 e0       	ldi	r18, 0x01	; 1
    207e:	0e 94 09 08 	call	0x1012	; 0x1012 <CLCD_u8SpecialCharacter>
    2082:	fe 01       	movw	r30, r28
    2084:	e7 57       	subi	r30, 0x77	; 119
    2086:	ff 4f       	sbci	r31, 0xFF	; 255
    2088:	80 e0       	ldi	r24, 0x00	; 0
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	a0 e2       	ldi	r26, 0x20	; 32
    208e:	b2 e4       	ldi	r27, 0x42	; 66
    2090:	80 83       	st	Z, r24
    2092:	91 83       	std	Z+1, r25	; 0x01
    2094:	a2 83       	std	Z+2, r26	; 0x02
    2096:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2098:	8e 01       	movw	r16, r28
    209a:	0b 57       	subi	r16, 0x7B	; 123
    209c:	1f 4f       	sbci	r17, 0xFF	; 255
    209e:	fe 01       	movw	r30, r28
    20a0:	e7 57       	subi	r30, 0x77	; 119
    20a2:	ff 4f       	sbci	r31, 0xFF	; 255
    20a4:	60 81       	ld	r22, Z
    20a6:	71 81       	ldd	r23, Z+1	; 0x01
    20a8:	82 81       	ldd	r24, Z+2	; 0x02
    20aa:	93 81       	ldd	r25, Z+3	; 0x03
    20ac:	20 e0       	ldi	r18, 0x00	; 0
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	4a e7       	ldi	r20, 0x7A	; 122
    20b2:	55 e4       	ldi	r21, 0x45	; 69
    20b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20b8:	dc 01       	movw	r26, r24
    20ba:	cb 01       	movw	r24, r22
    20bc:	f8 01       	movw	r30, r16
    20be:	80 83       	st	Z, r24
    20c0:	91 83       	std	Z+1, r25	; 0x01
    20c2:	a2 83       	std	Z+2, r26	; 0x02
    20c4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20c6:	fe 01       	movw	r30, r28
    20c8:	eb 57       	subi	r30, 0x7B	; 123
    20ca:	ff 4f       	sbci	r31, 0xFF	; 255
    20cc:	60 81       	ld	r22, Z
    20ce:	71 81       	ldd	r23, Z+1	; 0x01
    20d0:	82 81       	ldd	r24, Z+2	; 0x02
    20d2:	93 81       	ldd	r25, Z+3	; 0x03
    20d4:	20 e0       	ldi	r18, 0x00	; 0
    20d6:	30 e0       	ldi	r19, 0x00	; 0
    20d8:	40 e8       	ldi	r20, 0x80	; 128
    20da:	5f e3       	ldi	r21, 0x3F	; 63
    20dc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    20e0:	88 23       	and	r24, r24
    20e2:	44 f4       	brge	.+16     	; 0x20f4 <CLCD_voidHamoksha+0x1036>
		__ticks = 1;
    20e4:	fe 01       	movw	r30, r28
    20e6:	ed 57       	subi	r30, 0x7D	; 125
    20e8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ea:	81 e0       	ldi	r24, 0x01	; 1
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	91 83       	std	Z+1, r25	; 0x01
    20f0:	80 83       	st	Z, r24
    20f2:	64 c0       	rjmp	.+200    	; 0x21bc <CLCD_voidHamoksha+0x10fe>
	else if (__tmp > 65535)
    20f4:	fe 01       	movw	r30, r28
    20f6:	eb 57       	subi	r30, 0x7B	; 123
    20f8:	ff 4f       	sbci	r31, 0xFF	; 255
    20fa:	60 81       	ld	r22, Z
    20fc:	71 81       	ldd	r23, Z+1	; 0x01
    20fe:	82 81       	ldd	r24, Z+2	; 0x02
    2100:	93 81       	ldd	r25, Z+3	; 0x03
    2102:	20 e0       	ldi	r18, 0x00	; 0
    2104:	3f ef       	ldi	r19, 0xFF	; 255
    2106:	4f e7       	ldi	r20, 0x7F	; 127
    2108:	57 e4       	ldi	r21, 0x47	; 71
    210a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    210e:	18 16       	cp	r1, r24
    2110:	0c f0       	brlt	.+2      	; 0x2114 <CLCD_voidHamoksha+0x1056>
    2112:	43 c0       	rjmp	.+134    	; 0x219a <CLCD_voidHamoksha+0x10dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2114:	fe 01       	movw	r30, r28
    2116:	e7 57       	subi	r30, 0x77	; 119
    2118:	ff 4f       	sbci	r31, 0xFF	; 255
    211a:	60 81       	ld	r22, Z
    211c:	71 81       	ldd	r23, Z+1	; 0x01
    211e:	82 81       	ldd	r24, Z+2	; 0x02
    2120:	93 81       	ldd	r25, Z+3	; 0x03
    2122:	20 e0       	ldi	r18, 0x00	; 0
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	40 e2       	ldi	r20, 0x20	; 32
    2128:	51 e4       	ldi	r21, 0x41	; 65
    212a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    212e:	dc 01       	movw	r26, r24
    2130:	cb 01       	movw	r24, r22
    2132:	8e 01       	movw	r16, r28
    2134:	0d 57       	subi	r16, 0x7D	; 125
    2136:	1f 4f       	sbci	r17, 0xFF	; 255
    2138:	bc 01       	movw	r22, r24
    213a:	cd 01       	movw	r24, r26
    213c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2140:	dc 01       	movw	r26, r24
    2142:	cb 01       	movw	r24, r22
    2144:	f8 01       	movw	r30, r16
    2146:	91 83       	std	Z+1, r25	; 0x01
    2148:	80 83       	st	Z, r24
    214a:	1f c0       	rjmp	.+62     	; 0x218a <CLCD_voidHamoksha+0x10cc>
    214c:	fe 01       	movw	r30, r28
    214e:	ef 57       	subi	r30, 0x7F	; 127
    2150:	ff 4f       	sbci	r31, 0xFF	; 255
    2152:	80 e9       	ldi	r24, 0x90	; 144
    2154:	91 e0       	ldi	r25, 0x01	; 1
    2156:	91 83       	std	Z+1, r25	; 0x01
    2158:	80 83       	st	Z, r24
    215a:	fe 01       	movw	r30, r28
    215c:	ef 57       	subi	r30, 0x7F	; 127
    215e:	ff 4f       	sbci	r31, 0xFF	; 255
    2160:	80 81       	ld	r24, Z
    2162:	91 81       	ldd	r25, Z+1	; 0x01
    2164:	01 97       	sbiw	r24, 0x01	; 1
    2166:	f1 f7       	brne	.-4      	; 0x2164 <CLCD_voidHamoksha+0x10a6>
    2168:	fe 01       	movw	r30, r28
    216a:	ef 57       	subi	r30, 0x7F	; 127
    216c:	ff 4f       	sbci	r31, 0xFF	; 255
    216e:	91 83       	std	Z+1, r25	; 0x01
    2170:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2172:	de 01       	movw	r26, r28
    2174:	ad 57       	subi	r26, 0x7D	; 125
    2176:	bf 4f       	sbci	r27, 0xFF	; 255
    2178:	fe 01       	movw	r30, r28
    217a:	ed 57       	subi	r30, 0x7D	; 125
    217c:	ff 4f       	sbci	r31, 0xFF	; 255
    217e:	80 81       	ld	r24, Z
    2180:	91 81       	ldd	r25, Z+1	; 0x01
    2182:	01 97       	sbiw	r24, 0x01	; 1
    2184:	11 96       	adiw	r26, 0x01	; 1
    2186:	9c 93       	st	X, r25
    2188:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    218a:	fe 01       	movw	r30, r28
    218c:	ed 57       	subi	r30, 0x7D	; 125
    218e:	ff 4f       	sbci	r31, 0xFF	; 255
    2190:	80 81       	ld	r24, Z
    2192:	91 81       	ldd	r25, Z+1	; 0x01
    2194:	00 97       	sbiw	r24, 0x00	; 0
    2196:	d1 f6       	brne	.-76     	; 0x214c <CLCD_voidHamoksha+0x108e>
    2198:	27 c0       	rjmp	.+78     	; 0x21e8 <CLCD_voidHamoksha+0x112a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    219a:	8e 01       	movw	r16, r28
    219c:	0d 57       	subi	r16, 0x7D	; 125
    219e:	1f 4f       	sbci	r17, 0xFF	; 255
    21a0:	fe 01       	movw	r30, r28
    21a2:	eb 57       	subi	r30, 0x7B	; 123
    21a4:	ff 4f       	sbci	r31, 0xFF	; 255
    21a6:	60 81       	ld	r22, Z
    21a8:	71 81       	ldd	r23, Z+1	; 0x01
    21aa:	82 81       	ldd	r24, Z+2	; 0x02
    21ac:	93 81       	ldd	r25, Z+3	; 0x03
    21ae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21b2:	dc 01       	movw	r26, r24
    21b4:	cb 01       	movw	r24, r22
    21b6:	f8 01       	movw	r30, r16
    21b8:	91 83       	std	Z+1, r25	; 0x01
    21ba:	80 83       	st	Z, r24
    21bc:	de 01       	movw	r26, r28
    21be:	a1 58       	subi	r26, 0x81	; 129
    21c0:	bf 4f       	sbci	r27, 0xFF	; 255
    21c2:	fe 01       	movw	r30, r28
    21c4:	ed 57       	subi	r30, 0x7D	; 125
    21c6:	ff 4f       	sbci	r31, 0xFF	; 255
    21c8:	80 81       	ld	r24, Z
    21ca:	91 81       	ldd	r25, Z+1	; 0x01
    21cc:	8d 93       	st	X+, r24
    21ce:	9c 93       	st	X, r25
    21d0:	fe 01       	movw	r30, r28
    21d2:	e1 58       	subi	r30, 0x81	; 129
    21d4:	ff 4f       	sbci	r31, 0xFF	; 255
    21d6:	80 81       	ld	r24, Z
    21d8:	91 81       	ldd	r25, Z+1	; 0x01
    21da:	01 97       	sbiw	r24, 0x01	; 1
    21dc:	f1 f7       	brne	.-4      	; 0x21da <CLCD_voidHamoksha+0x111c>
    21de:	fe 01       	movw	r30, r28
    21e0:	e1 58       	subi	r30, 0x81	; 129
    21e2:	ff 4f       	sbci	r31, 0xFF	; 255
    21e4:	91 83       	std	Z+1, r25	; 0x01
    21e6:	80 83       	st	Z, r24
		_delay_ms(40);
		CLCD_u8SpecialCharacter(2,Local_u8HamokshaPattern3,7,1);
    21e8:	9e 01       	movw	r18, r28
    21ea:	26 50       	subi	r18, 0x06	; 6
    21ec:	3f 4f       	sbci	r19, 0xFF	; 255
    21ee:	82 e0       	ldi	r24, 0x02	; 2
    21f0:	b9 01       	movw	r22, r18
    21f2:	47 e0       	ldi	r20, 0x07	; 7
    21f4:	21 e0       	ldi	r18, 0x01	; 1
    21f6:	0e 94 09 08 	call	0x1012	; 0x1012 <CLCD_u8SpecialCharacter>
    21fa:	fe 01       	movw	r30, r28
    21fc:	e5 58       	subi	r30, 0x85	; 133
    21fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2200:	80 e0       	ldi	r24, 0x00	; 0
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	a0 e2       	ldi	r26, 0x20	; 32
    2206:	b2 e4       	ldi	r27, 0x42	; 66
    2208:	80 83       	st	Z, r24
    220a:	91 83       	std	Z+1, r25	; 0x01
    220c:	a2 83       	std	Z+2, r26	; 0x02
    220e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2210:	8e 01       	movw	r16, r28
    2212:	09 58       	subi	r16, 0x89	; 137
    2214:	1f 4f       	sbci	r17, 0xFF	; 255
    2216:	fe 01       	movw	r30, r28
    2218:	e5 58       	subi	r30, 0x85	; 133
    221a:	ff 4f       	sbci	r31, 0xFF	; 255
    221c:	60 81       	ld	r22, Z
    221e:	71 81       	ldd	r23, Z+1	; 0x01
    2220:	82 81       	ldd	r24, Z+2	; 0x02
    2222:	93 81       	ldd	r25, Z+3	; 0x03
    2224:	20 e0       	ldi	r18, 0x00	; 0
    2226:	30 e0       	ldi	r19, 0x00	; 0
    2228:	4a e7       	ldi	r20, 0x7A	; 122
    222a:	55 e4       	ldi	r21, 0x45	; 69
    222c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2230:	dc 01       	movw	r26, r24
    2232:	cb 01       	movw	r24, r22
    2234:	f8 01       	movw	r30, r16
    2236:	80 83       	st	Z, r24
    2238:	91 83       	std	Z+1, r25	; 0x01
    223a:	a2 83       	std	Z+2, r26	; 0x02
    223c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    223e:	fe 01       	movw	r30, r28
    2240:	e9 58       	subi	r30, 0x89	; 137
    2242:	ff 4f       	sbci	r31, 0xFF	; 255
    2244:	60 81       	ld	r22, Z
    2246:	71 81       	ldd	r23, Z+1	; 0x01
    2248:	82 81       	ldd	r24, Z+2	; 0x02
    224a:	93 81       	ldd	r25, Z+3	; 0x03
    224c:	20 e0       	ldi	r18, 0x00	; 0
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	40 e8       	ldi	r20, 0x80	; 128
    2252:	5f e3       	ldi	r21, 0x3F	; 63
    2254:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2258:	88 23       	and	r24, r24
    225a:	44 f4       	brge	.+16     	; 0x226c <CLCD_voidHamoksha+0x11ae>
		__ticks = 1;
    225c:	fe 01       	movw	r30, r28
    225e:	eb 58       	subi	r30, 0x8B	; 139
    2260:	ff 4f       	sbci	r31, 0xFF	; 255
    2262:	81 e0       	ldi	r24, 0x01	; 1
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	91 83       	std	Z+1, r25	; 0x01
    2268:	80 83       	st	Z, r24
    226a:	64 c0       	rjmp	.+200    	; 0x2334 <CLCD_voidHamoksha+0x1276>
	else if (__tmp > 65535)
    226c:	fe 01       	movw	r30, r28
    226e:	e9 58       	subi	r30, 0x89	; 137
    2270:	ff 4f       	sbci	r31, 0xFF	; 255
    2272:	60 81       	ld	r22, Z
    2274:	71 81       	ldd	r23, Z+1	; 0x01
    2276:	82 81       	ldd	r24, Z+2	; 0x02
    2278:	93 81       	ldd	r25, Z+3	; 0x03
    227a:	20 e0       	ldi	r18, 0x00	; 0
    227c:	3f ef       	ldi	r19, 0xFF	; 255
    227e:	4f e7       	ldi	r20, 0x7F	; 127
    2280:	57 e4       	ldi	r21, 0x47	; 71
    2282:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2286:	18 16       	cp	r1, r24
    2288:	0c f0       	brlt	.+2      	; 0x228c <CLCD_voidHamoksha+0x11ce>
    228a:	43 c0       	rjmp	.+134    	; 0x2312 <CLCD_voidHamoksha+0x1254>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    228c:	fe 01       	movw	r30, r28
    228e:	e5 58       	subi	r30, 0x85	; 133
    2290:	ff 4f       	sbci	r31, 0xFF	; 255
    2292:	60 81       	ld	r22, Z
    2294:	71 81       	ldd	r23, Z+1	; 0x01
    2296:	82 81       	ldd	r24, Z+2	; 0x02
    2298:	93 81       	ldd	r25, Z+3	; 0x03
    229a:	20 e0       	ldi	r18, 0x00	; 0
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	40 e2       	ldi	r20, 0x20	; 32
    22a0:	51 e4       	ldi	r21, 0x41	; 65
    22a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22a6:	dc 01       	movw	r26, r24
    22a8:	cb 01       	movw	r24, r22
    22aa:	8e 01       	movw	r16, r28
    22ac:	0b 58       	subi	r16, 0x8B	; 139
    22ae:	1f 4f       	sbci	r17, 0xFF	; 255
    22b0:	bc 01       	movw	r22, r24
    22b2:	cd 01       	movw	r24, r26
    22b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22b8:	dc 01       	movw	r26, r24
    22ba:	cb 01       	movw	r24, r22
    22bc:	f8 01       	movw	r30, r16
    22be:	91 83       	std	Z+1, r25	; 0x01
    22c0:	80 83       	st	Z, r24
    22c2:	1f c0       	rjmp	.+62     	; 0x2302 <CLCD_voidHamoksha+0x1244>
    22c4:	fe 01       	movw	r30, r28
    22c6:	ed 58       	subi	r30, 0x8D	; 141
    22c8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ca:	80 e9       	ldi	r24, 0x90	; 144
    22cc:	91 e0       	ldi	r25, 0x01	; 1
    22ce:	91 83       	std	Z+1, r25	; 0x01
    22d0:	80 83       	st	Z, r24
    22d2:	fe 01       	movw	r30, r28
    22d4:	ed 58       	subi	r30, 0x8D	; 141
    22d6:	ff 4f       	sbci	r31, 0xFF	; 255
    22d8:	80 81       	ld	r24, Z
    22da:	91 81       	ldd	r25, Z+1	; 0x01
    22dc:	01 97       	sbiw	r24, 0x01	; 1
    22de:	f1 f7       	brne	.-4      	; 0x22dc <CLCD_voidHamoksha+0x121e>
    22e0:	fe 01       	movw	r30, r28
    22e2:	ed 58       	subi	r30, 0x8D	; 141
    22e4:	ff 4f       	sbci	r31, 0xFF	; 255
    22e6:	91 83       	std	Z+1, r25	; 0x01
    22e8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ea:	de 01       	movw	r26, r28
    22ec:	ab 58       	subi	r26, 0x8B	; 139
    22ee:	bf 4f       	sbci	r27, 0xFF	; 255
    22f0:	fe 01       	movw	r30, r28
    22f2:	eb 58       	subi	r30, 0x8B	; 139
    22f4:	ff 4f       	sbci	r31, 0xFF	; 255
    22f6:	80 81       	ld	r24, Z
    22f8:	91 81       	ldd	r25, Z+1	; 0x01
    22fa:	01 97       	sbiw	r24, 0x01	; 1
    22fc:	11 96       	adiw	r26, 0x01	; 1
    22fe:	9c 93       	st	X, r25
    2300:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2302:	fe 01       	movw	r30, r28
    2304:	eb 58       	subi	r30, 0x8B	; 139
    2306:	ff 4f       	sbci	r31, 0xFF	; 255
    2308:	80 81       	ld	r24, Z
    230a:	91 81       	ldd	r25, Z+1	; 0x01
    230c:	00 97       	sbiw	r24, 0x00	; 0
    230e:	d1 f6       	brne	.-76     	; 0x22c4 <CLCD_voidHamoksha+0x1206>
    2310:	27 c0       	rjmp	.+78     	; 0x2360 <CLCD_voidHamoksha+0x12a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2312:	8e 01       	movw	r16, r28
    2314:	0b 58       	subi	r16, 0x8B	; 139
    2316:	1f 4f       	sbci	r17, 0xFF	; 255
    2318:	fe 01       	movw	r30, r28
    231a:	e9 58       	subi	r30, 0x89	; 137
    231c:	ff 4f       	sbci	r31, 0xFF	; 255
    231e:	60 81       	ld	r22, Z
    2320:	71 81       	ldd	r23, Z+1	; 0x01
    2322:	82 81       	ldd	r24, Z+2	; 0x02
    2324:	93 81       	ldd	r25, Z+3	; 0x03
    2326:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    232a:	dc 01       	movw	r26, r24
    232c:	cb 01       	movw	r24, r22
    232e:	f8 01       	movw	r30, r16
    2330:	91 83       	std	Z+1, r25	; 0x01
    2332:	80 83       	st	Z, r24
    2334:	de 01       	movw	r26, r28
    2336:	af 58       	subi	r26, 0x8F	; 143
    2338:	bf 4f       	sbci	r27, 0xFF	; 255
    233a:	fe 01       	movw	r30, r28
    233c:	eb 58       	subi	r30, 0x8B	; 139
    233e:	ff 4f       	sbci	r31, 0xFF	; 255
    2340:	80 81       	ld	r24, Z
    2342:	91 81       	ldd	r25, Z+1	; 0x01
    2344:	8d 93       	st	X+, r24
    2346:	9c 93       	st	X, r25
    2348:	fe 01       	movw	r30, r28
    234a:	ef 58       	subi	r30, 0x8F	; 143
    234c:	ff 4f       	sbci	r31, 0xFF	; 255
    234e:	80 81       	ld	r24, Z
    2350:	91 81       	ldd	r25, Z+1	; 0x01
    2352:	01 97       	sbiw	r24, 0x01	; 1
    2354:	f1 f7       	brne	.-4      	; 0x2352 <CLCD_voidHamoksha+0x1294>
    2356:	fe 01       	movw	r30, r28
    2358:	ef 58       	subi	r30, 0x8F	; 143
    235a:	ff 4f       	sbci	r31, 0xFF	; 255
    235c:	91 83       	std	Z+1, r25	; 0x01
    235e:	80 83       	st	Z, r24
		_delay_ms(40);
        i++;
    2360:	de 01       	movw	r26, r28
    2362:	af 51       	subi	r26, 0x1F	; 31
    2364:	bf 4f       	sbci	r27, 0xFF	; 255
    2366:	fe 01       	movw	r30, r28
    2368:	ef 51       	subi	r30, 0x1F	; 31
    236a:	ff 4f       	sbci	r31, 0xFF	; 255
    236c:	80 81       	ld	r24, Z
    236e:	8f 5f       	subi	r24, 0xFF	; 255
    2370:	8c 93       	st	X, r24
CLCD_voidClear();
CLCD_VoidGoToXY(0,0);
	CLCD_u8SendString("I CAN DANCE");
	_delay_ms(600);
	 i=0;
	while(i<10)
    2372:	fe 01       	movw	r30, r28
    2374:	ef 51       	subi	r30, 0x1F	; 31
    2376:	ff 4f       	sbci	r31, 0xFF	; 255
    2378:	80 81       	ld	r24, Z
    237a:	8a 30       	cpi	r24, 0x0A	; 10
    237c:	08 f4       	brcc	.+2      	; 0x2380 <CLCD_voidHamoksha+0x12c2>
    237e:	bc cd       	rjmp	.-1160   	; 0x1ef8 <CLCD_voidHamoksha+0xe3a>
		CLCD_u8SpecialCharacter(2,Local_u8HamokshaPattern3,7,1);
		_delay_ms(40);
        i++;

	}
	CLCD_voidClear();
    2380:	0e 94 55 08 	call	0x10aa	; 0x10aa <CLCD_voidClear>
	CLCD_VoidGoToXY(0,0);
    2384:	80 e0       	ldi	r24, 0x00	; 0
    2386:	60 e0       	ldi	r22, 0x00	; 0
    2388:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <CLCD_VoidGoToXY>
	CLCD_u8SendString(" I play Football");
    238c:	87 e8       	ldi	r24, 0x87	; 135
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	0e 94 2a 07 	call	0xe54	; 0xe54 <CLCD_u8SendString>
    2394:	fe 01       	movw	r30, r28
    2396:	e3 59       	subi	r30, 0x93	; 147
    2398:	ff 4f       	sbci	r31, 0xFF	; 255
    239a:	80 e0       	ldi	r24, 0x00	; 0
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	a6 e1       	ldi	r26, 0x16	; 22
    23a0:	b4 e4       	ldi	r27, 0x44	; 68
    23a2:	80 83       	st	Z, r24
    23a4:	91 83       	std	Z+1, r25	; 0x01
    23a6:	a2 83       	std	Z+2, r26	; 0x02
    23a8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23aa:	8e 01       	movw	r16, r28
    23ac:	07 59       	subi	r16, 0x97	; 151
    23ae:	1f 4f       	sbci	r17, 0xFF	; 255
    23b0:	fe 01       	movw	r30, r28
    23b2:	e3 59       	subi	r30, 0x93	; 147
    23b4:	ff 4f       	sbci	r31, 0xFF	; 255
    23b6:	60 81       	ld	r22, Z
    23b8:	71 81       	ldd	r23, Z+1	; 0x01
    23ba:	82 81       	ldd	r24, Z+2	; 0x02
    23bc:	93 81       	ldd	r25, Z+3	; 0x03
    23be:	20 e0       	ldi	r18, 0x00	; 0
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	4a e7       	ldi	r20, 0x7A	; 122
    23c4:	55 e4       	ldi	r21, 0x45	; 69
    23c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23ca:	dc 01       	movw	r26, r24
    23cc:	cb 01       	movw	r24, r22
    23ce:	f8 01       	movw	r30, r16
    23d0:	80 83       	st	Z, r24
    23d2:	91 83       	std	Z+1, r25	; 0x01
    23d4:	a2 83       	std	Z+2, r26	; 0x02
    23d6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23d8:	fe 01       	movw	r30, r28
    23da:	e7 59       	subi	r30, 0x97	; 151
    23dc:	ff 4f       	sbci	r31, 0xFF	; 255
    23de:	60 81       	ld	r22, Z
    23e0:	71 81       	ldd	r23, Z+1	; 0x01
    23e2:	82 81       	ldd	r24, Z+2	; 0x02
    23e4:	93 81       	ldd	r25, Z+3	; 0x03
    23e6:	20 e0       	ldi	r18, 0x00	; 0
    23e8:	30 e0       	ldi	r19, 0x00	; 0
    23ea:	40 e8       	ldi	r20, 0x80	; 128
    23ec:	5f e3       	ldi	r21, 0x3F	; 63
    23ee:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    23f2:	88 23       	and	r24, r24
    23f4:	44 f4       	brge	.+16     	; 0x2406 <CLCD_voidHamoksha+0x1348>
		__ticks = 1;
    23f6:	fe 01       	movw	r30, r28
    23f8:	e9 59       	subi	r30, 0x99	; 153
    23fa:	ff 4f       	sbci	r31, 0xFF	; 255
    23fc:	81 e0       	ldi	r24, 0x01	; 1
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	91 83       	std	Z+1, r25	; 0x01
    2402:	80 83       	st	Z, r24
    2404:	64 c0       	rjmp	.+200    	; 0x24ce <CLCD_voidHamoksha+0x1410>
	else if (__tmp > 65535)
    2406:	fe 01       	movw	r30, r28
    2408:	e7 59       	subi	r30, 0x97	; 151
    240a:	ff 4f       	sbci	r31, 0xFF	; 255
    240c:	60 81       	ld	r22, Z
    240e:	71 81       	ldd	r23, Z+1	; 0x01
    2410:	82 81       	ldd	r24, Z+2	; 0x02
    2412:	93 81       	ldd	r25, Z+3	; 0x03
    2414:	20 e0       	ldi	r18, 0x00	; 0
    2416:	3f ef       	ldi	r19, 0xFF	; 255
    2418:	4f e7       	ldi	r20, 0x7F	; 127
    241a:	57 e4       	ldi	r21, 0x47	; 71
    241c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2420:	18 16       	cp	r1, r24
    2422:	0c f0       	brlt	.+2      	; 0x2426 <CLCD_voidHamoksha+0x1368>
    2424:	43 c0       	rjmp	.+134    	; 0x24ac <CLCD_voidHamoksha+0x13ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2426:	fe 01       	movw	r30, r28
    2428:	e3 59       	subi	r30, 0x93	; 147
    242a:	ff 4f       	sbci	r31, 0xFF	; 255
    242c:	60 81       	ld	r22, Z
    242e:	71 81       	ldd	r23, Z+1	; 0x01
    2430:	82 81       	ldd	r24, Z+2	; 0x02
    2432:	93 81       	ldd	r25, Z+3	; 0x03
    2434:	20 e0       	ldi	r18, 0x00	; 0
    2436:	30 e0       	ldi	r19, 0x00	; 0
    2438:	40 e2       	ldi	r20, 0x20	; 32
    243a:	51 e4       	ldi	r21, 0x41	; 65
    243c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2440:	dc 01       	movw	r26, r24
    2442:	cb 01       	movw	r24, r22
    2444:	8e 01       	movw	r16, r28
    2446:	09 59       	subi	r16, 0x99	; 153
    2448:	1f 4f       	sbci	r17, 0xFF	; 255
    244a:	bc 01       	movw	r22, r24
    244c:	cd 01       	movw	r24, r26
    244e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2452:	dc 01       	movw	r26, r24
    2454:	cb 01       	movw	r24, r22
    2456:	f8 01       	movw	r30, r16
    2458:	91 83       	std	Z+1, r25	; 0x01
    245a:	80 83       	st	Z, r24
    245c:	1f c0       	rjmp	.+62     	; 0x249c <CLCD_voidHamoksha+0x13de>
    245e:	fe 01       	movw	r30, r28
    2460:	eb 59       	subi	r30, 0x9B	; 155
    2462:	ff 4f       	sbci	r31, 0xFF	; 255
    2464:	80 e9       	ldi	r24, 0x90	; 144
    2466:	91 e0       	ldi	r25, 0x01	; 1
    2468:	91 83       	std	Z+1, r25	; 0x01
    246a:	80 83       	st	Z, r24
    246c:	fe 01       	movw	r30, r28
    246e:	eb 59       	subi	r30, 0x9B	; 155
    2470:	ff 4f       	sbci	r31, 0xFF	; 255
    2472:	80 81       	ld	r24, Z
    2474:	91 81       	ldd	r25, Z+1	; 0x01
    2476:	01 97       	sbiw	r24, 0x01	; 1
    2478:	f1 f7       	brne	.-4      	; 0x2476 <CLCD_voidHamoksha+0x13b8>
    247a:	fe 01       	movw	r30, r28
    247c:	eb 59       	subi	r30, 0x9B	; 155
    247e:	ff 4f       	sbci	r31, 0xFF	; 255
    2480:	91 83       	std	Z+1, r25	; 0x01
    2482:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2484:	de 01       	movw	r26, r28
    2486:	a9 59       	subi	r26, 0x99	; 153
    2488:	bf 4f       	sbci	r27, 0xFF	; 255
    248a:	fe 01       	movw	r30, r28
    248c:	e9 59       	subi	r30, 0x99	; 153
    248e:	ff 4f       	sbci	r31, 0xFF	; 255
    2490:	80 81       	ld	r24, Z
    2492:	91 81       	ldd	r25, Z+1	; 0x01
    2494:	01 97       	sbiw	r24, 0x01	; 1
    2496:	11 96       	adiw	r26, 0x01	; 1
    2498:	9c 93       	st	X, r25
    249a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    249c:	fe 01       	movw	r30, r28
    249e:	e9 59       	subi	r30, 0x99	; 153
    24a0:	ff 4f       	sbci	r31, 0xFF	; 255
    24a2:	80 81       	ld	r24, Z
    24a4:	91 81       	ldd	r25, Z+1	; 0x01
    24a6:	00 97       	sbiw	r24, 0x00	; 0
    24a8:	d1 f6       	brne	.-76     	; 0x245e <CLCD_voidHamoksha+0x13a0>
    24aa:	28 c0       	rjmp	.+80     	; 0x24fc <CLCD_voidHamoksha+0x143e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ac:	8e 01       	movw	r16, r28
    24ae:	09 59       	subi	r16, 0x99	; 153
    24b0:	1f 4f       	sbci	r17, 0xFF	; 255
    24b2:	fe 01       	movw	r30, r28
    24b4:	e7 59       	subi	r30, 0x97	; 151
    24b6:	ff 4f       	sbci	r31, 0xFF	; 255
    24b8:	60 81       	ld	r22, Z
    24ba:	71 81       	ldd	r23, Z+1	; 0x01
    24bc:	82 81       	ldd	r24, Z+2	; 0x02
    24be:	93 81       	ldd	r25, Z+3	; 0x03
    24c0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24c4:	dc 01       	movw	r26, r24
    24c6:	cb 01       	movw	r24, r22
    24c8:	f8 01       	movw	r30, r16
    24ca:	91 83       	std	Z+1, r25	; 0x01
    24cc:	80 83       	st	Z, r24
    24ce:	de 01       	movw	r26, r28
    24d0:	ad 59       	subi	r26, 0x9D	; 157
    24d2:	bf 4f       	sbci	r27, 0xFF	; 255
    24d4:	fe 01       	movw	r30, r28
    24d6:	e9 59       	subi	r30, 0x99	; 153
    24d8:	ff 4f       	sbci	r31, 0xFF	; 255
    24da:	80 81       	ld	r24, Z
    24dc:	91 81       	ldd	r25, Z+1	; 0x01
    24de:	11 96       	adiw	r26, 0x01	; 1
    24e0:	9c 93       	st	X, r25
    24e2:	8e 93       	st	-X, r24
    24e4:	fe 01       	movw	r30, r28
    24e6:	ed 59       	subi	r30, 0x9D	; 157
    24e8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ea:	80 81       	ld	r24, Z
    24ec:	91 81       	ldd	r25, Z+1	; 0x01
    24ee:	01 97       	sbiw	r24, 0x01	; 1
    24f0:	f1 f7       	brne	.-4      	; 0x24ee <CLCD_voidHamoksha+0x1430>
    24f2:	fe 01       	movw	r30, r28
    24f4:	ed 59       	subi	r30, 0x9D	; 157
    24f6:	ff 4f       	sbci	r31, 0xFF	; 255
    24f8:	91 83       	std	Z+1, r25	; 0x01
    24fa:	80 83       	st	Z, r24
	_delay_ms(600);
	i=0;
    24fc:	fe 01       	movw	r30, r28
    24fe:	ef 51       	subi	r30, 0x1F	; 31
    2500:	ff 4f       	sbci	r31, 0xFF	; 255
    2502:	10 82       	st	Z, r1
    2504:	93 c1       	rjmp	.+806    	; 0x282c <CLCD_voidHamoksha+0x176e>
	{
		while(i<16)
			{   CLCD_voidClear();
    2506:	0e 94 55 08 	call	0x10aa	; 0x10aa <CLCD_voidClear>
				CLCD_u8SpecialCharacter(0,Local_u8HamokshaPattern4,i++,1);
    250a:	fe 01       	movw	r30, r28
    250c:	ef 51       	subi	r30, 0x1F	; 31
    250e:	ff 4f       	sbci	r31, 0xFF	; 255
    2510:	90 81       	ld	r25, Z
    2512:	de 01       	movw	r26, r28
    2514:	af 51       	subi	r26, 0x1F	; 31
    2516:	bf 4f       	sbci	r27, 0xFF	; 255
    2518:	fe 01       	movw	r30, r28
    251a:	ef 51       	subi	r30, 0x1F	; 31
    251c:	ff 4f       	sbci	r31, 0xFF	; 255
    251e:	80 81       	ld	r24, Z
    2520:	8f 5f       	subi	r24, 0xFF	; 255
    2522:	8c 93       	st	X, r24
    2524:	9e 01       	movw	r18, r28
    2526:	2e 5f       	subi	r18, 0xFE	; 254
    2528:	3e 4f       	sbci	r19, 0xFE	; 254
    252a:	80 e0       	ldi	r24, 0x00	; 0
    252c:	b9 01       	movw	r22, r18
    252e:	49 2f       	mov	r20, r25
    2530:	21 e0       	ldi	r18, 0x01	; 1
    2532:	0e 94 09 08 	call	0x1012	; 0x1012 <CLCD_u8SpecialCharacter>
    2536:	fe 01       	movw	r30, r28
    2538:	e1 5a       	subi	r30, 0xA1	; 161
    253a:	ff 4f       	sbci	r31, 0xFF	; 255
    253c:	80 e0       	ldi	r24, 0x00	; 0
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	a0 e2       	ldi	r26, 0x20	; 32
    2542:	b2 e4       	ldi	r27, 0x42	; 66
    2544:	80 83       	st	Z, r24
    2546:	91 83       	std	Z+1, r25	; 0x01
    2548:	a2 83       	std	Z+2, r26	; 0x02
    254a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    254c:	8e 01       	movw	r16, r28
    254e:	05 5a       	subi	r16, 0xA5	; 165
    2550:	1f 4f       	sbci	r17, 0xFF	; 255
    2552:	fe 01       	movw	r30, r28
    2554:	e1 5a       	subi	r30, 0xA1	; 161
    2556:	ff 4f       	sbci	r31, 0xFF	; 255
    2558:	60 81       	ld	r22, Z
    255a:	71 81       	ldd	r23, Z+1	; 0x01
    255c:	82 81       	ldd	r24, Z+2	; 0x02
    255e:	93 81       	ldd	r25, Z+3	; 0x03
    2560:	20 e0       	ldi	r18, 0x00	; 0
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	4a e7       	ldi	r20, 0x7A	; 122
    2566:	55 e4       	ldi	r21, 0x45	; 69
    2568:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    256c:	dc 01       	movw	r26, r24
    256e:	cb 01       	movw	r24, r22
    2570:	f8 01       	movw	r30, r16
    2572:	80 83       	st	Z, r24
    2574:	91 83       	std	Z+1, r25	; 0x01
    2576:	a2 83       	std	Z+2, r26	; 0x02
    2578:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    257a:	fe 01       	movw	r30, r28
    257c:	e5 5a       	subi	r30, 0xA5	; 165
    257e:	ff 4f       	sbci	r31, 0xFF	; 255
    2580:	60 81       	ld	r22, Z
    2582:	71 81       	ldd	r23, Z+1	; 0x01
    2584:	82 81       	ldd	r24, Z+2	; 0x02
    2586:	93 81       	ldd	r25, Z+3	; 0x03
    2588:	20 e0       	ldi	r18, 0x00	; 0
    258a:	30 e0       	ldi	r19, 0x00	; 0
    258c:	40 e8       	ldi	r20, 0x80	; 128
    258e:	5f e3       	ldi	r21, 0x3F	; 63
    2590:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2594:	88 23       	and	r24, r24
    2596:	44 f4       	brge	.+16     	; 0x25a8 <CLCD_voidHamoksha+0x14ea>
		__ticks = 1;
    2598:	fe 01       	movw	r30, r28
    259a:	e7 5a       	subi	r30, 0xA7	; 167
    259c:	ff 4f       	sbci	r31, 0xFF	; 255
    259e:	81 e0       	ldi	r24, 0x01	; 1
    25a0:	90 e0       	ldi	r25, 0x00	; 0
    25a2:	91 83       	std	Z+1, r25	; 0x01
    25a4:	80 83       	st	Z, r24
    25a6:	64 c0       	rjmp	.+200    	; 0x2670 <CLCD_voidHamoksha+0x15b2>
	else if (__tmp > 65535)
    25a8:	fe 01       	movw	r30, r28
    25aa:	e5 5a       	subi	r30, 0xA5	; 165
    25ac:	ff 4f       	sbci	r31, 0xFF	; 255
    25ae:	60 81       	ld	r22, Z
    25b0:	71 81       	ldd	r23, Z+1	; 0x01
    25b2:	82 81       	ldd	r24, Z+2	; 0x02
    25b4:	93 81       	ldd	r25, Z+3	; 0x03
    25b6:	20 e0       	ldi	r18, 0x00	; 0
    25b8:	3f ef       	ldi	r19, 0xFF	; 255
    25ba:	4f e7       	ldi	r20, 0x7F	; 127
    25bc:	57 e4       	ldi	r21, 0x47	; 71
    25be:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    25c2:	18 16       	cp	r1, r24
    25c4:	0c f0       	brlt	.+2      	; 0x25c8 <CLCD_voidHamoksha+0x150a>
    25c6:	43 c0       	rjmp	.+134    	; 0x264e <CLCD_voidHamoksha+0x1590>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25c8:	fe 01       	movw	r30, r28
    25ca:	e1 5a       	subi	r30, 0xA1	; 161
    25cc:	ff 4f       	sbci	r31, 0xFF	; 255
    25ce:	60 81       	ld	r22, Z
    25d0:	71 81       	ldd	r23, Z+1	; 0x01
    25d2:	82 81       	ldd	r24, Z+2	; 0x02
    25d4:	93 81       	ldd	r25, Z+3	; 0x03
    25d6:	20 e0       	ldi	r18, 0x00	; 0
    25d8:	30 e0       	ldi	r19, 0x00	; 0
    25da:	40 e2       	ldi	r20, 0x20	; 32
    25dc:	51 e4       	ldi	r21, 0x41	; 65
    25de:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25e2:	dc 01       	movw	r26, r24
    25e4:	cb 01       	movw	r24, r22
    25e6:	8e 01       	movw	r16, r28
    25e8:	07 5a       	subi	r16, 0xA7	; 167
    25ea:	1f 4f       	sbci	r17, 0xFF	; 255
    25ec:	bc 01       	movw	r22, r24
    25ee:	cd 01       	movw	r24, r26
    25f0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25f4:	dc 01       	movw	r26, r24
    25f6:	cb 01       	movw	r24, r22
    25f8:	f8 01       	movw	r30, r16
    25fa:	91 83       	std	Z+1, r25	; 0x01
    25fc:	80 83       	st	Z, r24
    25fe:	1f c0       	rjmp	.+62     	; 0x263e <CLCD_voidHamoksha+0x1580>
    2600:	fe 01       	movw	r30, r28
    2602:	e9 5a       	subi	r30, 0xA9	; 169
    2604:	ff 4f       	sbci	r31, 0xFF	; 255
    2606:	80 e9       	ldi	r24, 0x90	; 144
    2608:	91 e0       	ldi	r25, 0x01	; 1
    260a:	91 83       	std	Z+1, r25	; 0x01
    260c:	80 83       	st	Z, r24
    260e:	fe 01       	movw	r30, r28
    2610:	e9 5a       	subi	r30, 0xA9	; 169
    2612:	ff 4f       	sbci	r31, 0xFF	; 255
    2614:	80 81       	ld	r24, Z
    2616:	91 81       	ldd	r25, Z+1	; 0x01
    2618:	01 97       	sbiw	r24, 0x01	; 1
    261a:	f1 f7       	brne	.-4      	; 0x2618 <CLCD_voidHamoksha+0x155a>
    261c:	fe 01       	movw	r30, r28
    261e:	e9 5a       	subi	r30, 0xA9	; 169
    2620:	ff 4f       	sbci	r31, 0xFF	; 255
    2622:	91 83       	std	Z+1, r25	; 0x01
    2624:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2626:	de 01       	movw	r26, r28
    2628:	a7 5a       	subi	r26, 0xA7	; 167
    262a:	bf 4f       	sbci	r27, 0xFF	; 255
    262c:	fe 01       	movw	r30, r28
    262e:	e7 5a       	subi	r30, 0xA7	; 167
    2630:	ff 4f       	sbci	r31, 0xFF	; 255
    2632:	80 81       	ld	r24, Z
    2634:	91 81       	ldd	r25, Z+1	; 0x01
    2636:	01 97       	sbiw	r24, 0x01	; 1
    2638:	11 96       	adiw	r26, 0x01	; 1
    263a:	9c 93       	st	X, r25
    263c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    263e:	fe 01       	movw	r30, r28
    2640:	e7 5a       	subi	r30, 0xA7	; 167
    2642:	ff 4f       	sbci	r31, 0xFF	; 255
    2644:	80 81       	ld	r24, Z
    2646:	91 81       	ldd	r25, Z+1	; 0x01
    2648:	00 97       	sbiw	r24, 0x00	; 0
    264a:	d1 f6       	brne	.-76     	; 0x2600 <CLCD_voidHamoksha+0x1542>
    264c:	27 c0       	rjmp	.+78     	; 0x269c <CLCD_voidHamoksha+0x15de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    264e:	8e 01       	movw	r16, r28
    2650:	07 5a       	subi	r16, 0xA7	; 167
    2652:	1f 4f       	sbci	r17, 0xFF	; 255
    2654:	fe 01       	movw	r30, r28
    2656:	e5 5a       	subi	r30, 0xA5	; 165
    2658:	ff 4f       	sbci	r31, 0xFF	; 255
    265a:	60 81       	ld	r22, Z
    265c:	71 81       	ldd	r23, Z+1	; 0x01
    265e:	82 81       	ldd	r24, Z+2	; 0x02
    2660:	93 81       	ldd	r25, Z+3	; 0x03
    2662:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2666:	dc 01       	movw	r26, r24
    2668:	cb 01       	movw	r24, r22
    266a:	f8 01       	movw	r30, r16
    266c:	91 83       	std	Z+1, r25	; 0x01
    266e:	80 83       	st	Z, r24
    2670:	de 01       	movw	r26, r28
    2672:	ab 5a       	subi	r26, 0xAB	; 171
    2674:	bf 4f       	sbci	r27, 0xFF	; 255
    2676:	fe 01       	movw	r30, r28
    2678:	e7 5a       	subi	r30, 0xA7	; 167
    267a:	ff 4f       	sbci	r31, 0xFF	; 255
    267c:	80 81       	ld	r24, Z
    267e:	91 81       	ldd	r25, Z+1	; 0x01
    2680:	8d 93       	st	X+, r24
    2682:	9c 93       	st	X, r25
    2684:	fe 01       	movw	r30, r28
    2686:	eb 5a       	subi	r30, 0xAB	; 171
    2688:	ff 4f       	sbci	r31, 0xFF	; 255
    268a:	80 81       	ld	r24, Z
    268c:	91 81       	ldd	r25, Z+1	; 0x01
    268e:	01 97       	sbiw	r24, 0x01	; 1
    2690:	f1 f7       	brne	.-4      	; 0x268e <CLCD_voidHamoksha+0x15d0>
    2692:	fe 01       	movw	r30, r28
    2694:	eb 5a       	subi	r30, 0xAB	; 171
    2696:	ff 4f       	sbci	r31, 0xFF	; 255
    2698:	91 83       	std	Z+1, r25	; 0x01
    269a:	80 83       	st	Z, r24
				_delay_ms(40);
				CLCD_u8SpecialCharacter(0,Local_u8HamokshaPattern42,i,1);
    269c:	9e 01       	movw	r18, r28
    269e:	2e 5e       	subi	r18, 0xEE	; 238
    26a0:	3e 4f       	sbci	r19, 0xFE	; 254
    26a2:	fe 01       	movw	r30, r28
    26a4:	ef 51       	subi	r30, 0x1F	; 31
    26a6:	ff 4f       	sbci	r31, 0xFF	; 255
    26a8:	80 e0       	ldi	r24, 0x00	; 0
    26aa:	b9 01       	movw	r22, r18
    26ac:	40 81       	ld	r20, Z
    26ae:	21 e0       	ldi	r18, 0x01	; 1
    26b0:	0e 94 09 08 	call	0x1012	; 0x1012 <CLCD_u8SpecialCharacter>
    26b4:	fe 01       	movw	r30, r28
    26b6:	ef 5a       	subi	r30, 0xAF	; 175
    26b8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ba:	80 e0       	ldi	r24, 0x00	; 0
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	a0 e2       	ldi	r26, 0x20	; 32
    26c0:	b2 e4       	ldi	r27, 0x42	; 66
    26c2:	80 83       	st	Z, r24
    26c4:	91 83       	std	Z+1, r25	; 0x01
    26c6:	a2 83       	std	Z+2, r26	; 0x02
    26c8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26ca:	8e 01       	movw	r16, r28
    26cc:	03 5b       	subi	r16, 0xB3	; 179
    26ce:	1f 4f       	sbci	r17, 0xFF	; 255
    26d0:	fe 01       	movw	r30, r28
    26d2:	ef 5a       	subi	r30, 0xAF	; 175
    26d4:	ff 4f       	sbci	r31, 0xFF	; 255
    26d6:	60 81       	ld	r22, Z
    26d8:	71 81       	ldd	r23, Z+1	; 0x01
    26da:	82 81       	ldd	r24, Z+2	; 0x02
    26dc:	93 81       	ldd	r25, Z+3	; 0x03
    26de:	20 e0       	ldi	r18, 0x00	; 0
    26e0:	30 e0       	ldi	r19, 0x00	; 0
    26e2:	4a e7       	ldi	r20, 0x7A	; 122
    26e4:	55 e4       	ldi	r21, 0x45	; 69
    26e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26ea:	dc 01       	movw	r26, r24
    26ec:	cb 01       	movw	r24, r22
    26ee:	f8 01       	movw	r30, r16
    26f0:	80 83       	st	Z, r24
    26f2:	91 83       	std	Z+1, r25	; 0x01
    26f4:	a2 83       	std	Z+2, r26	; 0x02
    26f6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26f8:	fe 01       	movw	r30, r28
    26fa:	e3 5b       	subi	r30, 0xB3	; 179
    26fc:	ff 4f       	sbci	r31, 0xFF	; 255
    26fe:	60 81       	ld	r22, Z
    2700:	71 81       	ldd	r23, Z+1	; 0x01
    2702:	82 81       	ldd	r24, Z+2	; 0x02
    2704:	93 81       	ldd	r25, Z+3	; 0x03
    2706:	20 e0       	ldi	r18, 0x00	; 0
    2708:	30 e0       	ldi	r19, 0x00	; 0
    270a:	40 e8       	ldi	r20, 0x80	; 128
    270c:	5f e3       	ldi	r21, 0x3F	; 63
    270e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2712:	88 23       	and	r24, r24
    2714:	44 f4       	brge	.+16     	; 0x2726 <CLCD_voidHamoksha+0x1668>
		__ticks = 1;
    2716:	fe 01       	movw	r30, r28
    2718:	e5 5b       	subi	r30, 0xB5	; 181
    271a:	ff 4f       	sbci	r31, 0xFF	; 255
    271c:	81 e0       	ldi	r24, 0x01	; 1
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	91 83       	std	Z+1, r25	; 0x01
    2722:	80 83       	st	Z, r24
    2724:	64 c0       	rjmp	.+200    	; 0x27ee <CLCD_voidHamoksha+0x1730>
	else if (__tmp > 65535)
    2726:	fe 01       	movw	r30, r28
    2728:	e3 5b       	subi	r30, 0xB3	; 179
    272a:	ff 4f       	sbci	r31, 0xFF	; 255
    272c:	60 81       	ld	r22, Z
    272e:	71 81       	ldd	r23, Z+1	; 0x01
    2730:	82 81       	ldd	r24, Z+2	; 0x02
    2732:	93 81       	ldd	r25, Z+3	; 0x03
    2734:	20 e0       	ldi	r18, 0x00	; 0
    2736:	3f ef       	ldi	r19, 0xFF	; 255
    2738:	4f e7       	ldi	r20, 0x7F	; 127
    273a:	57 e4       	ldi	r21, 0x47	; 71
    273c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2740:	18 16       	cp	r1, r24
    2742:	0c f0       	brlt	.+2      	; 0x2746 <CLCD_voidHamoksha+0x1688>
    2744:	43 c0       	rjmp	.+134    	; 0x27cc <CLCD_voidHamoksha+0x170e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2746:	fe 01       	movw	r30, r28
    2748:	ef 5a       	subi	r30, 0xAF	; 175
    274a:	ff 4f       	sbci	r31, 0xFF	; 255
    274c:	60 81       	ld	r22, Z
    274e:	71 81       	ldd	r23, Z+1	; 0x01
    2750:	82 81       	ldd	r24, Z+2	; 0x02
    2752:	93 81       	ldd	r25, Z+3	; 0x03
    2754:	20 e0       	ldi	r18, 0x00	; 0
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	40 e2       	ldi	r20, 0x20	; 32
    275a:	51 e4       	ldi	r21, 0x41	; 65
    275c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2760:	dc 01       	movw	r26, r24
    2762:	cb 01       	movw	r24, r22
    2764:	8e 01       	movw	r16, r28
    2766:	05 5b       	subi	r16, 0xB5	; 181
    2768:	1f 4f       	sbci	r17, 0xFF	; 255
    276a:	bc 01       	movw	r22, r24
    276c:	cd 01       	movw	r24, r26
    276e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2772:	dc 01       	movw	r26, r24
    2774:	cb 01       	movw	r24, r22
    2776:	f8 01       	movw	r30, r16
    2778:	91 83       	std	Z+1, r25	; 0x01
    277a:	80 83       	st	Z, r24
    277c:	1f c0       	rjmp	.+62     	; 0x27bc <CLCD_voidHamoksha+0x16fe>
    277e:	fe 01       	movw	r30, r28
    2780:	e7 5b       	subi	r30, 0xB7	; 183
    2782:	ff 4f       	sbci	r31, 0xFF	; 255
    2784:	80 e9       	ldi	r24, 0x90	; 144
    2786:	91 e0       	ldi	r25, 0x01	; 1
    2788:	91 83       	std	Z+1, r25	; 0x01
    278a:	80 83       	st	Z, r24
    278c:	fe 01       	movw	r30, r28
    278e:	e7 5b       	subi	r30, 0xB7	; 183
    2790:	ff 4f       	sbci	r31, 0xFF	; 255
    2792:	80 81       	ld	r24, Z
    2794:	91 81       	ldd	r25, Z+1	; 0x01
    2796:	01 97       	sbiw	r24, 0x01	; 1
    2798:	f1 f7       	brne	.-4      	; 0x2796 <CLCD_voidHamoksha+0x16d8>
    279a:	fe 01       	movw	r30, r28
    279c:	e7 5b       	subi	r30, 0xB7	; 183
    279e:	ff 4f       	sbci	r31, 0xFF	; 255
    27a0:	91 83       	std	Z+1, r25	; 0x01
    27a2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27a4:	de 01       	movw	r26, r28
    27a6:	a5 5b       	subi	r26, 0xB5	; 181
    27a8:	bf 4f       	sbci	r27, 0xFF	; 255
    27aa:	fe 01       	movw	r30, r28
    27ac:	e5 5b       	subi	r30, 0xB5	; 181
    27ae:	ff 4f       	sbci	r31, 0xFF	; 255
    27b0:	80 81       	ld	r24, Z
    27b2:	91 81       	ldd	r25, Z+1	; 0x01
    27b4:	01 97       	sbiw	r24, 0x01	; 1
    27b6:	11 96       	adiw	r26, 0x01	; 1
    27b8:	9c 93       	st	X, r25
    27ba:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27bc:	fe 01       	movw	r30, r28
    27be:	e5 5b       	subi	r30, 0xB5	; 181
    27c0:	ff 4f       	sbci	r31, 0xFF	; 255
    27c2:	80 81       	ld	r24, Z
    27c4:	91 81       	ldd	r25, Z+1	; 0x01
    27c6:	00 97       	sbiw	r24, 0x00	; 0
    27c8:	d1 f6       	brne	.-76     	; 0x277e <CLCD_voidHamoksha+0x16c0>
    27ca:	27 c0       	rjmp	.+78     	; 0x281a <CLCD_voidHamoksha+0x175c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27cc:	8e 01       	movw	r16, r28
    27ce:	05 5b       	subi	r16, 0xB5	; 181
    27d0:	1f 4f       	sbci	r17, 0xFF	; 255
    27d2:	fe 01       	movw	r30, r28
    27d4:	e3 5b       	subi	r30, 0xB3	; 179
    27d6:	ff 4f       	sbci	r31, 0xFF	; 255
    27d8:	60 81       	ld	r22, Z
    27da:	71 81       	ldd	r23, Z+1	; 0x01
    27dc:	82 81       	ldd	r24, Z+2	; 0x02
    27de:	93 81       	ldd	r25, Z+3	; 0x03
    27e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27e4:	dc 01       	movw	r26, r24
    27e6:	cb 01       	movw	r24, r22
    27e8:	f8 01       	movw	r30, r16
    27ea:	91 83       	std	Z+1, r25	; 0x01
    27ec:	80 83       	st	Z, r24
    27ee:	de 01       	movw	r26, r28
    27f0:	a9 5b       	subi	r26, 0xB9	; 185
    27f2:	bf 4f       	sbci	r27, 0xFF	; 255
    27f4:	fe 01       	movw	r30, r28
    27f6:	e5 5b       	subi	r30, 0xB5	; 181
    27f8:	ff 4f       	sbci	r31, 0xFF	; 255
    27fa:	80 81       	ld	r24, Z
    27fc:	91 81       	ldd	r25, Z+1	; 0x01
    27fe:	8d 93       	st	X+, r24
    2800:	9c 93       	st	X, r25
    2802:	fe 01       	movw	r30, r28
    2804:	e9 5b       	subi	r30, 0xB9	; 185
    2806:	ff 4f       	sbci	r31, 0xFF	; 255
    2808:	80 81       	ld	r24, Z
    280a:	91 81       	ldd	r25, Z+1	; 0x01
    280c:	01 97       	sbiw	r24, 0x01	; 1
    280e:	f1 f7       	brne	.-4      	; 0x280c <CLCD_voidHamoksha+0x174e>
    2810:	fe 01       	movw	r30, r28
    2812:	e9 5b       	subi	r30, 0xB9	; 185
    2814:	ff 4f       	sbci	r31, 0xFF	; 255
    2816:	91 83       	std	Z+1, r25	; 0x01
    2818:	80 83       	st	Z, r24
				_delay_ms(40);
				        i++;
    281a:	de 01       	movw	r26, r28
    281c:	af 51       	subi	r26, 0x1F	; 31
    281e:	bf 4f       	sbci	r27, 0xFF	; 255
    2820:	fe 01       	movw	r30, r28
    2822:	ef 51       	subi	r30, 0x1F	; 31
    2824:	ff 4f       	sbci	r31, 0xFF	; 255
    2826:	80 81       	ld	r24, Z
    2828:	8f 5f       	subi	r24, 0xFF	; 255
    282a:	8c 93       	st	X, r24
	CLCD_VoidGoToXY(0,0);
	CLCD_u8SendString(" I play Football");
	_delay_ms(600);
	i=0;
	{
		while(i<16)
    282c:	fe 01       	movw	r30, r28
    282e:	ef 51       	subi	r30, 0x1F	; 31
    2830:	ff 4f       	sbci	r31, 0xFF	; 255
    2832:	80 81       	ld	r24, Z
    2834:	80 31       	cpi	r24, 0x10	; 16
    2836:	08 f4       	brcc	.+2      	; 0x283a <CLCD_voidHamoksha+0x177c>
    2838:	66 ce       	rjmp	.-820    	; 0x2506 <CLCD_voidHamoksha+0x1448>

			}

	}

	CLCD_voidClear();
    283a:	0e 94 55 08 	call	0x10aa	; 0x10aa <CLCD_voidClear>
	CLCD_VoidGoToXY(0,0);
    283e:	80 e0       	ldi	r24, 0x00	; 0
    2840:	60 e0       	ldi	r22, 0x00	; 0
    2842:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <CLCD_VoidGoToXY>
	CLCD_u8SendString(" DON'T KILL ME");
    2846:	88 e9       	ldi	r24, 0x98	; 152
    2848:	90 e0       	ldi	r25, 0x00	; 0
    284a:	0e 94 2a 07 	call	0xe54	; 0xe54 <CLCD_u8SendString>
    284e:	fe 01       	movw	r30, r28
    2850:	ed 5b       	subi	r30, 0xBD	; 189
    2852:	ff 4f       	sbci	r31, 0xFF	; 255
    2854:	80 e0       	ldi	r24, 0x00	; 0
    2856:	90 e0       	ldi	r25, 0x00	; 0
    2858:	a6 e1       	ldi	r26, 0x16	; 22
    285a:	b4 e4       	ldi	r27, 0x44	; 68
    285c:	80 83       	st	Z, r24
    285e:	91 83       	std	Z+1, r25	; 0x01
    2860:	a2 83       	std	Z+2, r26	; 0x02
    2862:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2864:	8e 01       	movw	r16, r28
    2866:	01 5c       	subi	r16, 0xC1	; 193
    2868:	1f 4f       	sbci	r17, 0xFF	; 255
    286a:	fe 01       	movw	r30, r28
    286c:	ed 5b       	subi	r30, 0xBD	; 189
    286e:	ff 4f       	sbci	r31, 0xFF	; 255
    2870:	60 81       	ld	r22, Z
    2872:	71 81       	ldd	r23, Z+1	; 0x01
    2874:	82 81       	ldd	r24, Z+2	; 0x02
    2876:	93 81       	ldd	r25, Z+3	; 0x03
    2878:	20 e0       	ldi	r18, 0x00	; 0
    287a:	30 e0       	ldi	r19, 0x00	; 0
    287c:	4a e7       	ldi	r20, 0x7A	; 122
    287e:	55 e4       	ldi	r21, 0x45	; 69
    2880:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2884:	dc 01       	movw	r26, r24
    2886:	cb 01       	movw	r24, r22
    2888:	f8 01       	movw	r30, r16
    288a:	80 83       	st	Z, r24
    288c:	91 83       	std	Z+1, r25	; 0x01
    288e:	a2 83       	std	Z+2, r26	; 0x02
    2890:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2892:	fe 01       	movw	r30, r28
    2894:	ff 96       	adiw	r30, 0x3f	; 63
    2896:	60 81       	ld	r22, Z
    2898:	71 81       	ldd	r23, Z+1	; 0x01
    289a:	82 81       	ldd	r24, Z+2	; 0x02
    289c:	93 81       	ldd	r25, Z+3	; 0x03
    289e:	20 e0       	ldi	r18, 0x00	; 0
    28a0:	30 e0       	ldi	r19, 0x00	; 0
    28a2:	40 e8       	ldi	r20, 0x80	; 128
    28a4:	5f e3       	ldi	r21, 0x3F	; 63
    28a6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    28aa:	88 23       	and	r24, r24
    28ac:	2c f4       	brge	.+10     	; 0x28b8 <CLCD_voidHamoksha+0x17fa>
		__ticks = 1;
    28ae:	81 e0       	ldi	r24, 0x01	; 1
    28b0:	90 e0       	ldi	r25, 0x00	; 0
    28b2:	9e af       	std	Y+62, r25	; 0x3e
    28b4:	8d af       	std	Y+61, r24	; 0x3d
    28b6:	46 c0       	rjmp	.+140    	; 0x2944 <CLCD_voidHamoksha+0x1886>
	else if (__tmp > 65535)
    28b8:	fe 01       	movw	r30, r28
    28ba:	ff 96       	adiw	r30, 0x3f	; 63
    28bc:	60 81       	ld	r22, Z
    28be:	71 81       	ldd	r23, Z+1	; 0x01
    28c0:	82 81       	ldd	r24, Z+2	; 0x02
    28c2:	93 81       	ldd	r25, Z+3	; 0x03
    28c4:	20 e0       	ldi	r18, 0x00	; 0
    28c6:	3f ef       	ldi	r19, 0xFF	; 255
    28c8:	4f e7       	ldi	r20, 0x7F	; 127
    28ca:	57 e4       	ldi	r21, 0x47	; 71
    28cc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    28d0:	18 16       	cp	r1, r24
    28d2:	64 f5       	brge	.+88     	; 0x292c <CLCD_voidHamoksha+0x186e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28d4:	fe 01       	movw	r30, r28
    28d6:	ed 5b       	subi	r30, 0xBD	; 189
    28d8:	ff 4f       	sbci	r31, 0xFF	; 255
    28da:	60 81       	ld	r22, Z
    28dc:	71 81       	ldd	r23, Z+1	; 0x01
    28de:	82 81       	ldd	r24, Z+2	; 0x02
    28e0:	93 81       	ldd	r25, Z+3	; 0x03
    28e2:	20 e0       	ldi	r18, 0x00	; 0
    28e4:	30 e0       	ldi	r19, 0x00	; 0
    28e6:	40 e2       	ldi	r20, 0x20	; 32
    28e8:	51 e4       	ldi	r21, 0x41	; 65
    28ea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28ee:	dc 01       	movw	r26, r24
    28f0:	cb 01       	movw	r24, r22
    28f2:	bc 01       	movw	r22, r24
    28f4:	cd 01       	movw	r24, r26
    28f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28fa:	dc 01       	movw	r26, r24
    28fc:	cb 01       	movw	r24, r22
    28fe:	9e af       	std	Y+62, r25	; 0x3e
    2900:	8d af       	std	Y+61, r24	; 0x3d
    2902:	0f c0       	rjmp	.+30     	; 0x2922 <CLCD_voidHamoksha+0x1864>
    2904:	80 e9       	ldi	r24, 0x90	; 144
    2906:	91 e0       	ldi	r25, 0x01	; 1
    2908:	9c af       	std	Y+60, r25	; 0x3c
    290a:	8b af       	std	Y+59, r24	; 0x3b
    290c:	8b ad       	ldd	r24, Y+59	; 0x3b
    290e:	9c ad       	ldd	r25, Y+60	; 0x3c
    2910:	01 97       	sbiw	r24, 0x01	; 1
    2912:	f1 f7       	brne	.-4      	; 0x2910 <CLCD_voidHamoksha+0x1852>
    2914:	9c af       	std	Y+60, r25	; 0x3c
    2916:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2918:	8d ad       	ldd	r24, Y+61	; 0x3d
    291a:	9e ad       	ldd	r25, Y+62	; 0x3e
    291c:	01 97       	sbiw	r24, 0x01	; 1
    291e:	9e af       	std	Y+62, r25	; 0x3e
    2920:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2922:	8d ad       	ldd	r24, Y+61	; 0x3d
    2924:	9e ad       	ldd	r25, Y+62	; 0x3e
    2926:	00 97       	sbiw	r24, 0x00	; 0
    2928:	69 f7       	brne	.-38     	; 0x2904 <CLCD_voidHamoksha+0x1846>
    292a:	16 c0       	rjmp	.+44     	; 0x2958 <CLCD_voidHamoksha+0x189a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    292c:	fe 01       	movw	r30, r28
    292e:	ff 96       	adiw	r30, 0x3f	; 63
    2930:	60 81       	ld	r22, Z
    2932:	71 81       	ldd	r23, Z+1	; 0x01
    2934:	82 81       	ldd	r24, Z+2	; 0x02
    2936:	93 81       	ldd	r25, Z+3	; 0x03
    2938:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    293c:	dc 01       	movw	r26, r24
    293e:	cb 01       	movw	r24, r22
    2940:	9e af       	std	Y+62, r25	; 0x3e
    2942:	8d af       	std	Y+61, r24	; 0x3d
    2944:	8d ad       	ldd	r24, Y+61	; 0x3d
    2946:	9e ad       	ldd	r25, Y+62	; 0x3e
    2948:	9a af       	std	Y+58, r25	; 0x3a
    294a:	89 af       	std	Y+57, r24	; 0x39
    294c:	89 ad       	ldd	r24, Y+57	; 0x39
    294e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2950:	01 97       	sbiw	r24, 0x01	; 1
    2952:	f1 f7       	brne	.-4      	; 0x2950 <CLCD_voidHamoksha+0x1892>
    2954:	9a af       	std	Y+58, r25	; 0x3a
    2956:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(600);
	CLCD_voidClear();
    2958:	0e 94 55 08 	call	0x10aa	; 0x10aa <CLCD_voidClear>
		CLCD_u8SpecialCharacter(0,Local_u8HamokshaPattern1,13,1);
    295c:	9e 01       	movw	r18, r28
    295e:	26 51       	subi	r18, 0x16	; 22
    2960:	3f 4f       	sbci	r19, 0xFF	; 255
    2962:	80 e0       	ldi	r24, 0x00	; 0
    2964:	b9 01       	movw	r22, r18
    2966:	4d e0       	ldi	r20, 0x0D	; 13
    2968:	21 e0       	ldi	r18, 0x01	; 1
    296a:	0e 94 09 08 	call	0x1012	; 0x1012 <CLCD_u8SpecialCharacter>


			CLCD_u8SpecialCharacter(1,Local_u8HamokshaPattern6,0,1);
    296e:	9e 01       	movw	r18, r28
    2970:	26 5e       	subi	r18, 0xE6	; 230
    2972:	3e 4f       	sbci	r19, 0xFE	; 254
    2974:	81 e0       	ldi	r24, 0x01	; 1
    2976:	b9 01       	movw	r22, r18
    2978:	40 e0       	ldi	r20, 0x00	; 0
    297a:	21 e0       	ldi	r18, 0x01	; 1
    297c:	0e 94 09 08 	call	0x1012	; 0x1012 <CLCD_u8SpecialCharacter>
			CLCD_u8SpecialCharacter(2,Local_u8HamokshaPattern7,1,1);
    2980:	9e 01       	movw	r18, r28
    2982:	2e 5d       	subi	r18, 0xDE	; 222
    2984:	3e 4f       	sbci	r19, 0xFE	; 254
    2986:	82 e0       	ldi	r24, 0x02	; 2
    2988:	b9 01       	movw	r22, r18
    298a:	41 e0       	ldi	r20, 0x01	; 1
    298c:	21 e0       	ldi	r18, 0x01	; 1
    298e:	0e 94 09 08 	call	0x1012	; 0x1012 <CLCD_u8SpecialCharacter>
			CLCD_u8SpecialCharacter(3,Local_u8HamokshaPattern7,2,1);
    2992:	9e 01       	movw	r18, r28
    2994:	2e 5d       	subi	r18, 0xDE	; 222
    2996:	3e 4f       	sbci	r19, 0xFE	; 254
    2998:	83 e0       	ldi	r24, 0x03	; 3
    299a:	b9 01       	movw	r22, r18
    299c:	42 e0       	ldi	r20, 0x02	; 2
    299e:	21 e0       	ldi	r18, 0x01	; 1
    29a0:	0e 94 09 08 	call	0x1012	; 0x1012 <CLCD_u8SpecialCharacter>

			CLCD_u8SpecialCharacter(4,Local_u8HamokshaPattern8,4,1);
    29a4:	9e 01       	movw	r18, r28
    29a6:	26 5d       	subi	r18, 0xD6	; 214
    29a8:	3e 4f       	sbci	r19, 0xFE	; 254
    29aa:	84 e0       	ldi	r24, 0x04	; 4
    29ac:	b9 01       	movw	r22, r18
    29ae:	44 e0       	ldi	r20, 0x04	; 4
    29b0:	21 e0       	ldi	r18, 0x01	; 1
    29b2:	0e 94 09 08 	call	0x1012	; 0x1012 <CLCD_u8SpecialCharacter>
    29b6:	80 e0       	ldi	r24, 0x00	; 0
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	a0 ef       	ldi	r26, 0xF0	; 240
    29bc:	b1 e4       	ldi	r27, 0x41	; 65
    29be:	8d ab       	std	Y+53, r24	; 0x35
    29c0:	9e ab       	std	Y+54, r25	; 0x36
    29c2:	af ab       	std	Y+55, r26	; 0x37
    29c4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29c6:	6d a9       	ldd	r22, Y+53	; 0x35
    29c8:	7e a9       	ldd	r23, Y+54	; 0x36
    29ca:	8f a9       	ldd	r24, Y+55	; 0x37
    29cc:	98 ad       	ldd	r25, Y+56	; 0x38
    29ce:	20 e0       	ldi	r18, 0x00	; 0
    29d0:	30 e0       	ldi	r19, 0x00	; 0
    29d2:	4a e7       	ldi	r20, 0x7A	; 122
    29d4:	55 e4       	ldi	r21, 0x45	; 69
    29d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29da:	dc 01       	movw	r26, r24
    29dc:	cb 01       	movw	r24, r22
    29de:	89 ab       	std	Y+49, r24	; 0x31
    29e0:	9a ab       	std	Y+50, r25	; 0x32
    29e2:	ab ab       	std	Y+51, r26	; 0x33
    29e4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    29e6:	69 a9       	ldd	r22, Y+49	; 0x31
    29e8:	7a a9       	ldd	r23, Y+50	; 0x32
    29ea:	8b a9       	ldd	r24, Y+51	; 0x33
    29ec:	9c a9       	ldd	r25, Y+52	; 0x34
    29ee:	20 e0       	ldi	r18, 0x00	; 0
    29f0:	30 e0       	ldi	r19, 0x00	; 0
    29f2:	40 e8       	ldi	r20, 0x80	; 128
    29f4:	5f e3       	ldi	r21, 0x3F	; 63
    29f6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    29fa:	88 23       	and	r24, r24
    29fc:	2c f4       	brge	.+10     	; 0x2a08 <CLCD_voidHamoksha+0x194a>
		__ticks = 1;
    29fe:	81 e0       	ldi	r24, 0x01	; 1
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	98 ab       	std	Y+48, r25	; 0x30
    2a04:	8f a7       	std	Y+47, r24	; 0x2f
    2a06:	3f c0       	rjmp	.+126    	; 0x2a86 <CLCD_voidHamoksha+0x19c8>
	else if (__tmp > 65535)
    2a08:	69 a9       	ldd	r22, Y+49	; 0x31
    2a0a:	7a a9       	ldd	r23, Y+50	; 0x32
    2a0c:	8b a9       	ldd	r24, Y+51	; 0x33
    2a0e:	9c a9       	ldd	r25, Y+52	; 0x34
    2a10:	20 e0       	ldi	r18, 0x00	; 0
    2a12:	3f ef       	ldi	r19, 0xFF	; 255
    2a14:	4f e7       	ldi	r20, 0x7F	; 127
    2a16:	57 e4       	ldi	r21, 0x47	; 71
    2a18:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2a1c:	18 16       	cp	r1, r24
    2a1e:	4c f5       	brge	.+82     	; 0x2a72 <CLCD_voidHamoksha+0x19b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a20:	6d a9       	ldd	r22, Y+53	; 0x35
    2a22:	7e a9       	ldd	r23, Y+54	; 0x36
    2a24:	8f a9       	ldd	r24, Y+55	; 0x37
    2a26:	98 ad       	ldd	r25, Y+56	; 0x38
    2a28:	20 e0       	ldi	r18, 0x00	; 0
    2a2a:	30 e0       	ldi	r19, 0x00	; 0
    2a2c:	40 e2       	ldi	r20, 0x20	; 32
    2a2e:	51 e4       	ldi	r21, 0x41	; 65
    2a30:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a34:	dc 01       	movw	r26, r24
    2a36:	cb 01       	movw	r24, r22
    2a38:	bc 01       	movw	r22, r24
    2a3a:	cd 01       	movw	r24, r26
    2a3c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a40:	dc 01       	movw	r26, r24
    2a42:	cb 01       	movw	r24, r22
    2a44:	98 ab       	std	Y+48, r25	; 0x30
    2a46:	8f a7       	std	Y+47, r24	; 0x2f
    2a48:	0f c0       	rjmp	.+30     	; 0x2a68 <CLCD_voidHamoksha+0x19aa>
    2a4a:	80 e9       	ldi	r24, 0x90	; 144
    2a4c:	91 e0       	ldi	r25, 0x01	; 1
    2a4e:	9e a7       	std	Y+46, r25	; 0x2e
    2a50:	8d a7       	std	Y+45, r24	; 0x2d
    2a52:	8d a5       	ldd	r24, Y+45	; 0x2d
    2a54:	9e a5       	ldd	r25, Y+46	; 0x2e
    2a56:	01 97       	sbiw	r24, 0x01	; 1
    2a58:	f1 f7       	brne	.-4      	; 0x2a56 <CLCD_voidHamoksha+0x1998>
    2a5a:	9e a7       	std	Y+46, r25	; 0x2e
    2a5c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a5e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a60:	98 a9       	ldd	r25, Y+48	; 0x30
    2a62:	01 97       	sbiw	r24, 0x01	; 1
    2a64:	98 ab       	std	Y+48, r25	; 0x30
    2a66:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a68:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a6a:	98 a9       	ldd	r25, Y+48	; 0x30
    2a6c:	00 97       	sbiw	r24, 0x00	; 0
    2a6e:	69 f7       	brne	.-38     	; 0x2a4a <CLCD_voidHamoksha+0x198c>
    2a70:	14 c0       	rjmp	.+40     	; 0x2a9a <CLCD_voidHamoksha+0x19dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a72:	69 a9       	ldd	r22, Y+49	; 0x31
    2a74:	7a a9       	ldd	r23, Y+50	; 0x32
    2a76:	8b a9       	ldd	r24, Y+51	; 0x33
    2a78:	9c a9       	ldd	r25, Y+52	; 0x34
    2a7a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a7e:	dc 01       	movw	r26, r24
    2a80:	cb 01       	movw	r24, r22
    2a82:	98 ab       	std	Y+48, r25	; 0x30
    2a84:	8f a7       	std	Y+47, r24	; 0x2f
    2a86:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a88:	98 a9       	ldd	r25, Y+48	; 0x30
    2a8a:	9c a7       	std	Y+44, r25	; 0x2c
    2a8c:	8b a7       	std	Y+43, r24	; 0x2b
    2a8e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a90:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a92:	01 97       	sbiw	r24, 0x01	; 1
    2a94:	f1 f7       	brne	.-4      	; 0x2a92 <CLCD_voidHamoksha+0x19d4>
    2a96:	9c a7       	std	Y+44, r25	; 0x2c
    2a98:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(30);
			CLCD_u8SpecialCharacter(5,Local_u8HamokshaPattern8,7,1);
    2a9a:	9e 01       	movw	r18, r28
    2a9c:	26 5d       	subi	r18, 0xD6	; 214
    2a9e:	3e 4f       	sbci	r19, 0xFE	; 254
    2aa0:	85 e0       	ldi	r24, 0x05	; 5
    2aa2:	b9 01       	movw	r22, r18
    2aa4:	47 e0       	ldi	r20, 0x07	; 7
    2aa6:	21 e0       	ldi	r18, 0x01	; 1
    2aa8:	0e 94 09 08 	call	0x1012	; 0x1012 <CLCD_u8SpecialCharacter>
    2aac:	80 e0       	ldi	r24, 0x00	; 0
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	a0 ef       	ldi	r26, 0xF0	; 240
    2ab2:	b1 e4       	ldi	r27, 0x41	; 65
    2ab4:	8f a3       	std	Y+39, r24	; 0x27
    2ab6:	98 a7       	std	Y+40, r25	; 0x28
    2ab8:	a9 a7       	std	Y+41, r26	; 0x29
    2aba:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2abc:	6f a1       	ldd	r22, Y+39	; 0x27
    2abe:	78 a5       	ldd	r23, Y+40	; 0x28
    2ac0:	89 a5       	ldd	r24, Y+41	; 0x29
    2ac2:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ac4:	20 e0       	ldi	r18, 0x00	; 0
    2ac6:	30 e0       	ldi	r19, 0x00	; 0
    2ac8:	4a e7       	ldi	r20, 0x7A	; 122
    2aca:	55 e4       	ldi	r21, 0x45	; 69
    2acc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ad0:	dc 01       	movw	r26, r24
    2ad2:	cb 01       	movw	r24, r22
    2ad4:	8b a3       	std	Y+35, r24	; 0x23
    2ad6:	9c a3       	std	Y+36, r25	; 0x24
    2ad8:	ad a3       	std	Y+37, r26	; 0x25
    2ada:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2adc:	6b a1       	ldd	r22, Y+35	; 0x23
    2ade:	7c a1       	ldd	r23, Y+36	; 0x24
    2ae0:	8d a1       	ldd	r24, Y+37	; 0x25
    2ae2:	9e a1       	ldd	r25, Y+38	; 0x26
    2ae4:	20 e0       	ldi	r18, 0x00	; 0
    2ae6:	30 e0       	ldi	r19, 0x00	; 0
    2ae8:	40 e8       	ldi	r20, 0x80	; 128
    2aea:	5f e3       	ldi	r21, 0x3F	; 63
    2aec:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2af0:	88 23       	and	r24, r24
    2af2:	2c f4       	brge	.+10     	; 0x2afe <CLCD_voidHamoksha+0x1a40>
		__ticks = 1;
    2af4:	81 e0       	ldi	r24, 0x01	; 1
    2af6:	90 e0       	ldi	r25, 0x00	; 0
    2af8:	9a a3       	std	Y+34, r25	; 0x22
    2afa:	89 a3       	std	Y+33, r24	; 0x21
    2afc:	3f c0       	rjmp	.+126    	; 0x2b7c <CLCD_voidHamoksha+0x1abe>
	else if (__tmp > 65535)
    2afe:	6b a1       	ldd	r22, Y+35	; 0x23
    2b00:	7c a1       	ldd	r23, Y+36	; 0x24
    2b02:	8d a1       	ldd	r24, Y+37	; 0x25
    2b04:	9e a1       	ldd	r25, Y+38	; 0x26
    2b06:	20 e0       	ldi	r18, 0x00	; 0
    2b08:	3f ef       	ldi	r19, 0xFF	; 255
    2b0a:	4f e7       	ldi	r20, 0x7F	; 127
    2b0c:	57 e4       	ldi	r21, 0x47	; 71
    2b0e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2b12:	18 16       	cp	r1, r24
    2b14:	4c f5       	brge	.+82     	; 0x2b68 <CLCD_voidHamoksha+0x1aaa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b16:	6f a1       	ldd	r22, Y+39	; 0x27
    2b18:	78 a5       	ldd	r23, Y+40	; 0x28
    2b1a:	89 a5       	ldd	r24, Y+41	; 0x29
    2b1c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b1e:	20 e0       	ldi	r18, 0x00	; 0
    2b20:	30 e0       	ldi	r19, 0x00	; 0
    2b22:	40 e2       	ldi	r20, 0x20	; 32
    2b24:	51 e4       	ldi	r21, 0x41	; 65
    2b26:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b2a:	dc 01       	movw	r26, r24
    2b2c:	cb 01       	movw	r24, r22
    2b2e:	bc 01       	movw	r22, r24
    2b30:	cd 01       	movw	r24, r26
    2b32:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b36:	dc 01       	movw	r26, r24
    2b38:	cb 01       	movw	r24, r22
    2b3a:	9a a3       	std	Y+34, r25	; 0x22
    2b3c:	89 a3       	std	Y+33, r24	; 0x21
    2b3e:	0f c0       	rjmp	.+30     	; 0x2b5e <CLCD_voidHamoksha+0x1aa0>
    2b40:	80 e9       	ldi	r24, 0x90	; 144
    2b42:	91 e0       	ldi	r25, 0x01	; 1
    2b44:	98 a3       	std	Y+32, r25	; 0x20
    2b46:	8f 8f       	std	Y+31, r24	; 0x1f
    2b48:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b4a:	98 a1       	ldd	r25, Y+32	; 0x20
    2b4c:	01 97       	sbiw	r24, 0x01	; 1
    2b4e:	f1 f7       	brne	.-4      	; 0x2b4c <CLCD_voidHamoksha+0x1a8e>
    2b50:	98 a3       	std	Y+32, r25	; 0x20
    2b52:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b54:	89 a1       	ldd	r24, Y+33	; 0x21
    2b56:	9a a1       	ldd	r25, Y+34	; 0x22
    2b58:	01 97       	sbiw	r24, 0x01	; 1
    2b5a:	9a a3       	std	Y+34, r25	; 0x22
    2b5c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b5e:	89 a1       	ldd	r24, Y+33	; 0x21
    2b60:	9a a1       	ldd	r25, Y+34	; 0x22
    2b62:	00 97       	sbiw	r24, 0x00	; 0
    2b64:	69 f7       	brne	.-38     	; 0x2b40 <CLCD_voidHamoksha+0x1a82>
    2b66:	14 c0       	rjmp	.+40     	; 0x2b90 <CLCD_voidHamoksha+0x1ad2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b68:	6b a1       	ldd	r22, Y+35	; 0x23
    2b6a:	7c a1       	ldd	r23, Y+36	; 0x24
    2b6c:	8d a1       	ldd	r24, Y+37	; 0x25
    2b6e:	9e a1       	ldd	r25, Y+38	; 0x26
    2b70:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b74:	dc 01       	movw	r26, r24
    2b76:	cb 01       	movw	r24, r22
    2b78:	9a a3       	std	Y+34, r25	; 0x22
    2b7a:	89 a3       	std	Y+33, r24	; 0x21
    2b7c:	89 a1       	ldd	r24, Y+33	; 0x21
    2b7e:	9a a1       	ldd	r25, Y+34	; 0x22
    2b80:	9e 8f       	std	Y+30, r25	; 0x1e
    2b82:	8d 8f       	std	Y+29, r24	; 0x1d
    2b84:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b86:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b88:	01 97       	sbiw	r24, 0x01	; 1
    2b8a:	f1 f7       	brne	.-4      	; 0x2b88 <CLCD_voidHamoksha+0x1aca>
    2b8c:	9e 8f       	std	Y+30, r25	; 0x1e
    2b8e:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(30);
			CLCD_u8SpecialCharacter(6,Local_u8HamokshaPattern8,9,1);
    2b90:	9e 01       	movw	r18, r28
    2b92:	26 5d       	subi	r18, 0xD6	; 214
    2b94:	3e 4f       	sbci	r19, 0xFE	; 254
    2b96:	86 e0       	ldi	r24, 0x06	; 6
    2b98:	b9 01       	movw	r22, r18
    2b9a:	49 e0       	ldi	r20, 0x09	; 9
    2b9c:	21 e0       	ldi	r18, 0x01	; 1
    2b9e:	0e 94 09 08 	call	0x1012	; 0x1012 <CLCD_u8SpecialCharacter>
    2ba2:	80 e0       	ldi	r24, 0x00	; 0
    2ba4:	90 e0       	ldi	r25, 0x00	; 0
    2ba6:	a0 ef       	ldi	r26, 0xF0	; 240
    2ba8:	b1 e4       	ldi	r27, 0x41	; 65
    2baa:	89 8f       	std	Y+25, r24	; 0x19
    2bac:	9a 8f       	std	Y+26, r25	; 0x1a
    2bae:	ab 8f       	std	Y+27, r26	; 0x1b
    2bb0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bb2:	69 8d       	ldd	r22, Y+25	; 0x19
    2bb4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bb6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bb8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bba:	20 e0       	ldi	r18, 0x00	; 0
    2bbc:	30 e0       	ldi	r19, 0x00	; 0
    2bbe:	4a e7       	ldi	r20, 0x7A	; 122
    2bc0:	55 e4       	ldi	r21, 0x45	; 69
    2bc2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bc6:	dc 01       	movw	r26, r24
    2bc8:	cb 01       	movw	r24, r22
    2bca:	8d 8b       	std	Y+21, r24	; 0x15
    2bcc:	9e 8b       	std	Y+22, r25	; 0x16
    2bce:	af 8b       	std	Y+23, r26	; 0x17
    2bd0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2bd2:	6d 89       	ldd	r22, Y+21	; 0x15
    2bd4:	7e 89       	ldd	r23, Y+22	; 0x16
    2bd6:	8f 89       	ldd	r24, Y+23	; 0x17
    2bd8:	98 8d       	ldd	r25, Y+24	; 0x18
    2bda:	20 e0       	ldi	r18, 0x00	; 0
    2bdc:	30 e0       	ldi	r19, 0x00	; 0
    2bde:	40 e8       	ldi	r20, 0x80	; 128
    2be0:	5f e3       	ldi	r21, 0x3F	; 63
    2be2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2be6:	88 23       	and	r24, r24
    2be8:	2c f4       	brge	.+10     	; 0x2bf4 <CLCD_voidHamoksha+0x1b36>
		__ticks = 1;
    2bea:	81 e0       	ldi	r24, 0x01	; 1
    2bec:	90 e0       	ldi	r25, 0x00	; 0
    2bee:	9c 8b       	std	Y+20, r25	; 0x14
    2bf0:	8b 8b       	std	Y+19, r24	; 0x13
    2bf2:	3f c0       	rjmp	.+126    	; 0x2c72 <CLCD_voidHamoksha+0x1bb4>
	else if (__tmp > 65535)
    2bf4:	6d 89       	ldd	r22, Y+21	; 0x15
    2bf6:	7e 89       	ldd	r23, Y+22	; 0x16
    2bf8:	8f 89       	ldd	r24, Y+23	; 0x17
    2bfa:	98 8d       	ldd	r25, Y+24	; 0x18
    2bfc:	20 e0       	ldi	r18, 0x00	; 0
    2bfe:	3f ef       	ldi	r19, 0xFF	; 255
    2c00:	4f e7       	ldi	r20, 0x7F	; 127
    2c02:	57 e4       	ldi	r21, 0x47	; 71
    2c04:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2c08:	18 16       	cp	r1, r24
    2c0a:	4c f5       	brge	.+82     	; 0x2c5e <CLCD_voidHamoksha+0x1ba0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c0c:	69 8d       	ldd	r22, Y+25	; 0x19
    2c0e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c10:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c12:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c14:	20 e0       	ldi	r18, 0x00	; 0
    2c16:	30 e0       	ldi	r19, 0x00	; 0
    2c18:	40 e2       	ldi	r20, 0x20	; 32
    2c1a:	51 e4       	ldi	r21, 0x41	; 65
    2c1c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c20:	dc 01       	movw	r26, r24
    2c22:	cb 01       	movw	r24, r22
    2c24:	bc 01       	movw	r22, r24
    2c26:	cd 01       	movw	r24, r26
    2c28:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c2c:	dc 01       	movw	r26, r24
    2c2e:	cb 01       	movw	r24, r22
    2c30:	9c 8b       	std	Y+20, r25	; 0x14
    2c32:	8b 8b       	std	Y+19, r24	; 0x13
    2c34:	0f c0       	rjmp	.+30     	; 0x2c54 <CLCD_voidHamoksha+0x1b96>
    2c36:	80 e9       	ldi	r24, 0x90	; 144
    2c38:	91 e0       	ldi	r25, 0x01	; 1
    2c3a:	9a 8b       	std	Y+18, r25	; 0x12
    2c3c:	89 8b       	std	Y+17, r24	; 0x11
    2c3e:	89 89       	ldd	r24, Y+17	; 0x11
    2c40:	9a 89       	ldd	r25, Y+18	; 0x12
    2c42:	01 97       	sbiw	r24, 0x01	; 1
    2c44:	f1 f7       	brne	.-4      	; 0x2c42 <CLCD_voidHamoksha+0x1b84>
    2c46:	9a 8b       	std	Y+18, r25	; 0x12
    2c48:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c4a:	8b 89       	ldd	r24, Y+19	; 0x13
    2c4c:	9c 89       	ldd	r25, Y+20	; 0x14
    2c4e:	01 97       	sbiw	r24, 0x01	; 1
    2c50:	9c 8b       	std	Y+20, r25	; 0x14
    2c52:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c54:	8b 89       	ldd	r24, Y+19	; 0x13
    2c56:	9c 89       	ldd	r25, Y+20	; 0x14
    2c58:	00 97       	sbiw	r24, 0x00	; 0
    2c5a:	69 f7       	brne	.-38     	; 0x2c36 <CLCD_voidHamoksha+0x1b78>
    2c5c:	14 c0       	rjmp	.+40     	; 0x2c86 <CLCD_voidHamoksha+0x1bc8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c5e:	6d 89       	ldd	r22, Y+21	; 0x15
    2c60:	7e 89       	ldd	r23, Y+22	; 0x16
    2c62:	8f 89       	ldd	r24, Y+23	; 0x17
    2c64:	98 8d       	ldd	r25, Y+24	; 0x18
    2c66:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c6a:	dc 01       	movw	r26, r24
    2c6c:	cb 01       	movw	r24, r22
    2c6e:	9c 8b       	std	Y+20, r25	; 0x14
    2c70:	8b 8b       	std	Y+19, r24	; 0x13
    2c72:	8b 89       	ldd	r24, Y+19	; 0x13
    2c74:	9c 89       	ldd	r25, Y+20	; 0x14
    2c76:	98 8b       	std	Y+16, r25	; 0x10
    2c78:	8f 87       	std	Y+15, r24	; 0x0f
    2c7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c7c:	98 89       	ldd	r25, Y+16	; 0x10
    2c7e:	01 97       	sbiw	r24, 0x01	; 1
    2c80:	f1 f7       	brne	.-4      	; 0x2c7e <CLCD_voidHamoksha+0x1bc0>
    2c82:	98 8b       	std	Y+16, r25	; 0x10
    2c84:	8f 87       	std	Y+15, r24	; 0x0f
            _delay_ms(30);

			CLCD_u8SpecialCharacter(0,Local_u8HamokshaPattern0,13,1);
    2c86:	9e 01       	movw	r18, r28
    2c88:	2e 51       	subi	r18, 0x1E	; 30
    2c8a:	3f 4f       	sbci	r19, 0xFF	; 255
    2c8c:	80 e0       	ldi	r24, 0x00	; 0
    2c8e:	b9 01       	movw	r22, r18
    2c90:	4d e0       	ldi	r20, 0x0D	; 13
    2c92:	21 e0       	ldi	r18, 0x01	; 1
    2c94:	0e 94 09 08 	call	0x1012	; 0x1012 <CLCD_u8SpecialCharacter>
    2c98:	80 e0       	ldi	r24, 0x00	; 0
    2c9a:	90 e0       	ldi	r25, 0x00	; 0
    2c9c:	a6 e9       	ldi	r26, 0x96	; 150
    2c9e:	b3 e4       	ldi	r27, 0x43	; 67
    2ca0:	8b 87       	std	Y+11, r24	; 0x0b
    2ca2:	9c 87       	std	Y+12, r25	; 0x0c
    2ca4:	ad 87       	std	Y+13, r26	; 0x0d
    2ca6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ca8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2caa:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cac:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cae:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cb0:	20 e0       	ldi	r18, 0x00	; 0
    2cb2:	30 e0       	ldi	r19, 0x00	; 0
    2cb4:	4a e7       	ldi	r20, 0x7A	; 122
    2cb6:	55 e4       	ldi	r21, 0x45	; 69
    2cb8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2cbc:	dc 01       	movw	r26, r24
    2cbe:	cb 01       	movw	r24, r22
    2cc0:	8f 83       	std	Y+7, r24	; 0x07
    2cc2:	98 87       	std	Y+8, r25	; 0x08
    2cc4:	a9 87       	std	Y+9, r26	; 0x09
    2cc6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2cc8:	6f 81       	ldd	r22, Y+7	; 0x07
    2cca:	78 85       	ldd	r23, Y+8	; 0x08
    2ccc:	89 85       	ldd	r24, Y+9	; 0x09
    2cce:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cd0:	20 e0       	ldi	r18, 0x00	; 0
    2cd2:	30 e0       	ldi	r19, 0x00	; 0
    2cd4:	40 e8       	ldi	r20, 0x80	; 128
    2cd6:	5f e3       	ldi	r21, 0x3F	; 63
    2cd8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2cdc:	88 23       	and	r24, r24
    2cde:	2c f4       	brge	.+10     	; 0x2cea <CLCD_voidHamoksha+0x1c2c>
		__ticks = 1;
    2ce0:	81 e0       	ldi	r24, 0x01	; 1
    2ce2:	90 e0       	ldi	r25, 0x00	; 0
    2ce4:	9e 83       	std	Y+6, r25	; 0x06
    2ce6:	8d 83       	std	Y+5, r24	; 0x05
    2ce8:	3f c0       	rjmp	.+126    	; 0x2d68 <CLCD_voidHamoksha+0x1caa>
	else if (__tmp > 65535)
    2cea:	6f 81       	ldd	r22, Y+7	; 0x07
    2cec:	78 85       	ldd	r23, Y+8	; 0x08
    2cee:	89 85       	ldd	r24, Y+9	; 0x09
    2cf0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cf2:	20 e0       	ldi	r18, 0x00	; 0
    2cf4:	3f ef       	ldi	r19, 0xFF	; 255
    2cf6:	4f e7       	ldi	r20, 0x7F	; 127
    2cf8:	57 e4       	ldi	r21, 0x47	; 71
    2cfa:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2cfe:	18 16       	cp	r1, r24
    2d00:	4c f5       	brge	.+82     	; 0x2d54 <CLCD_voidHamoksha+0x1c96>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d02:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d04:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d06:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d08:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d0a:	20 e0       	ldi	r18, 0x00	; 0
    2d0c:	30 e0       	ldi	r19, 0x00	; 0
    2d0e:	40 e2       	ldi	r20, 0x20	; 32
    2d10:	51 e4       	ldi	r21, 0x41	; 65
    2d12:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d16:	dc 01       	movw	r26, r24
    2d18:	cb 01       	movw	r24, r22
    2d1a:	bc 01       	movw	r22, r24
    2d1c:	cd 01       	movw	r24, r26
    2d1e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d22:	dc 01       	movw	r26, r24
    2d24:	cb 01       	movw	r24, r22
    2d26:	9e 83       	std	Y+6, r25	; 0x06
    2d28:	8d 83       	std	Y+5, r24	; 0x05
    2d2a:	0f c0       	rjmp	.+30     	; 0x2d4a <CLCD_voidHamoksha+0x1c8c>
    2d2c:	80 e9       	ldi	r24, 0x90	; 144
    2d2e:	91 e0       	ldi	r25, 0x01	; 1
    2d30:	9c 83       	std	Y+4, r25	; 0x04
    2d32:	8b 83       	std	Y+3, r24	; 0x03
    2d34:	8b 81       	ldd	r24, Y+3	; 0x03
    2d36:	9c 81       	ldd	r25, Y+4	; 0x04
    2d38:	01 97       	sbiw	r24, 0x01	; 1
    2d3a:	f1 f7       	brne	.-4      	; 0x2d38 <CLCD_voidHamoksha+0x1c7a>
    2d3c:	9c 83       	std	Y+4, r25	; 0x04
    2d3e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d40:	8d 81       	ldd	r24, Y+5	; 0x05
    2d42:	9e 81       	ldd	r25, Y+6	; 0x06
    2d44:	01 97       	sbiw	r24, 0x01	; 1
    2d46:	9e 83       	std	Y+6, r25	; 0x06
    2d48:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d4a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d4c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d4e:	00 97       	sbiw	r24, 0x00	; 0
    2d50:	69 f7       	brne	.-38     	; 0x2d2c <CLCD_voidHamoksha+0x1c6e>
    2d52:	14 c0       	rjmp	.+40     	; 0x2d7c <CLCD_voidHamoksha+0x1cbe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d54:	6f 81       	ldd	r22, Y+7	; 0x07
    2d56:	78 85       	ldd	r23, Y+8	; 0x08
    2d58:	89 85       	ldd	r24, Y+9	; 0x09
    2d5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d5c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d60:	dc 01       	movw	r26, r24
    2d62:	cb 01       	movw	r24, r22
    2d64:	9e 83       	std	Y+6, r25	; 0x06
    2d66:	8d 83       	std	Y+5, r24	; 0x05
    2d68:	8d 81       	ldd	r24, Y+5	; 0x05
    2d6a:	9e 81       	ldd	r25, Y+6	; 0x06
    2d6c:	9a 83       	std	Y+2, r25	; 0x02
    2d6e:	89 83       	std	Y+1, r24	; 0x01
    2d70:	89 81       	ldd	r24, Y+1	; 0x01
    2d72:	9a 81       	ldd	r25, Y+2	; 0x02
    2d74:	01 97       	sbiw	r24, 0x01	; 1
    2d76:	f1 f7       	brne	.-4      	; 0x2d74 <CLCD_voidHamoksha+0x1cb6>
    2d78:	9a 83       	std	Y+2, r25	; 0x02
    2d7a:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(300);
		}
    2d7c:	cd 59       	subi	r28, 0x9D	; 157
    2d7e:	de 4f       	sbci	r29, 0xFE	; 254
    2d80:	0f b6       	in	r0, 0x3f	; 63
    2d82:	f8 94       	cli
    2d84:	de bf       	out	0x3e, r29	; 62
    2d86:	0f be       	out	0x3f, r0	; 63
    2d88:	cd bf       	out	0x3d, r28	; 61
    2d8a:	cf 91       	pop	r28
    2d8c:	df 91       	pop	r29
    2d8e:	1f 91       	pop	r17
    2d90:	0f 91       	pop	r16
    2d92:	08 95       	ret

00002d94 <CLCD_voidMyNameSin>:


void CLCD_voidMyNameSin()
{
    2d94:	df 93       	push	r29
    2d96:	cf 93       	push	r28
    2d98:	cd b7       	in	r28, 0x3d	; 61
    2d9a:	de b7       	in	r29, 0x3e	; 62
    2d9c:	c1 55       	subi	r28, 0x51	; 81
    2d9e:	d0 40       	sbci	r29, 0x00	; 0
    2da0:	0f b6       	in	r0, 0x3f	; 63
    2da2:	f8 94       	cli
    2da4:	de bf       	out	0x3e, r29	; 62
    2da6:	0f be       	out	0x3f, r0	; 63
    2da8:	cd bf       	out	0x3d, r28	; 61
                        0b00000100,
                        0b00011111,
                        0b00000100,
                        0b00000100,
                        0b00000100,
                        0b00000100,0};
    2daa:	ce 01       	movw	r24, r28
    2dac:	41 96       	adiw	r24, 0x11	; 17
    2dae:	9a af       	std	Y+58, r25	; 0x3a
    2db0:	89 af       	std	Y+57, r24	; 0x39
    2db2:	e1 e7       	ldi	r30, 0x71	; 113
    2db4:	f1 e0       	ldi	r31, 0x01	; 1
    2db6:	fc af       	std	Y+60, r31	; 0x3c
    2db8:	eb af       	std	Y+59, r30	; 0x3b
    2dba:	f8 e0       	ldi	r31, 0x08	; 8
    2dbc:	fd af       	std	Y+61, r31	; 0x3d
    2dbe:	eb ad       	ldd	r30, Y+59	; 0x3b
    2dc0:	fc ad       	ldd	r31, Y+60	; 0x3c
    2dc2:	00 80       	ld	r0, Z
    2dc4:	8b ad       	ldd	r24, Y+59	; 0x3b
    2dc6:	9c ad       	ldd	r25, Y+60	; 0x3c
    2dc8:	01 96       	adiw	r24, 0x01	; 1
    2dca:	9c af       	std	Y+60, r25	; 0x3c
    2dcc:	8b af       	std	Y+59, r24	; 0x3b
    2dce:	e9 ad       	ldd	r30, Y+57	; 0x39
    2dd0:	fa ad       	ldd	r31, Y+58	; 0x3a
    2dd2:	00 82       	st	Z, r0
    2dd4:	89 ad       	ldd	r24, Y+57	; 0x39
    2dd6:	9a ad       	ldd	r25, Y+58	; 0x3a
    2dd8:	01 96       	adiw	r24, 0x01	; 1
    2dda:	9a af       	std	Y+58, r25	; 0x3a
    2ddc:	89 af       	std	Y+57, r24	; 0x39
    2dde:	9d ad       	ldd	r25, Y+61	; 0x3d
    2de0:	91 50       	subi	r25, 0x01	; 1
    2de2:	9d af       	std	Y+61, r25	; 0x3d
    2de4:	ed ad       	ldd	r30, Y+61	; 0x3d
    2de6:	ee 23       	and	r30, r30
    2de8:	51 f7       	brne	.-44     	; 0x2dbe <CLCD_voidMyNameSin+0x2a>
                              0b00000000,
                              0b00000111,
                              0b00000101,
                              0b00000111,
                              0b00011111,
                              0b00000000,0};
    2dea:	ce 01       	movw	r24, r28
    2dec:	49 96       	adiw	r24, 0x19	; 25
    2dee:	9f af       	std	Y+63, r25	; 0x3f
    2df0:	8e af       	std	Y+62, r24	; 0x3e
    2df2:	e9 e6       	ldi	r30, 0x69	; 105
    2df4:	f1 e0       	ldi	r31, 0x01	; 1
    2df6:	22 96       	adiw	r28, 0x02	; 2
    2df8:	ff af       	std	Y+63, r31	; 0x3f
    2dfa:	ee af       	std	Y+62, r30	; 0x3e
    2dfc:	22 97       	sbiw	r28, 0x02	; 2
    2dfe:	f8 e0       	ldi	r31, 0x08	; 8
    2e00:	23 96       	adiw	r28, 0x03	; 3
    2e02:	ff af       	std	Y+63, r31	; 0x3f
    2e04:	23 97       	sbiw	r28, 0x03	; 3
    2e06:	22 96       	adiw	r28, 0x02	; 2
    2e08:	ee ad       	ldd	r30, Y+62	; 0x3e
    2e0a:	ff ad       	ldd	r31, Y+63	; 0x3f
    2e0c:	22 97       	sbiw	r28, 0x02	; 2
    2e0e:	00 80       	ld	r0, Z
    2e10:	22 96       	adiw	r28, 0x02	; 2
    2e12:	8e ad       	ldd	r24, Y+62	; 0x3e
    2e14:	9f ad       	ldd	r25, Y+63	; 0x3f
    2e16:	22 97       	sbiw	r28, 0x02	; 2
    2e18:	01 96       	adiw	r24, 0x01	; 1
    2e1a:	22 96       	adiw	r28, 0x02	; 2
    2e1c:	9f af       	std	Y+63, r25	; 0x3f
    2e1e:	8e af       	std	Y+62, r24	; 0x3e
    2e20:	22 97       	sbiw	r28, 0x02	; 2
    2e22:	ee ad       	ldd	r30, Y+62	; 0x3e
    2e24:	ff ad       	ldd	r31, Y+63	; 0x3f
    2e26:	00 82       	st	Z, r0
    2e28:	8e ad       	ldd	r24, Y+62	; 0x3e
    2e2a:	9f ad       	ldd	r25, Y+63	; 0x3f
    2e2c:	01 96       	adiw	r24, 0x01	; 1
    2e2e:	9f af       	std	Y+63, r25	; 0x3f
    2e30:	8e af       	std	Y+62, r24	; 0x3e
    2e32:	23 96       	adiw	r28, 0x03	; 3
    2e34:	9f ad       	ldd	r25, Y+63	; 0x3f
    2e36:	23 97       	sbiw	r28, 0x03	; 3
    2e38:	91 50       	subi	r25, 0x01	; 1
    2e3a:	23 96       	adiw	r28, 0x03	; 3
    2e3c:	9f af       	std	Y+63, r25	; 0x3f
    2e3e:	23 97       	sbiw	r28, 0x03	; 3
    2e40:	23 96       	adiw	r28, 0x03	; 3
    2e42:	ef ad       	ldd	r30, Y+63	; 0x3f
    2e44:	23 97       	sbiw	r28, 0x03	; 3
    2e46:	ee 23       	and	r30, r30
    2e48:	f1 f6       	brne	.-68     	; 0x2e06 <CLCD_voidMyNameSin+0x72>
                              0b00000000,
                              0b00000000,
                              0b00000101,
                              0b00000001,
                              0b00011111,
                              0b00000000,0};
    2e4a:	ce 01       	movw	r24, r28
    2e4c:	81 96       	adiw	r24, 0x21	; 33
    2e4e:	25 96       	adiw	r28, 0x05	; 5
    2e50:	9f af       	std	Y+63, r25	; 0x3f
    2e52:	8e af       	std	Y+62, r24	; 0x3e
    2e54:	25 97       	sbiw	r28, 0x05	; 5
    2e56:	e1 e6       	ldi	r30, 0x61	; 97
    2e58:	f1 e0       	ldi	r31, 0x01	; 1
    2e5a:	27 96       	adiw	r28, 0x07	; 7
    2e5c:	ff af       	std	Y+63, r31	; 0x3f
    2e5e:	ee af       	std	Y+62, r30	; 0x3e
    2e60:	27 97       	sbiw	r28, 0x07	; 7
    2e62:	f8 e0       	ldi	r31, 0x08	; 8
    2e64:	28 96       	adiw	r28, 0x08	; 8
    2e66:	ff af       	std	Y+63, r31	; 0x3f
    2e68:	28 97       	sbiw	r28, 0x08	; 8
    2e6a:	27 96       	adiw	r28, 0x07	; 7
    2e6c:	ee ad       	ldd	r30, Y+62	; 0x3e
    2e6e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2e70:	27 97       	sbiw	r28, 0x07	; 7
    2e72:	00 80       	ld	r0, Z
    2e74:	27 96       	adiw	r28, 0x07	; 7
    2e76:	8e ad       	ldd	r24, Y+62	; 0x3e
    2e78:	9f ad       	ldd	r25, Y+63	; 0x3f
    2e7a:	27 97       	sbiw	r28, 0x07	; 7
    2e7c:	01 96       	adiw	r24, 0x01	; 1
    2e7e:	27 96       	adiw	r28, 0x07	; 7
    2e80:	9f af       	std	Y+63, r25	; 0x3f
    2e82:	8e af       	std	Y+62, r24	; 0x3e
    2e84:	27 97       	sbiw	r28, 0x07	; 7
    2e86:	25 96       	adiw	r28, 0x05	; 5
    2e88:	ee ad       	ldd	r30, Y+62	; 0x3e
    2e8a:	ff ad       	ldd	r31, Y+63	; 0x3f
    2e8c:	25 97       	sbiw	r28, 0x05	; 5
    2e8e:	00 82       	st	Z, r0
    2e90:	25 96       	adiw	r28, 0x05	; 5
    2e92:	8e ad       	ldd	r24, Y+62	; 0x3e
    2e94:	9f ad       	ldd	r25, Y+63	; 0x3f
    2e96:	25 97       	sbiw	r28, 0x05	; 5
    2e98:	01 96       	adiw	r24, 0x01	; 1
    2e9a:	25 96       	adiw	r28, 0x05	; 5
    2e9c:	9f af       	std	Y+63, r25	; 0x3f
    2e9e:	8e af       	std	Y+62, r24	; 0x3e
    2ea0:	25 97       	sbiw	r28, 0x05	; 5
    2ea2:	28 96       	adiw	r28, 0x08	; 8
    2ea4:	9f ad       	ldd	r25, Y+63	; 0x3f
    2ea6:	28 97       	sbiw	r28, 0x08	; 8
    2ea8:	91 50       	subi	r25, 0x01	; 1
    2eaa:	28 96       	adiw	r28, 0x08	; 8
    2eac:	9f af       	std	Y+63, r25	; 0x3f
    2eae:	28 97       	sbiw	r28, 0x08	; 8
    2eb0:	28 96       	adiw	r28, 0x08	; 8
    2eb2:	ef ad       	ldd	r30, Y+63	; 0x3f
    2eb4:	28 97       	sbiw	r28, 0x08	; 8
    2eb6:	ee 23       	and	r30, r30
    2eb8:	c1 f6       	brne	.-80     	; 0x2e6a <CLCD_voidMyNameSin+0xd6>
                              0b00000000,
                              0b00000001,
                              0b00000001,
                              0b00011111,
                              0b00000000,
                              0b00001010,0};
    2eba:	ce 01       	movw	r24, r28
    2ebc:	89 96       	adiw	r24, 0x29	; 41
    2ebe:	2a 96       	adiw	r28, 0x0a	; 10
    2ec0:	9f af       	std	Y+63, r25	; 0x3f
    2ec2:	8e af       	std	Y+62, r24	; 0x3e
    2ec4:	2a 97       	sbiw	r28, 0x0a	; 10
    2ec6:	e9 e5       	ldi	r30, 0x59	; 89
    2ec8:	f1 e0       	ldi	r31, 0x01	; 1
    2eca:	2c 96       	adiw	r28, 0x0c	; 12
    2ecc:	ff af       	std	Y+63, r31	; 0x3f
    2ece:	ee af       	std	Y+62, r30	; 0x3e
    2ed0:	2c 97       	sbiw	r28, 0x0c	; 12
    2ed2:	f8 e0       	ldi	r31, 0x08	; 8
    2ed4:	2d 96       	adiw	r28, 0x0d	; 13
    2ed6:	ff af       	std	Y+63, r31	; 0x3f
    2ed8:	2d 97       	sbiw	r28, 0x0d	; 13
    2eda:	2c 96       	adiw	r28, 0x0c	; 12
    2edc:	ee ad       	ldd	r30, Y+62	; 0x3e
    2ede:	ff ad       	ldd	r31, Y+63	; 0x3f
    2ee0:	2c 97       	sbiw	r28, 0x0c	; 12
    2ee2:	00 80       	ld	r0, Z
    2ee4:	2c 96       	adiw	r28, 0x0c	; 12
    2ee6:	8e ad       	ldd	r24, Y+62	; 0x3e
    2ee8:	9f ad       	ldd	r25, Y+63	; 0x3f
    2eea:	2c 97       	sbiw	r28, 0x0c	; 12
    2eec:	01 96       	adiw	r24, 0x01	; 1
    2eee:	2c 96       	adiw	r28, 0x0c	; 12
    2ef0:	9f af       	std	Y+63, r25	; 0x3f
    2ef2:	8e af       	std	Y+62, r24	; 0x3e
    2ef4:	2c 97       	sbiw	r28, 0x0c	; 12
    2ef6:	2a 96       	adiw	r28, 0x0a	; 10
    2ef8:	ee ad       	ldd	r30, Y+62	; 0x3e
    2efa:	ff ad       	ldd	r31, Y+63	; 0x3f
    2efc:	2a 97       	sbiw	r28, 0x0a	; 10
    2efe:	00 82       	st	Z, r0
    2f00:	2a 96       	adiw	r28, 0x0a	; 10
    2f02:	8e ad       	ldd	r24, Y+62	; 0x3e
    2f04:	9f ad       	ldd	r25, Y+63	; 0x3f
    2f06:	2a 97       	sbiw	r28, 0x0a	; 10
    2f08:	01 96       	adiw	r24, 0x01	; 1
    2f0a:	2a 96       	adiw	r28, 0x0a	; 10
    2f0c:	9f af       	std	Y+63, r25	; 0x3f
    2f0e:	8e af       	std	Y+62, r24	; 0x3e
    2f10:	2a 97       	sbiw	r28, 0x0a	; 10
    2f12:	2d 96       	adiw	r28, 0x0d	; 13
    2f14:	9f ad       	ldd	r25, Y+63	; 0x3f
    2f16:	2d 97       	sbiw	r28, 0x0d	; 13
    2f18:	91 50       	subi	r25, 0x01	; 1
    2f1a:	2d 96       	adiw	r28, 0x0d	; 13
    2f1c:	9f af       	std	Y+63, r25	; 0x3f
    2f1e:	2d 97       	sbiw	r28, 0x0d	; 13
    2f20:	2d 96       	adiw	r28, 0x0d	; 13
    2f22:	ef ad       	ldd	r30, Y+63	; 0x3f
    2f24:	2d 97       	sbiw	r28, 0x0d	; 13
    2f26:	ee 23       	and	r30, r30
    2f28:	c1 f6       	brne	.-80     	; 0x2eda <CLCD_voidMyNameSin+0x146>
                              0b00001111,
                              0b00001001,
                              0b00001111,
                              0b00000001,
                              0b00000000,0
                              };
    2f2a:	ce 01       	movw	r24, r28
    2f2c:	c1 96       	adiw	r24, 0x31	; 49
    2f2e:	2f 96       	adiw	r28, 0x0f	; 15
    2f30:	9f af       	std	Y+63, r25	; 0x3f
    2f32:	8e af       	std	Y+62, r24	; 0x3e
    2f34:	2f 97       	sbiw	r28, 0x0f	; 15
    2f36:	e1 e5       	ldi	r30, 0x51	; 81
    2f38:	f1 e0       	ldi	r31, 0x01	; 1
    2f3a:	61 96       	adiw	r28, 0x11	; 17
    2f3c:	ff af       	std	Y+63, r31	; 0x3f
    2f3e:	ee af       	std	Y+62, r30	; 0x3e
    2f40:	61 97       	sbiw	r28, 0x11	; 17
    2f42:	f8 e0       	ldi	r31, 0x08	; 8
    2f44:	62 96       	adiw	r28, 0x12	; 18
    2f46:	ff af       	std	Y+63, r31	; 0x3f
    2f48:	62 97       	sbiw	r28, 0x12	; 18
    2f4a:	61 96       	adiw	r28, 0x11	; 17
    2f4c:	ee ad       	ldd	r30, Y+62	; 0x3e
    2f4e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2f50:	61 97       	sbiw	r28, 0x11	; 17
    2f52:	00 80       	ld	r0, Z
    2f54:	61 96       	adiw	r28, 0x11	; 17
    2f56:	8e ad       	ldd	r24, Y+62	; 0x3e
    2f58:	9f ad       	ldd	r25, Y+63	; 0x3f
    2f5a:	61 97       	sbiw	r28, 0x11	; 17
    2f5c:	01 96       	adiw	r24, 0x01	; 1
    2f5e:	61 96       	adiw	r28, 0x11	; 17
    2f60:	9f af       	std	Y+63, r25	; 0x3f
    2f62:	8e af       	std	Y+62, r24	; 0x3e
    2f64:	61 97       	sbiw	r28, 0x11	; 17
    2f66:	2f 96       	adiw	r28, 0x0f	; 15
    2f68:	ee ad       	ldd	r30, Y+62	; 0x3e
    2f6a:	ff ad       	ldd	r31, Y+63	; 0x3f
    2f6c:	2f 97       	sbiw	r28, 0x0f	; 15
    2f6e:	00 82       	st	Z, r0
    2f70:	2f 96       	adiw	r28, 0x0f	; 15
    2f72:	8e ad       	ldd	r24, Y+62	; 0x3e
    2f74:	9f ad       	ldd	r25, Y+63	; 0x3f
    2f76:	2f 97       	sbiw	r28, 0x0f	; 15
    2f78:	01 96       	adiw	r24, 0x01	; 1
    2f7a:	2f 96       	adiw	r28, 0x0f	; 15
    2f7c:	9f af       	std	Y+63, r25	; 0x3f
    2f7e:	8e af       	std	Y+62, r24	; 0x3e
    2f80:	2f 97       	sbiw	r28, 0x0f	; 15
    2f82:	62 96       	adiw	r28, 0x12	; 18
    2f84:	9f ad       	ldd	r25, Y+63	; 0x3f
    2f86:	62 97       	sbiw	r28, 0x12	; 18
    2f88:	91 50       	subi	r25, 0x01	; 1
    2f8a:	62 96       	adiw	r28, 0x12	; 18
    2f8c:	9f af       	std	Y+63, r25	; 0x3f
    2f8e:	62 97       	sbiw	r28, 0x12	; 18
    2f90:	62 96       	adiw	r28, 0x12	; 18
    2f92:	ef ad       	ldd	r30, Y+63	; 0x3f
    2f94:	62 97       	sbiw	r28, 0x12	; 18
    2f96:	ee 23       	and	r30, r30
    2f98:	c1 f6       	brne	.-80     	; 0x2f4a <CLCD_voidMyNameSin+0x1b6>
   // sint8 j;
    for(uint8 i=15,j=0; (i>0 && j<2) ;i--,j++)
    2f9a:	8f e0       	ldi	r24, 0x0F	; 15
    2f9c:	88 8b       	std	Y+16, r24	; 0x10
    2f9e:	1f 86       	std	Y+15, r1	; 0x0f
    2fa0:	bc c0       	rjmp	.+376    	; 0x311a <CLCD_voidMyNameSin+0x386>
    {
	CLCD_u8SpecialCharacter(0,Local_u81letter,i--,j);
    2fa2:	98 89       	ldd	r25, Y+16	; 0x10
    2fa4:	88 89       	ldd	r24, Y+16	; 0x10
    2fa6:	81 50       	subi	r24, 0x01	; 1
    2fa8:	88 8b       	std	Y+16, r24	; 0x10
    2faa:	9e 01       	movw	r18, r28
    2fac:	2f 5e       	subi	r18, 0xEF	; 239
    2fae:	3f 4f       	sbci	r19, 0xFF	; 255
    2fb0:	80 e0       	ldi	r24, 0x00	; 0
    2fb2:	b9 01       	movw	r22, r18
    2fb4:	49 2f       	mov	r20, r25
    2fb6:	2f 85       	ldd	r18, Y+15	; 0x0f
    2fb8:	0e 94 09 08 	call	0x1012	; 0x1012 <CLCD_u8SpecialCharacter>
	CLCD_u8SpecialCharacter(1,Local_u82letter,i--,j);
    2fbc:	98 89       	ldd	r25, Y+16	; 0x10
    2fbe:	88 89       	ldd	r24, Y+16	; 0x10
    2fc0:	81 50       	subi	r24, 0x01	; 1
    2fc2:	88 8b       	std	Y+16, r24	; 0x10
    2fc4:	9e 01       	movw	r18, r28
    2fc6:	27 5e       	subi	r18, 0xE7	; 231
    2fc8:	3f 4f       	sbci	r19, 0xFF	; 255
    2fca:	81 e0       	ldi	r24, 0x01	; 1
    2fcc:	b9 01       	movw	r22, r18
    2fce:	49 2f       	mov	r20, r25
    2fd0:	2f 85       	ldd	r18, Y+15	; 0x0f
    2fd2:	0e 94 09 08 	call	0x1012	; 0x1012 <CLCD_u8SpecialCharacter>
	CLCD_u8SpecialCharacter(2,Local_u83letter,i--,j);
    2fd6:	98 89       	ldd	r25, Y+16	; 0x10
    2fd8:	88 89       	ldd	r24, Y+16	; 0x10
    2fda:	81 50       	subi	r24, 0x01	; 1
    2fdc:	88 8b       	std	Y+16, r24	; 0x10
    2fde:	9e 01       	movw	r18, r28
    2fe0:	2f 5d       	subi	r18, 0xDF	; 223
    2fe2:	3f 4f       	sbci	r19, 0xFF	; 255
    2fe4:	82 e0       	ldi	r24, 0x02	; 2
    2fe6:	b9 01       	movw	r22, r18
    2fe8:	49 2f       	mov	r20, r25
    2fea:	2f 85       	ldd	r18, Y+15	; 0x0f
    2fec:	0e 94 09 08 	call	0x1012	; 0x1012 <CLCD_u8SpecialCharacter>
	CLCD_u8SpecialCharacter(3,Local_u84letter,i--,j);
    2ff0:	98 89       	ldd	r25, Y+16	; 0x10
    2ff2:	88 89       	ldd	r24, Y+16	; 0x10
    2ff4:	81 50       	subi	r24, 0x01	; 1
    2ff6:	88 8b       	std	Y+16, r24	; 0x10
    2ff8:	9e 01       	movw	r18, r28
    2ffa:	27 5d       	subi	r18, 0xD7	; 215
    2ffc:	3f 4f       	sbci	r19, 0xFF	; 255
    2ffe:	83 e0       	ldi	r24, 0x03	; 3
    3000:	b9 01       	movw	r22, r18
    3002:	49 2f       	mov	r20, r25
    3004:	2f 85       	ldd	r18, Y+15	; 0x0f
    3006:	0e 94 09 08 	call	0x1012	; 0x1012 <CLCD_u8SpecialCharacter>
	CLCD_u8SpecialCharacter(4,Local_u85letter,i,j);
    300a:	9e 01       	movw	r18, r28
    300c:	2f 5c       	subi	r18, 0xCF	; 207
    300e:	3f 4f       	sbci	r19, 0xFF	; 255
    3010:	84 e0       	ldi	r24, 0x04	; 4
    3012:	b9 01       	movw	r22, r18
    3014:	48 89       	ldd	r20, Y+16	; 0x10
    3016:	2f 85       	ldd	r18, Y+15	; 0x0f
    3018:	0e 94 09 08 	call	0x1012	; 0x1012 <CLCD_u8SpecialCharacter>
    301c:	80 e0       	ldi	r24, 0x00	; 0
    301e:	90 e0       	ldi	r25, 0x00	; 0
    3020:	a0 ea       	ldi	r26, 0xA0	; 160
    3022:	b2 e4       	ldi	r27, 0x42	; 66
    3024:	8b 87       	std	Y+11, r24	; 0x0b
    3026:	9c 87       	std	Y+12, r25	; 0x0c
    3028:	ad 87       	std	Y+13, r26	; 0x0d
    302a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    302c:	6b 85       	ldd	r22, Y+11	; 0x0b
    302e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3030:	8d 85       	ldd	r24, Y+13	; 0x0d
    3032:	9e 85       	ldd	r25, Y+14	; 0x0e
    3034:	20 e0       	ldi	r18, 0x00	; 0
    3036:	30 e0       	ldi	r19, 0x00	; 0
    3038:	4a e7       	ldi	r20, 0x7A	; 122
    303a:	55 e4       	ldi	r21, 0x45	; 69
    303c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3040:	dc 01       	movw	r26, r24
    3042:	cb 01       	movw	r24, r22
    3044:	8f 83       	std	Y+7, r24	; 0x07
    3046:	98 87       	std	Y+8, r25	; 0x08
    3048:	a9 87       	std	Y+9, r26	; 0x09
    304a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    304c:	6f 81       	ldd	r22, Y+7	; 0x07
    304e:	78 85       	ldd	r23, Y+8	; 0x08
    3050:	89 85       	ldd	r24, Y+9	; 0x09
    3052:	9a 85       	ldd	r25, Y+10	; 0x0a
    3054:	20 e0       	ldi	r18, 0x00	; 0
    3056:	30 e0       	ldi	r19, 0x00	; 0
    3058:	40 e8       	ldi	r20, 0x80	; 128
    305a:	5f e3       	ldi	r21, 0x3F	; 63
    305c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3060:	88 23       	and	r24, r24
    3062:	2c f4       	brge	.+10     	; 0x306e <CLCD_voidMyNameSin+0x2da>
		__ticks = 1;
    3064:	81 e0       	ldi	r24, 0x01	; 1
    3066:	90 e0       	ldi	r25, 0x00	; 0
    3068:	9e 83       	std	Y+6, r25	; 0x06
    306a:	8d 83       	std	Y+5, r24	; 0x05
    306c:	3f c0       	rjmp	.+126    	; 0x30ec <CLCD_voidMyNameSin+0x358>
	else if (__tmp > 65535)
    306e:	6f 81       	ldd	r22, Y+7	; 0x07
    3070:	78 85       	ldd	r23, Y+8	; 0x08
    3072:	89 85       	ldd	r24, Y+9	; 0x09
    3074:	9a 85       	ldd	r25, Y+10	; 0x0a
    3076:	20 e0       	ldi	r18, 0x00	; 0
    3078:	3f ef       	ldi	r19, 0xFF	; 255
    307a:	4f e7       	ldi	r20, 0x7F	; 127
    307c:	57 e4       	ldi	r21, 0x47	; 71
    307e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3082:	18 16       	cp	r1, r24
    3084:	4c f5       	brge	.+82     	; 0x30d8 <CLCD_voidMyNameSin+0x344>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3086:	6b 85       	ldd	r22, Y+11	; 0x0b
    3088:	7c 85       	ldd	r23, Y+12	; 0x0c
    308a:	8d 85       	ldd	r24, Y+13	; 0x0d
    308c:	9e 85       	ldd	r25, Y+14	; 0x0e
    308e:	20 e0       	ldi	r18, 0x00	; 0
    3090:	30 e0       	ldi	r19, 0x00	; 0
    3092:	40 e2       	ldi	r20, 0x20	; 32
    3094:	51 e4       	ldi	r21, 0x41	; 65
    3096:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    309a:	dc 01       	movw	r26, r24
    309c:	cb 01       	movw	r24, r22
    309e:	bc 01       	movw	r22, r24
    30a0:	cd 01       	movw	r24, r26
    30a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    30a6:	dc 01       	movw	r26, r24
    30a8:	cb 01       	movw	r24, r22
    30aa:	9e 83       	std	Y+6, r25	; 0x06
    30ac:	8d 83       	std	Y+5, r24	; 0x05
    30ae:	0f c0       	rjmp	.+30     	; 0x30ce <CLCD_voidMyNameSin+0x33a>
    30b0:	80 e9       	ldi	r24, 0x90	; 144
    30b2:	91 e0       	ldi	r25, 0x01	; 1
    30b4:	9c 83       	std	Y+4, r25	; 0x04
    30b6:	8b 83       	std	Y+3, r24	; 0x03
    30b8:	8b 81       	ldd	r24, Y+3	; 0x03
    30ba:	9c 81       	ldd	r25, Y+4	; 0x04
    30bc:	01 97       	sbiw	r24, 0x01	; 1
    30be:	f1 f7       	brne	.-4      	; 0x30bc <CLCD_voidMyNameSin+0x328>
    30c0:	9c 83       	std	Y+4, r25	; 0x04
    30c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30c4:	8d 81       	ldd	r24, Y+5	; 0x05
    30c6:	9e 81       	ldd	r25, Y+6	; 0x06
    30c8:	01 97       	sbiw	r24, 0x01	; 1
    30ca:	9e 83       	std	Y+6, r25	; 0x06
    30cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30ce:	8d 81       	ldd	r24, Y+5	; 0x05
    30d0:	9e 81       	ldd	r25, Y+6	; 0x06
    30d2:	00 97       	sbiw	r24, 0x00	; 0
    30d4:	69 f7       	brne	.-38     	; 0x30b0 <CLCD_voidMyNameSin+0x31c>
    30d6:	14 c0       	rjmp	.+40     	; 0x3100 <CLCD_voidMyNameSin+0x36c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30d8:	6f 81       	ldd	r22, Y+7	; 0x07
    30da:	78 85       	ldd	r23, Y+8	; 0x08
    30dc:	89 85       	ldd	r24, Y+9	; 0x09
    30de:	9a 85       	ldd	r25, Y+10	; 0x0a
    30e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    30e4:	dc 01       	movw	r26, r24
    30e6:	cb 01       	movw	r24, r22
    30e8:	9e 83       	std	Y+6, r25	; 0x06
    30ea:	8d 83       	std	Y+5, r24	; 0x05
    30ec:	8d 81       	ldd	r24, Y+5	; 0x05
    30ee:	9e 81       	ldd	r25, Y+6	; 0x06
    30f0:	9a 83       	std	Y+2, r25	; 0x02
    30f2:	89 83       	std	Y+1, r24	; 0x01
    30f4:	89 81       	ldd	r24, Y+1	; 0x01
    30f6:	9a 81       	ldd	r25, Y+2	; 0x02
    30f8:	01 97       	sbiw	r24, 0x01	; 1
    30fa:	f1 f7       	brne	.-4      	; 0x30f8 <CLCD_voidMyNameSin+0x364>
    30fc:	9a 83       	std	Y+2, r25	; 0x02
    30fe:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(80);
	CLCD_voidClear();
    3100:	0e 94 55 08 	call	0x10aa	; 0x10aa <CLCD_voidClear>
	if(j==1)
    3104:	8f 85       	ldd	r24, Y+15	; 0x0f
    3106:	81 30       	cpi	r24, 0x01	; 1
    3108:	11 f4       	brne	.+4      	; 0x310e <CLCD_voidMyNameSin+0x37a>
	{
		j=-1;
    310a:	8f ef       	ldi	r24, 0xFF	; 255
    310c:	8f 87       	std	Y+15, r24	; 0x0f
                              0b00001111,
                              0b00000001,
                              0b00000000,0
                              };
   // sint8 j;
    for(uint8 i=15,j=0; (i>0 && j<2) ;i--,j++)
    310e:	88 89       	ldd	r24, Y+16	; 0x10
    3110:	81 50       	subi	r24, 0x01	; 1
    3112:	88 8b       	std	Y+16, r24	; 0x10
    3114:	8f 85       	ldd	r24, Y+15	; 0x0f
    3116:	8f 5f       	subi	r24, 0xFF	; 255
    3118:	8f 87       	std	Y+15, r24	; 0x0f
    311a:	88 89       	ldd	r24, Y+16	; 0x10
    311c:	88 23       	and	r24, r24
    311e:	21 f0       	breq	.+8      	; 0x3128 <CLCD_voidMyNameSin+0x394>
    3120:	8f 85       	ldd	r24, Y+15	; 0x0f
    3122:	82 30       	cpi	r24, 0x02	; 2
    3124:	08 f4       	brcc	.+2      	; 0x3128 <CLCD_voidMyNameSin+0x394>
    3126:	3d cf       	rjmp	.-390    	; 0x2fa2 <CLCD_voidMyNameSin+0x20e>
	}
    }



}
    3128:	cf 5a       	subi	r28, 0xAF	; 175
    312a:	df 4f       	sbci	r29, 0xFF	; 255
    312c:	0f b6       	in	r0, 0x3f	; 63
    312e:	f8 94       	cli
    3130:	de bf       	out	0x3e, r29	; 62
    3132:	0f be       	out	0x3f, r0	; 63
    3134:	cd bf       	out	0x3d, r28	; 61
    3136:	cf 91       	pop	r28
    3138:	df 91       	pop	r29
    313a:	08 95       	ret

0000313c <DcMotor_CW>:
#include "DIO_interface.h"
#include "DCMotor_interface.h"
#include "DCMotor_cfg.h"

void DcMotor_CW()
{
    313c:	df 93       	push	r29
    313e:	cf 93       	push	r28
    3140:	cd b7       	in	r28, 0x3d	; 61
    3142:	de b7       	in	r29, 0x3e	; 62

	//DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN1,DIO_u8PIN_LOW);
	//DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN0,DIO_u8PIN_HIGH);
	DIO_u8SetPinValue(DC_Motor_Port,DC_Motor_Pin2,DIO_u8PIN_LOW);
    3144:	82 e0       	ldi	r24, 0x02	; 2
    3146:	64 e0       	ldi	r22, 0x04	; 4
    3148:	40 e0       	ldi	r20, 0x00	; 0
    314a:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DC_Motor_Port,DC_Motor_Pin1,DIO_u8PIN_HIGH);
    314e:	82 e0       	ldi	r24, 0x02	; 2
    3150:	63 e0       	ldi	r22, 0x03	; 3
    3152:	41 e0       	ldi	r20, 0x01	; 1
    3154:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <DIO_u8SetPinValue>

}
    3158:	cf 91       	pop	r28
    315a:	df 91       	pop	r29
    315c:	08 95       	ret

0000315e <DcMotor_CCW>:
void DcMotor_CCW()
{
    315e:	df 93       	push	r29
    3160:	cf 93       	push	r28
    3162:	cd b7       	in	r28, 0x3d	; 61
    3164:	de b7       	in	r29, 0x3e	; 62
	//DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN0,DIO_u8PIN_LOW);
	//DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN1,DIO_u8PIN_HIGH);
	DIO_u8SetPinValue(DC_Motor_Port,DC_Motor_Pin1,DIO_u8PIN_LOW);
    3166:	82 e0       	ldi	r24, 0x02	; 2
    3168:	63 e0       	ldi	r22, 0x03	; 3
    316a:	40 e0       	ldi	r20, 0x00	; 0
    316c:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DC_Motor_Port,DC_Motor_Pin2,DIO_u8PIN_HIGH);
    3170:	82 e0       	ldi	r24, 0x02	; 2
    3172:	64 e0       	ldi	r22, 0x04	; 4
    3174:	41 e0       	ldi	r20, 0x01	; 1
    3176:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <DIO_u8SetPinValue>
}
    317a:	cf 91       	pop	r28
    317c:	df 91       	pop	r29
    317e:	08 95       	ret

00003180 <DcMotor_Stop>:
void DcMotor_Stop()
{
    3180:	df 93       	push	r29
    3182:	cf 93       	push	r28
    3184:	cd b7       	in	r28, 0x3d	; 61
    3186:	de b7       	in	r29, 0x3e	; 62
	//DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN0,DIO_u8PIN_LOW);
	//DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN1,DIO_u8PIN_LOW);

	//RELAY
	DIO_u8SetPinValue(DC_Motor_Port,DC_Motor_Pin1,DIO_u8PIN_LOW);
    3188:	82 e0       	ldi	r24, 0x02	; 2
    318a:	63 e0       	ldi	r22, 0x03	; 3
    318c:	40 e0       	ldi	r20, 0x00	; 0
    318e:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DC_Motor_Port,DC_Motor_Pin2,DIO_u8PIN_LOW);
    3192:	82 e0       	ldi	r24, 0x02	; 2
    3194:	64 e0       	ldi	r22, 0x04	; 4
    3196:	40 e0       	ldi	r20, 0x00	; 0
    3198:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <DIO_u8SetPinValue>
}
    319c:	cf 91       	pop	r28
    319e:	df 91       	pop	r29
    31a0:	08 95       	ret

000031a2 <DIO_u8SetPinDirection>:
#include"DIO_interface.h"
#include"DIO_prv.h"
#include"DIO_cfg.h"
#include"DIO_reg.h"
uint8 DIO_u8SetPinDirection (uint8 Copy_u8Port,uint8 Copy_u8Pin,uint8 Copy_u8Direction )
{
    31a2:	df 93       	push	r29
    31a4:	cf 93       	push	r28
    31a6:	cd b7       	in	r28, 0x3d	; 61
    31a8:	de b7       	in	r29, 0x3e	; 62
    31aa:	28 97       	sbiw	r28, 0x08	; 8
    31ac:	0f b6       	in	r0, 0x3f	; 63
    31ae:	f8 94       	cli
    31b0:	de bf       	out	0x3e, r29	; 62
    31b2:	0f be       	out	0x3f, r0	; 63
    31b4:	cd bf       	out	0x3d, r28	; 61
    31b6:	8a 83       	std	Y+2, r24	; 0x02
    31b8:	6b 83       	std	Y+3, r22	; 0x03
    31ba:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState=OK;
    31bc:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=DIO_u8PIN7)
    31be:	8b 81       	ldd	r24, Y+3	; 0x03
    31c0:	88 30       	cpi	r24, 0x08	; 8
    31c2:	08 f0       	brcs	.+2      	; 0x31c6 <DIO_u8SetPinDirection+0x24>
    31c4:	f4 c0       	rjmp	.+488    	; 0x33ae <DIO_u8SetPinDirection+0x20c>
	{
	if(Copy_u8Direction==DIO_u8PIN_INPUT)
    31c6:	8c 81       	ldd	r24, Y+4	; 0x04
    31c8:	88 23       	and	r24, r24
    31ca:	09 f0       	breq	.+2      	; 0x31ce <DIO_u8SetPinDirection+0x2c>
    31cc:	77 c0       	rjmp	.+238    	; 0x32bc <DIO_u8SetPinDirection+0x11a>
	{
		switch(Copy_u8Port){
    31ce:	8a 81       	ldd	r24, Y+2	; 0x02
    31d0:	28 2f       	mov	r18, r24
    31d2:	30 e0       	ldi	r19, 0x00	; 0
    31d4:	38 87       	std	Y+8, r19	; 0x08
    31d6:	2f 83       	std	Y+7, r18	; 0x07
    31d8:	8f 81       	ldd	r24, Y+7	; 0x07
    31da:	98 85       	ldd	r25, Y+8	; 0x08
    31dc:	81 30       	cpi	r24, 0x01	; 1
    31de:	91 05       	cpc	r25, r1
    31e0:	59 f1       	breq	.+86     	; 0x3238 <DIO_u8SetPinDirection+0x96>
    31e2:	2f 81       	ldd	r18, Y+7	; 0x07
    31e4:	38 85       	ldd	r19, Y+8	; 0x08
    31e6:	22 30       	cpi	r18, 0x02	; 2
    31e8:	31 05       	cpc	r19, r1
    31ea:	2c f4       	brge	.+10     	; 0x31f6 <DIO_u8SetPinDirection+0x54>
    31ec:	8f 81       	ldd	r24, Y+7	; 0x07
    31ee:	98 85       	ldd	r25, Y+8	; 0x08
    31f0:	00 97       	sbiw	r24, 0x00	; 0
    31f2:	69 f0       	breq	.+26     	; 0x320e <DIO_u8SetPinDirection+0x6c>
    31f4:	60 c0       	rjmp	.+192    	; 0x32b6 <DIO_u8SetPinDirection+0x114>
    31f6:	2f 81       	ldd	r18, Y+7	; 0x07
    31f8:	38 85       	ldd	r19, Y+8	; 0x08
    31fa:	22 30       	cpi	r18, 0x02	; 2
    31fc:	31 05       	cpc	r19, r1
    31fe:	89 f1       	breq	.+98     	; 0x3262 <DIO_u8SetPinDirection+0xc0>
    3200:	8f 81       	ldd	r24, Y+7	; 0x07
    3202:	98 85       	ldd	r25, Y+8	; 0x08
    3204:	83 30       	cpi	r24, 0x03	; 3
    3206:	91 05       	cpc	r25, r1
    3208:	09 f4       	brne	.+2      	; 0x320c <DIO_u8SetPinDirection+0x6a>
    320a:	40 c0       	rjmp	.+128    	; 0x328c <DIO_u8SetPinDirection+0xea>
    320c:	54 c0       	rjmp	.+168    	; 0x32b6 <DIO_u8SetPinDirection+0x114>
		case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
    320e:	aa e3       	ldi	r26, 0x3A	; 58
    3210:	b0 e0       	ldi	r27, 0x00	; 0
    3212:	ea e3       	ldi	r30, 0x3A	; 58
    3214:	f0 e0       	ldi	r31, 0x00	; 0
    3216:	80 81       	ld	r24, Z
    3218:	48 2f       	mov	r20, r24
    321a:	8b 81       	ldd	r24, Y+3	; 0x03
    321c:	28 2f       	mov	r18, r24
    321e:	30 e0       	ldi	r19, 0x00	; 0
    3220:	81 e0       	ldi	r24, 0x01	; 1
    3222:	90 e0       	ldi	r25, 0x00	; 0
    3224:	02 2e       	mov	r0, r18
    3226:	02 c0       	rjmp	.+4      	; 0x322c <DIO_u8SetPinDirection+0x8a>
    3228:	88 0f       	add	r24, r24
    322a:	99 1f       	adc	r25, r25
    322c:	0a 94       	dec	r0
    322e:	e2 f7       	brpl	.-8      	; 0x3228 <DIO_u8SetPinDirection+0x86>
    3230:	80 95       	com	r24
    3232:	84 23       	and	r24, r20
    3234:	8c 93       	st	X, r24
    3236:	bd c0       	rjmp	.+378    	; 0x33b2 <DIO_u8SetPinDirection+0x210>
		case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
    3238:	a7 e3       	ldi	r26, 0x37	; 55
    323a:	b0 e0       	ldi	r27, 0x00	; 0
    323c:	e7 e3       	ldi	r30, 0x37	; 55
    323e:	f0 e0       	ldi	r31, 0x00	; 0
    3240:	80 81       	ld	r24, Z
    3242:	48 2f       	mov	r20, r24
    3244:	8b 81       	ldd	r24, Y+3	; 0x03
    3246:	28 2f       	mov	r18, r24
    3248:	30 e0       	ldi	r19, 0x00	; 0
    324a:	81 e0       	ldi	r24, 0x01	; 1
    324c:	90 e0       	ldi	r25, 0x00	; 0
    324e:	02 2e       	mov	r0, r18
    3250:	02 c0       	rjmp	.+4      	; 0x3256 <DIO_u8SetPinDirection+0xb4>
    3252:	88 0f       	add	r24, r24
    3254:	99 1f       	adc	r25, r25
    3256:	0a 94       	dec	r0
    3258:	e2 f7       	brpl	.-8      	; 0x3252 <DIO_u8SetPinDirection+0xb0>
    325a:	80 95       	com	r24
    325c:	84 23       	and	r24, r20
    325e:	8c 93       	st	X, r24
    3260:	a8 c0       	rjmp	.+336    	; 0x33b2 <DIO_u8SetPinDirection+0x210>
		case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); break;
    3262:	a4 e3       	ldi	r26, 0x34	; 52
    3264:	b0 e0       	ldi	r27, 0x00	; 0
    3266:	e4 e3       	ldi	r30, 0x34	; 52
    3268:	f0 e0       	ldi	r31, 0x00	; 0
    326a:	80 81       	ld	r24, Z
    326c:	48 2f       	mov	r20, r24
    326e:	8b 81       	ldd	r24, Y+3	; 0x03
    3270:	28 2f       	mov	r18, r24
    3272:	30 e0       	ldi	r19, 0x00	; 0
    3274:	81 e0       	ldi	r24, 0x01	; 1
    3276:	90 e0       	ldi	r25, 0x00	; 0
    3278:	02 2e       	mov	r0, r18
    327a:	02 c0       	rjmp	.+4      	; 0x3280 <DIO_u8SetPinDirection+0xde>
    327c:	88 0f       	add	r24, r24
    327e:	99 1f       	adc	r25, r25
    3280:	0a 94       	dec	r0
    3282:	e2 f7       	brpl	.-8      	; 0x327c <DIO_u8SetPinDirection+0xda>
    3284:	80 95       	com	r24
    3286:	84 23       	and	r24, r20
    3288:	8c 93       	st	X, r24
    328a:	93 c0       	rjmp	.+294    	; 0x33b2 <DIO_u8SetPinDirection+0x210>
		case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin); break;
    328c:	a1 e3       	ldi	r26, 0x31	; 49
    328e:	b0 e0       	ldi	r27, 0x00	; 0
    3290:	e1 e3       	ldi	r30, 0x31	; 49
    3292:	f0 e0       	ldi	r31, 0x00	; 0
    3294:	80 81       	ld	r24, Z
    3296:	48 2f       	mov	r20, r24
    3298:	8b 81       	ldd	r24, Y+3	; 0x03
    329a:	28 2f       	mov	r18, r24
    329c:	30 e0       	ldi	r19, 0x00	; 0
    329e:	81 e0       	ldi	r24, 0x01	; 1
    32a0:	90 e0       	ldi	r25, 0x00	; 0
    32a2:	02 2e       	mov	r0, r18
    32a4:	02 c0       	rjmp	.+4      	; 0x32aa <DIO_u8SetPinDirection+0x108>
    32a6:	88 0f       	add	r24, r24
    32a8:	99 1f       	adc	r25, r25
    32aa:	0a 94       	dec	r0
    32ac:	e2 f7       	brpl	.-8      	; 0x32a6 <DIO_u8SetPinDirection+0x104>
    32ae:	80 95       	com	r24
    32b0:	84 23       	and	r24, r20
    32b2:	8c 93       	st	X, r24
    32b4:	7e c0       	rjmp	.+252    	; 0x33b2 <DIO_u8SetPinDirection+0x210>
		default: Local_u8ErrorState=NOK;
    32b6:	81 e0       	ldi	r24, 0x01	; 1
    32b8:	89 83       	std	Y+1, r24	; 0x01
    32ba:	7b c0       	rjmp	.+246    	; 0x33b2 <DIO_u8SetPinDirection+0x210>
		}
	}
	else if(Copy_u8Direction==DIO_u8PIN_OUTPUT)
    32bc:	8c 81       	ldd	r24, Y+4	; 0x04
    32be:	81 30       	cpi	r24, 0x01	; 1
    32c0:	09 f0       	breq	.+2      	; 0x32c4 <DIO_u8SetPinDirection+0x122>
    32c2:	72 c0       	rjmp	.+228    	; 0x33a8 <DIO_u8SetPinDirection+0x206>
	{
		switch(Copy_u8Port){
    32c4:	8a 81       	ldd	r24, Y+2	; 0x02
    32c6:	28 2f       	mov	r18, r24
    32c8:	30 e0       	ldi	r19, 0x00	; 0
    32ca:	3e 83       	std	Y+6, r19	; 0x06
    32cc:	2d 83       	std	Y+5, r18	; 0x05
    32ce:	8d 81       	ldd	r24, Y+5	; 0x05
    32d0:	9e 81       	ldd	r25, Y+6	; 0x06
    32d2:	81 30       	cpi	r24, 0x01	; 1
    32d4:	91 05       	cpc	r25, r1
    32d6:	49 f1       	breq	.+82     	; 0x332a <DIO_u8SetPinDirection+0x188>
    32d8:	2d 81       	ldd	r18, Y+5	; 0x05
    32da:	3e 81       	ldd	r19, Y+6	; 0x06
    32dc:	22 30       	cpi	r18, 0x02	; 2
    32de:	31 05       	cpc	r19, r1
    32e0:	2c f4       	brge	.+10     	; 0x32ec <DIO_u8SetPinDirection+0x14a>
    32e2:	8d 81       	ldd	r24, Y+5	; 0x05
    32e4:	9e 81       	ldd	r25, Y+6	; 0x06
    32e6:	00 97       	sbiw	r24, 0x00	; 0
    32e8:	61 f0       	breq	.+24     	; 0x3302 <DIO_u8SetPinDirection+0x160>
    32ea:	5b c0       	rjmp	.+182    	; 0x33a2 <DIO_u8SetPinDirection+0x200>
    32ec:	2d 81       	ldd	r18, Y+5	; 0x05
    32ee:	3e 81       	ldd	r19, Y+6	; 0x06
    32f0:	22 30       	cpi	r18, 0x02	; 2
    32f2:	31 05       	cpc	r19, r1
    32f4:	71 f1       	breq	.+92     	; 0x3352 <DIO_u8SetPinDirection+0x1b0>
    32f6:	8d 81       	ldd	r24, Y+5	; 0x05
    32f8:	9e 81       	ldd	r25, Y+6	; 0x06
    32fa:	83 30       	cpi	r24, 0x03	; 3
    32fc:	91 05       	cpc	r25, r1
    32fe:	e9 f1       	breq	.+122    	; 0x337a <DIO_u8SetPinDirection+0x1d8>
    3300:	50 c0       	rjmp	.+160    	; 0x33a2 <DIO_u8SetPinDirection+0x200>
		case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
    3302:	aa e3       	ldi	r26, 0x3A	; 58
    3304:	b0 e0       	ldi	r27, 0x00	; 0
    3306:	ea e3       	ldi	r30, 0x3A	; 58
    3308:	f0 e0       	ldi	r31, 0x00	; 0
    330a:	80 81       	ld	r24, Z
    330c:	48 2f       	mov	r20, r24
    330e:	8b 81       	ldd	r24, Y+3	; 0x03
    3310:	28 2f       	mov	r18, r24
    3312:	30 e0       	ldi	r19, 0x00	; 0
    3314:	81 e0       	ldi	r24, 0x01	; 1
    3316:	90 e0       	ldi	r25, 0x00	; 0
    3318:	02 2e       	mov	r0, r18
    331a:	02 c0       	rjmp	.+4      	; 0x3320 <DIO_u8SetPinDirection+0x17e>
    331c:	88 0f       	add	r24, r24
    331e:	99 1f       	adc	r25, r25
    3320:	0a 94       	dec	r0
    3322:	e2 f7       	brpl	.-8      	; 0x331c <DIO_u8SetPinDirection+0x17a>
    3324:	84 2b       	or	r24, r20
    3326:	8c 93       	st	X, r24
    3328:	44 c0       	rjmp	.+136    	; 0x33b2 <DIO_u8SetPinDirection+0x210>
		case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
    332a:	a7 e3       	ldi	r26, 0x37	; 55
    332c:	b0 e0       	ldi	r27, 0x00	; 0
    332e:	e7 e3       	ldi	r30, 0x37	; 55
    3330:	f0 e0       	ldi	r31, 0x00	; 0
    3332:	80 81       	ld	r24, Z
    3334:	48 2f       	mov	r20, r24
    3336:	8b 81       	ldd	r24, Y+3	; 0x03
    3338:	28 2f       	mov	r18, r24
    333a:	30 e0       	ldi	r19, 0x00	; 0
    333c:	81 e0       	ldi	r24, 0x01	; 1
    333e:	90 e0       	ldi	r25, 0x00	; 0
    3340:	02 2e       	mov	r0, r18
    3342:	02 c0       	rjmp	.+4      	; 0x3348 <DIO_u8SetPinDirection+0x1a6>
    3344:	88 0f       	add	r24, r24
    3346:	99 1f       	adc	r25, r25
    3348:	0a 94       	dec	r0
    334a:	e2 f7       	brpl	.-8      	; 0x3344 <DIO_u8SetPinDirection+0x1a2>
    334c:	84 2b       	or	r24, r20
    334e:	8c 93       	st	X, r24
    3350:	30 c0       	rjmp	.+96     	; 0x33b2 <DIO_u8SetPinDirection+0x210>
		case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin); break;
    3352:	a4 e3       	ldi	r26, 0x34	; 52
    3354:	b0 e0       	ldi	r27, 0x00	; 0
    3356:	e4 e3       	ldi	r30, 0x34	; 52
    3358:	f0 e0       	ldi	r31, 0x00	; 0
    335a:	80 81       	ld	r24, Z
    335c:	48 2f       	mov	r20, r24
    335e:	8b 81       	ldd	r24, Y+3	; 0x03
    3360:	28 2f       	mov	r18, r24
    3362:	30 e0       	ldi	r19, 0x00	; 0
    3364:	81 e0       	ldi	r24, 0x01	; 1
    3366:	90 e0       	ldi	r25, 0x00	; 0
    3368:	02 2e       	mov	r0, r18
    336a:	02 c0       	rjmp	.+4      	; 0x3370 <DIO_u8SetPinDirection+0x1ce>
    336c:	88 0f       	add	r24, r24
    336e:	99 1f       	adc	r25, r25
    3370:	0a 94       	dec	r0
    3372:	e2 f7       	brpl	.-8      	; 0x336c <DIO_u8SetPinDirection+0x1ca>
    3374:	84 2b       	or	r24, r20
    3376:	8c 93       	st	X, r24
    3378:	1c c0       	rjmp	.+56     	; 0x33b2 <DIO_u8SetPinDirection+0x210>
		case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin); break;
    337a:	a1 e3       	ldi	r26, 0x31	; 49
    337c:	b0 e0       	ldi	r27, 0x00	; 0
    337e:	e1 e3       	ldi	r30, 0x31	; 49
    3380:	f0 e0       	ldi	r31, 0x00	; 0
    3382:	80 81       	ld	r24, Z
    3384:	48 2f       	mov	r20, r24
    3386:	8b 81       	ldd	r24, Y+3	; 0x03
    3388:	28 2f       	mov	r18, r24
    338a:	30 e0       	ldi	r19, 0x00	; 0
    338c:	81 e0       	ldi	r24, 0x01	; 1
    338e:	90 e0       	ldi	r25, 0x00	; 0
    3390:	02 2e       	mov	r0, r18
    3392:	02 c0       	rjmp	.+4      	; 0x3398 <DIO_u8SetPinDirection+0x1f6>
    3394:	88 0f       	add	r24, r24
    3396:	99 1f       	adc	r25, r25
    3398:	0a 94       	dec	r0
    339a:	e2 f7       	brpl	.-8      	; 0x3394 <DIO_u8SetPinDirection+0x1f2>
    339c:	84 2b       	or	r24, r20
    339e:	8c 93       	st	X, r24
    33a0:	08 c0       	rjmp	.+16     	; 0x33b2 <DIO_u8SetPinDirection+0x210>
		default: Local_u8ErrorState=NOK;
    33a2:	81 e0       	ldi	r24, 0x01	; 1
    33a4:	89 83       	std	Y+1, r24	; 0x01
    33a6:	05 c0       	rjmp	.+10     	; 0x33b2 <DIO_u8SetPinDirection+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=NOK;
    33a8:	81 e0       	ldi	r24, 0x01	; 1
    33aa:	89 83       	std	Y+1, r24	; 0x01
    33ac:	02 c0       	rjmp	.+4      	; 0x33b2 <DIO_u8SetPinDirection+0x210>
	}
	}
	else
	{
		//PIN NUMBER IS INVALID
		Local_u8ErrorState=NOK;
    33ae:	81 e0       	ldi	r24, 0x01	; 1
    33b0:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    33b2:	89 81       	ldd	r24, Y+1	; 0x01

}
    33b4:	28 96       	adiw	r28, 0x08	; 8
    33b6:	0f b6       	in	r0, 0x3f	; 63
    33b8:	f8 94       	cli
    33ba:	de bf       	out	0x3e, r29	; 62
    33bc:	0f be       	out	0x3f, r0	; 63
    33be:	cd bf       	out	0x3d, r28	; 61
    33c0:	cf 91       	pop	r28
    33c2:	df 91       	pop	r29
    33c4:	08 95       	ret

000033c6 <DIO_u8SetPinValue>:

uint8 DIO_u8SetPinValue (uint8 Copy_u8port,uint8 Copy_u8Pin,uint8 Copy_u8Value )
{
    33c6:	df 93       	push	r29
    33c8:	cf 93       	push	r28
    33ca:	cd b7       	in	r28, 0x3d	; 61
    33cc:	de b7       	in	r29, 0x3e	; 62
    33ce:	28 97       	sbiw	r28, 0x08	; 8
    33d0:	0f b6       	in	r0, 0x3f	; 63
    33d2:	f8 94       	cli
    33d4:	de bf       	out	0x3e, r29	; 62
    33d6:	0f be       	out	0x3f, r0	; 63
    33d8:	cd bf       	out	0x3d, r28	; 61
    33da:	8a 83       	std	Y+2, r24	; 0x02
    33dc:	6b 83       	std	Y+3, r22	; 0x03
    33de:	4c 83       	std	Y+4, r20	; 0x04
     uint8 Local_u8ErrorState=OK;
    33e0:	19 82       	std	Y+1, r1	; 0x01
    if(Copy_u8Value == DIO_u8PIN_LOW){
    33e2:	8c 81       	ldd	r24, Y+4	; 0x04
    33e4:	88 23       	and	r24, r24
    33e6:	09 f0       	breq	.+2      	; 0x33ea <DIO_u8SetPinValue+0x24>
    33e8:	77 c0       	rjmp	.+238    	; 0x34d8 <DIO_u8SetPinValue+0x112>
    	switch(Copy_u8port){
    33ea:	8a 81       	ldd	r24, Y+2	; 0x02
    33ec:	28 2f       	mov	r18, r24
    33ee:	30 e0       	ldi	r19, 0x00	; 0
    33f0:	38 87       	std	Y+8, r19	; 0x08
    33f2:	2f 83       	std	Y+7, r18	; 0x07
    33f4:	8f 81       	ldd	r24, Y+7	; 0x07
    33f6:	98 85       	ldd	r25, Y+8	; 0x08
    33f8:	81 30       	cpi	r24, 0x01	; 1
    33fa:	91 05       	cpc	r25, r1
    33fc:	59 f1       	breq	.+86     	; 0x3454 <DIO_u8SetPinValue+0x8e>
    33fe:	2f 81       	ldd	r18, Y+7	; 0x07
    3400:	38 85       	ldd	r19, Y+8	; 0x08
    3402:	22 30       	cpi	r18, 0x02	; 2
    3404:	31 05       	cpc	r19, r1
    3406:	2c f4       	brge	.+10     	; 0x3412 <DIO_u8SetPinValue+0x4c>
    3408:	8f 81       	ldd	r24, Y+7	; 0x07
    340a:	98 85       	ldd	r25, Y+8	; 0x08
    340c:	00 97       	sbiw	r24, 0x00	; 0
    340e:	69 f0       	breq	.+26     	; 0x342a <DIO_u8SetPinValue+0x64>
    3410:	60 c0       	rjmp	.+192    	; 0x34d2 <DIO_u8SetPinValue+0x10c>
    3412:	2f 81       	ldd	r18, Y+7	; 0x07
    3414:	38 85       	ldd	r19, Y+8	; 0x08
    3416:	22 30       	cpi	r18, 0x02	; 2
    3418:	31 05       	cpc	r19, r1
    341a:	89 f1       	breq	.+98     	; 0x347e <DIO_u8SetPinValue+0xb8>
    341c:	8f 81       	ldd	r24, Y+7	; 0x07
    341e:	98 85       	ldd	r25, Y+8	; 0x08
    3420:	83 30       	cpi	r24, 0x03	; 3
    3422:	91 05       	cpc	r25, r1
    3424:	09 f4       	brne	.+2      	; 0x3428 <DIO_u8SetPinValue+0x62>
    3426:	40 c0       	rjmp	.+128    	; 0x34a8 <DIO_u8SetPinValue+0xe2>
    3428:	54 c0       	rjmp	.+168    	; 0x34d2 <DIO_u8SetPinValue+0x10c>
    	        case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
    342a:	ab e3       	ldi	r26, 0x3B	; 59
    342c:	b0 e0       	ldi	r27, 0x00	; 0
    342e:	eb e3       	ldi	r30, 0x3B	; 59
    3430:	f0 e0       	ldi	r31, 0x00	; 0
    3432:	80 81       	ld	r24, Z
    3434:	48 2f       	mov	r20, r24
    3436:	8b 81       	ldd	r24, Y+3	; 0x03
    3438:	28 2f       	mov	r18, r24
    343a:	30 e0       	ldi	r19, 0x00	; 0
    343c:	81 e0       	ldi	r24, 0x01	; 1
    343e:	90 e0       	ldi	r25, 0x00	; 0
    3440:	02 2e       	mov	r0, r18
    3442:	02 c0       	rjmp	.+4      	; 0x3448 <DIO_u8SetPinValue+0x82>
    3444:	88 0f       	add	r24, r24
    3446:	99 1f       	adc	r25, r25
    3448:	0a 94       	dec	r0
    344a:	e2 f7       	brpl	.-8      	; 0x3444 <DIO_u8SetPinValue+0x7e>
    344c:	80 95       	com	r24
    344e:	84 23       	and	r24, r20
    3450:	8c 93       	st	X, r24
    3452:	ba c0       	rjmp	.+372    	; 0x35c8 <DIO_u8SetPinValue+0x202>
    			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
    3454:	a8 e3       	ldi	r26, 0x38	; 56
    3456:	b0 e0       	ldi	r27, 0x00	; 0
    3458:	e8 e3       	ldi	r30, 0x38	; 56
    345a:	f0 e0       	ldi	r31, 0x00	; 0
    345c:	80 81       	ld	r24, Z
    345e:	48 2f       	mov	r20, r24
    3460:	8b 81       	ldd	r24, Y+3	; 0x03
    3462:	28 2f       	mov	r18, r24
    3464:	30 e0       	ldi	r19, 0x00	; 0
    3466:	81 e0       	ldi	r24, 0x01	; 1
    3468:	90 e0       	ldi	r25, 0x00	; 0
    346a:	02 2e       	mov	r0, r18
    346c:	02 c0       	rjmp	.+4      	; 0x3472 <DIO_u8SetPinValue+0xac>
    346e:	88 0f       	add	r24, r24
    3470:	99 1f       	adc	r25, r25
    3472:	0a 94       	dec	r0
    3474:	e2 f7       	brpl	.-8      	; 0x346e <DIO_u8SetPinValue+0xa8>
    3476:	80 95       	com	r24
    3478:	84 23       	and	r24, r20
    347a:	8c 93       	st	X, r24
    347c:	a5 c0       	rjmp	.+330    	; 0x35c8 <DIO_u8SetPinValue+0x202>
    			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
    347e:	a5 e3       	ldi	r26, 0x35	; 53
    3480:	b0 e0       	ldi	r27, 0x00	; 0
    3482:	e5 e3       	ldi	r30, 0x35	; 53
    3484:	f0 e0       	ldi	r31, 0x00	; 0
    3486:	80 81       	ld	r24, Z
    3488:	48 2f       	mov	r20, r24
    348a:	8b 81       	ldd	r24, Y+3	; 0x03
    348c:	28 2f       	mov	r18, r24
    348e:	30 e0       	ldi	r19, 0x00	; 0
    3490:	81 e0       	ldi	r24, 0x01	; 1
    3492:	90 e0       	ldi	r25, 0x00	; 0
    3494:	02 2e       	mov	r0, r18
    3496:	02 c0       	rjmp	.+4      	; 0x349c <DIO_u8SetPinValue+0xd6>
    3498:	88 0f       	add	r24, r24
    349a:	99 1f       	adc	r25, r25
    349c:	0a 94       	dec	r0
    349e:	e2 f7       	brpl	.-8      	; 0x3498 <DIO_u8SetPinValue+0xd2>
    34a0:	80 95       	com	r24
    34a2:	84 23       	and	r24, r20
    34a4:	8c 93       	st	X, r24
    34a6:	90 c0       	rjmp	.+288    	; 0x35c8 <DIO_u8SetPinValue+0x202>
    			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
    34a8:	a2 e3       	ldi	r26, 0x32	; 50
    34aa:	b0 e0       	ldi	r27, 0x00	; 0
    34ac:	e2 e3       	ldi	r30, 0x32	; 50
    34ae:	f0 e0       	ldi	r31, 0x00	; 0
    34b0:	80 81       	ld	r24, Z
    34b2:	48 2f       	mov	r20, r24
    34b4:	8b 81       	ldd	r24, Y+3	; 0x03
    34b6:	28 2f       	mov	r18, r24
    34b8:	30 e0       	ldi	r19, 0x00	; 0
    34ba:	81 e0       	ldi	r24, 0x01	; 1
    34bc:	90 e0       	ldi	r25, 0x00	; 0
    34be:	02 2e       	mov	r0, r18
    34c0:	02 c0       	rjmp	.+4      	; 0x34c6 <DIO_u8SetPinValue+0x100>
    34c2:	88 0f       	add	r24, r24
    34c4:	99 1f       	adc	r25, r25
    34c6:	0a 94       	dec	r0
    34c8:	e2 f7       	brpl	.-8      	; 0x34c2 <DIO_u8SetPinValue+0xfc>
    34ca:	80 95       	com	r24
    34cc:	84 23       	and	r24, r20
    34ce:	8c 93       	st	X, r24
    34d0:	7b c0       	rjmp	.+246    	; 0x35c8 <DIO_u8SetPinValue+0x202>
    			default: Local_u8ErrorState=NOK;
    34d2:	81 e0       	ldi	r24, 0x01	; 1
    34d4:	89 83       	std	Y+1, r24	; 0x01
    34d6:	78 c0       	rjmp	.+240    	; 0x35c8 <DIO_u8SetPinValue+0x202>
    	}
    }
    else if(Copy_u8Value == DIO_u8PIN_HIGH){
    34d8:	8c 81       	ldd	r24, Y+4	; 0x04
    34da:	81 30       	cpi	r24, 0x01	; 1
    34dc:	09 f0       	breq	.+2      	; 0x34e0 <DIO_u8SetPinValue+0x11a>
    34de:	72 c0       	rjmp	.+228    	; 0x35c4 <DIO_u8SetPinValue+0x1fe>
    	switch(Copy_u8port){
    34e0:	8a 81       	ldd	r24, Y+2	; 0x02
    34e2:	28 2f       	mov	r18, r24
    34e4:	30 e0       	ldi	r19, 0x00	; 0
    34e6:	3e 83       	std	Y+6, r19	; 0x06
    34e8:	2d 83       	std	Y+5, r18	; 0x05
    34ea:	8d 81       	ldd	r24, Y+5	; 0x05
    34ec:	9e 81       	ldd	r25, Y+6	; 0x06
    34ee:	81 30       	cpi	r24, 0x01	; 1
    34f0:	91 05       	cpc	r25, r1
    34f2:	49 f1       	breq	.+82     	; 0x3546 <DIO_u8SetPinValue+0x180>
    34f4:	2d 81       	ldd	r18, Y+5	; 0x05
    34f6:	3e 81       	ldd	r19, Y+6	; 0x06
    34f8:	22 30       	cpi	r18, 0x02	; 2
    34fa:	31 05       	cpc	r19, r1
    34fc:	2c f4       	brge	.+10     	; 0x3508 <DIO_u8SetPinValue+0x142>
    34fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3500:	9e 81       	ldd	r25, Y+6	; 0x06
    3502:	00 97       	sbiw	r24, 0x00	; 0
    3504:	61 f0       	breq	.+24     	; 0x351e <DIO_u8SetPinValue+0x158>
    3506:	5b c0       	rjmp	.+182    	; 0x35be <DIO_u8SetPinValue+0x1f8>
    3508:	2d 81       	ldd	r18, Y+5	; 0x05
    350a:	3e 81       	ldd	r19, Y+6	; 0x06
    350c:	22 30       	cpi	r18, 0x02	; 2
    350e:	31 05       	cpc	r19, r1
    3510:	71 f1       	breq	.+92     	; 0x356e <DIO_u8SetPinValue+0x1a8>
    3512:	8d 81       	ldd	r24, Y+5	; 0x05
    3514:	9e 81       	ldd	r25, Y+6	; 0x06
    3516:	83 30       	cpi	r24, 0x03	; 3
    3518:	91 05       	cpc	r25, r1
    351a:	e9 f1       	breq	.+122    	; 0x3596 <DIO_u8SetPinValue+0x1d0>
    351c:	50 c0       	rjmp	.+160    	; 0x35be <DIO_u8SetPinValue+0x1f8>
    	        case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
    351e:	ab e3       	ldi	r26, 0x3B	; 59
    3520:	b0 e0       	ldi	r27, 0x00	; 0
    3522:	eb e3       	ldi	r30, 0x3B	; 59
    3524:	f0 e0       	ldi	r31, 0x00	; 0
    3526:	80 81       	ld	r24, Z
    3528:	48 2f       	mov	r20, r24
    352a:	8b 81       	ldd	r24, Y+3	; 0x03
    352c:	28 2f       	mov	r18, r24
    352e:	30 e0       	ldi	r19, 0x00	; 0
    3530:	81 e0       	ldi	r24, 0x01	; 1
    3532:	90 e0       	ldi	r25, 0x00	; 0
    3534:	02 2e       	mov	r0, r18
    3536:	02 c0       	rjmp	.+4      	; 0x353c <DIO_u8SetPinValue+0x176>
    3538:	88 0f       	add	r24, r24
    353a:	99 1f       	adc	r25, r25
    353c:	0a 94       	dec	r0
    353e:	e2 f7       	brpl	.-8      	; 0x3538 <DIO_u8SetPinValue+0x172>
    3540:	84 2b       	or	r24, r20
    3542:	8c 93       	st	X, r24
    3544:	41 c0       	rjmp	.+130    	; 0x35c8 <DIO_u8SetPinValue+0x202>
    			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
    3546:	a8 e3       	ldi	r26, 0x38	; 56
    3548:	b0 e0       	ldi	r27, 0x00	; 0
    354a:	e8 e3       	ldi	r30, 0x38	; 56
    354c:	f0 e0       	ldi	r31, 0x00	; 0
    354e:	80 81       	ld	r24, Z
    3550:	48 2f       	mov	r20, r24
    3552:	8b 81       	ldd	r24, Y+3	; 0x03
    3554:	28 2f       	mov	r18, r24
    3556:	30 e0       	ldi	r19, 0x00	; 0
    3558:	81 e0       	ldi	r24, 0x01	; 1
    355a:	90 e0       	ldi	r25, 0x00	; 0
    355c:	02 2e       	mov	r0, r18
    355e:	02 c0       	rjmp	.+4      	; 0x3564 <DIO_u8SetPinValue+0x19e>
    3560:	88 0f       	add	r24, r24
    3562:	99 1f       	adc	r25, r25
    3564:	0a 94       	dec	r0
    3566:	e2 f7       	brpl	.-8      	; 0x3560 <DIO_u8SetPinValue+0x19a>
    3568:	84 2b       	or	r24, r20
    356a:	8c 93       	st	X, r24
    356c:	2d c0       	rjmp	.+90     	; 0x35c8 <DIO_u8SetPinValue+0x202>
    			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
    356e:	a5 e3       	ldi	r26, 0x35	; 53
    3570:	b0 e0       	ldi	r27, 0x00	; 0
    3572:	e5 e3       	ldi	r30, 0x35	; 53
    3574:	f0 e0       	ldi	r31, 0x00	; 0
    3576:	80 81       	ld	r24, Z
    3578:	48 2f       	mov	r20, r24
    357a:	8b 81       	ldd	r24, Y+3	; 0x03
    357c:	28 2f       	mov	r18, r24
    357e:	30 e0       	ldi	r19, 0x00	; 0
    3580:	81 e0       	ldi	r24, 0x01	; 1
    3582:	90 e0       	ldi	r25, 0x00	; 0
    3584:	02 2e       	mov	r0, r18
    3586:	02 c0       	rjmp	.+4      	; 0x358c <DIO_u8SetPinValue+0x1c6>
    3588:	88 0f       	add	r24, r24
    358a:	99 1f       	adc	r25, r25
    358c:	0a 94       	dec	r0
    358e:	e2 f7       	brpl	.-8      	; 0x3588 <DIO_u8SetPinValue+0x1c2>
    3590:	84 2b       	or	r24, r20
    3592:	8c 93       	st	X, r24
    3594:	19 c0       	rjmp	.+50     	; 0x35c8 <DIO_u8SetPinValue+0x202>
    			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
    3596:	a2 e3       	ldi	r26, 0x32	; 50
    3598:	b0 e0       	ldi	r27, 0x00	; 0
    359a:	e2 e3       	ldi	r30, 0x32	; 50
    359c:	f0 e0       	ldi	r31, 0x00	; 0
    359e:	80 81       	ld	r24, Z
    35a0:	48 2f       	mov	r20, r24
    35a2:	8b 81       	ldd	r24, Y+3	; 0x03
    35a4:	28 2f       	mov	r18, r24
    35a6:	30 e0       	ldi	r19, 0x00	; 0
    35a8:	81 e0       	ldi	r24, 0x01	; 1
    35aa:	90 e0       	ldi	r25, 0x00	; 0
    35ac:	02 2e       	mov	r0, r18
    35ae:	02 c0       	rjmp	.+4      	; 0x35b4 <DIO_u8SetPinValue+0x1ee>
    35b0:	88 0f       	add	r24, r24
    35b2:	99 1f       	adc	r25, r25
    35b4:	0a 94       	dec	r0
    35b6:	e2 f7       	brpl	.-8      	; 0x35b0 <DIO_u8SetPinValue+0x1ea>
    35b8:	84 2b       	or	r24, r20
    35ba:	8c 93       	st	X, r24
    35bc:	05 c0       	rjmp	.+10     	; 0x35c8 <DIO_u8SetPinValue+0x202>
    			default: Local_u8ErrorState=NOK;
    35be:	81 e0       	ldi	r24, 0x01	; 1
    35c0:	89 83       	std	Y+1, r24	; 0x01
    35c2:	02 c0       	rjmp	.+4      	; 0x35c8 <DIO_u8SetPinValue+0x202>
    	}
    }
    else
    {
    	Local_u8ErrorState=NOK;
    35c4:	81 e0       	ldi	r24, 0x01	; 1
    35c6:	89 83       	std	Y+1, r24	; 0x01

    }


    return Local_u8ErrorState;
    35c8:	89 81       	ldd	r24, Y+1	; 0x01

}
    35ca:	28 96       	adiw	r28, 0x08	; 8
    35cc:	0f b6       	in	r0, 0x3f	; 63
    35ce:	f8 94       	cli
    35d0:	de bf       	out	0x3e, r29	; 62
    35d2:	0f be       	out	0x3f, r0	; 63
    35d4:	cd bf       	out	0x3d, r28	; 61
    35d6:	cf 91       	pop	r28
    35d8:	df 91       	pop	r29
    35da:	08 95       	ret

000035dc <DIO_u8ReadPinValue>:
uint8 DIO_u8ReadPinValue(uint8 Copy_u8port,uint8 Copy_u8Pin,uint8* Copy_pu8Value)
{
    35dc:	df 93       	push	r29
    35de:	cf 93       	push	r28
    35e0:	cd b7       	in	r28, 0x3d	; 61
    35e2:	de b7       	in	r29, 0x3e	; 62
    35e4:	29 97       	sbiw	r28, 0x09	; 9
    35e6:	0f b6       	in	r0, 0x3f	; 63
    35e8:	f8 94       	cli
    35ea:	de bf       	out	0x3e, r29	; 62
    35ec:	0f be       	out	0x3f, r0	; 63
    35ee:	cd bf       	out	0x3d, r28	; 61
    35f0:	8b 83       	std	Y+3, r24	; 0x03
    35f2:	6c 83       	std	Y+4, r22	; 0x04
    35f4:	5e 83       	std	Y+6, r21	; 0x06
    35f6:	4d 83       	std	Y+5, r20	; 0x05
	 uint8 Local_u8ErrorState=OK;
    35f8:	1a 82       	std	Y+2, r1	; 0x02
	 if(Copy_pu8Value!=NULL)
    35fa:	8d 81       	ldd	r24, Y+5	; 0x05
    35fc:	9e 81       	ldd	r25, Y+6	; 0x06
    35fe:	00 97       	sbiw	r24, 0x00	; 0
    3600:	09 f4       	brne	.+2      	; 0x3604 <DIO_u8ReadPinValue+0x28>
    3602:	72 c0       	rjmp	.+228    	; 0x36e8 <DIO_u8ReadPinValue+0x10c>
	 {
		 uint8 u8PinValue=0;
    3604:	19 82       	std	Y+1, r1	; 0x01
		 	 switch(Copy_u8port){
    3606:	8b 81       	ldd	r24, Y+3	; 0x03
    3608:	28 2f       	mov	r18, r24
    360a:	30 e0       	ldi	r19, 0x00	; 0
    360c:	39 87       	std	Y+9, r19	; 0x09
    360e:	28 87       	std	Y+8, r18	; 0x08
    3610:	48 85       	ldd	r20, Y+8	; 0x08
    3612:	59 85       	ldd	r21, Y+9	; 0x09
    3614:	41 30       	cpi	r20, 0x01	; 1
    3616:	51 05       	cpc	r21, r1
    3618:	41 f1       	breq	.+80     	; 0x366a <DIO_u8ReadPinValue+0x8e>
    361a:	88 85       	ldd	r24, Y+8	; 0x08
    361c:	99 85       	ldd	r25, Y+9	; 0x09
    361e:	82 30       	cpi	r24, 0x02	; 2
    3620:	91 05       	cpc	r25, r1
    3622:	34 f4       	brge	.+12     	; 0x3630 <DIO_u8ReadPinValue+0x54>
    3624:	28 85       	ldd	r18, Y+8	; 0x08
    3626:	39 85       	ldd	r19, Y+9	; 0x09
    3628:	21 15       	cp	r18, r1
    362a:	31 05       	cpc	r19, r1
    362c:	61 f0       	breq	.+24     	; 0x3646 <DIO_u8ReadPinValue+0x6a>
    362e:	53 c0       	rjmp	.+166    	; 0x36d6 <DIO_u8ReadPinValue+0xfa>
    3630:	48 85       	ldd	r20, Y+8	; 0x08
    3632:	59 85       	ldd	r21, Y+9	; 0x09
    3634:	42 30       	cpi	r20, 0x02	; 2
    3636:	51 05       	cpc	r21, r1
    3638:	51 f1       	breq	.+84     	; 0x368e <DIO_u8ReadPinValue+0xb2>
    363a:	88 85       	ldd	r24, Y+8	; 0x08
    363c:	99 85       	ldd	r25, Y+9	; 0x09
    363e:	83 30       	cpi	r24, 0x03	; 3
    3640:	91 05       	cpc	r25, r1
    3642:	b9 f1       	breq	.+110    	; 0x36b2 <DIO_u8ReadPinValue+0xd6>
    3644:	48 c0       	rjmp	.+144    	; 0x36d6 <DIO_u8ReadPinValue+0xfa>
		        case DIO_u8PORTA:u8PinValue=GET_BIT(PINA,Copy_u8Pin); break;
    3646:	e9 e3       	ldi	r30, 0x39	; 57
    3648:	f0 e0       	ldi	r31, 0x00	; 0
    364a:	80 81       	ld	r24, Z
    364c:	28 2f       	mov	r18, r24
    364e:	30 e0       	ldi	r19, 0x00	; 0
    3650:	8c 81       	ldd	r24, Y+4	; 0x04
    3652:	88 2f       	mov	r24, r24
    3654:	90 e0       	ldi	r25, 0x00	; 0
    3656:	a9 01       	movw	r20, r18
    3658:	02 c0       	rjmp	.+4      	; 0x365e <DIO_u8ReadPinValue+0x82>
    365a:	55 95       	asr	r21
    365c:	47 95       	ror	r20
    365e:	8a 95       	dec	r24
    3660:	e2 f7       	brpl	.-8      	; 0x365a <DIO_u8ReadPinValue+0x7e>
    3662:	ca 01       	movw	r24, r20
    3664:	81 70       	andi	r24, 0x01	; 1
    3666:	89 83       	std	Y+1, r24	; 0x01
    3668:	38 c0       	rjmp	.+112    	; 0x36da <DIO_u8ReadPinValue+0xfe>
		        case DIO_u8PORTB:u8PinValue=GET_BIT(PINB,Copy_u8Pin); break;
    366a:	e6 e3       	ldi	r30, 0x36	; 54
    366c:	f0 e0       	ldi	r31, 0x00	; 0
    366e:	80 81       	ld	r24, Z
    3670:	28 2f       	mov	r18, r24
    3672:	30 e0       	ldi	r19, 0x00	; 0
    3674:	8c 81       	ldd	r24, Y+4	; 0x04
    3676:	88 2f       	mov	r24, r24
    3678:	90 e0       	ldi	r25, 0x00	; 0
    367a:	a9 01       	movw	r20, r18
    367c:	02 c0       	rjmp	.+4      	; 0x3682 <DIO_u8ReadPinValue+0xa6>
    367e:	55 95       	asr	r21
    3680:	47 95       	ror	r20
    3682:	8a 95       	dec	r24
    3684:	e2 f7       	brpl	.-8      	; 0x367e <DIO_u8ReadPinValue+0xa2>
    3686:	ca 01       	movw	r24, r20
    3688:	81 70       	andi	r24, 0x01	; 1
    368a:	89 83       	std	Y+1, r24	; 0x01
    368c:	26 c0       	rjmp	.+76     	; 0x36da <DIO_u8ReadPinValue+0xfe>
		        case DIO_u8PORTC:u8PinValue=GET_BIT(PINC,Copy_u8Pin); break;
    368e:	e3 e3       	ldi	r30, 0x33	; 51
    3690:	f0 e0       	ldi	r31, 0x00	; 0
    3692:	80 81       	ld	r24, Z
    3694:	28 2f       	mov	r18, r24
    3696:	30 e0       	ldi	r19, 0x00	; 0
    3698:	8c 81       	ldd	r24, Y+4	; 0x04
    369a:	88 2f       	mov	r24, r24
    369c:	90 e0       	ldi	r25, 0x00	; 0
    369e:	a9 01       	movw	r20, r18
    36a0:	02 c0       	rjmp	.+4      	; 0x36a6 <DIO_u8ReadPinValue+0xca>
    36a2:	55 95       	asr	r21
    36a4:	47 95       	ror	r20
    36a6:	8a 95       	dec	r24
    36a8:	e2 f7       	brpl	.-8      	; 0x36a2 <DIO_u8ReadPinValue+0xc6>
    36aa:	ca 01       	movw	r24, r20
    36ac:	81 70       	andi	r24, 0x01	; 1
    36ae:	89 83       	std	Y+1, r24	; 0x01
    36b0:	14 c0       	rjmp	.+40     	; 0x36da <DIO_u8ReadPinValue+0xfe>
		        case DIO_u8PORTD:u8PinValue=GET_BIT(PIND,Copy_u8Pin); break;
    36b2:	e0 e3       	ldi	r30, 0x30	; 48
    36b4:	f0 e0       	ldi	r31, 0x00	; 0
    36b6:	80 81       	ld	r24, Z
    36b8:	28 2f       	mov	r18, r24
    36ba:	30 e0       	ldi	r19, 0x00	; 0
    36bc:	8c 81       	ldd	r24, Y+4	; 0x04
    36be:	88 2f       	mov	r24, r24
    36c0:	90 e0       	ldi	r25, 0x00	; 0
    36c2:	a9 01       	movw	r20, r18
    36c4:	02 c0       	rjmp	.+4      	; 0x36ca <DIO_u8ReadPinValue+0xee>
    36c6:	55 95       	asr	r21
    36c8:	47 95       	ror	r20
    36ca:	8a 95       	dec	r24
    36cc:	e2 f7       	brpl	.-8      	; 0x36c6 <DIO_u8ReadPinValue+0xea>
    36ce:	ca 01       	movw	r24, r20
    36d0:	81 70       	andi	r24, 0x01	; 1
    36d2:	89 83       	std	Y+1, r24	; 0x01
    36d4:	02 c0       	rjmp	.+4      	; 0x36da <DIO_u8ReadPinValue+0xfe>
		        default: Local_u8ErrorState=NOK;
    36d6:	81 e0       	ldi	r24, 0x01	; 1
    36d8:	8a 83       	std	Y+2, r24	; 0x02
		 	 }
		 	 * Copy_pu8Value =u8PinValue;
    36da:	ed 81       	ldd	r30, Y+5	; 0x05
    36dc:	fe 81       	ldd	r31, Y+6	; 0x06
    36de:	89 81       	ldd	r24, Y+1	; 0x01
    36e0:	80 83       	st	Z, r24
		 	 return Local_u8ErrorState;
    36e2:	5a 81       	ldd	r21, Y+2	; 0x02
    36e4:	5f 83       	std	Y+7, r21	; 0x07
    36e6:	04 c0       	rjmp	.+8      	; 0x36f0 <DIO_u8ReadPinValue+0x114>
	 }
	 else
	 {
		 Local_u8ErrorState=NULL_PTR_ERR;
    36e8:	82 e0       	ldi	r24, 0x02	; 2
    36ea:	8a 83       	std	Y+2, r24	; 0x02
	 }

	 return Local_u8ErrorState;
    36ec:	8a 81       	ldd	r24, Y+2	; 0x02
    36ee:	8f 83       	std	Y+7, r24	; 0x07
    36f0:	8f 81       	ldd	r24, Y+7	; 0x07
}
    36f2:	29 96       	adiw	r28, 0x09	; 9
    36f4:	0f b6       	in	r0, 0x3f	; 63
    36f6:	f8 94       	cli
    36f8:	de bf       	out	0x3e, r29	; 62
    36fa:	0f be       	out	0x3f, r0	; 63
    36fc:	cd bf       	out	0x3d, r28	; 61
    36fe:	cf 91       	pop	r28
    3700:	df 91       	pop	r29
    3702:	08 95       	ret

00003704 <DIO_u8SetPortDirection>:
uint8 DIO_u8SetPortDirection(uint8 Copy_u8Port, uint8 Copy_u8Direction )
{
    3704:	df 93       	push	r29
    3706:	cf 93       	push	r28
    3708:	00 d0       	rcall	.+0      	; 0x370a <DIO_u8SetPortDirection+0x6>
    370a:	00 d0       	rcall	.+0      	; 0x370c <DIO_u8SetPortDirection+0x8>
    370c:	0f 92       	push	r0
    370e:	cd b7       	in	r28, 0x3d	; 61
    3710:	de b7       	in	r29, 0x3e	; 62
    3712:	8a 83       	std	Y+2, r24	; 0x02
    3714:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    3716:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
    3718:	8a 81       	ldd	r24, Y+2	; 0x02
    371a:	28 2f       	mov	r18, r24
    371c:	30 e0       	ldi	r19, 0x00	; 0
    371e:	3d 83       	std	Y+5, r19	; 0x05
    3720:	2c 83       	std	Y+4, r18	; 0x04
    3722:	8c 81       	ldd	r24, Y+4	; 0x04
    3724:	9d 81       	ldd	r25, Y+5	; 0x05
    3726:	81 30       	cpi	r24, 0x01	; 1
    3728:	91 05       	cpc	r25, r1
    372a:	d1 f0       	breq	.+52     	; 0x3760 <DIO_u8SetPortDirection+0x5c>
    372c:	2c 81       	ldd	r18, Y+4	; 0x04
    372e:	3d 81       	ldd	r19, Y+5	; 0x05
    3730:	22 30       	cpi	r18, 0x02	; 2
    3732:	31 05       	cpc	r19, r1
    3734:	2c f4       	brge	.+10     	; 0x3740 <DIO_u8SetPortDirection+0x3c>
    3736:	8c 81       	ldd	r24, Y+4	; 0x04
    3738:	9d 81       	ldd	r25, Y+5	; 0x05
    373a:	00 97       	sbiw	r24, 0x00	; 0
    373c:	61 f0       	breq	.+24     	; 0x3756 <DIO_u8SetPortDirection+0x52>
    373e:	1f c0       	rjmp	.+62     	; 0x377e <DIO_u8SetPortDirection+0x7a>
    3740:	2c 81       	ldd	r18, Y+4	; 0x04
    3742:	3d 81       	ldd	r19, Y+5	; 0x05
    3744:	22 30       	cpi	r18, 0x02	; 2
    3746:	31 05       	cpc	r19, r1
    3748:	81 f0       	breq	.+32     	; 0x376a <DIO_u8SetPortDirection+0x66>
    374a:	8c 81       	ldd	r24, Y+4	; 0x04
    374c:	9d 81       	ldd	r25, Y+5	; 0x05
    374e:	83 30       	cpi	r24, 0x03	; 3
    3750:	91 05       	cpc	r25, r1
    3752:	81 f0       	breq	.+32     	; 0x3774 <DIO_u8SetPortDirection+0x70>
    3754:	14 c0       	rjmp	.+40     	; 0x377e <DIO_u8SetPortDirection+0x7a>
	{
	case DIO_u8PORTA : DDRA = Copy_u8Direction; break;
    3756:	ea e3       	ldi	r30, 0x3A	; 58
    3758:	f0 e0       	ldi	r31, 0x00	; 0
    375a:	8b 81       	ldd	r24, Y+3	; 0x03
    375c:	80 83       	st	Z, r24
    375e:	11 c0       	rjmp	.+34     	; 0x3782 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTB : DDRB = Copy_u8Direction; break;
    3760:	e7 e3       	ldi	r30, 0x37	; 55
    3762:	f0 e0       	ldi	r31, 0x00	; 0
    3764:	8b 81       	ldd	r24, Y+3	; 0x03
    3766:	80 83       	st	Z, r24
    3768:	0c c0       	rjmp	.+24     	; 0x3782 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTC : DDRC = Copy_u8Direction; break;
    376a:	e4 e3       	ldi	r30, 0x34	; 52
    376c:	f0 e0       	ldi	r31, 0x00	; 0
    376e:	8b 81       	ldd	r24, Y+3	; 0x03
    3770:	80 83       	st	Z, r24
    3772:	07 c0       	rjmp	.+14     	; 0x3782 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTD : DDRD = Copy_u8Direction; break;
    3774:	e1 e3       	ldi	r30, 0x31	; 49
    3776:	f0 e0       	ldi	r31, 0x00	; 0
    3778:	8b 81       	ldd	r24, Y+3	; 0x03
    377a:	80 83       	st	Z, r24
    377c:	02 c0       	rjmp	.+4      	; 0x3782 <DIO_u8SetPortDirection+0x7e>
	default : Local_u8ErrorState = NOK; 		break;
    377e:	81 e0       	ldi	r24, 0x01	; 1
    3780:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    3782:	89 81       	ldd	r24, Y+1	; 0x01
}
    3784:	0f 90       	pop	r0
    3786:	0f 90       	pop	r0
    3788:	0f 90       	pop	r0
    378a:	0f 90       	pop	r0
    378c:	0f 90       	pop	r0
    378e:	cf 91       	pop	r28
    3790:	df 91       	pop	r29
    3792:	08 95       	ret

00003794 <DIO_u8SetPortValue>:

uint8 DIO_u8SetPortValue (uint8 Copy_u8port,uint8 Copy_u8Value )
{
    3794:	df 93       	push	r29
    3796:	cf 93       	push	r28
    3798:	00 d0       	rcall	.+0      	; 0x379a <DIO_u8SetPortValue+0x6>
    379a:	00 d0       	rcall	.+0      	; 0x379c <DIO_u8SetPortValue+0x8>
    379c:	0f 92       	push	r0
    379e:	cd b7       	in	r28, 0x3d	; 61
    37a0:	de b7       	in	r29, 0x3e	; 62
    37a2:	8a 83       	std	Y+2, r24	; 0x02
    37a4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState=OK;
    37a6:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8port)
    37a8:	8a 81       	ldd	r24, Y+2	; 0x02
    37aa:	28 2f       	mov	r18, r24
    37ac:	30 e0       	ldi	r19, 0x00	; 0
    37ae:	3d 83       	std	Y+5, r19	; 0x05
    37b0:	2c 83       	std	Y+4, r18	; 0x04
    37b2:	8c 81       	ldd	r24, Y+4	; 0x04
    37b4:	9d 81       	ldd	r25, Y+5	; 0x05
    37b6:	81 30       	cpi	r24, 0x01	; 1
    37b8:	91 05       	cpc	r25, r1
    37ba:	d1 f0       	breq	.+52     	; 0x37f0 <DIO_u8SetPortValue+0x5c>
    37bc:	2c 81       	ldd	r18, Y+4	; 0x04
    37be:	3d 81       	ldd	r19, Y+5	; 0x05
    37c0:	22 30       	cpi	r18, 0x02	; 2
    37c2:	31 05       	cpc	r19, r1
    37c4:	2c f4       	brge	.+10     	; 0x37d0 <DIO_u8SetPortValue+0x3c>
    37c6:	8c 81       	ldd	r24, Y+4	; 0x04
    37c8:	9d 81       	ldd	r25, Y+5	; 0x05
    37ca:	00 97       	sbiw	r24, 0x00	; 0
    37cc:	61 f0       	breq	.+24     	; 0x37e6 <DIO_u8SetPortValue+0x52>
    37ce:	1f c0       	rjmp	.+62     	; 0x380e <DIO_u8SetPortValue+0x7a>
    37d0:	2c 81       	ldd	r18, Y+4	; 0x04
    37d2:	3d 81       	ldd	r19, Y+5	; 0x05
    37d4:	22 30       	cpi	r18, 0x02	; 2
    37d6:	31 05       	cpc	r19, r1
    37d8:	81 f0       	breq	.+32     	; 0x37fa <DIO_u8SetPortValue+0x66>
    37da:	8c 81       	ldd	r24, Y+4	; 0x04
    37dc:	9d 81       	ldd	r25, Y+5	; 0x05
    37de:	83 30       	cpi	r24, 0x03	; 3
    37e0:	91 05       	cpc	r25, r1
    37e2:	81 f0       	breq	.+32     	; 0x3804 <DIO_u8SetPortValue+0x70>
    37e4:	14 c0       	rjmp	.+40     	; 0x380e <DIO_u8SetPortValue+0x7a>
	{
	    case DIO_u8PORTA: PORTA = Copy_u8Value;break;
    37e6:	eb e3       	ldi	r30, 0x3B	; 59
    37e8:	f0 e0       	ldi	r31, 0x00	; 0
    37ea:	8b 81       	ldd	r24, Y+3	; 0x03
    37ec:	80 83       	st	Z, r24
    37ee:	11 c0       	rjmp	.+34     	; 0x3812 <DIO_u8SetPortValue+0x7e>

	    case DIO_u8PORTB: PORTB = Copy_u8Value;break;
    37f0:	e8 e3       	ldi	r30, 0x38	; 56
    37f2:	f0 e0       	ldi	r31, 0x00	; 0
    37f4:	8b 81       	ldd	r24, Y+3	; 0x03
    37f6:	80 83       	st	Z, r24
    37f8:	0c c0       	rjmp	.+24     	; 0x3812 <DIO_u8SetPortValue+0x7e>

	    case DIO_u8PORTC: PORTC = Copy_u8Value; break;
    37fa:	e5 e3       	ldi	r30, 0x35	; 53
    37fc:	f0 e0       	ldi	r31, 0x00	; 0
    37fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3800:	80 83       	st	Z, r24
    3802:	07 c0       	rjmp	.+14     	; 0x3812 <DIO_u8SetPortValue+0x7e>
	    case DIO_u8PORTD: PORTD = Copy_u8Value; break;
    3804:	e2 e3       	ldi	r30, 0x32	; 50
    3806:	f0 e0       	ldi	r31, 0x00	; 0
    3808:	8b 81       	ldd	r24, Y+3	; 0x03
    380a:	80 83       	st	Z, r24
    380c:	02 c0       	rjmp	.+4      	; 0x3812 <DIO_u8SetPortValue+0x7e>
	    default: Local_u8ErrorState = NOK;
    380e:	81 e0       	ldi	r24, 0x01	; 1
    3810:	89 83       	std	Y+1, r24	; 0x01
	     }

	     return Local_u8ErrorState;
    3812:	89 81       	ldd	r24, Y+1	; 0x01
}
    3814:	0f 90       	pop	r0
    3816:	0f 90       	pop	r0
    3818:	0f 90       	pop	r0
    381a:	0f 90       	pop	r0
    381c:	0f 90       	pop	r0
    381e:	cf 91       	pop	r28
    3820:	df 91       	pop	r29
    3822:	08 95       	ret

00003824 <DIO_u8Toggle>:




uint8 DIO_u8Toggle(uint8 Copy_u8Port, uint8 Copy_u8Pin)
{
    3824:	df 93       	push	r29
    3826:	cf 93       	push	r28
    3828:	00 d0       	rcall	.+0      	; 0x382a <DIO_u8Toggle+0x6>
    382a:	00 d0       	rcall	.+0      	; 0x382c <DIO_u8Toggle+0x8>
    382c:	0f 92       	push	r0
    382e:	cd b7       	in	r28, 0x3d	; 61
    3830:	de b7       	in	r29, 0x3e	; 62
    3832:	8a 83       	std	Y+2, r24	; 0x02
    3834:	6b 83       	std	Y+3, r22	; 0x03
	 uint8 Local_u8ErrorState = OK;
    3836:	19 82       	std	Y+1, r1	; 0x01
if(Copy_u8Pin<=DIO_u8PIN7){
    3838:	8b 81       	ldd	r24, Y+3	; 0x03
    383a:	88 30       	cpi	r24, 0x08	; 8
    383c:	08 f0       	brcs	.+2      	; 0x3840 <DIO_u8Toggle+0x1c>
    383e:	72 c0       	rjmp	.+228    	; 0x3924 <DIO_u8Toggle+0x100>
	    switch (Copy_u8Port)
    3840:	8a 81       	ldd	r24, Y+2	; 0x02
    3842:	28 2f       	mov	r18, r24
    3844:	30 e0       	ldi	r19, 0x00	; 0
    3846:	3d 83       	std	Y+5, r19	; 0x05
    3848:	2c 83       	std	Y+4, r18	; 0x04
    384a:	8c 81       	ldd	r24, Y+4	; 0x04
    384c:	9d 81       	ldd	r25, Y+5	; 0x05
    384e:	81 30       	cpi	r24, 0x01	; 1
    3850:	91 05       	cpc	r25, r1
    3852:	49 f1       	breq	.+82     	; 0x38a6 <DIO_u8Toggle+0x82>
    3854:	2c 81       	ldd	r18, Y+4	; 0x04
    3856:	3d 81       	ldd	r19, Y+5	; 0x05
    3858:	22 30       	cpi	r18, 0x02	; 2
    385a:	31 05       	cpc	r19, r1
    385c:	2c f4       	brge	.+10     	; 0x3868 <DIO_u8Toggle+0x44>
    385e:	8c 81       	ldd	r24, Y+4	; 0x04
    3860:	9d 81       	ldd	r25, Y+5	; 0x05
    3862:	00 97       	sbiw	r24, 0x00	; 0
    3864:	61 f0       	breq	.+24     	; 0x387e <DIO_u8Toggle+0x5a>
    3866:	5b c0       	rjmp	.+182    	; 0x391e <DIO_u8Toggle+0xfa>
    3868:	2c 81       	ldd	r18, Y+4	; 0x04
    386a:	3d 81       	ldd	r19, Y+5	; 0x05
    386c:	22 30       	cpi	r18, 0x02	; 2
    386e:	31 05       	cpc	r19, r1
    3870:	71 f1       	breq	.+92     	; 0x38ce <DIO_u8Toggle+0xaa>
    3872:	8c 81       	ldd	r24, Y+4	; 0x04
    3874:	9d 81       	ldd	r25, Y+5	; 0x05
    3876:	83 30       	cpi	r24, 0x03	; 3
    3878:	91 05       	cpc	r25, r1
    387a:	e9 f1       	breq	.+122    	; 0x38f6 <DIO_u8Toggle+0xd2>
    387c:	50 c0       	rjmp	.+160    	; 0x391e <DIO_u8Toggle+0xfa>
	    {
	        case DIO_u8PORTA:TOG_BIT(PORTA, Copy_u8Pin);break;
    387e:	ab e3       	ldi	r26, 0x3B	; 59
    3880:	b0 e0       	ldi	r27, 0x00	; 0
    3882:	eb e3       	ldi	r30, 0x3B	; 59
    3884:	f0 e0       	ldi	r31, 0x00	; 0
    3886:	80 81       	ld	r24, Z
    3888:	48 2f       	mov	r20, r24
    388a:	8b 81       	ldd	r24, Y+3	; 0x03
    388c:	28 2f       	mov	r18, r24
    388e:	30 e0       	ldi	r19, 0x00	; 0
    3890:	81 e0       	ldi	r24, 0x01	; 1
    3892:	90 e0       	ldi	r25, 0x00	; 0
    3894:	02 2e       	mov	r0, r18
    3896:	02 c0       	rjmp	.+4      	; 0x389c <DIO_u8Toggle+0x78>
    3898:	88 0f       	add	r24, r24
    389a:	99 1f       	adc	r25, r25
    389c:	0a 94       	dec	r0
    389e:	e2 f7       	brpl	.-8      	; 0x3898 <DIO_u8Toggle+0x74>
    38a0:	84 27       	eor	r24, r20
    38a2:	8c 93       	st	X, r24
    38a4:	41 c0       	rjmp	.+130    	; 0x3928 <DIO_u8Toggle+0x104>

	        case DIO_u8PORTB:TOG_BIT(PORTB, Copy_u8Pin);break;
    38a6:	a8 e3       	ldi	r26, 0x38	; 56
    38a8:	b0 e0       	ldi	r27, 0x00	; 0
    38aa:	e8 e3       	ldi	r30, 0x38	; 56
    38ac:	f0 e0       	ldi	r31, 0x00	; 0
    38ae:	80 81       	ld	r24, Z
    38b0:	48 2f       	mov	r20, r24
    38b2:	8b 81       	ldd	r24, Y+3	; 0x03
    38b4:	28 2f       	mov	r18, r24
    38b6:	30 e0       	ldi	r19, 0x00	; 0
    38b8:	81 e0       	ldi	r24, 0x01	; 1
    38ba:	90 e0       	ldi	r25, 0x00	; 0
    38bc:	02 2e       	mov	r0, r18
    38be:	02 c0       	rjmp	.+4      	; 0x38c4 <DIO_u8Toggle+0xa0>
    38c0:	88 0f       	add	r24, r24
    38c2:	99 1f       	adc	r25, r25
    38c4:	0a 94       	dec	r0
    38c6:	e2 f7       	brpl	.-8      	; 0x38c0 <DIO_u8Toggle+0x9c>
    38c8:	84 27       	eor	r24, r20
    38ca:	8c 93       	st	X, r24
    38cc:	2d c0       	rjmp	.+90     	; 0x3928 <DIO_u8Toggle+0x104>

	        case DIO_u8PORTC:TOG_BIT(PORTC, Copy_u8Pin);break;
    38ce:	a5 e3       	ldi	r26, 0x35	; 53
    38d0:	b0 e0       	ldi	r27, 0x00	; 0
    38d2:	e5 e3       	ldi	r30, 0x35	; 53
    38d4:	f0 e0       	ldi	r31, 0x00	; 0
    38d6:	80 81       	ld	r24, Z
    38d8:	48 2f       	mov	r20, r24
    38da:	8b 81       	ldd	r24, Y+3	; 0x03
    38dc:	28 2f       	mov	r18, r24
    38de:	30 e0       	ldi	r19, 0x00	; 0
    38e0:	81 e0       	ldi	r24, 0x01	; 1
    38e2:	90 e0       	ldi	r25, 0x00	; 0
    38e4:	02 2e       	mov	r0, r18
    38e6:	02 c0       	rjmp	.+4      	; 0x38ec <DIO_u8Toggle+0xc8>
    38e8:	88 0f       	add	r24, r24
    38ea:	99 1f       	adc	r25, r25
    38ec:	0a 94       	dec	r0
    38ee:	e2 f7       	brpl	.-8      	; 0x38e8 <DIO_u8Toggle+0xc4>
    38f0:	84 27       	eor	r24, r20
    38f2:	8c 93       	st	X, r24
    38f4:	19 c0       	rjmp	.+50     	; 0x3928 <DIO_u8Toggle+0x104>

	        case DIO_u8PORTD:TOG_BIT(PORTD, Copy_u8Pin);break;
    38f6:	a2 e3       	ldi	r26, 0x32	; 50
    38f8:	b0 e0       	ldi	r27, 0x00	; 0
    38fa:	e2 e3       	ldi	r30, 0x32	; 50
    38fc:	f0 e0       	ldi	r31, 0x00	; 0
    38fe:	80 81       	ld	r24, Z
    3900:	48 2f       	mov	r20, r24
    3902:	8b 81       	ldd	r24, Y+3	; 0x03
    3904:	28 2f       	mov	r18, r24
    3906:	30 e0       	ldi	r19, 0x00	; 0
    3908:	81 e0       	ldi	r24, 0x01	; 1
    390a:	90 e0       	ldi	r25, 0x00	; 0
    390c:	02 2e       	mov	r0, r18
    390e:	02 c0       	rjmp	.+4      	; 0x3914 <DIO_u8Toggle+0xf0>
    3910:	88 0f       	add	r24, r24
    3912:	99 1f       	adc	r25, r25
    3914:	0a 94       	dec	r0
    3916:	e2 f7       	brpl	.-8      	; 0x3910 <DIO_u8Toggle+0xec>
    3918:	84 27       	eor	r24, r20
    391a:	8c 93       	st	X, r24
    391c:	05 c0       	rjmp	.+10     	; 0x3928 <DIO_u8Toggle+0x104>

	        default:Local_u8ErrorState = NOK;
    391e:	81 e0       	ldi	r24, 0x01	; 1
    3920:	89 83       	std	Y+1, r24	; 0x01
    3922:	02 c0       	rjmp	.+4      	; 0x3928 <DIO_u8Toggle+0x104>
	    }
}
else
{
	             Local_u8ErrorState = NOK;
    3924:	81 e0       	ldi	r24, 0x01	; 1
    3926:	89 83       	std	Y+1, r24	; 0x01
}

	    return Local_u8ErrorState;
    3928:	89 81       	ldd	r24, Y+1	; 0x01
}
    392a:	0f 90       	pop	r0
    392c:	0f 90       	pop	r0
    392e:	0f 90       	pop	r0
    3930:	0f 90       	pop	r0
    3932:	0f 90       	pop	r0
    3934:	cf 91       	pop	r28
    3936:	df 91       	pop	r29
    3938:	08 95       	ret

0000393a <Scan_u8Option>:
#include "KPD_Interface.h"
#include"CLCD_interface.h"
#include "Dashboard.h"
#include<util/delay.h>
uint8 Scan_u8Option(uint8 Local_u8KeypadKey)
{
    393a:	df 93       	push	r29
    393c:	cf 93       	push	r28
    393e:	0f 92       	push	r0
    3940:	cd b7       	in	r28, 0x3d	; 61
    3942:	de b7       	in	r29, 0x3e	; 62
    3944:	89 83       	std	Y+1, r24	; 0x01
	Local_u8KeypadKey = 0xff ;
    3946:	8f ef       	ldi	r24, 0xFF	; 255
    3948:	89 83       	std	Y+1, r24	; 0x01
    394a:	03 c0       	rjmp	.+6      	; 0x3952 <Scan_u8Option+0x18>
	while(1)
			{
				while(Local_u8KeypadKey == 0xff)
				{
					Local_u8KeypadKey = KPD_u8GetPressedKey();
    394c:	0e 94 6b 1f 	call	0x3ed6	; 0x3ed6 <KPD_u8GetPressedKey>
    3950:	89 83       	std	Y+1, r24	; 0x01
uint8 Scan_u8Option(uint8 Local_u8KeypadKey)
{
	Local_u8KeypadKey = 0xff ;
	while(1)
			{
				while(Local_u8KeypadKey == 0xff)
    3952:	89 81       	ldd	r24, Y+1	; 0x01
    3954:	8f 3f       	cpi	r24, 0xFF	; 255
    3956:	d1 f3       	breq	.-12     	; 0x394c <Scan_u8Option+0x12>
				{
					Local_u8KeypadKey = KPD_u8GetPressedKey();
				}

				if(Local_u8KeypadKey == 1 || Local_u8KeypadKey == 2)
    3958:	89 81       	ldd	r24, Y+1	; 0x01
    395a:	81 30       	cpi	r24, 0x01	; 1
    395c:	31 f0       	breq	.+12     	; 0x396a <Scan_u8Option+0x30>
    395e:	89 81       	ldd	r24, Y+1	; 0x01
    3960:	82 30       	cpi	r24, 0x02	; 2
    3962:	19 f0       	breq	.+6      	; 0x396a <Scan_u8Option+0x30>
				{
					break;
				}
				else
				{
					Local_u8KeypadKey =0xff;
    3964:	8f ef       	ldi	r24, 0xFF	; 255
    3966:	89 83       	std	Y+1, r24	; 0x01
    3968:	f4 cf       	rjmp	.-24     	; 0x3952 <Scan_u8Option+0x18>
				}
			}

	return Local_u8KeypadKey ;
    396a:	89 81       	ldd	r24, Y+1	; 0x01
}
    396c:	0f 90       	pop	r0
    396e:	cf 91       	pop	r28
    3970:	df 91       	pop	r29
    3972:	08 95       	ret

00003974 <void_HamokshaF>:
void void_HamokshaF()
{
    3974:	df 93       	push	r29
    3976:	cf 93       	push	r28
    3978:	cd b7       	in	r28, 0x3d	; 61
    397a:	de b7       	in	r29, 0x3e	; 62
    397c:	e7 97       	sbiw	r28, 0x37	; 55
    397e:	0f b6       	in	r0, 0x3f	; 63
    3980:	f8 94       	cli
    3982:	de bf       	out	0x3e, r29	; 62
    3984:	0f be       	out	0x3f, r0	; 63
    3986:	cd bf       	out	0x3d, r28	; 61
	                                         0b00001110,
	                                         0b00000100,
	                                         0b00000100,
	                                         0b00000100
	                                        ,0b00001010,
	                                         0b00001010,0};
    3988:	ce 01       	movw	r24, r28
    398a:	4e 96       	adiw	r24, 0x1e	; 30
    398c:	9f a7       	std	Y+47, r25	; 0x2f
    398e:	8e a7       	std	Y+46, r24	; 0x2e
    3990:	e1 e8       	ldi	r30, 0x81	; 129
    3992:	f1 e0       	ldi	r31, 0x01	; 1
    3994:	f9 ab       	std	Y+49, r31	; 0x31
    3996:	e8 ab       	std	Y+48, r30	; 0x30
    3998:	f8 e0       	ldi	r31, 0x08	; 8
    399a:	fa ab       	std	Y+50, r31	; 0x32
    399c:	e8 a9       	ldd	r30, Y+48	; 0x30
    399e:	f9 a9       	ldd	r31, Y+49	; 0x31
    39a0:	00 80       	ld	r0, Z
    39a2:	88 a9       	ldd	r24, Y+48	; 0x30
    39a4:	99 a9       	ldd	r25, Y+49	; 0x31
    39a6:	01 96       	adiw	r24, 0x01	; 1
    39a8:	99 ab       	std	Y+49, r25	; 0x31
    39aa:	88 ab       	std	Y+48, r24	; 0x30
    39ac:	ee a5       	ldd	r30, Y+46	; 0x2e
    39ae:	ff a5       	ldd	r31, Y+47	; 0x2f
    39b0:	00 82       	st	Z, r0
    39b2:	8e a5       	ldd	r24, Y+46	; 0x2e
    39b4:	9f a5       	ldd	r25, Y+47	; 0x2f
    39b6:	01 96       	adiw	r24, 0x01	; 1
    39b8:	9f a7       	std	Y+47, r25	; 0x2f
    39ba:	8e a7       	std	Y+46, r24	; 0x2e
    39bc:	9a a9       	ldd	r25, Y+50	; 0x32
    39be:	91 50       	subi	r25, 0x01	; 1
    39c0:	9a ab       	std	Y+50, r25	; 0x32
    39c2:	ea a9       	ldd	r30, Y+50	; 0x32
    39c4:	ee 23       	and	r30, r30
    39c6:	51 f7       	brne	.-44     	; 0x399c <void_HamokshaF+0x28>
	                                         0b00001110,
	                                         0b00000100,
	                                         0b00000100,
	                                         0b00000100
	                                        ,0b00001001,
	                                         0b00001001,0};
    39c8:	ce 01       	movw	r24, r28
    39ca:	86 96       	adiw	r24, 0x26	; 38
    39cc:	9c ab       	std	Y+52, r25	; 0x34
    39ce:	8b ab       	std	Y+51, r24	; 0x33
    39d0:	e9 e7       	ldi	r30, 0x79	; 121
    39d2:	f1 e0       	ldi	r31, 0x01	; 1
    39d4:	fe ab       	std	Y+54, r31	; 0x36
    39d6:	ed ab       	std	Y+53, r30	; 0x35
    39d8:	f8 e0       	ldi	r31, 0x08	; 8
    39da:	ff ab       	std	Y+55, r31	; 0x37
    39dc:	ed a9       	ldd	r30, Y+53	; 0x35
    39de:	fe a9       	ldd	r31, Y+54	; 0x36
    39e0:	00 80       	ld	r0, Z
    39e2:	8d a9       	ldd	r24, Y+53	; 0x35
    39e4:	9e a9       	ldd	r25, Y+54	; 0x36
    39e6:	01 96       	adiw	r24, 0x01	; 1
    39e8:	9e ab       	std	Y+54, r25	; 0x36
    39ea:	8d ab       	std	Y+53, r24	; 0x35
    39ec:	eb a9       	ldd	r30, Y+51	; 0x33
    39ee:	fc a9       	ldd	r31, Y+52	; 0x34
    39f0:	00 82       	st	Z, r0
    39f2:	8b a9       	ldd	r24, Y+51	; 0x33
    39f4:	9c a9       	ldd	r25, Y+52	; 0x34
    39f6:	01 96       	adiw	r24, 0x01	; 1
    39f8:	9c ab       	std	Y+52, r25	; 0x34
    39fa:	8b ab       	std	Y+51, r24	; 0x33
    39fc:	9f a9       	ldd	r25, Y+55	; 0x37
    39fe:	91 50       	subi	r25, 0x01	; 1
    3a00:	9f ab       	std	Y+55, r25	; 0x37
    3a02:	ef a9       	ldd	r30, Y+55	; 0x37
    3a04:	ee 23       	and	r30, r30
    3a06:	51 f7       	brne	.-44     	; 0x39dc <void_HamokshaF+0x68>

		uint8 i=0;
    3a08:	1d 8e       	std	Y+29, r1	; 0x1d
    3a0a:	ff c0       	rjmp	.+510    	; 0x3c0a <void_HamokshaF+0x296>
		while(i<16)
			{   CLCD_voidClear();
    3a0c:	0e 94 55 08 	call	0x10aa	; 0x10aa <CLCD_voidClear>
		   	//CLCD_VoidGoToXY(5,0);
		   	//CLCD_u8SendString("WELCOME");
			    CLCD_u8SpecialCharacter(0,Local_u8HamokshaPattern4,i++,1);
    3a10:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3a12:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a14:	8f 5f       	subi	r24, 0xFF	; 255
    3a16:	8d 8f       	std	Y+29, r24	; 0x1d
    3a18:	9e 01       	movw	r18, r28
    3a1a:	22 5e       	subi	r18, 0xE2	; 226
    3a1c:	3f 4f       	sbci	r19, 0xFF	; 255
    3a1e:	80 e0       	ldi	r24, 0x00	; 0
    3a20:	b9 01       	movw	r22, r18
    3a22:	49 2f       	mov	r20, r25
    3a24:	21 e0       	ldi	r18, 0x01	; 1
    3a26:	0e 94 09 08 	call	0x1012	; 0x1012 <CLCD_u8SpecialCharacter>
    3a2a:	80 e0       	ldi	r24, 0x00	; 0
    3a2c:	90 e0       	ldi	r25, 0x00	; 0
    3a2e:	a0 e2       	ldi	r26, 0x20	; 32
    3a30:	b2 e4       	ldi	r27, 0x42	; 66
    3a32:	89 8f       	std	Y+25, r24	; 0x19
    3a34:	9a 8f       	std	Y+26, r25	; 0x1a
    3a36:	ab 8f       	std	Y+27, r26	; 0x1b
    3a38:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a3a:	69 8d       	ldd	r22, Y+25	; 0x19
    3a3c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a40:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a42:	20 e0       	ldi	r18, 0x00	; 0
    3a44:	30 e0       	ldi	r19, 0x00	; 0
    3a46:	4a e7       	ldi	r20, 0x7A	; 122
    3a48:	55 e4       	ldi	r21, 0x45	; 69
    3a4a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3a4e:	dc 01       	movw	r26, r24
    3a50:	cb 01       	movw	r24, r22
    3a52:	8d 8b       	std	Y+21, r24	; 0x15
    3a54:	9e 8b       	std	Y+22, r25	; 0x16
    3a56:	af 8b       	std	Y+23, r26	; 0x17
    3a58:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3a5a:	6d 89       	ldd	r22, Y+21	; 0x15
    3a5c:	7e 89       	ldd	r23, Y+22	; 0x16
    3a5e:	8f 89       	ldd	r24, Y+23	; 0x17
    3a60:	98 8d       	ldd	r25, Y+24	; 0x18
    3a62:	20 e0       	ldi	r18, 0x00	; 0
    3a64:	30 e0       	ldi	r19, 0x00	; 0
    3a66:	40 e8       	ldi	r20, 0x80	; 128
    3a68:	5f e3       	ldi	r21, 0x3F	; 63
    3a6a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3a6e:	88 23       	and	r24, r24
    3a70:	2c f4       	brge	.+10     	; 0x3a7c <void_HamokshaF+0x108>
		__ticks = 1;
    3a72:	81 e0       	ldi	r24, 0x01	; 1
    3a74:	90 e0       	ldi	r25, 0x00	; 0
    3a76:	9c 8b       	std	Y+20, r25	; 0x14
    3a78:	8b 8b       	std	Y+19, r24	; 0x13
    3a7a:	3f c0       	rjmp	.+126    	; 0x3afa <void_HamokshaF+0x186>
	else if (__tmp > 65535)
    3a7c:	6d 89       	ldd	r22, Y+21	; 0x15
    3a7e:	7e 89       	ldd	r23, Y+22	; 0x16
    3a80:	8f 89       	ldd	r24, Y+23	; 0x17
    3a82:	98 8d       	ldd	r25, Y+24	; 0x18
    3a84:	20 e0       	ldi	r18, 0x00	; 0
    3a86:	3f ef       	ldi	r19, 0xFF	; 255
    3a88:	4f e7       	ldi	r20, 0x7F	; 127
    3a8a:	57 e4       	ldi	r21, 0x47	; 71
    3a8c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3a90:	18 16       	cp	r1, r24
    3a92:	4c f5       	brge	.+82     	; 0x3ae6 <void_HamokshaF+0x172>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a94:	69 8d       	ldd	r22, Y+25	; 0x19
    3a96:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a98:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a9a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a9c:	20 e0       	ldi	r18, 0x00	; 0
    3a9e:	30 e0       	ldi	r19, 0x00	; 0
    3aa0:	40 e2       	ldi	r20, 0x20	; 32
    3aa2:	51 e4       	ldi	r21, 0x41	; 65
    3aa4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3aa8:	dc 01       	movw	r26, r24
    3aaa:	cb 01       	movw	r24, r22
    3aac:	bc 01       	movw	r22, r24
    3aae:	cd 01       	movw	r24, r26
    3ab0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3ab4:	dc 01       	movw	r26, r24
    3ab6:	cb 01       	movw	r24, r22
    3ab8:	9c 8b       	std	Y+20, r25	; 0x14
    3aba:	8b 8b       	std	Y+19, r24	; 0x13
    3abc:	0f c0       	rjmp	.+30     	; 0x3adc <void_HamokshaF+0x168>
    3abe:	80 e9       	ldi	r24, 0x90	; 144
    3ac0:	91 e0       	ldi	r25, 0x01	; 1
    3ac2:	9a 8b       	std	Y+18, r25	; 0x12
    3ac4:	89 8b       	std	Y+17, r24	; 0x11
    3ac6:	89 89       	ldd	r24, Y+17	; 0x11
    3ac8:	9a 89       	ldd	r25, Y+18	; 0x12
    3aca:	01 97       	sbiw	r24, 0x01	; 1
    3acc:	f1 f7       	brne	.-4      	; 0x3aca <void_HamokshaF+0x156>
    3ace:	9a 8b       	std	Y+18, r25	; 0x12
    3ad0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ad2:	8b 89       	ldd	r24, Y+19	; 0x13
    3ad4:	9c 89       	ldd	r25, Y+20	; 0x14
    3ad6:	01 97       	sbiw	r24, 0x01	; 1
    3ad8:	9c 8b       	std	Y+20, r25	; 0x14
    3ada:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3adc:	8b 89       	ldd	r24, Y+19	; 0x13
    3ade:	9c 89       	ldd	r25, Y+20	; 0x14
    3ae0:	00 97       	sbiw	r24, 0x00	; 0
    3ae2:	69 f7       	brne	.-38     	; 0x3abe <void_HamokshaF+0x14a>
    3ae4:	14 c0       	rjmp	.+40     	; 0x3b0e <void_HamokshaF+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ae6:	6d 89       	ldd	r22, Y+21	; 0x15
    3ae8:	7e 89       	ldd	r23, Y+22	; 0x16
    3aea:	8f 89       	ldd	r24, Y+23	; 0x17
    3aec:	98 8d       	ldd	r25, Y+24	; 0x18
    3aee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3af2:	dc 01       	movw	r26, r24
    3af4:	cb 01       	movw	r24, r22
    3af6:	9c 8b       	std	Y+20, r25	; 0x14
    3af8:	8b 8b       	std	Y+19, r24	; 0x13
    3afa:	8b 89       	ldd	r24, Y+19	; 0x13
    3afc:	9c 89       	ldd	r25, Y+20	; 0x14
    3afe:	98 8b       	std	Y+16, r25	; 0x10
    3b00:	8f 87       	std	Y+15, r24	; 0x0f
    3b02:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b04:	98 89       	ldd	r25, Y+16	; 0x10
    3b06:	01 97       	sbiw	r24, 0x01	; 1
    3b08:	f1 f7       	brne	.-4      	; 0x3b06 <void_HamokshaF+0x192>
    3b0a:	98 8b       	std	Y+16, r25	; 0x10
    3b0c:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(40);
				CLCD_u8SpecialCharacter(0,Local_u8HamokshaPattern5,i,1);
    3b0e:	9e 01       	movw	r18, r28
    3b10:	2a 5d       	subi	r18, 0xDA	; 218
    3b12:	3f 4f       	sbci	r19, 0xFF	; 255
    3b14:	80 e0       	ldi	r24, 0x00	; 0
    3b16:	b9 01       	movw	r22, r18
    3b18:	4d 8d       	ldd	r20, Y+29	; 0x1d
    3b1a:	21 e0       	ldi	r18, 0x01	; 1
    3b1c:	0e 94 09 08 	call	0x1012	; 0x1012 <CLCD_u8SpecialCharacter>
    3b20:	80 e0       	ldi	r24, 0x00	; 0
    3b22:	90 e0       	ldi	r25, 0x00	; 0
    3b24:	a0 e2       	ldi	r26, 0x20	; 32
    3b26:	b2 e4       	ldi	r27, 0x42	; 66
    3b28:	8b 87       	std	Y+11, r24	; 0x0b
    3b2a:	9c 87       	std	Y+12, r25	; 0x0c
    3b2c:	ad 87       	std	Y+13, r26	; 0x0d
    3b2e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b30:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b32:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b34:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b36:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b38:	20 e0       	ldi	r18, 0x00	; 0
    3b3a:	30 e0       	ldi	r19, 0x00	; 0
    3b3c:	4a e7       	ldi	r20, 0x7A	; 122
    3b3e:	55 e4       	ldi	r21, 0x45	; 69
    3b40:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3b44:	dc 01       	movw	r26, r24
    3b46:	cb 01       	movw	r24, r22
    3b48:	8f 83       	std	Y+7, r24	; 0x07
    3b4a:	98 87       	std	Y+8, r25	; 0x08
    3b4c:	a9 87       	std	Y+9, r26	; 0x09
    3b4e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b50:	6f 81       	ldd	r22, Y+7	; 0x07
    3b52:	78 85       	ldd	r23, Y+8	; 0x08
    3b54:	89 85       	ldd	r24, Y+9	; 0x09
    3b56:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b58:	20 e0       	ldi	r18, 0x00	; 0
    3b5a:	30 e0       	ldi	r19, 0x00	; 0
    3b5c:	40 e8       	ldi	r20, 0x80	; 128
    3b5e:	5f e3       	ldi	r21, 0x3F	; 63
    3b60:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3b64:	88 23       	and	r24, r24
    3b66:	2c f4       	brge	.+10     	; 0x3b72 <void_HamokshaF+0x1fe>
		__ticks = 1;
    3b68:	81 e0       	ldi	r24, 0x01	; 1
    3b6a:	90 e0       	ldi	r25, 0x00	; 0
    3b6c:	9e 83       	std	Y+6, r25	; 0x06
    3b6e:	8d 83       	std	Y+5, r24	; 0x05
    3b70:	3f c0       	rjmp	.+126    	; 0x3bf0 <void_HamokshaF+0x27c>
	else if (__tmp > 65535)
    3b72:	6f 81       	ldd	r22, Y+7	; 0x07
    3b74:	78 85       	ldd	r23, Y+8	; 0x08
    3b76:	89 85       	ldd	r24, Y+9	; 0x09
    3b78:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b7a:	20 e0       	ldi	r18, 0x00	; 0
    3b7c:	3f ef       	ldi	r19, 0xFF	; 255
    3b7e:	4f e7       	ldi	r20, 0x7F	; 127
    3b80:	57 e4       	ldi	r21, 0x47	; 71
    3b82:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3b86:	18 16       	cp	r1, r24
    3b88:	4c f5       	brge	.+82     	; 0x3bdc <void_HamokshaF+0x268>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b90:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b92:	20 e0       	ldi	r18, 0x00	; 0
    3b94:	30 e0       	ldi	r19, 0x00	; 0
    3b96:	40 e2       	ldi	r20, 0x20	; 32
    3b98:	51 e4       	ldi	r21, 0x41	; 65
    3b9a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3b9e:	dc 01       	movw	r26, r24
    3ba0:	cb 01       	movw	r24, r22
    3ba2:	bc 01       	movw	r22, r24
    3ba4:	cd 01       	movw	r24, r26
    3ba6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3baa:	dc 01       	movw	r26, r24
    3bac:	cb 01       	movw	r24, r22
    3bae:	9e 83       	std	Y+6, r25	; 0x06
    3bb0:	8d 83       	std	Y+5, r24	; 0x05
    3bb2:	0f c0       	rjmp	.+30     	; 0x3bd2 <void_HamokshaF+0x25e>
    3bb4:	80 e9       	ldi	r24, 0x90	; 144
    3bb6:	91 e0       	ldi	r25, 0x01	; 1
    3bb8:	9c 83       	std	Y+4, r25	; 0x04
    3bba:	8b 83       	std	Y+3, r24	; 0x03
    3bbc:	8b 81       	ldd	r24, Y+3	; 0x03
    3bbe:	9c 81       	ldd	r25, Y+4	; 0x04
    3bc0:	01 97       	sbiw	r24, 0x01	; 1
    3bc2:	f1 f7       	brne	.-4      	; 0x3bc0 <void_HamokshaF+0x24c>
    3bc4:	9c 83       	std	Y+4, r25	; 0x04
    3bc6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bc8:	8d 81       	ldd	r24, Y+5	; 0x05
    3bca:	9e 81       	ldd	r25, Y+6	; 0x06
    3bcc:	01 97       	sbiw	r24, 0x01	; 1
    3bce:	9e 83       	std	Y+6, r25	; 0x06
    3bd0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bd2:	8d 81       	ldd	r24, Y+5	; 0x05
    3bd4:	9e 81       	ldd	r25, Y+6	; 0x06
    3bd6:	00 97       	sbiw	r24, 0x00	; 0
    3bd8:	69 f7       	brne	.-38     	; 0x3bb4 <void_HamokshaF+0x240>
    3bda:	14 c0       	rjmp	.+40     	; 0x3c04 <void_HamokshaF+0x290>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bdc:	6f 81       	ldd	r22, Y+7	; 0x07
    3bde:	78 85       	ldd	r23, Y+8	; 0x08
    3be0:	89 85       	ldd	r24, Y+9	; 0x09
    3be2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3be4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3be8:	dc 01       	movw	r26, r24
    3bea:	cb 01       	movw	r24, r22
    3bec:	9e 83       	std	Y+6, r25	; 0x06
    3bee:	8d 83       	std	Y+5, r24	; 0x05
    3bf0:	8d 81       	ldd	r24, Y+5	; 0x05
    3bf2:	9e 81       	ldd	r25, Y+6	; 0x06
    3bf4:	9a 83       	std	Y+2, r25	; 0x02
    3bf6:	89 83       	std	Y+1, r24	; 0x01
    3bf8:	89 81       	ldd	r24, Y+1	; 0x01
    3bfa:	9a 81       	ldd	r25, Y+2	; 0x02
    3bfc:	01 97       	sbiw	r24, 0x01	; 1
    3bfe:	f1 f7       	brne	.-4      	; 0x3bfc <void_HamokshaF+0x288>
    3c00:	9a 83       	std	Y+2, r25	; 0x02
    3c02:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(40);
				        i++;
    3c04:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3c06:	8f 5f       	subi	r24, 0xFF	; 255
    3c08:	8d 8f       	std	Y+29, r24	; 0x1d
	                                         0b00000100
	                                        ,0b00001001,
	                                         0b00001001,0};

		uint8 i=0;
		while(i<16)
    3c0a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3c0c:	80 31       	cpi	r24, 0x10	; 16
    3c0e:	08 f4       	brcc	.+2      	; 0x3c12 <void_HamokshaF+0x29e>
    3c10:	fd ce       	rjmp	.-518    	; 0x3a0c <void_HamokshaF+0x98>
				_delay_ms(40);
				CLCD_u8SpecialCharacter(0,Local_u8HamokshaPattern5,i,1);
				_delay_ms(40);
				        i++;
            }
}
    3c12:	e7 96       	adiw	r28, 0x37	; 55
    3c14:	0f b6       	in	r0, 0x3f	; 63
    3c16:	f8 94       	cli
    3c18:	de bf       	out	0x3e, r29	; 62
    3c1a:	0f be       	out	0x3f, r0	; 63
    3c1c:	cd bf       	out	0x3d, r28	; 61
    3c1e:	cf 91       	pop	r28
    3c20:	df 91       	pop	r29
    3c22:	08 95       	ret

00003c24 <void_HamokshaB>:
void void_HamokshaB()
{
    3c24:	df 93       	push	r29
    3c26:	cf 93       	push	r28
    3c28:	cd b7       	in	r28, 0x3d	; 61
    3c2a:	de b7       	in	r29, 0x3e	; 62
    3c2c:	e7 97       	sbiw	r28, 0x37	; 55
    3c2e:	0f b6       	in	r0, 0x3f	; 63
    3c30:	f8 94       	cli
    3c32:	de bf       	out	0x3e, r29	; 62
    3c34:	0f be       	out	0x3f, r0	; 63
    3c36:	cd bf       	out	0x3d, r28	; 61
	                                         0b00001110,
	                                         0b00000100,
	                                         0b00000100,
	                                         0b00000100
	                                        ,0b00001010,
	                                         0b00001010,0};
    3c38:	ce 01       	movw	r24, r28
    3c3a:	4e 96       	adiw	r24, 0x1e	; 30
    3c3c:	9f a7       	std	Y+47, r25	; 0x2f
    3c3e:	8e a7       	std	Y+46, r24	; 0x2e
    3c40:	e1 e9       	ldi	r30, 0x91	; 145
    3c42:	f1 e0       	ldi	r31, 0x01	; 1
    3c44:	f9 ab       	std	Y+49, r31	; 0x31
    3c46:	e8 ab       	std	Y+48, r30	; 0x30
    3c48:	f8 e0       	ldi	r31, 0x08	; 8
    3c4a:	fa ab       	std	Y+50, r31	; 0x32
    3c4c:	e8 a9       	ldd	r30, Y+48	; 0x30
    3c4e:	f9 a9       	ldd	r31, Y+49	; 0x31
    3c50:	00 80       	ld	r0, Z
    3c52:	88 a9       	ldd	r24, Y+48	; 0x30
    3c54:	99 a9       	ldd	r25, Y+49	; 0x31
    3c56:	01 96       	adiw	r24, 0x01	; 1
    3c58:	99 ab       	std	Y+49, r25	; 0x31
    3c5a:	88 ab       	std	Y+48, r24	; 0x30
    3c5c:	ee a5       	ldd	r30, Y+46	; 0x2e
    3c5e:	ff a5       	ldd	r31, Y+47	; 0x2f
    3c60:	00 82       	st	Z, r0
    3c62:	8e a5       	ldd	r24, Y+46	; 0x2e
    3c64:	9f a5       	ldd	r25, Y+47	; 0x2f
    3c66:	01 96       	adiw	r24, 0x01	; 1
    3c68:	9f a7       	std	Y+47, r25	; 0x2f
    3c6a:	8e a7       	std	Y+46, r24	; 0x2e
    3c6c:	9a a9       	ldd	r25, Y+50	; 0x32
    3c6e:	91 50       	subi	r25, 0x01	; 1
    3c70:	9a ab       	std	Y+50, r25	; 0x32
    3c72:	ea a9       	ldd	r30, Y+50	; 0x32
    3c74:	ee 23       	and	r30, r30
    3c76:	51 f7       	brne	.-44     	; 0x3c4c <void_HamokshaB+0x28>
	                                         0b00001110,
	                                         0b00000100,
	                                         0b00000100,
	                                         0b00000100
	                                        ,0b00001001,
	                                         0b00001001,0};
    3c78:	ce 01       	movw	r24, r28
    3c7a:	86 96       	adiw	r24, 0x26	; 38
    3c7c:	9c ab       	std	Y+52, r25	; 0x34
    3c7e:	8b ab       	std	Y+51, r24	; 0x33
    3c80:	e9 e8       	ldi	r30, 0x89	; 137
    3c82:	f1 e0       	ldi	r31, 0x01	; 1
    3c84:	fe ab       	std	Y+54, r31	; 0x36
    3c86:	ed ab       	std	Y+53, r30	; 0x35
    3c88:	f8 e0       	ldi	r31, 0x08	; 8
    3c8a:	ff ab       	std	Y+55, r31	; 0x37
    3c8c:	ed a9       	ldd	r30, Y+53	; 0x35
    3c8e:	fe a9       	ldd	r31, Y+54	; 0x36
    3c90:	00 80       	ld	r0, Z
    3c92:	8d a9       	ldd	r24, Y+53	; 0x35
    3c94:	9e a9       	ldd	r25, Y+54	; 0x36
    3c96:	01 96       	adiw	r24, 0x01	; 1
    3c98:	9e ab       	std	Y+54, r25	; 0x36
    3c9a:	8d ab       	std	Y+53, r24	; 0x35
    3c9c:	eb a9       	ldd	r30, Y+51	; 0x33
    3c9e:	fc a9       	ldd	r31, Y+52	; 0x34
    3ca0:	00 82       	st	Z, r0
    3ca2:	8b a9       	ldd	r24, Y+51	; 0x33
    3ca4:	9c a9       	ldd	r25, Y+52	; 0x34
    3ca6:	01 96       	adiw	r24, 0x01	; 1
    3ca8:	9c ab       	std	Y+52, r25	; 0x34
    3caa:	8b ab       	std	Y+51, r24	; 0x33
    3cac:	9f a9       	ldd	r25, Y+55	; 0x37
    3cae:	91 50       	subi	r25, 0x01	; 1
    3cb0:	9f ab       	std	Y+55, r25	; 0x37
    3cb2:	ef a9       	ldd	r30, Y+55	; 0x37
    3cb4:	ee 23       	and	r30, r30
    3cb6:	51 f7       	brne	.-44     	; 0x3c8c <void_HamokshaB+0x68>

	uint8 i=16;
    3cb8:	80 e1       	ldi	r24, 0x10	; 16
    3cba:	8d 8f       	std	Y+29, r24	; 0x1d
    3cbc:	ff c0       	rjmp	.+510    	; 0x3ebc <void_HamokshaB+0x298>
	  while(i<=16)
		   	{   CLCD_voidClear();
    3cbe:	0e 94 55 08 	call	0x10aa	; 0x10aa <CLCD_voidClear>
		   //	CLCD_VoidGoToXY(5,0);
		   	//CLCD_u8SendString("DONE");
		   		CLCD_u8SpecialCharacter(0,Local_u8HamokshaPattern4,i--,1);
    3cc2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3cc4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3cc6:	81 50       	subi	r24, 0x01	; 1
    3cc8:	8d 8f       	std	Y+29, r24	; 0x1d
    3cca:	9e 01       	movw	r18, r28
    3ccc:	22 5e       	subi	r18, 0xE2	; 226
    3cce:	3f 4f       	sbci	r19, 0xFF	; 255
    3cd0:	80 e0       	ldi	r24, 0x00	; 0
    3cd2:	b9 01       	movw	r22, r18
    3cd4:	49 2f       	mov	r20, r25
    3cd6:	21 e0       	ldi	r18, 0x01	; 1
    3cd8:	0e 94 09 08 	call	0x1012	; 0x1012 <CLCD_u8SpecialCharacter>
    3cdc:	80 e0       	ldi	r24, 0x00	; 0
    3cde:	90 e0       	ldi	r25, 0x00	; 0
    3ce0:	a0 e2       	ldi	r26, 0x20	; 32
    3ce2:	b2 e4       	ldi	r27, 0x42	; 66
    3ce4:	89 8f       	std	Y+25, r24	; 0x19
    3ce6:	9a 8f       	std	Y+26, r25	; 0x1a
    3ce8:	ab 8f       	std	Y+27, r26	; 0x1b
    3cea:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cec:	69 8d       	ldd	r22, Y+25	; 0x19
    3cee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3cf0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3cf2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3cf4:	20 e0       	ldi	r18, 0x00	; 0
    3cf6:	30 e0       	ldi	r19, 0x00	; 0
    3cf8:	4a e7       	ldi	r20, 0x7A	; 122
    3cfa:	55 e4       	ldi	r21, 0x45	; 69
    3cfc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3d00:	dc 01       	movw	r26, r24
    3d02:	cb 01       	movw	r24, r22
    3d04:	8d 8b       	std	Y+21, r24	; 0x15
    3d06:	9e 8b       	std	Y+22, r25	; 0x16
    3d08:	af 8b       	std	Y+23, r26	; 0x17
    3d0a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3d0c:	6d 89       	ldd	r22, Y+21	; 0x15
    3d0e:	7e 89       	ldd	r23, Y+22	; 0x16
    3d10:	8f 89       	ldd	r24, Y+23	; 0x17
    3d12:	98 8d       	ldd	r25, Y+24	; 0x18
    3d14:	20 e0       	ldi	r18, 0x00	; 0
    3d16:	30 e0       	ldi	r19, 0x00	; 0
    3d18:	40 e8       	ldi	r20, 0x80	; 128
    3d1a:	5f e3       	ldi	r21, 0x3F	; 63
    3d1c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3d20:	88 23       	and	r24, r24
    3d22:	2c f4       	brge	.+10     	; 0x3d2e <void_HamokshaB+0x10a>
		__ticks = 1;
    3d24:	81 e0       	ldi	r24, 0x01	; 1
    3d26:	90 e0       	ldi	r25, 0x00	; 0
    3d28:	9c 8b       	std	Y+20, r25	; 0x14
    3d2a:	8b 8b       	std	Y+19, r24	; 0x13
    3d2c:	3f c0       	rjmp	.+126    	; 0x3dac <void_HamokshaB+0x188>
	else if (__tmp > 65535)
    3d2e:	6d 89       	ldd	r22, Y+21	; 0x15
    3d30:	7e 89       	ldd	r23, Y+22	; 0x16
    3d32:	8f 89       	ldd	r24, Y+23	; 0x17
    3d34:	98 8d       	ldd	r25, Y+24	; 0x18
    3d36:	20 e0       	ldi	r18, 0x00	; 0
    3d38:	3f ef       	ldi	r19, 0xFF	; 255
    3d3a:	4f e7       	ldi	r20, 0x7F	; 127
    3d3c:	57 e4       	ldi	r21, 0x47	; 71
    3d3e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3d42:	18 16       	cp	r1, r24
    3d44:	4c f5       	brge	.+82     	; 0x3d98 <void_HamokshaB+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d46:	69 8d       	ldd	r22, Y+25	; 0x19
    3d48:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d4a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d4c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d4e:	20 e0       	ldi	r18, 0x00	; 0
    3d50:	30 e0       	ldi	r19, 0x00	; 0
    3d52:	40 e2       	ldi	r20, 0x20	; 32
    3d54:	51 e4       	ldi	r21, 0x41	; 65
    3d56:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3d5a:	dc 01       	movw	r26, r24
    3d5c:	cb 01       	movw	r24, r22
    3d5e:	bc 01       	movw	r22, r24
    3d60:	cd 01       	movw	r24, r26
    3d62:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3d66:	dc 01       	movw	r26, r24
    3d68:	cb 01       	movw	r24, r22
    3d6a:	9c 8b       	std	Y+20, r25	; 0x14
    3d6c:	8b 8b       	std	Y+19, r24	; 0x13
    3d6e:	0f c0       	rjmp	.+30     	; 0x3d8e <void_HamokshaB+0x16a>
    3d70:	80 e9       	ldi	r24, 0x90	; 144
    3d72:	91 e0       	ldi	r25, 0x01	; 1
    3d74:	9a 8b       	std	Y+18, r25	; 0x12
    3d76:	89 8b       	std	Y+17, r24	; 0x11
    3d78:	89 89       	ldd	r24, Y+17	; 0x11
    3d7a:	9a 89       	ldd	r25, Y+18	; 0x12
    3d7c:	01 97       	sbiw	r24, 0x01	; 1
    3d7e:	f1 f7       	brne	.-4      	; 0x3d7c <void_HamokshaB+0x158>
    3d80:	9a 8b       	std	Y+18, r25	; 0x12
    3d82:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d84:	8b 89       	ldd	r24, Y+19	; 0x13
    3d86:	9c 89       	ldd	r25, Y+20	; 0x14
    3d88:	01 97       	sbiw	r24, 0x01	; 1
    3d8a:	9c 8b       	std	Y+20, r25	; 0x14
    3d8c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d8e:	8b 89       	ldd	r24, Y+19	; 0x13
    3d90:	9c 89       	ldd	r25, Y+20	; 0x14
    3d92:	00 97       	sbiw	r24, 0x00	; 0
    3d94:	69 f7       	brne	.-38     	; 0x3d70 <void_HamokshaB+0x14c>
    3d96:	14 c0       	rjmp	.+40     	; 0x3dc0 <void_HamokshaB+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d98:	6d 89       	ldd	r22, Y+21	; 0x15
    3d9a:	7e 89       	ldd	r23, Y+22	; 0x16
    3d9c:	8f 89       	ldd	r24, Y+23	; 0x17
    3d9e:	98 8d       	ldd	r25, Y+24	; 0x18
    3da0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3da4:	dc 01       	movw	r26, r24
    3da6:	cb 01       	movw	r24, r22
    3da8:	9c 8b       	std	Y+20, r25	; 0x14
    3daa:	8b 8b       	std	Y+19, r24	; 0x13
    3dac:	8b 89       	ldd	r24, Y+19	; 0x13
    3dae:	9c 89       	ldd	r25, Y+20	; 0x14
    3db0:	98 8b       	std	Y+16, r25	; 0x10
    3db2:	8f 87       	std	Y+15, r24	; 0x0f
    3db4:	8f 85       	ldd	r24, Y+15	; 0x0f
    3db6:	98 89       	ldd	r25, Y+16	; 0x10
    3db8:	01 97       	sbiw	r24, 0x01	; 1
    3dba:	f1 f7       	brne	.-4      	; 0x3db8 <void_HamokshaB+0x194>
    3dbc:	98 8b       	std	Y+16, r25	; 0x10
    3dbe:	8f 87       	std	Y+15, r24	; 0x0f
		   		_delay_ms(40);
		   		CLCD_u8SpecialCharacter(0,Local_u8HamokshaPattern5,i,1);
    3dc0:	9e 01       	movw	r18, r28
    3dc2:	2a 5d       	subi	r18, 0xDA	; 218
    3dc4:	3f 4f       	sbci	r19, 0xFF	; 255
    3dc6:	80 e0       	ldi	r24, 0x00	; 0
    3dc8:	b9 01       	movw	r22, r18
    3dca:	4d 8d       	ldd	r20, Y+29	; 0x1d
    3dcc:	21 e0       	ldi	r18, 0x01	; 1
    3dce:	0e 94 09 08 	call	0x1012	; 0x1012 <CLCD_u8SpecialCharacter>
    3dd2:	80 e0       	ldi	r24, 0x00	; 0
    3dd4:	90 e0       	ldi	r25, 0x00	; 0
    3dd6:	a0 e2       	ldi	r26, 0x20	; 32
    3dd8:	b2 e4       	ldi	r27, 0x42	; 66
    3dda:	8b 87       	std	Y+11, r24	; 0x0b
    3ddc:	9c 87       	std	Y+12, r25	; 0x0c
    3dde:	ad 87       	std	Y+13, r26	; 0x0d
    3de0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3de2:	6b 85       	ldd	r22, Y+11	; 0x0b
    3de4:	7c 85       	ldd	r23, Y+12	; 0x0c
    3de6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3de8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3dea:	20 e0       	ldi	r18, 0x00	; 0
    3dec:	30 e0       	ldi	r19, 0x00	; 0
    3dee:	4a e7       	ldi	r20, 0x7A	; 122
    3df0:	55 e4       	ldi	r21, 0x45	; 69
    3df2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3df6:	dc 01       	movw	r26, r24
    3df8:	cb 01       	movw	r24, r22
    3dfa:	8f 83       	std	Y+7, r24	; 0x07
    3dfc:	98 87       	std	Y+8, r25	; 0x08
    3dfe:	a9 87       	std	Y+9, r26	; 0x09
    3e00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3e02:	6f 81       	ldd	r22, Y+7	; 0x07
    3e04:	78 85       	ldd	r23, Y+8	; 0x08
    3e06:	89 85       	ldd	r24, Y+9	; 0x09
    3e08:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e0a:	20 e0       	ldi	r18, 0x00	; 0
    3e0c:	30 e0       	ldi	r19, 0x00	; 0
    3e0e:	40 e8       	ldi	r20, 0x80	; 128
    3e10:	5f e3       	ldi	r21, 0x3F	; 63
    3e12:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3e16:	88 23       	and	r24, r24
    3e18:	2c f4       	brge	.+10     	; 0x3e24 <void_HamokshaB+0x200>
		__ticks = 1;
    3e1a:	81 e0       	ldi	r24, 0x01	; 1
    3e1c:	90 e0       	ldi	r25, 0x00	; 0
    3e1e:	9e 83       	std	Y+6, r25	; 0x06
    3e20:	8d 83       	std	Y+5, r24	; 0x05
    3e22:	3f c0       	rjmp	.+126    	; 0x3ea2 <void_HamokshaB+0x27e>
	else if (__tmp > 65535)
    3e24:	6f 81       	ldd	r22, Y+7	; 0x07
    3e26:	78 85       	ldd	r23, Y+8	; 0x08
    3e28:	89 85       	ldd	r24, Y+9	; 0x09
    3e2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e2c:	20 e0       	ldi	r18, 0x00	; 0
    3e2e:	3f ef       	ldi	r19, 0xFF	; 255
    3e30:	4f e7       	ldi	r20, 0x7F	; 127
    3e32:	57 e4       	ldi	r21, 0x47	; 71
    3e34:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3e38:	18 16       	cp	r1, r24
    3e3a:	4c f5       	brge	.+82     	; 0x3e8e <void_HamokshaB+0x26a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e40:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e42:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e44:	20 e0       	ldi	r18, 0x00	; 0
    3e46:	30 e0       	ldi	r19, 0x00	; 0
    3e48:	40 e2       	ldi	r20, 0x20	; 32
    3e4a:	51 e4       	ldi	r21, 0x41	; 65
    3e4c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3e50:	dc 01       	movw	r26, r24
    3e52:	cb 01       	movw	r24, r22
    3e54:	bc 01       	movw	r22, r24
    3e56:	cd 01       	movw	r24, r26
    3e58:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3e5c:	dc 01       	movw	r26, r24
    3e5e:	cb 01       	movw	r24, r22
    3e60:	9e 83       	std	Y+6, r25	; 0x06
    3e62:	8d 83       	std	Y+5, r24	; 0x05
    3e64:	0f c0       	rjmp	.+30     	; 0x3e84 <void_HamokshaB+0x260>
    3e66:	80 e9       	ldi	r24, 0x90	; 144
    3e68:	91 e0       	ldi	r25, 0x01	; 1
    3e6a:	9c 83       	std	Y+4, r25	; 0x04
    3e6c:	8b 83       	std	Y+3, r24	; 0x03
    3e6e:	8b 81       	ldd	r24, Y+3	; 0x03
    3e70:	9c 81       	ldd	r25, Y+4	; 0x04
    3e72:	01 97       	sbiw	r24, 0x01	; 1
    3e74:	f1 f7       	brne	.-4      	; 0x3e72 <void_HamokshaB+0x24e>
    3e76:	9c 83       	std	Y+4, r25	; 0x04
    3e78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e7a:	8d 81       	ldd	r24, Y+5	; 0x05
    3e7c:	9e 81       	ldd	r25, Y+6	; 0x06
    3e7e:	01 97       	sbiw	r24, 0x01	; 1
    3e80:	9e 83       	std	Y+6, r25	; 0x06
    3e82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e84:	8d 81       	ldd	r24, Y+5	; 0x05
    3e86:	9e 81       	ldd	r25, Y+6	; 0x06
    3e88:	00 97       	sbiw	r24, 0x00	; 0
    3e8a:	69 f7       	brne	.-38     	; 0x3e66 <void_HamokshaB+0x242>
    3e8c:	14 c0       	rjmp	.+40     	; 0x3eb6 <void_HamokshaB+0x292>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e8e:	6f 81       	ldd	r22, Y+7	; 0x07
    3e90:	78 85       	ldd	r23, Y+8	; 0x08
    3e92:	89 85       	ldd	r24, Y+9	; 0x09
    3e94:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e96:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3e9a:	dc 01       	movw	r26, r24
    3e9c:	cb 01       	movw	r24, r22
    3e9e:	9e 83       	std	Y+6, r25	; 0x06
    3ea0:	8d 83       	std	Y+5, r24	; 0x05
    3ea2:	8d 81       	ldd	r24, Y+5	; 0x05
    3ea4:	9e 81       	ldd	r25, Y+6	; 0x06
    3ea6:	9a 83       	std	Y+2, r25	; 0x02
    3ea8:	89 83       	std	Y+1, r24	; 0x01
    3eaa:	89 81       	ldd	r24, Y+1	; 0x01
    3eac:	9a 81       	ldd	r25, Y+2	; 0x02
    3eae:	01 97       	sbiw	r24, 0x01	; 1
    3eb0:	f1 f7       	brne	.-4      	; 0x3eae <void_HamokshaB+0x28a>
    3eb2:	9a 83       	std	Y+2, r25	; 0x02
    3eb4:	89 83       	std	Y+1, r24	; 0x01
		   		_delay_ms(40);
		   		        i--;
    3eb6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3eb8:	81 50       	subi	r24, 0x01	; 1
    3eba:	8d 8f       	std	Y+29, r24	; 0x1d
	                                         0b00000100
	                                        ,0b00001001,
	                                         0b00001001,0};

	uint8 i=16;
	  while(i<=16)
    3ebc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3ebe:	81 31       	cpi	r24, 0x11	; 17
    3ec0:	08 f4       	brcc	.+2      	; 0x3ec4 <void_HamokshaB+0x2a0>
    3ec2:	fd ce       	rjmp	.-518    	; 0x3cbe <void_HamokshaB+0x9a>
		   		CLCD_u8SpecialCharacter(0,Local_u8HamokshaPattern5,i,1);
		   		_delay_ms(40);
		   		        i--;

		   	}
}
    3ec4:	e7 96       	adiw	r28, 0x37	; 55
    3ec6:	0f b6       	in	r0, 0x3f	; 63
    3ec8:	f8 94       	cli
    3eca:	de bf       	out	0x3e, r29	; 62
    3ecc:	0f be       	out	0x3f, r0	; 63
    3ece:	cd bf       	out	0x3d, r28	; 61
    3ed0:	cf 91       	pop	r28
    3ed2:	df 91       	pop	r29
    3ed4:	08 95       	ret

00003ed6 <KPD_u8GetPressedKey>:

#include "KPD_interface.h"
#include "KPD_prv.h"
#include "KPD_cfg.h"
uint8 KPD_u8GetPressedKey(void)
{
    3ed6:	df 93       	push	r29
    3ed8:	cf 93       	push	r28
    3eda:	cd b7       	in	r28, 0x3d	; 61
    3edc:	de b7       	in	r29, 0x3e	; 62
    3ede:	a2 97       	sbiw	r28, 0x22	; 34
    3ee0:	0f b6       	in	r0, 0x3f	; 63
    3ee2:	f8 94       	cli
    3ee4:	de bf       	out	0x3e, r29	; 62
    3ee6:	0f be       	out	0x3f, r0	; 63
    3ee8:	cd bf       	out	0x3d, r28	; 61

	uint8 Local_u8ColIdx,Local_u8RowIdx,Local_u8PinState,Local_u8PressedKey=KPD_u8NoPressed_Key_Val;
    3eea:	8f ef       	ldi	r24, 0xFF	; 255
    3eec:	89 83       	std	Y+1, r24	; 0x01

	uint8 Local_au8ColArr[COL_NUM]={KPD_u8COL0_PIN,KPD_u8COL1_PIN,KPD_u8COL2_PIN,KPD_u8COL3_PIN};
    3eee:	82 e0       	ldi	r24, 0x02	; 2
    3ef0:	8d 83       	std	Y+5, r24	; 0x05
    3ef2:	83 e0       	ldi	r24, 0x03	; 3
    3ef4:	8e 83       	std	Y+6, r24	; 0x06
    3ef6:	84 e0       	ldi	r24, 0x04	; 4
    3ef8:	8f 83       	std	Y+7, r24	; 0x07
    3efa:	85 e0       	ldi	r24, 0x05	; 5
    3efc:	88 87       	std	Y+8, r24	; 0x08

	uint8 Local_au8RowArr[ROW_NUM]={KPD_u8ROW0_PIN,KPD_u8ROW1_PIN,KPD_u8ROW2_PIN,KPD_u8ROW3_PIN};
    3efe:	84 e0       	ldi	r24, 0x04	; 4
    3f00:	89 87       	std	Y+9, r24	; 0x09
    3f02:	85 e0       	ldi	r24, 0x05	; 5
    3f04:	8a 87       	std	Y+10, r24	; 0x0a
    3f06:	86 e0       	ldi	r24, 0x06	; 6
    3f08:	8b 87       	std	Y+11, r24	; 0x0b
    3f0a:	87 e0       	ldi	r24, 0x07	; 7
    3f0c:	8c 87       	std	Y+12, r24	; 0x0c

	uint8 Local_au8KPDArr[ROW_NUM][COL_NUM]=KPD_au8_BUTTON_ARR;
    3f0e:	ce 01       	movw	r24, r28
    3f10:	0d 96       	adiw	r24, 0x0d	; 13
    3f12:	9f 8f       	std	Y+31, r25	; 0x1f
    3f14:	8e 8f       	std	Y+30, r24	; 0x1e
    3f16:	e9 e9       	ldi	r30, 0x99	; 153
    3f18:	f1 e0       	ldi	r31, 0x01	; 1
    3f1a:	f9 a3       	std	Y+33, r31	; 0x21
    3f1c:	e8 a3       	std	Y+32, r30	; 0x20
    3f1e:	f0 e1       	ldi	r31, 0x10	; 16
    3f20:	fa a3       	std	Y+34, r31	; 0x22
    3f22:	e8 a1       	ldd	r30, Y+32	; 0x20
    3f24:	f9 a1       	ldd	r31, Y+33	; 0x21
    3f26:	00 80       	ld	r0, Z
    3f28:	88 a1       	ldd	r24, Y+32	; 0x20
    3f2a:	99 a1       	ldd	r25, Y+33	; 0x21
    3f2c:	01 96       	adiw	r24, 0x01	; 1
    3f2e:	99 a3       	std	Y+33, r25	; 0x21
    3f30:	88 a3       	std	Y+32, r24	; 0x20
    3f32:	ee 8d       	ldd	r30, Y+30	; 0x1e
    3f34:	ff 8d       	ldd	r31, Y+31	; 0x1f
    3f36:	00 82       	st	Z, r0
    3f38:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3f3a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3f3c:	01 96       	adiw	r24, 0x01	; 1
    3f3e:	9f 8f       	std	Y+31, r25	; 0x1f
    3f40:	8e 8f       	std	Y+30, r24	; 0x1e
    3f42:	9a a1       	ldd	r25, Y+34	; 0x22
    3f44:	91 50       	subi	r25, 0x01	; 1
    3f46:	9a a3       	std	Y+34, r25	; 0x22
    3f48:	ea a1       	ldd	r30, Y+34	; 0x22
    3f4a:	ee 23       	and	r30, r30
    3f4c:	51 f7       	brne	.-44     	; 0x3f22 <KPD_u8GetPressedKey+0x4c>
	/*Activate the column pins*/
	for(Local_u8ColIdx=0u; Local_u8ColIdx <COL_NUM ;Local_u8ColIdx++)
    3f4e:	1b 82       	std	Y+3, r1	; 0x03
    3f50:	68 c0       	rjmp	.+208    	; 0x4022 <KPD_u8GetPressedKey+0x14c>
	{
		/*Activate the current column by low signal */
		DIO_u8SetPinValue(KPD_u8Col_PORT,Local_au8ColArr[Local_u8ColIdx],DIO_u8PIN_LOW);
    3f52:	8b 81       	ldd	r24, Y+3	; 0x03
    3f54:	28 2f       	mov	r18, r24
    3f56:	30 e0       	ldi	r19, 0x00	; 0
    3f58:	ce 01       	movw	r24, r28
    3f5a:	05 96       	adiw	r24, 0x05	; 5
    3f5c:	fc 01       	movw	r30, r24
    3f5e:	e2 0f       	add	r30, r18
    3f60:	f3 1f       	adc	r31, r19
    3f62:	90 81       	ld	r25, Z
    3f64:	83 e0       	ldi	r24, 0x03	; 3
    3f66:	69 2f       	mov	r22, r25
    3f68:	40 e0       	ldi	r20, 0x00	; 0
    3f6a:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <DIO_u8SetPinValue>
		/*Read Row pins*/
		for(Local_u8RowIdx=0u;Local_u8RowIdx<ROW_NUM;Local_u8RowIdx++)
    3f6e:	1a 82       	std	Y+2, r1	; 0x02
    3f70:	43 c0       	rjmp	.+134    	; 0x3ff8 <KPD_u8GetPressedKey+0x122>
		{
			/* Read the current Row*/
			DIO_u8ReadPinValue(KPD_u8ROW_PORT,Local_au8RowArr[Local_u8RowIdx],&Local_u8PinState);
    3f72:	8a 81       	ldd	r24, Y+2	; 0x02
    3f74:	28 2f       	mov	r18, r24
    3f76:	30 e0       	ldi	r19, 0x00	; 0
    3f78:	ce 01       	movw	r24, r28
    3f7a:	09 96       	adiw	r24, 0x09	; 9
    3f7c:	fc 01       	movw	r30, r24
    3f7e:	e2 0f       	add	r30, r18
    3f80:	f3 1f       	adc	r31, r19
    3f82:	90 81       	ld	r25, Z
    3f84:	9e 01       	movw	r18, r28
    3f86:	2c 5f       	subi	r18, 0xFC	; 252
    3f88:	3f 4f       	sbci	r19, 0xFF	; 255
    3f8a:	81 e0       	ldi	r24, 0x01	; 1
    3f8c:	69 2f       	mov	r22, r25
    3f8e:	a9 01       	movw	r20, r18
    3f90:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <DIO_u8ReadPinValue>
			if(Local_u8PinState==DIO_u8PIN_LOW)
    3f94:	8c 81       	ldd	r24, Y+4	; 0x04
    3f96:	88 23       	and	r24, r24
    3f98:	61 f5       	brne	.+88     	; 0x3ff2 <KPD_u8GetPressedKey+0x11c>
			{
             Local_u8PressedKey=Local_au8KPDArr[Local_u8RowIdx][Local_u8ColIdx];
    3f9a:	8a 81       	ldd	r24, Y+2	; 0x02
    3f9c:	28 2f       	mov	r18, r24
    3f9e:	30 e0       	ldi	r19, 0x00	; 0
    3fa0:	8b 81       	ldd	r24, Y+3	; 0x03
    3fa2:	48 2f       	mov	r20, r24
    3fa4:	50 e0       	ldi	r21, 0x00	; 0
    3fa6:	22 0f       	add	r18, r18
    3fa8:	33 1f       	adc	r19, r19
    3faa:	22 0f       	add	r18, r18
    3fac:	33 1f       	adc	r19, r19
    3fae:	ce 01       	movw	r24, r28
    3fb0:	01 96       	adiw	r24, 0x01	; 1
    3fb2:	82 0f       	add	r24, r18
    3fb4:	93 1f       	adc	r25, r19
    3fb6:	84 0f       	add	r24, r20
    3fb8:	95 1f       	adc	r25, r21
    3fba:	fc 01       	movw	r30, r24
    3fbc:	3c 96       	adiw	r30, 0x0c	; 12
    3fbe:	80 81       	ld	r24, Z
    3fc0:	89 83       	std	Y+1, r24	; 0x01
    3fc2:	11 c0       	rjmp	.+34     	; 0x3fe6 <KPD_u8GetPressedKey+0x110>
             /*Pooling with Blocking"waiting" until the key is released*/
             while(Local_u8PinState==DIO_u8PIN_LOW)
             {
            	 DIO_u8ReadPinValue(KPD_u8ROW_PORT,Local_au8RowArr[Local_u8RowIdx],&Local_u8PinState);
    3fc4:	8a 81       	ldd	r24, Y+2	; 0x02
    3fc6:	28 2f       	mov	r18, r24
    3fc8:	30 e0       	ldi	r19, 0x00	; 0
    3fca:	ce 01       	movw	r24, r28
    3fcc:	09 96       	adiw	r24, 0x09	; 9
    3fce:	fc 01       	movw	r30, r24
    3fd0:	e2 0f       	add	r30, r18
    3fd2:	f3 1f       	adc	r31, r19
    3fd4:	90 81       	ld	r25, Z
    3fd6:	9e 01       	movw	r18, r28
    3fd8:	2c 5f       	subi	r18, 0xFC	; 252
    3fda:	3f 4f       	sbci	r19, 0xFF	; 255
    3fdc:	81 e0       	ldi	r24, 0x01	; 1
    3fde:	69 2f       	mov	r22, r25
    3fe0:	a9 01       	movw	r20, r18
    3fe2:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <DIO_u8ReadPinValue>
			DIO_u8ReadPinValue(KPD_u8ROW_PORT,Local_au8RowArr[Local_u8RowIdx],&Local_u8PinState);
			if(Local_u8PinState==DIO_u8PIN_LOW)
			{
             Local_u8PressedKey=Local_au8KPDArr[Local_u8RowIdx][Local_u8ColIdx];
             /*Pooling with Blocking"waiting" until the key is released*/
             while(Local_u8PinState==DIO_u8PIN_LOW)
    3fe6:	8c 81       	ldd	r24, Y+4	; 0x04
    3fe8:	88 23       	and	r24, r24
    3fea:	61 f3       	breq	.-40     	; 0x3fc4 <KPD_u8GetPressedKey+0xee>
             {
            	 DIO_u8ReadPinValue(KPD_u8ROW_PORT,Local_au8RowArr[Local_u8RowIdx],&Local_u8PinState);
             }
             return Local_u8PressedKey;
    3fec:	f9 81       	ldd	r31, Y+1	; 0x01
    3fee:	fd 8f       	std	Y+29, r31	; 0x1d
    3ff0:	1e c0       	rjmp	.+60     	; 0x402e <KPD_u8GetPressedKey+0x158>
	for(Local_u8ColIdx=0u; Local_u8ColIdx <COL_NUM ;Local_u8ColIdx++)
	{
		/*Activate the current column by low signal */
		DIO_u8SetPinValue(KPD_u8Col_PORT,Local_au8ColArr[Local_u8ColIdx],DIO_u8PIN_LOW);
		/*Read Row pins*/
		for(Local_u8RowIdx=0u;Local_u8RowIdx<ROW_NUM;Local_u8RowIdx++)
    3ff2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ff4:	8f 5f       	subi	r24, 0xFF	; 255
    3ff6:	8a 83       	std	Y+2, r24	; 0x02
    3ff8:	8a 81       	ldd	r24, Y+2	; 0x02
    3ffa:	84 30       	cpi	r24, 0x04	; 4
    3ffc:	08 f4       	brcc	.+2      	; 0x4000 <KPD_u8GetPressedKey+0x12a>
    3ffe:	b9 cf       	rjmp	.-142    	; 0x3f72 <KPD_u8GetPressedKey+0x9c>
             }
             return Local_u8PressedKey;
			}
		}
		/*Deactivate the current column*/
		DIO_u8SetPinValue(KPD_u8Col_PORT,Local_au8ColArr[Local_u8ColIdx],DIO_u8PIN_HIGH);
    4000:	8b 81       	ldd	r24, Y+3	; 0x03
    4002:	28 2f       	mov	r18, r24
    4004:	30 e0       	ldi	r19, 0x00	; 0
    4006:	ce 01       	movw	r24, r28
    4008:	05 96       	adiw	r24, 0x05	; 5
    400a:	fc 01       	movw	r30, r24
    400c:	e2 0f       	add	r30, r18
    400e:	f3 1f       	adc	r31, r19
    4010:	90 81       	ld	r25, Z
    4012:	83 e0       	ldi	r24, 0x03	; 3
    4014:	69 2f       	mov	r22, r25
    4016:	41 e0       	ldi	r20, 0x01	; 1
    4018:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <DIO_u8SetPinValue>

	uint8 Local_au8RowArr[ROW_NUM]={KPD_u8ROW0_PIN,KPD_u8ROW1_PIN,KPD_u8ROW2_PIN,KPD_u8ROW3_PIN};

	uint8 Local_au8KPDArr[ROW_NUM][COL_NUM]=KPD_au8_BUTTON_ARR;
	/*Activate the column pins*/
	for(Local_u8ColIdx=0u; Local_u8ColIdx <COL_NUM ;Local_u8ColIdx++)
    401c:	8b 81       	ldd	r24, Y+3	; 0x03
    401e:	8f 5f       	subi	r24, 0xFF	; 255
    4020:	8b 83       	std	Y+3, r24	; 0x03
    4022:	8b 81       	ldd	r24, Y+3	; 0x03
    4024:	84 30       	cpi	r24, 0x04	; 4
    4026:	08 f4       	brcc	.+2      	; 0x402a <KPD_u8GetPressedKey+0x154>
    4028:	94 cf       	rjmp	.-216    	; 0x3f52 <KPD_u8GetPressedKey+0x7c>
			}
		}
		/*Deactivate the current column*/
		DIO_u8SetPinValue(KPD_u8Col_PORT,Local_au8ColArr[Local_u8ColIdx],DIO_u8PIN_HIGH);
	}
return  Local_u8PressedKey;
    402a:	89 81       	ldd	r24, Y+1	; 0x01
    402c:	8d 8f       	std	Y+29, r24	; 0x1d
    402e:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    4030:	a2 96       	adiw	r28, 0x22	; 34
    4032:	0f b6       	in	r0, 0x3f	; 63
    4034:	f8 94       	cli
    4036:	de bf       	out	0x3e, r29	; 62
    4038:	0f be       	out	0x3f, r0	; 63
    403a:	cd bf       	out	0x3d, r28	; 61
    403c:	cf 91       	pop	r28
    403e:	df 91       	pop	r29
    4040:	08 95       	ret

00004042 <PORT_voidInit>:
#include  "PORT_prv.h"
#include "PORT_cfg.h"
#include  "PORT_interface.h"
#include "PORT_reg.h"
void PORT_voidInit(void)
{
    4042:	df 93       	push	r29
    4044:	cf 93       	push	r28
    4046:	cd b7       	in	r28, 0x3d	; 61
    4048:	de b7       	in	r29, 0x3e	; 62
	DDRA=PORTA_DIR;
    404a:	ea e3       	ldi	r30, 0x3A	; 58
    404c:	f0 e0       	ldi	r31, 0x00	; 0
    404e:	8f ef       	ldi	r24, 0xFF	; 255
    4050:	80 83       	st	Z, r24
	DDRB=PORTB_DIR;
    4052:	e7 e3       	ldi	r30, 0x37	; 55
    4054:	f0 e0       	ldi	r31, 0x00	; 0
    4056:	8f e0       	ldi	r24, 0x0F	; 15
    4058:	80 83       	st	Z, r24
	DDRC=PORTC_DIR;
    405a:	e4 e3       	ldi	r30, 0x34	; 52
    405c:	f0 e0       	ldi	r31, 0x00	; 0
    405e:	88 e1       	ldi	r24, 0x18	; 24
    4060:	80 83       	st	Z, r24
	DDRD=PORTD_DIR;
    4062:	e1 e3       	ldi	r30, 0x31	; 49
    4064:	f0 e0       	ldi	r31, 0x00	; 0
    4066:	8c e3       	ldi	r24, 0x3C	; 60
    4068:	80 83       	st	Z, r24
	
	PORTA=PORTA_INIT_VAL;
    406a:	eb e3       	ldi	r30, 0x3B	; 59
    406c:	f0 e0       	ldi	r31, 0x00	; 0
    406e:	10 82       	st	Z, r1
	PORTB=PORTB_INIT_VAL;
    4070:	e8 e3       	ldi	r30, 0x38	; 56
    4072:	f0 e0       	ldi	r31, 0x00	; 0
    4074:	80 ef       	ldi	r24, 0xF0	; 240
    4076:	80 83       	st	Z, r24
	PORTC=PORTC_INIT_VAL;
    4078:	e5 e3       	ldi	r30, 0x35	; 53
    407a:	f0 e0       	ldi	r31, 0x00	; 0
    407c:	8f ef       	ldi	r24, 0xFF	; 255
    407e:	80 83       	st	Z, r24
	PORTD=PORTD_INIT_VAL;
    4080:	e2 e3       	ldi	r30, 0x32	; 50
    4082:	f0 e0       	ldi	r31, 0x00	; 0
    4084:	8c e3       	ldi	r24, 0x3C	; 60
    4086:	80 83       	st	Z, r24

}
    4088:	cf 91       	pop	r28
    408a:	df 91       	pop	r29
    408c:	08 95       	ret

0000408e <STEP_u8Rotate>:
#include "DIO_interface.h"
#include "StepperMotor_interface.h"
#include "StepperMotor_cfg.h"
#include "StepperMotor_prv.h"
uint8 STEP_u8Rotate (const STEP_cfg_t* Copy_cfg, uint8 Copy_Direction, uint16 Copy_Angle)
{
    408e:	0f 93       	push	r16
    4090:	1f 93       	push	r17
    4092:	df 93       	push	r29
    4094:	cf 93       	push	r28
    4096:	cd b7       	in	r28, 0x3d	; 61
    4098:	de b7       	in	r29, 0x3e	; 62
    409a:	cc 57       	subi	r28, 0x7C	; 124
    409c:	d0 40       	sbci	r29, 0x00	; 0
    409e:	0f b6       	in	r0, 0x3f	; 63
    40a0:	f8 94       	cli
    40a2:	de bf       	out	0x3e, r29	; 62
    40a4:	0f be       	out	0x3f, r0	; 63
    40a6:	cd bf       	out	0x3d, r28	; 61
    40a8:	fe 01       	movw	r30, r28
    40aa:	e8 58       	subi	r30, 0x88	; 136
    40ac:	ff 4f       	sbci	r31, 0xFF	; 255
    40ae:	91 83       	std	Z+1, r25	; 0x01
    40b0:	80 83       	st	Z, r24
    40b2:	fe 01       	movw	r30, r28
    40b4:	e6 58       	subi	r30, 0x86	; 134
    40b6:	ff 4f       	sbci	r31, 0xFF	; 255
    40b8:	60 83       	st	Z, r22
    40ba:	fe 01       	movw	r30, r28
    40bc:	e5 58       	subi	r30, 0x85	; 133
    40be:	ff 4f       	sbci	r31, 0xFF	; 255
    40c0:	51 83       	std	Z+1, r21	; 0x01
    40c2:	40 83       	st	Z, r20

uint8 Local_u8LocalState=OK;
    40c4:	fe 01       	movw	r30, r28
    40c6:	e9 58       	subi	r30, 0x89	; 137
    40c8:	ff 4f       	sbci	r31, 0xFF	; 255
    40ca:	10 82       	st	Z, r1


if(Copy_cfg!=NULL)
    40cc:	fe 01       	movw	r30, r28
    40ce:	e8 58       	subi	r30, 0x88	; 136
    40d0:	ff 4f       	sbci	r31, 0xFF	; 255
    40d2:	80 81       	ld	r24, Z
    40d4:	91 81       	ldd	r25, Z+1	; 0x01
    40d6:	00 97       	sbiw	r24, 0x00	; 0
    40d8:	09 f4       	brne	.+2      	; 0x40dc <STEP_u8Rotate+0x4e>
    40da:	75 c7       	rjmp	.+3818   	; 0x4fc6 <STEP_u8Rotate+0xf38>
{   uint16 Local_u16Steps;
	Local_u16Steps = (uint16)( (  ( (uint32)Copy_Angle ) * (2048UL)  ) /360UL );
    40dc:	fe 01       	movw	r30, r28
    40de:	e5 58       	subi	r30, 0x85	; 133
    40e0:	ff 4f       	sbci	r31, 0xFF	; 255
    40e2:	80 81       	ld	r24, Z
    40e4:	91 81       	ldd	r25, Z+1	; 0x01
    40e6:	cc 01       	movw	r24, r24
    40e8:	a0 e0       	ldi	r26, 0x00	; 0
    40ea:	b0 e0       	ldi	r27, 0x00	; 0
    40ec:	07 2e       	mov	r0, r23
    40ee:	7b e0       	ldi	r23, 0x0B	; 11
    40f0:	88 0f       	add	r24, r24
    40f2:	99 1f       	adc	r25, r25
    40f4:	aa 1f       	adc	r26, r26
    40f6:	bb 1f       	adc	r27, r27
    40f8:	7a 95       	dec	r23
    40fa:	d1 f7       	brne	.-12     	; 0x40f0 <STEP_u8Rotate+0x62>
    40fc:	70 2d       	mov	r23, r0
    40fe:	28 e6       	ldi	r18, 0x68	; 104
    4100:	31 e0       	ldi	r19, 0x01	; 1
    4102:	40 e0       	ldi	r20, 0x00	; 0
    4104:	50 e0       	ldi	r21, 0x00	; 0
    4106:	bc 01       	movw	r22, r24
    4108:	cd 01       	movw	r24, r26
    410a:	0e 94 82 2b 	call	0x5704	; 0x5704 <__udivmodsi4>
    410e:	da 01       	movw	r26, r20
    4110:	c9 01       	movw	r24, r18
    4112:	fe 01       	movw	r30, r28
    4114:	eb 58       	subi	r30, 0x8B	; 139
    4116:	ff 4f       	sbci	r31, 0xFF	; 255
    4118:	91 83       	std	Z+1, r25	; 0x01
    411a:	80 83       	st	Z, r24
	if(Copy_Direction==CW)
    411c:	fe 01       	movw	r30, r28
    411e:	e6 58       	subi	r30, 0x86	; 134
    4120:	ff 4f       	sbci	r31, 0xFF	; 255
    4122:	80 81       	ld	r24, Z
    4124:	81 30       	cpi	r24, 0x01	; 1
    4126:	09 f0       	breq	.+2      	; 0x412a <STEP_u8Rotate+0x9c>
    4128:	10 c4       	rjmp	.+2080   	; 0x494a <STEP_u8Rotate+0x8bc>
	{//////360
		//Local_u16Steps=(uint16)(((uint32)Copy_Angle * 2048UL)/360UL);

		for(uint16 i=0; i<Local_u16Steps;i++)
    412a:	fe 01       	movw	r30, r28
    412c:	ed 58       	subi	r30, 0x8D	; 141
    412e:	ff 4f       	sbci	r31, 0xFF	; 255
    4130:	11 82       	std	Z+1, r1	; 0x01
    4132:	10 82       	st	Z, r1
    4134:	fa c3       	rjmp	.+2036   	; 0x492a <STEP_u8Rotate+0x89c>
		{
                //STEP 1
			if(i%4==0){
    4136:	fe 01       	movw	r30, r28
    4138:	ed 58       	subi	r30, 0x8D	; 141
    413a:	ff 4f       	sbci	r31, 0xFF	; 255
    413c:	80 81       	ld	r24, Z
    413e:	91 81       	ldd	r25, Z+1	; 0x01
    4140:	83 70       	andi	r24, 0x03	; 3
    4142:	90 70       	andi	r25, 0x00	; 0
    4144:	00 97       	sbiw	r24, 0x00	; 0
    4146:	09 f0       	breq	.+2      	; 0x414a <STEP_u8Rotate+0xbc>
    4148:	fd c0       	rjmp	.+506    	; 0x4344 <STEP_u8Rotate+0x2b6>
			    DIO_u8SetPinValue(Copy_cfg-> u8PORT ,Copy_cfg->u8BluePin ,DIO_u8PIN_LOW);
    414a:	fe 01       	movw	r30, r28
    414c:	e8 58       	subi	r30, 0x88	; 136
    414e:	ff 4f       	sbci	r31, 0xFF	; 255
    4150:	01 90       	ld	r0, Z+
    4152:	f0 81       	ld	r31, Z
    4154:	e0 2d       	mov	r30, r0
    4156:	80 81       	ld	r24, Z
    4158:	fe 01       	movw	r30, r28
    415a:	e8 58       	subi	r30, 0x88	; 136
    415c:	ff 4f       	sbci	r31, 0xFF	; 255
    415e:	01 90       	ld	r0, Z+
    4160:	f0 81       	ld	r31, Z
    4162:	e0 2d       	mov	r30, r0
    4164:	91 81       	ldd	r25, Z+1	; 0x01
    4166:	69 2f       	mov	r22, r25
    4168:	40 e0       	ldi	r20, 0x00	; 0
    416a:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <DIO_u8SetPinValue>

				DIO_u8SetPinValue(Copy_cfg-> u8PORT,Copy_cfg->u8PinkPin,DIO_u8PIN_HIGH);
    416e:	fe 01       	movw	r30, r28
    4170:	e8 58       	subi	r30, 0x88	; 136
    4172:	ff 4f       	sbci	r31, 0xFF	; 255
    4174:	01 90       	ld	r0, Z+
    4176:	f0 81       	ld	r31, Z
    4178:	e0 2d       	mov	r30, r0
    417a:	80 81       	ld	r24, Z
    417c:	fe 01       	movw	r30, r28
    417e:	e8 58       	subi	r30, 0x88	; 136
    4180:	ff 4f       	sbci	r31, 0xFF	; 255
    4182:	01 90       	ld	r0, Z+
    4184:	f0 81       	ld	r31, Z
    4186:	e0 2d       	mov	r30, r0
    4188:	92 81       	ldd	r25, Z+2	; 0x02
    418a:	69 2f       	mov	r22, r25
    418c:	41 e0       	ldi	r20, 0x01	; 1
    418e:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <DIO_u8SetPinValue>

				DIO_u8SetPinValue(Copy_cfg-> u8PORT,Copy_cfg->u8YellowPin,DIO_u8PIN_HIGH);
    4192:	fe 01       	movw	r30, r28
    4194:	e8 58       	subi	r30, 0x88	; 136
    4196:	ff 4f       	sbci	r31, 0xFF	; 255
    4198:	01 90       	ld	r0, Z+
    419a:	f0 81       	ld	r31, Z
    419c:	e0 2d       	mov	r30, r0
    419e:	80 81       	ld	r24, Z
    41a0:	fe 01       	movw	r30, r28
    41a2:	e8 58       	subi	r30, 0x88	; 136
    41a4:	ff 4f       	sbci	r31, 0xFF	; 255
    41a6:	01 90       	ld	r0, Z+
    41a8:	f0 81       	ld	r31, Z
    41aa:	e0 2d       	mov	r30, r0
    41ac:	93 81       	ldd	r25, Z+3	; 0x03
    41ae:	69 2f       	mov	r22, r25
    41b0:	41 e0       	ldi	r20, 0x01	; 1
    41b2:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <DIO_u8SetPinValue>

				DIO_u8SetPinValue(Copy_cfg-> u8PORT,Copy_cfg->u8OrangePin,DIO_u8PIN_HIGH);
    41b6:	fe 01       	movw	r30, r28
    41b8:	e8 58       	subi	r30, 0x88	; 136
    41ba:	ff 4f       	sbci	r31, 0xFF	; 255
    41bc:	01 90       	ld	r0, Z+
    41be:	f0 81       	ld	r31, Z
    41c0:	e0 2d       	mov	r30, r0
    41c2:	80 81       	ld	r24, Z
    41c4:	fe 01       	movw	r30, r28
    41c6:	e8 58       	subi	r30, 0x88	; 136
    41c8:	ff 4f       	sbci	r31, 0xFF	; 255
    41ca:	01 90       	ld	r0, Z+
    41cc:	f0 81       	ld	r31, Z
    41ce:	e0 2d       	mov	r30, r0
    41d0:	94 81       	ldd	r25, Z+4	; 0x04
    41d2:	69 2f       	mov	r22, r25
    41d4:	41 e0       	ldi	r20, 0x01	; 1
    41d6:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <DIO_u8SetPinValue>
    41da:	fe 01       	movw	r30, r28
    41dc:	e3 59       	subi	r30, 0x93	; 147
    41de:	ff 4f       	sbci	r31, 0xFF	; 255
    41e0:	80 e0       	ldi	r24, 0x00	; 0
    41e2:	90 e0       	ldi	r25, 0x00	; 0
    41e4:	a0 e4       	ldi	r26, 0x40	; 64
    41e6:	b0 e4       	ldi	r27, 0x40	; 64
    41e8:	80 83       	st	Z, r24
    41ea:	91 83       	std	Z+1, r25	; 0x01
    41ec:	a2 83       	std	Z+2, r26	; 0x02
    41ee:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41f0:	8e 01       	movw	r16, r28
    41f2:	07 59       	subi	r16, 0x97	; 151
    41f4:	1f 4f       	sbci	r17, 0xFF	; 255
    41f6:	fe 01       	movw	r30, r28
    41f8:	e3 59       	subi	r30, 0x93	; 147
    41fa:	ff 4f       	sbci	r31, 0xFF	; 255
    41fc:	60 81       	ld	r22, Z
    41fe:	71 81       	ldd	r23, Z+1	; 0x01
    4200:	82 81       	ldd	r24, Z+2	; 0x02
    4202:	93 81       	ldd	r25, Z+3	; 0x03
    4204:	20 e0       	ldi	r18, 0x00	; 0
    4206:	30 e0       	ldi	r19, 0x00	; 0
    4208:	4a e7       	ldi	r20, 0x7A	; 122
    420a:	55 e4       	ldi	r21, 0x45	; 69
    420c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4210:	dc 01       	movw	r26, r24
    4212:	cb 01       	movw	r24, r22
    4214:	f8 01       	movw	r30, r16
    4216:	80 83       	st	Z, r24
    4218:	91 83       	std	Z+1, r25	; 0x01
    421a:	a2 83       	std	Z+2, r26	; 0x02
    421c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    421e:	fe 01       	movw	r30, r28
    4220:	e7 59       	subi	r30, 0x97	; 151
    4222:	ff 4f       	sbci	r31, 0xFF	; 255
    4224:	60 81       	ld	r22, Z
    4226:	71 81       	ldd	r23, Z+1	; 0x01
    4228:	82 81       	ldd	r24, Z+2	; 0x02
    422a:	93 81       	ldd	r25, Z+3	; 0x03
    422c:	20 e0       	ldi	r18, 0x00	; 0
    422e:	30 e0       	ldi	r19, 0x00	; 0
    4230:	40 e8       	ldi	r20, 0x80	; 128
    4232:	5f e3       	ldi	r21, 0x3F	; 63
    4234:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    4238:	88 23       	and	r24, r24
    423a:	44 f4       	brge	.+16     	; 0x424c <STEP_u8Rotate+0x1be>
		__ticks = 1;
    423c:	fe 01       	movw	r30, r28
    423e:	e9 59       	subi	r30, 0x99	; 153
    4240:	ff 4f       	sbci	r31, 0xFF	; 255
    4242:	81 e0       	ldi	r24, 0x01	; 1
    4244:	90 e0       	ldi	r25, 0x00	; 0
    4246:	91 83       	std	Z+1, r25	; 0x01
    4248:	80 83       	st	Z, r24
    424a:	64 c0       	rjmp	.+200    	; 0x4314 <STEP_u8Rotate+0x286>
	else if (__tmp > 65535)
    424c:	fe 01       	movw	r30, r28
    424e:	e7 59       	subi	r30, 0x97	; 151
    4250:	ff 4f       	sbci	r31, 0xFF	; 255
    4252:	60 81       	ld	r22, Z
    4254:	71 81       	ldd	r23, Z+1	; 0x01
    4256:	82 81       	ldd	r24, Z+2	; 0x02
    4258:	93 81       	ldd	r25, Z+3	; 0x03
    425a:	20 e0       	ldi	r18, 0x00	; 0
    425c:	3f ef       	ldi	r19, 0xFF	; 255
    425e:	4f e7       	ldi	r20, 0x7F	; 127
    4260:	57 e4       	ldi	r21, 0x47	; 71
    4262:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    4266:	18 16       	cp	r1, r24
    4268:	0c f0       	brlt	.+2      	; 0x426c <STEP_u8Rotate+0x1de>
    426a:	43 c0       	rjmp	.+134    	; 0x42f2 <STEP_u8Rotate+0x264>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    426c:	fe 01       	movw	r30, r28
    426e:	e3 59       	subi	r30, 0x93	; 147
    4270:	ff 4f       	sbci	r31, 0xFF	; 255
    4272:	60 81       	ld	r22, Z
    4274:	71 81       	ldd	r23, Z+1	; 0x01
    4276:	82 81       	ldd	r24, Z+2	; 0x02
    4278:	93 81       	ldd	r25, Z+3	; 0x03
    427a:	20 e0       	ldi	r18, 0x00	; 0
    427c:	30 e0       	ldi	r19, 0x00	; 0
    427e:	40 e2       	ldi	r20, 0x20	; 32
    4280:	51 e4       	ldi	r21, 0x41	; 65
    4282:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4286:	dc 01       	movw	r26, r24
    4288:	cb 01       	movw	r24, r22
    428a:	8e 01       	movw	r16, r28
    428c:	09 59       	subi	r16, 0x99	; 153
    428e:	1f 4f       	sbci	r17, 0xFF	; 255
    4290:	bc 01       	movw	r22, r24
    4292:	cd 01       	movw	r24, r26
    4294:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4298:	dc 01       	movw	r26, r24
    429a:	cb 01       	movw	r24, r22
    429c:	f8 01       	movw	r30, r16
    429e:	91 83       	std	Z+1, r25	; 0x01
    42a0:	80 83       	st	Z, r24
    42a2:	1f c0       	rjmp	.+62     	; 0x42e2 <STEP_u8Rotate+0x254>
    42a4:	fe 01       	movw	r30, r28
    42a6:	eb 59       	subi	r30, 0x9B	; 155
    42a8:	ff 4f       	sbci	r31, 0xFF	; 255
    42aa:	80 e9       	ldi	r24, 0x90	; 144
    42ac:	91 e0       	ldi	r25, 0x01	; 1
    42ae:	91 83       	std	Z+1, r25	; 0x01
    42b0:	80 83       	st	Z, r24
    42b2:	fe 01       	movw	r30, r28
    42b4:	eb 59       	subi	r30, 0x9B	; 155
    42b6:	ff 4f       	sbci	r31, 0xFF	; 255
    42b8:	80 81       	ld	r24, Z
    42ba:	91 81       	ldd	r25, Z+1	; 0x01
    42bc:	01 97       	sbiw	r24, 0x01	; 1
    42be:	f1 f7       	brne	.-4      	; 0x42bc <STEP_u8Rotate+0x22e>
    42c0:	fe 01       	movw	r30, r28
    42c2:	eb 59       	subi	r30, 0x9B	; 155
    42c4:	ff 4f       	sbci	r31, 0xFF	; 255
    42c6:	91 83       	std	Z+1, r25	; 0x01
    42c8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42ca:	de 01       	movw	r26, r28
    42cc:	a9 59       	subi	r26, 0x99	; 153
    42ce:	bf 4f       	sbci	r27, 0xFF	; 255
    42d0:	fe 01       	movw	r30, r28
    42d2:	e9 59       	subi	r30, 0x99	; 153
    42d4:	ff 4f       	sbci	r31, 0xFF	; 255
    42d6:	80 81       	ld	r24, Z
    42d8:	91 81       	ldd	r25, Z+1	; 0x01
    42da:	01 97       	sbiw	r24, 0x01	; 1
    42dc:	11 96       	adiw	r26, 0x01	; 1
    42de:	9c 93       	st	X, r25
    42e0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42e2:	fe 01       	movw	r30, r28
    42e4:	e9 59       	subi	r30, 0x99	; 153
    42e6:	ff 4f       	sbci	r31, 0xFF	; 255
    42e8:	80 81       	ld	r24, Z
    42ea:	91 81       	ldd	r25, Z+1	; 0x01
    42ec:	00 97       	sbiw	r24, 0x00	; 0
    42ee:	d1 f6       	brne	.-76     	; 0x42a4 <STEP_u8Rotate+0x216>
    42f0:	11 c3       	rjmp	.+1570   	; 0x4914 <STEP_u8Rotate+0x886>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42f2:	8e 01       	movw	r16, r28
    42f4:	09 59       	subi	r16, 0x99	; 153
    42f6:	1f 4f       	sbci	r17, 0xFF	; 255
    42f8:	fe 01       	movw	r30, r28
    42fa:	e7 59       	subi	r30, 0x97	; 151
    42fc:	ff 4f       	sbci	r31, 0xFF	; 255
    42fe:	60 81       	ld	r22, Z
    4300:	71 81       	ldd	r23, Z+1	; 0x01
    4302:	82 81       	ldd	r24, Z+2	; 0x02
    4304:	93 81       	ldd	r25, Z+3	; 0x03
    4306:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    430a:	dc 01       	movw	r26, r24
    430c:	cb 01       	movw	r24, r22
    430e:	f8 01       	movw	r30, r16
    4310:	91 83       	std	Z+1, r25	; 0x01
    4312:	80 83       	st	Z, r24
    4314:	de 01       	movw	r26, r28
    4316:	ad 59       	subi	r26, 0x9D	; 157
    4318:	bf 4f       	sbci	r27, 0xFF	; 255
    431a:	fe 01       	movw	r30, r28
    431c:	e9 59       	subi	r30, 0x99	; 153
    431e:	ff 4f       	sbci	r31, 0xFF	; 255
    4320:	80 81       	ld	r24, Z
    4322:	91 81       	ldd	r25, Z+1	; 0x01
    4324:	11 96       	adiw	r26, 0x01	; 1
    4326:	9c 93       	st	X, r25
    4328:	8e 93       	st	-X, r24
    432a:	fe 01       	movw	r30, r28
    432c:	ed 59       	subi	r30, 0x9D	; 157
    432e:	ff 4f       	sbci	r31, 0xFF	; 255
    4330:	80 81       	ld	r24, Z
    4332:	91 81       	ldd	r25, Z+1	; 0x01
    4334:	01 97       	sbiw	r24, 0x01	; 1
    4336:	f1 f7       	brne	.-4      	; 0x4334 <STEP_u8Rotate+0x2a6>
    4338:	fe 01       	movw	r30, r28
    433a:	ed 59       	subi	r30, 0x9D	; 157
    433c:	ff 4f       	sbci	r31, 0xFF	; 255
    433e:	91 83       	std	Z+1, r25	; 0x01
    4340:	80 83       	st	Z, r24
    4342:	e8 c2       	rjmp	.+1488   	; 0x4914 <STEP_u8Rotate+0x886>
				_delay_ms(3);
			}
                 //STEP 2
			else if(i%4==1){
    4344:	fe 01       	movw	r30, r28
    4346:	ed 58       	subi	r30, 0x8D	; 141
    4348:	ff 4f       	sbci	r31, 0xFF	; 255
    434a:	80 81       	ld	r24, Z
    434c:	91 81       	ldd	r25, Z+1	; 0x01
    434e:	83 70       	andi	r24, 0x03	; 3
    4350:	90 70       	andi	r25, 0x00	; 0
    4352:	81 30       	cpi	r24, 0x01	; 1
    4354:	91 05       	cpc	r25, r1
    4356:	09 f0       	breq	.+2      	; 0x435a <STEP_u8Rotate+0x2cc>
    4358:	fd c0       	rjmp	.+506    	; 0x4554 <STEP_u8Rotate+0x4c6>
				DIO_u8SetPinValue(Copy_cfg-> u8PORT ,Copy_cfg->u8BluePin ,DIO_u8PIN_HIGH);
    435a:	fe 01       	movw	r30, r28
    435c:	e8 58       	subi	r30, 0x88	; 136
    435e:	ff 4f       	sbci	r31, 0xFF	; 255
    4360:	01 90       	ld	r0, Z+
    4362:	f0 81       	ld	r31, Z
    4364:	e0 2d       	mov	r30, r0
    4366:	80 81       	ld	r24, Z
    4368:	fe 01       	movw	r30, r28
    436a:	e8 58       	subi	r30, 0x88	; 136
    436c:	ff 4f       	sbci	r31, 0xFF	; 255
    436e:	01 90       	ld	r0, Z+
    4370:	f0 81       	ld	r31, Z
    4372:	e0 2d       	mov	r30, r0
    4374:	91 81       	ldd	r25, Z+1	; 0x01
    4376:	69 2f       	mov	r22, r25
    4378:	41 e0       	ldi	r20, 0x01	; 1
    437a:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <DIO_u8SetPinValue>

			    DIO_u8SetPinValue(Copy_cfg-> u8PORT,Copy_cfg->u8PinkPin,DIO_u8PIN_LOW);
    437e:	fe 01       	movw	r30, r28
    4380:	e8 58       	subi	r30, 0x88	; 136
    4382:	ff 4f       	sbci	r31, 0xFF	; 255
    4384:	01 90       	ld	r0, Z+
    4386:	f0 81       	ld	r31, Z
    4388:	e0 2d       	mov	r30, r0
    438a:	80 81       	ld	r24, Z
    438c:	fe 01       	movw	r30, r28
    438e:	e8 58       	subi	r30, 0x88	; 136
    4390:	ff 4f       	sbci	r31, 0xFF	; 255
    4392:	01 90       	ld	r0, Z+
    4394:	f0 81       	ld	r31, Z
    4396:	e0 2d       	mov	r30, r0
    4398:	92 81       	ldd	r25, Z+2	; 0x02
    439a:	69 2f       	mov	r22, r25
    439c:	40 e0       	ldi	r20, 0x00	; 0
    439e:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <DIO_u8SetPinValue>

			    DIO_u8SetPinValue(Copy_cfg-> u8PORT,Copy_cfg->u8YellowPin,DIO_u8PIN_HIGH);
    43a2:	fe 01       	movw	r30, r28
    43a4:	e8 58       	subi	r30, 0x88	; 136
    43a6:	ff 4f       	sbci	r31, 0xFF	; 255
    43a8:	01 90       	ld	r0, Z+
    43aa:	f0 81       	ld	r31, Z
    43ac:	e0 2d       	mov	r30, r0
    43ae:	80 81       	ld	r24, Z
    43b0:	fe 01       	movw	r30, r28
    43b2:	e8 58       	subi	r30, 0x88	; 136
    43b4:	ff 4f       	sbci	r31, 0xFF	; 255
    43b6:	01 90       	ld	r0, Z+
    43b8:	f0 81       	ld	r31, Z
    43ba:	e0 2d       	mov	r30, r0
    43bc:	93 81       	ldd	r25, Z+3	; 0x03
    43be:	69 2f       	mov	r22, r25
    43c0:	41 e0       	ldi	r20, 0x01	; 1
    43c2:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <DIO_u8SetPinValue>

			    DIO_u8SetPinValue(Copy_cfg-> u8PORT,Copy_cfg->u8OrangePin,DIO_u8PIN_HIGH);
    43c6:	fe 01       	movw	r30, r28
    43c8:	e8 58       	subi	r30, 0x88	; 136
    43ca:	ff 4f       	sbci	r31, 0xFF	; 255
    43cc:	01 90       	ld	r0, Z+
    43ce:	f0 81       	ld	r31, Z
    43d0:	e0 2d       	mov	r30, r0
    43d2:	80 81       	ld	r24, Z
    43d4:	fe 01       	movw	r30, r28
    43d6:	e8 58       	subi	r30, 0x88	; 136
    43d8:	ff 4f       	sbci	r31, 0xFF	; 255
    43da:	01 90       	ld	r0, Z+
    43dc:	f0 81       	ld	r31, Z
    43de:	e0 2d       	mov	r30, r0
    43e0:	94 81       	ldd	r25, Z+4	; 0x04
    43e2:	69 2f       	mov	r22, r25
    43e4:	41 e0       	ldi	r20, 0x01	; 1
    43e6:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <DIO_u8SetPinValue>
    43ea:	fe 01       	movw	r30, r28
    43ec:	e1 5a       	subi	r30, 0xA1	; 161
    43ee:	ff 4f       	sbci	r31, 0xFF	; 255
    43f0:	80 e0       	ldi	r24, 0x00	; 0
    43f2:	90 e0       	ldi	r25, 0x00	; 0
    43f4:	a0 e4       	ldi	r26, 0x40	; 64
    43f6:	b0 e4       	ldi	r27, 0x40	; 64
    43f8:	80 83       	st	Z, r24
    43fa:	91 83       	std	Z+1, r25	; 0x01
    43fc:	a2 83       	std	Z+2, r26	; 0x02
    43fe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4400:	8e 01       	movw	r16, r28
    4402:	05 5a       	subi	r16, 0xA5	; 165
    4404:	1f 4f       	sbci	r17, 0xFF	; 255
    4406:	fe 01       	movw	r30, r28
    4408:	e1 5a       	subi	r30, 0xA1	; 161
    440a:	ff 4f       	sbci	r31, 0xFF	; 255
    440c:	60 81       	ld	r22, Z
    440e:	71 81       	ldd	r23, Z+1	; 0x01
    4410:	82 81       	ldd	r24, Z+2	; 0x02
    4412:	93 81       	ldd	r25, Z+3	; 0x03
    4414:	20 e0       	ldi	r18, 0x00	; 0
    4416:	30 e0       	ldi	r19, 0x00	; 0
    4418:	4a e7       	ldi	r20, 0x7A	; 122
    441a:	55 e4       	ldi	r21, 0x45	; 69
    441c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4420:	dc 01       	movw	r26, r24
    4422:	cb 01       	movw	r24, r22
    4424:	f8 01       	movw	r30, r16
    4426:	80 83       	st	Z, r24
    4428:	91 83       	std	Z+1, r25	; 0x01
    442a:	a2 83       	std	Z+2, r26	; 0x02
    442c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    442e:	fe 01       	movw	r30, r28
    4430:	e5 5a       	subi	r30, 0xA5	; 165
    4432:	ff 4f       	sbci	r31, 0xFF	; 255
    4434:	60 81       	ld	r22, Z
    4436:	71 81       	ldd	r23, Z+1	; 0x01
    4438:	82 81       	ldd	r24, Z+2	; 0x02
    443a:	93 81       	ldd	r25, Z+3	; 0x03
    443c:	20 e0       	ldi	r18, 0x00	; 0
    443e:	30 e0       	ldi	r19, 0x00	; 0
    4440:	40 e8       	ldi	r20, 0x80	; 128
    4442:	5f e3       	ldi	r21, 0x3F	; 63
    4444:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    4448:	88 23       	and	r24, r24
    444a:	44 f4       	brge	.+16     	; 0x445c <STEP_u8Rotate+0x3ce>
		__ticks = 1;
    444c:	fe 01       	movw	r30, r28
    444e:	e7 5a       	subi	r30, 0xA7	; 167
    4450:	ff 4f       	sbci	r31, 0xFF	; 255
    4452:	81 e0       	ldi	r24, 0x01	; 1
    4454:	90 e0       	ldi	r25, 0x00	; 0
    4456:	91 83       	std	Z+1, r25	; 0x01
    4458:	80 83       	st	Z, r24
    445a:	64 c0       	rjmp	.+200    	; 0x4524 <STEP_u8Rotate+0x496>
	else if (__tmp > 65535)
    445c:	fe 01       	movw	r30, r28
    445e:	e5 5a       	subi	r30, 0xA5	; 165
    4460:	ff 4f       	sbci	r31, 0xFF	; 255
    4462:	60 81       	ld	r22, Z
    4464:	71 81       	ldd	r23, Z+1	; 0x01
    4466:	82 81       	ldd	r24, Z+2	; 0x02
    4468:	93 81       	ldd	r25, Z+3	; 0x03
    446a:	20 e0       	ldi	r18, 0x00	; 0
    446c:	3f ef       	ldi	r19, 0xFF	; 255
    446e:	4f e7       	ldi	r20, 0x7F	; 127
    4470:	57 e4       	ldi	r21, 0x47	; 71
    4472:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    4476:	18 16       	cp	r1, r24
    4478:	0c f0       	brlt	.+2      	; 0x447c <STEP_u8Rotate+0x3ee>
    447a:	43 c0       	rjmp	.+134    	; 0x4502 <STEP_u8Rotate+0x474>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    447c:	fe 01       	movw	r30, r28
    447e:	e1 5a       	subi	r30, 0xA1	; 161
    4480:	ff 4f       	sbci	r31, 0xFF	; 255
    4482:	60 81       	ld	r22, Z
    4484:	71 81       	ldd	r23, Z+1	; 0x01
    4486:	82 81       	ldd	r24, Z+2	; 0x02
    4488:	93 81       	ldd	r25, Z+3	; 0x03
    448a:	20 e0       	ldi	r18, 0x00	; 0
    448c:	30 e0       	ldi	r19, 0x00	; 0
    448e:	40 e2       	ldi	r20, 0x20	; 32
    4490:	51 e4       	ldi	r21, 0x41	; 65
    4492:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4496:	dc 01       	movw	r26, r24
    4498:	cb 01       	movw	r24, r22
    449a:	8e 01       	movw	r16, r28
    449c:	07 5a       	subi	r16, 0xA7	; 167
    449e:	1f 4f       	sbci	r17, 0xFF	; 255
    44a0:	bc 01       	movw	r22, r24
    44a2:	cd 01       	movw	r24, r26
    44a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    44a8:	dc 01       	movw	r26, r24
    44aa:	cb 01       	movw	r24, r22
    44ac:	f8 01       	movw	r30, r16
    44ae:	91 83       	std	Z+1, r25	; 0x01
    44b0:	80 83       	st	Z, r24
    44b2:	1f c0       	rjmp	.+62     	; 0x44f2 <STEP_u8Rotate+0x464>
    44b4:	fe 01       	movw	r30, r28
    44b6:	e9 5a       	subi	r30, 0xA9	; 169
    44b8:	ff 4f       	sbci	r31, 0xFF	; 255
    44ba:	80 e9       	ldi	r24, 0x90	; 144
    44bc:	91 e0       	ldi	r25, 0x01	; 1
    44be:	91 83       	std	Z+1, r25	; 0x01
    44c0:	80 83       	st	Z, r24
    44c2:	fe 01       	movw	r30, r28
    44c4:	e9 5a       	subi	r30, 0xA9	; 169
    44c6:	ff 4f       	sbci	r31, 0xFF	; 255
    44c8:	80 81       	ld	r24, Z
    44ca:	91 81       	ldd	r25, Z+1	; 0x01
    44cc:	01 97       	sbiw	r24, 0x01	; 1
    44ce:	f1 f7       	brne	.-4      	; 0x44cc <STEP_u8Rotate+0x43e>
    44d0:	fe 01       	movw	r30, r28
    44d2:	e9 5a       	subi	r30, 0xA9	; 169
    44d4:	ff 4f       	sbci	r31, 0xFF	; 255
    44d6:	91 83       	std	Z+1, r25	; 0x01
    44d8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44da:	de 01       	movw	r26, r28
    44dc:	a7 5a       	subi	r26, 0xA7	; 167
    44de:	bf 4f       	sbci	r27, 0xFF	; 255
    44e0:	fe 01       	movw	r30, r28
    44e2:	e7 5a       	subi	r30, 0xA7	; 167
    44e4:	ff 4f       	sbci	r31, 0xFF	; 255
    44e6:	80 81       	ld	r24, Z
    44e8:	91 81       	ldd	r25, Z+1	; 0x01
    44ea:	01 97       	sbiw	r24, 0x01	; 1
    44ec:	11 96       	adiw	r26, 0x01	; 1
    44ee:	9c 93       	st	X, r25
    44f0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44f2:	fe 01       	movw	r30, r28
    44f4:	e7 5a       	subi	r30, 0xA7	; 167
    44f6:	ff 4f       	sbci	r31, 0xFF	; 255
    44f8:	80 81       	ld	r24, Z
    44fa:	91 81       	ldd	r25, Z+1	; 0x01
    44fc:	00 97       	sbiw	r24, 0x00	; 0
    44fe:	d1 f6       	brne	.-76     	; 0x44b4 <STEP_u8Rotate+0x426>
    4500:	09 c2       	rjmp	.+1042   	; 0x4914 <STEP_u8Rotate+0x886>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4502:	8e 01       	movw	r16, r28
    4504:	07 5a       	subi	r16, 0xA7	; 167
    4506:	1f 4f       	sbci	r17, 0xFF	; 255
    4508:	fe 01       	movw	r30, r28
    450a:	e5 5a       	subi	r30, 0xA5	; 165
    450c:	ff 4f       	sbci	r31, 0xFF	; 255
    450e:	60 81       	ld	r22, Z
    4510:	71 81       	ldd	r23, Z+1	; 0x01
    4512:	82 81       	ldd	r24, Z+2	; 0x02
    4514:	93 81       	ldd	r25, Z+3	; 0x03
    4516:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    451a:	dc 01       	movw	r26, r24
    451c:	cb 01       	movw	r24, r22
    451e:	f8 01       	movw	r30, r16
    4520:	91 83       	std	Z+1, r25	; 0x01
    4522:	80 83       	st	Z, r24
    4524:	de 01       	movw	r26, r28
    4526:	ab 5a       	subi	r26, 0xAB	; 171
    4528:	bf 4f       	sbci	r27, 0xFF	; 255
    452a:	fe 01       	movw	r30, r28
    452c:	e7 5a       	subi	r30, 0xA7	; 167
    452e:	ff 4f       	sbci	r31, 0xFF	; 255
    4530:	80 81       	ld	r24, Z
    4532:	91 81       	ldd	r25, Z+1	; 0x01
    4534:	11 96       	adiw	r26, 0x01	; 1
    4536:	9c 93       	st	X, r25
    4538:	8e 93       	st	-X, r24
    453a:	fe 01       	movw	r30, r28
    453c:	eb 5a       	subi	r30, 0xAB	; 171
    453e:	ff 4f       	sbci	r31, 0xFF	; 255
    4540:	80 81       	ld	r24, Z
    4542:	91 81       	ldd	r25, Z+1	; 0x01
    4544:	01 97       	sbiw	r24, 0x01	; 1
    4546:	f1 f7       	brne	.-4      	; 0x4544 <STEP_u8Rotate+0x4b6>
    4548:	fe 01       	movw	r30, r28
    454a:	eb 5a       	subi	r30, 0xAB	; 171
    454c:	ff 4f       	sbci	r31, 0xFF	; 255
    454e:	91 83       	std	Z+1, r25	; 0x01
    4550:	80 83       	st	Z, r24
    4552:	e0 c1       	rjmp	.+960    	; 0x4914 <STEP_u8Rotate+0x886>
				_delay_ms(3);
			}
			else if(i%4==2){
    4554:	fe 01       	movw	r30, r28
    4556:	ed 58       	subi	r30, 0x8D	; 141
    4558:	ff 4f       	sbci	r31, 0xFF	; 255
    455a:	80 81       	ld	r24, Z
    455c:	91 81       	ldd	r25, Z+1	; 0x01
    455e:	83 70       	andi	r24, 0x03	; 3
    4560:	90 70       	andi	r25, 0x00	; 0
    4562:	82 30       	cpi	r24, 0x02	; 2
    4564:	91 05       	cpc	r25, r1
    4566:	09 f0       	breq	.+2      	; 0x456a <STEP_u8Rotate+0x4dc>
    4568:	fd c0       	rjmp	.+506    	; 0x4764 <STEP_u8Rotate+0x6d6>
				DIO_u8SetPinValue(Copy_cfg-> u8PORT ,Copy_cfg->u8BluePin ,DIO_u8PIN_HIGH);
    456a:	fe 01       	movw	r30, r28
    456c:	e8 58       	subi	r30, 0x88	; 136
    456e:	ff 4f       	sbci	r31, 0xFF	; 255
    4570:	01 90       	ld	r0, Z+
    4572:	f0 81       	ld	r31, Z
    4574:	e0 2d       	mov	r30, r0
    4576:	80 81       	ld	r24, Z
    4578:	fe 01       	movw	r30, r28
    457a:	e8 58       	subi	r30, 0x88	; 136
    457c:	ff 4f       	sbci	r31, 0xFF	; 255
    457e:	01 90       	ld	r0, Z+
    4580:	f0 81       	ld	r31, Z
    4582:	e0 2d       	mov	r30, r0
    4584:	91 81       	ldd	r25, Z+1	; 0x01
    4586:	69 2f       	mov	r22, r25
    4588:	41 e0       	ldi	r20, 0x01	; 1
    458a:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <DIO_u8SetPinValue>

				DIO_u8SetPinValue(Copy_cfg-> u8PORT,Copy_cfg->u8PinkPin,DIO_u8PIN_HIGH);
    458e:	fe 01       	movw	r30, r28
    4590:	e8 58       	subi	r30, 0x88	; 136
    4592:	ff 4f       	sbci	r31, 0xFF	; 255
    4594:	01 90       	ld	r0, Z+
    4596:	f0 81       	ld	r31, Z
    4598:	e0 2d       	mov	r30, r0
    459a:	80 81       	ld	r24, Z
    459c:	fe 01       	movw	r30, r28
    459e:	e8 58       	subi	r30, 0x88	; 136
    45a0:	ff 4f       	sbci	r31, 0xFF	; 255
    45a2:	01 90       	ld	r0, Z+
    45a4:	f0 81       	ld	r31, Z
    45a6:	e0 2d       	mov	r30, r0
    45a8:	92 81       	ldd	r25, Z+2	; 0x02
    45aa:	69 2f       	mov	r22, r25
    45ac:	41 e0       	ldi	r20, 0x01	; 1
    45ae:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <DIO_u8SetPinValue>

				DIO_u8SetPinValue(Copy_cfg-> u8PORT,Copy_cfg->u8YellowPin,DIO_u8PIN_LOW);
    45b2:	fe 01       	movw	r30, r28
    45b4:	e8 58       	subi	r30, 0x88	; 136
    45b6:	ff 4f       	sbci	r31, 0xFF	; 255
    45b8:	01 90       	ld	r0, Z+
    45ba:	f0 81       	ld	r31, Z
    45bc:	e0 2d       	mov	r30, r0
    45be:	80 81       	ld	r24, Z
    45c0:	fe 01       	movw	r30, r28
    45c2:	e8 58       	subi	r30, 0x88	; 136
    45c4:	ff 4f       	sbci	r31, 0xFF	; 255
    45c6:	01 90       	ld	r0, Z+
    45c8:	f0 81       	ld	r31, Z
    45ca:	e0 2d       	mov	r30, r0
    45cc:	93 81       	ldd	r25, Z+3	; 0x03
    45ce:	69 2f       	mov	r22, r25
    45d0:	40 e0       	ldi	r20, 0x00	; 0
    45d2:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <DIO_u8SetPinValue>

				DIO_u8SetPinValue(Copy_cfg-> u8PORT,Copy_cfg->u8OrangePin,DIO_u8PIN_HIGH);
    45d6:	fe 01       	movw	r30, r28
    45d8:	e8 58       	subi	r30, 0x88	; 136
    45da:	ff 4f       	sbci	r31, 0xFF	; 255
    45dc:	01 90       	ld	r0, Z+
    45de:	f0 81       	ld	r31, Z
    45e0:	e0 2d       	mov	r30, r0
    45e2:	80 81       	ld	r24, Z
    45e4:	fe 01       	movw	r30, r28
    45e6:	e8 58       	subi	r30, 0x88	; 136
    45e8:	ff 4f       	sbci	r31, 0xFF	; 255
    45ea:	01 90       	ld	r0, Z+
    45ec:	f0 81       	ld	r31, Z
    45ee:	e0 2d       	mov	r30, r0
    45f0:	94 81       	ldd	r25, Z+4	; 0x04
    45f2:	69 2f       	mov	r22, r25
    45f4:	41 e0       	ldi	r20, 0x01	; 1
    45f6:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <DIO_u8SetPinValue>
    45fa:	fe 01       	movw	r30, r28
    45fc:	ef 5a       	subi	r30, 0xAF	; 175
    45fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4600:	80 e0       	ldi	r24, 0x00	; 0
    4602:	90 e0       	ldi	r25, 0x00	; 0
    4604:	a0 e4       	ldi	r26, 0x40	; 64
    4606:	b0 e4       	ldi	r27, 0x40	; 64
    4608:	80 83       	st	Z, r24
    460a:	91 83       	std	Z+1, r25	; 0x01
    460c:	a2 83       	std	Z+2, r26	; 0x02
    460e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4610:	8e 01       	movw	r16, r28
    4612:	03 5b       	subi	r16, 0xB3	; 179
    4614:	1f 4f       	sbci	r17, 0xFF	; 255
    4616:	fe 01       	movw	r30, r28
    4618:	ef 5a       	subi	r30, 0xAF	; 175
    461a:	ff 4f       	sbci	r31, 0xFF	; 255
    461c:	60 81       	ld	r22, Z
    461e:	71 81       	ldd	r23, Z+1	; 0x01
    4620:	82 81       	ldd	r24, Z+2	; 0x02
    4622:	93 81       	ldd	r25, Z+3	; 0x03
    4624:	20 e0       	ldi	r18, 0x00	; 0
    4626:	30 e0       	ldi	r19, 0x00	; 0
    4628:	4a e7       	ldi	r20, 0x7A	; 122
    462a:	55 e4       	ldi	r21, 0x45	; 69
    462c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4630:	dc 01       	movw	r26, r24
    4632:	cb 01       	movw	r24, r22
    4634:	f8 01       	movw	r30, r16
    4636:	80 83       	st	Z, r24
    4638:	91 83       	std	Z+1, r25	; 0x01
    463a:	a2 83       	std	Z+2, r26	; 0x02
    463c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    463e:	fe 01       	movw	r30, r28
    4640:	e3 5b       	subi	r30, 0xB3	; 179
    4642:	ff 4f       	sbci	r31, 0xFF	; 255
    4644:	60 81       	ld	r22, Z
    4646:	71 81       	ldd	r23, Z+1	; 0x01
    4648:	82 81       	ldd	r24, Z+2	; 0x02
    464a:	93 81       	ldd	r25, Z+3	; 0x03
    464c:	20 e0       	ldi	r18, 0x00	; 0
    464e:	30 e0       	ldi	r19, 0x00	; 0
    4650:	40 e8       	ldi	r20, 0x80	; 128
    4652:	5f e3       	ldi	r21, 0x3F	; 63
    4654:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    4658:	88 23       	and	r24, r24
    465a:	44 f4       	brge	.+16     	; 0x466c <STEP_u8Rotate+0x5de>
		__ticks = 1;
    465c:	fe 01       	movw	r30, r28
    465e:	e5 5b       	subi	r30, 0xB5	; 181
    4660:	ff 4f       	sbci	r31, 0xFF	; 255
    4662:	81 e0       	ldi	r24, 0x01	; 1
    4664:	90 e0       	ldi	r25, 0x00	; 0
    4666:	91 83       	std	Z+1, r25	; 0x01
    4668:	80 83       	st	Z, r24
    466a:	64 c0       	rjmp	.+200    	; 0x4734 <STEP_u8Rotate+0x6a6>
	else if (__tmp > 65535)
    466c:	fe 01       	movw	r30, r28
    466e:	e3 5b       	subi	r30, 0xB3	; 179
    4670:	ff 4f       	sbci	r31, 0xFF	; 255
    4672:	60 81       	ld	r22, Z
    4674:	71 81       	ldd	r23, Z+1	; 0x01
    4676:	82 81       	ldd	r24, Z+2	; 0x02
    4678:	93 81       	ldd	r25, Z+3	; 0x03
    467a:	20 e0       	ldi	r18, 0x00	; 0
    467c:	3f ef       	ldi	r19, 0xFF	; 255
    467e:	4f e7       	ldi	r20, 0x7F	; 127
    4680:	57 e4       	ldi	r21, 0x47	; 71
    4682:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    4686:	18 16       	cp	r1, r24
    4688:	0c f0       	brlt	.+2      	; 0x468c <STEP_u8Rotate+0x5fe>
    468a:	43 c0       	rjmp	.+134    	; 0x4712 <STEP_u8Rotate+0x684>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    468c:	fe 01       	movw	r30, r28
    468e:	ef 5a       	subi	r30, 0xAF	; 175
    4690:	ff 4f       	sbci	r31, 0xFF	; 255
    4692:	60 81       	ld	r22, Z
    4694:	71 81       	ldd	r23, Z+1	; 0x01
    4696:	82 81       	ldd	r24, Z+2	; 0x02
    4698:	93 81       	ldd	r25, Z+3	; 0x03
    469a:	20 e0       	ldi	r18, 0x00	; 0
    469c:	30 e0       	ldi	r19, 0x00	; 0
    469e:	40 e2       	ldi	r20, 0x20	; 32
    46a0:	51 e4       	ldi	r21, 0x41	; 65
    46a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    46a6:	dc 01       	movw	r26, r24
    46a8:	cb 01       	movw	r24, r22
    46aa:	8e 01       	movw	r16, r28
    46ac:	05 5b       	subi	r16, 0xB5	; 181
    46ae:	1f 4f       	sbci	r17, 0xFF	; 255
    46b0:	bc 01       	movw	r22, r24
    46b2:	cd 01       	movw	r24, r26
    46b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    46b8:	dc 01       	movw	r26, r24
    46ba:	cb 01       	movw	r24, r22
    46bc:	f8 01       	movw	r30, r16
    46be:	91 83       	std	Z+1, r25	; 0x01
    46c0:	80 83       	st	Z, r24
    46c2:	1f c0       	rjmp	.+62     	; 0x4702 <STEP_u8Rotate+0x674>
    46c4:	fe 01       	movw	r30, r28
    46c6:	e7 5b       	subi	r30, 0xB7	; 183
    46c8:	ff 4f       	sbci	r31, 0xFF	; 255
    46ca:	80 e9       	ldi	r24, 0x90	; 144
    46cc:	91 e0       	ldi	r25, 0x01	; 1
    46ce:	91 83       	std	Z+1, r25	; 0x01
    46d0:	80 83       	st	Z, r24
    46d2:	fe 01       	movw	r30, r28
    46d4:	e7 5b       	subi	r30, 0xB7	; 183
    46d6:	ff 4f       	sbci	r31, 0xFF	; 255
    46d8:	80 81       	ld	r24, Z
    46da:	91 81       	ldd	r25, Z+1	; 0x01
    46dc:	01 97       	sbiw	r24, 0x01	; 1
    46de:	f1 f7       	brne	.-4      	; 0x46dc <STEP_u8Rotate+0x64e>
    46e0:	fe 01       	movw	r30, r28
    46e2:	e7 5b       	subi	r30, 0xB7	; 183
    46e4:	ff 4f       	sbci	r31, 0xFF	; 255
    46e6:	91 83       	std	Z+1, r25	; 0x01
    46e8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46ea:	de 01       	movw	r26, r28
    46ec:	a5 5b       	subi	r26, 0xB5	; 181
    46ee:	bf 4f       	sbci	r27, 0xFF	; 255
    46f0:	fe 01       	movw	r30, r28
    46f2:	e5 5b       	subi	r30, 0xB5	; 181
    46f4:	ff 4f       	sbci	r31, 0xFF	; 255
    46f6:	80 81       	ld	r24, Z
    46f8:	91 81       	ldd	r25, Z+1	; 0x01
    46fa:	01 97       	sbiw	r24, 0x01	; 1
    46fc:	11 96       	adiw	r26, 0x01	; 1
    46fe:	9c 93       	st	X, r25
    4700:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4702:	fe 01       	movw	r30, r28
    4704:	e5 5b       	subi	r30, 0xB5	; 181
    4706:	ff 4f       	sbci	r31, 0xFF	; 255
    4708:	80 81       	ld	r24, Z
    470a:	91 81       	ldd	r25, Z+1	; 0x01
    470c:	00 97       	sbiw	r24, 0x00	; 0
    470e:	d1 f6       	brne	.-76     	; 0x46c4 <STEP_u8Rotate+0x636>
    4710:	01 c1       	rjmp	.+514    	; 0x4914 <STEP_u8Rotate+0x886>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4712:	8e 01       	movw	r16, r28
    4714:	05 5b       	subi	r16, 0xB5	; 181
    4716:	1f 4f       	sbci	r17, 0xFF	; 255
    4718:	fe 01       	movw	r30, r28
    471a:	e3 5b       	subi	r30, 0xB3	; 179
    471c:	ff 4f       	sbci	r31, 0xFF	; 255
    471e:	60 81       	ld	r22, Z
    4720:	71 81       	ldd	r23, Z+1	; 0x01
    4722:	82 81       	ldd	r24, Z+2	; 0x02
    4724:	93 81       	ldd	r25, Z+3	; 0x03
    4726:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    472a:	dc 01       	movw	r26, r24
    472c:	cb 01       	movw	r24, r22
    472e:	f8 01       	movw	r30, r16
    4730:	91 83       	std	Z+1, r25	; 0x01
    4732:	80 83       	st	Z, r24
    4734:	de 01       	movw	r26, r28
    4736:	a9 5b       	subi	r26, 0xB9	; 185
    4738:	bf 4f       	sbci	r27, 0xFF	; 255
    473a:	fe 01       	movw	r30, r28
    473c:	e5 5b       	subi	r30, 0xB5	; 181
    473e:	ff 4f       	sbci	r31, 0xFF	; 255
    4740:	80 81       	ld	r24, Z
    4742:	91 81       	ldd	r25, Z+1	; 0x01
    4744:	11 96       	adiw	r26, 0x01	; 1
    4746:	9c 93       	st	X, r25
    4748:	8e 93       	st	-X, r24
    474a:	fe 01       	movw	r30, r28
    474c:	e9 5b       	subi	r30, 0xB9	; 185
    474e:	ff 4f       	sbci	r31, 0xFF	; 255
    4750:	80 81       	ld	r24, Z
    4752:	91 81       	ldd	r25, Z+1	; 0x01
    4754:	01 97       	sbiw	r24, 0x01	; 1
    4756:	f1 f7       	brne	.-4      	; 0x4754 <STEP_u8Rotate+0x6c6>
    4758:	fe 01       	movw	r30, r28
    475a:	e9 5b       	subi	r30, 0xB9	; 185
    475c:	ff 4f       	sbci	r31, 0xFF	; 255
    475e:	91 83       	std	Z+1, r25	; 0x01
    4760:	80 83       	st	Z, r24
    4762:	d8 c0       	rjmp	.+432    	; 0x4914 <STEP_u8Rotate+0x886>
				_delay_ms(3);
			}
			else if(i%4==3){
    4764:	fe 01       	movw	r30, r28
    4766:	ed 58       	subi	r30, 0x8D	; 141
    4768:	ff 4f       	sbci	r31, 0xFF	; 255
    476a:	80 81       	ld	r24, Z
    476c:	91 81       	ldd	r25, Z+1	; 0x01
    476e:	83 70       	andi	r24, 0x03	; 3
    4770:	90 70       	andi	r25, 0x00	; 0
    4772:	83 30       	cpi	r24, 0x03	; 3
    4774:	91 05       	cpc	r25, r1
    4776:	09 f0       	breq	.+2      	; 0x477a <STEP_u8Rotate+0x6ec>
    4778:	cd c0       	rjmp	.+410    	; 0x4914 <STEP_u8Rotate+0x886>
				DIO_u8SetPinValue(Copy_cfg-> u8PORT ,Copy_cfg->u8BluePin ,DIO_u8PIN_HIGH);
    477a:	fe 01       	movw	r30, r28
    477c:	e8 58       	subi	r30, 0x88	; 136
    477e:	ff 4f       	sbci	r31, 0xFF	; 255
    4780:	01 90       	ld	r0, Z+
    4782:	f0 81       	ld	r31, Z
    4784:	e0 2d       	mov	r30, r0
    4786:	80 81       	ld	r24, Z
    4788:	fe 01       	movw	r30, r28
    478a:	e8 58       	subi	r30, 0x88	; 136
    478c:	ff 4f       	sbci	r31, 0xFF	; 255
    478e:	01 90       	ld	r0, Z+
    4790:	f0 81       	ld	r31, Z
    4792:	e0 2d       	mov	r30, r0
    4794:	91 81       	ldd	r25, Z+1	; 0x01
    4796:	69 2f       	mov	r22, r25
    4798:	41 e0       	ldi	r20, 0x01	; 1
    479a:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <DIO_u8SetPinValue>

				DIO_u8SetPinValue(Copy_cfg-> u8PORT,Copy_cfg->u8PinkPin,DIO_u8PIN_HIGH);
    479e:	fe 01       	movw	r30, r28
    47a0:	e8 58       	subi	r30, 0x88	; 136
    47a2:	ff 4f       	sbci	r31, 0xFF	; 255
    47a4:	01 90       	ld	r0, Z+
    47a6:	f0 81       	ld	r31, Z
    47a8:	e0 2d       	mov	r30, r0
    47aa:	80 81       	ld	r24, Z
    47ac:	fe 01       	movw	r30, r28
    47ae:	e8 58       	subi	r30, 0x88	; 136
    47b0:	ff 4f       	sbci	r31, 0xFF	; 255
    47b2:	01 90       	ld	r0, Z+
    47b4:	f0 81       	ld	r31, Z
    47b6:	e0 2d       	mov	r30, r0
    47b8:	92 81       	ldd	r25, Z+2	; 0x02
    47ba:	69 2f       	mov	r22, r25
    47bc:	41 e0       	ldi	r20, 0x01	; 1
    47be:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <DIO_u8SetPinValue>

				DIO_u8SetPinValue(Copy_cfg-> u8PORT,Copy_cfg->u8YellowPin,DIO_u8PIN_HIGH);
    47c2:	fe 01       	movw	r30, r28
    47c4:	e8 58       	subi	r30, 0x88	; 136
    47c6:	ff 4f       	sbci	r31, 0xFF	; 255
    47c8:	01 90       	ld	r0, Z+
    47ca:	f0 81       	ld	r31, Z
    47cc:	e0 2d       	mov	r30, r0
    47ce:	80 81       	ld	r24, Z
    47d0:	fe 01       	movw	r30, r28
    47d2:	e8 58       	subi	r30, 0x88	; 136
    47d4:	ff 4f       	sbci	r31, 0xFF	; 255
    47d6:	01 90       	ld	r0, Z+
    47d8:	f0 81       	ld	r31, Z
    47da:	e0 2d       	mov	r30, r0
    47dc:	93 81       	ldd	r25, Z+3	; 0x03
    47de:	69 2f       	mov	r22, r25
    47e0:	41 e0       	ldi	r20, 0x01	; 1
    47e2:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <DIO_u8SetPinValue>

				DIO_u8SetPinValue(Copy_cfg-> u8PORT,Copy_cfg->u8OrangePin,DIO_u8PIN_LOW);
    47e6:	fe 01       	movw	r30, r28
    47e8:	e8 58       	subi	r30, 0x88	; 136
    47ea:	ff 4f       	sbci	r31, 0xFF	; 255
    47ec:	01 90       	ld	r0, Z+
    47ee:	f0 81       	ld	r31, Z
    47f0:	e0 2d       	mov	r30, r0
    47f2:	80 81       	ld	r24, Z
    47f4:	fe 01       	movw	r30, r28
    47f6:	e8 58       	subi	r30, 0x88	; 136
    47f8:	ff 4f       	sbci	r31, 0xFF	; 255
    47fa:	01 90       	ld	r0, Z+
    47fc:	f0 81       	ld	r31, Z
    47fe:	e0 2d       	mov	r30, r0
    4800:	94 81       	ldd	r25, Z+4	; 0x04
    4802:	69 2f       	mov	r22, r25
    4804:	40 e0       	ldi	r20, 0x00	; 0
    4806:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <DIO_u8SetPinValue>
    480a:	fe 01       	movw	r30, r28
    480c:	ed 5b       	subi	r30, 0xBD	; 189
    480e:	ff 4f       	sbci	r31, 0xFF	; 255
    4810:	80 e0       	ldi	r24, 0x00	; 0
    4812:	90 e0       	ldi	r25, 0x00	; 0
    4814:	a0 e4       	ldi	r26, 0x40	; 64
    4816:	b0 e4       	ldi	r27, 0x40	; 64
    4818:	80 83       	st	Z, r24
    481a:	91 83       	std	Z+1, r25	; 0x01
    481c:	a2 83       	std	Z+2, r26	; 0x02
    481e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4820:	8e 01       	movw	r16, r28
    4822:	01 5c       	subi	r16, 0xC1	; 193
    4824:	1f 4f       	sbci	r17, 0xFF	; 255
    4826:	fe 01       	movw	r30, r28
    4828:	ed 5b       	subi	r30, 0xBD	; 189
    482a:	ff 4f       	sbci	r31, 0xFF	; 255
    482c:	60 81       	ld	r22, Z
    482e:	71 81       	ldd	r23, Z+1	; 0x01
    4830:	82 81       	ldd	r24, Z+2	; 0x02
    4832:	93 81       	ldd	r25, Z+3	; 0x03
    4834:	20 e0       	ldi	r18, 0x00	; 0
    4836:	30 e0       	ldi	r19, 0x00	; 0
    4838:	4a e7       	ldi	r20, 0x7A	; 122
    483a:	55 e4       	ldi	r21, 0x45	; 69
    483c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4840:	dc 01       	movw	r26, r24
    4842:	cb 01       	movw	r24, r22
    4844:	f8 01       	movw	r30, r16
    4846:	80 83       	st	Z, r24
    4848:	91 83       	std	Z+1, r25	; 0x01
    484a:	a2 83       	std	Z+2, r26	; 0x02
    484c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    484e:	fe 01       	movw	r30, r28
    4850:	ff 96       	adiw	r30, 0x3f	; 63
    4852:	60 81       	ld	r22, Z
    4854:	71 81       	ldd	r23, Z+1	; 0x01
    4856:	82 81       	ldd	r24, Z+2	; 0x02
    4858:	93 81       	ldd	r25, Z+3	; 0x03
    485a:	20 e0       	ldi	r18, 0x00	; 0
    485c:	30 e0       	ldi	r19, 0x00	; 0
    485e:	40 e8       	ldi	r20, 0x80	; 128
    4860:	5f e3       	ldi	r21, 0x3F	; 63
    4862:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    4866:	88 23       	and	r24, r24
    4868:	2c f4       	brge	.+10     	; 0x4874 <STEP_u8Rotate+0x7e6>
		__ticks = 1;
    486a:	81 e0       	ldi	r24, 0x01	; 1
    486c:	90 e0       	ldi	r25, 0x00	; 0
    486e:	9e af       	std	Y+62, r25	; 0x3e
    4870:	8d af       	std	Y+61, r24	; 0x3d
    4872:	46 c0       	rjmp	.+140    	; 0x4900 <STEP_u8Rotate+0x872>
	else if (__tmp > 65535)
    4874:	fe 01       	movw	r30, r28
    4876:	ff 96       	adiw	r30, 0x3f	; 63
    4878:	60 81       	ld	r22, Z
    487a:	71 81       	ldd	r23, Z+1	; 0x01
    487c:	82 81       	ldd	r24, Z+2	; 0x02
    487e:	93 81       	ldd	r25, Z+3	; 0x03
    4880:	20 e0       	ldi	r18, 0x00	; 0
    4882:	3f ef       	ldi	r19, 0xFF	; 255
    4884:	4f e7       	ldi	r20, 0x7F	; 127
    4886:	57 e4       	ldi	r21, 0x47	; 71
    4888:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    488c:	18 16       	cp	r1, r24
    488e:	64 f5       	brge	.+88     	; 0x48e8 <STEP_u8Rotate+0x85a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4890:	fe 01       	movw	r30, r28
    4892:	ed 5b       	subi	r30, 0xBD	; 189
    4894:	ff 4f       	sbci	r31, 0xFF	; 255
    4896:	60 81       	ld	r22, Z
    4898:	71 81       	ldd	r23, Z+1	; 0x01
    489a:	82 81       	ldd	r24, Z+2	; 0x02
    489c:	93 81       	ldd	r25, Z+3	; 0x03
    489e:	20 e0       	ldi	r18, 0x00	; 0
    48a0:	30 e0       	ldi	r19, 0x00	; 0
    48a2:	40 e2       	ldi	r20, 0x20	; 32
    48a4:	51 e4       	ldi	r21, 0x41	; 65
    48a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    48aa:	dc 01       	movw	r26, r24
    48ac:	cb 01       	movw	r24, r22
    48ae:	bc 01       	movw	r22, r24
    48b0:	cd 01       	movw	r24, r26
    48b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    48b6:	dc 01       	movw	r26, r24
    48b8:	cb 01       	movw	r24, r22
    48ba:	9e af       	std	Y+62, r25	; 0x3e
    48bc:	8d af       	std	Y+61, r24	; 0x3d
    48be:	0f c0       	rjmp	.+30     	; 0x48de <STEP_u8Rotate+0x850>
    48c0:	80 e9       	ldi	r24, 0x90	; 144
    48c2:	91 e0       	ldi	r25, 0x01	; 1
    48c4:	9c af       	std	Y+60, r25	; 0x3c
    48c6:	8b af       	std	Y+59, r24	; 0x3b
    48c8:	8b ad       	ldd	r24, Y+59	; 0x3b
    48ca:	9c ad       	ldd	r25, Y+60	; 0x3c
    48cc:	01 97       	sbiw	r24, 0x01	; 1
    48ce:	f1 f7       	brne	.-4      	; 0x48cc <STEP_u8Rotate+0x83e>
    48d0:	9c af       	std	Y+60, r25	; 0x3c
    48d2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48d4:	8d ad       	ldd	r24, Y+61	; 0x3d
    48d6:	9e ad       	ldd	r25, Y+62	; 0x3e
    48d8:	01 97       	sbiw	r24, 0x01	; 1
    48da:	9e af       	std	Y+62, r25	; 0x3e
    48dc:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48de:	8d ad       	ldd	r24, Y+61	; 0x3d
    48e0:	9e ad       	ldd	r25, Y+62	; 0x3e
    48e2:	00 97       	sbiw	r24, 0x00	; 0
    48e4:	69 f7       	brne	.-38     	; 0x48c0 <STEP_u8Rotate+0x832>
    48e6:	16 c0       	rjmp	.+44     	; 0x4914 <STEP_u8Rotate+0x886>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48e8:	fe 01       	movw	r30, r28
    48ea:	ff 96       	adiw	r30, 0x3f	; 63
    48ec:	60 81       	ld	r22, Z
    48ee:	71 81       	ldd	r23, Z+1	; 0x01
    48f0:	82 81       	ldd	r24, Z+2	; 0x02
    48f2:	93 81       	ldd	r25, Z+3	; 0x03
    48f4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    48f8:	dc 01       	movw	r26, r24
    48fa:	cb 01       	movw	r24, r22
    48fc:	9e af       	std	Y+62, r25	; 0x3e
    48fe:	8d af       	std	Y+61, r24	; 0x3d
    4900:	8d ad       	ldd	r24, Y+61	; 0x3d
    4902:	9e ad       	ldd	r25, Y+62	; 0x3e
    4904:	9a af       	std	Y+58, r25	; 0x3a
    4906:	89 af       	std	Y+57, r24	; 0x39
    4908:	89 ad       	ldd	r24, Y+57	; 0x39
    490a:	9a ad       	ldd	r25, Y+58	; 0x3a
    490c:	01 97       	sbiw	r24, 0x01	; 1
    490e:	f1 f7       	brne	.-4      	; 0x490c <STEP_u8Rotate+0x87e>
    4910:	9a af       	std	Y+58, r25	; 0x3a
    4912:	89 af       	std	Y+57, r24	; 0x39
	Local_u16Steps = (uint16)( (  ( (uint32)Copy_Angle ) * (2048UL)  ) /360UL );
	if(Copy_Direction==CW)
	{//////360
		//Local_u16Steps=(uint16)(((uint32)Copy_Angle * 2048UL)/360UL);

		for(uint16 i=0; i<Local_u16Steps;i++)
    4914:	de 01       	movw	r26, r28
    4916:	ad 58       	subi	r26, 0x8D	; 141
    4918:	bf 4f       	sbci	r27, 0xFF	; 255
    491a:	fe 01       	movw	r30, r28
    491c:	ed 58       	subi	r30, 0x8D	; 141
    491e:	ff 4f       	sbci	r31, 0xFF	; 255
    4920:	80 81       	ld	r24, Z
    4922:	91 81       	ldd	r25, Z+1	; 0x01
    4924:	01 96       	adiw	r24, 0x01	; 1
    4926:	8d 93       	st	X+, r24
    4928:	9c 93       	st	X, r25
    492a:	fe 01       	movw	r30, r28
    492c:	ed 58       	subi	r30, 0x8D	; 141
    492e:	ff 4f       	sbci	r31, 0xFF	; 255
    4930:	de 01       	movw	r26, r28
    4932:	ab 58       	subi	r26, 0x8B	; 139
    4934:	bf 4f       	sbci	r27, 0xFF	; 255
    4936:	20 81       	ld	r18, Z
    4938:	31 81       	ldd	r19, Z+1	; 0x01
    493a:	8d 91       	ld	r24, X+
    493c:	9c 91       	ld	r25, X
    493e:	11 97       	sbiw	r26, 0x01	; 1
    4940:	28 17       	cp	r18, r24
    4942:	39 07       	cpc	r19, r25
    4944:	08 f4       	brcc	.+2      	; 0x4948 <STEP_u8Rotate+0x8ba>
    4946:	f7 cb       	rjmp	.-2066   	; 0x4136 <STEP_u8Rotate+0xa8>
    4948:	43 c3       	rjmp	.+1670   	; 0x4fd0 <STEP_u8Rotate+0xf42>
				DIO_u8SetPinValue(Copy_cfg-> u8PORT,Copy_cfg->u8OrangePin,DIO_u8PIN_LOW);
				_delay_ms(3);
		  }
		}
	}
	else if(Copy_Direction==CCW)
    494a:	fe 01       	movw	r30, r28
    494c:	e6 58       	subi	r30, 0x86	; 134
    494e:	ff 4f       	sbci	r31, 0xFF	; 255
    4950:	80 81       	ld	r24, Z
    4952:	82 30       	cpi	r24, 0x02	; 2
    4954:	09 f0       	breq	.+2      	; 0x4958 <STEP_u8Rotate+0x8ca>
    4956:	3c c3       	rjmp	.+1656   	; 0x4fd0 <STEP_u8Rotate+0xf42>
			{//////360
				//Local_u16Steps=(uint16)(((uint32)Copy_Angle*2048UL)/360UL);

				for(uint16 i=0; i<Local_u16Steps;i++)
    4958:	fe 01       	movw	r30, r28
    495a:	ef 58       	subi	r30, 0x8F	; 143
    495c:	ff 4f       	sbci	r31, 0xFF	; 255
    495e:	11 82       	std	Z+1, r1	; 0x01
    4960:	10 82       	st	Z, r1
    4962:	21 c3       	rjmp	.+1602   	; 0x4fa6 <STEP_u8Rotate+0xf18>
				{
		                //STEP 1
					if(i%4==0){
    4964:	fe 01       	movw	r30, r28
    4966:	ef 58       	subi	r30, 0x8F	; 143
    4968:	ff 4f       	sbci	r31, 0xFF	; 255
    496a:	80 81       	ld	r24, Z
    496c:	91 81       	ldd	r25, Z+1	; 0x01
    496e:	83 70       	andi	r24, 0x03	; 3
    4970:	90 70       	andi	r25, 0x00	; 0
    4972:	00 97       	sbiw	r24, 0x00	; 0
    4974:	09 f0       	breq	.+2      	; 0x4978 <STEP_u8Rotate+0x8ea>
    4976:	bb c0       	rjmp	.+374    	; 0x4aee <STEP_u8Rotate+0xa60>
					    DIO_u8SetPinValue(Copy_cfg-> u8PORT ,Copy_cfg->u8BluePin ,DIO_u8PIN_HIGH);
    4978:	fe 01       	movw	r30, r28
    497a:	e8 58       	subi	r30, 0x88	; 136
    497c:	ff 4f       	sbci	r31, 0xFF	; 255
    497e:	01 90       	ld	r0, Z+
    4980:	f0 81       	ld	r31, Z
    4982:	e0 2d       	mov	r30, r0
    4984:	80 81       	ld	r24, Z
    4986:	fe 01       	movw	r30, r28
    4988:	e8 58       	subi	r30, 0x88	; 136
    498a:	ff 4f       	sbci	r31, 0xFF	; 255
    498c:	01 90       	ld	r0, Z+
    498e:	f0 81       	ld	r31, Z
    4990:	e0 2d       	mov	r30, r0
    4992:	91 81       	ldd	r25, Z+1	; 0x01
    4994:	69 2f       	mov	r22, r25
    4996:	41 e0       	ldi	r20, 0x01	; 1
    4998:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <DIO_u8SetPinValue>

						DIO_u8SetPinValue(Copy_cfg-> u8PORT,Copy_cfg->u8PinkPin,DIO_u8PIN_HIGH);
    499c:	fe 01       	movw	r30, r28
    499e:	e8 58       	subi	r30, 0x88	; 136
    49a0:	ff 4f       	sbci	r31, 0xFF	; 255
    49a2:	01 90       	ld	r0, Z+
    49a4:	f0 81       	ld	r31, Z
    49a6:	e0 2d       	mov	r30, r0
    49a8:	80 81       	ld	r24, Z
    49aa:	fe 01       	movw	r30, r28
    49ac:	e8 58       	subi	r30, 0x88	; 136
    49ae:	ff 4f       	sbci	r31, 0xFF	; 255
    49b0:	01 90       	ld	r0, Z+
    49b2:	f0 81       	ld	r31, Z
    49b4:	e0 2d       	mov	r30, r0
    49b6:	92 81       	ldd	r25, Z+2	; 0x02
    49b8:	69 2f       	mov	r22, r25
    49ba:	41 e0       	ldi	r20, 0x01	; 1
    49bc:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <DIO_u8SetPinValue>

						DIO_u8SetPinValue(Copy_cfg-> u8PORT,Copy_cfg->u8YellowPin,DIO_u8PIN_HIGH);
    49c0:	fe 01       	movw	r30, r28
    49c2:	e8 58       	subi	r30, 0x88	; 136
    49c4:	ff 4f       	sbci	r31, 0xFF	; 255
    49c6:	01 90       	ld	r0, Z+
    49c8:	f0 81       	ld	r31, Z
    49ca:	e0 2d       	mov	r30, r0
    49cc:	80 81       	ld	r24, Z
    49ce:	fe 01       	movw	r30, r28
    49d0:	e8 58       	subi	r30, 0x88	; 136
    49d2:	ff 4f       	sbci	r31, 0xFF	; 255
    49d4:	01 90       	ld	r0, Z+
    49d6:	f0 81       	ld	r31, Z
    49d8:	e0 2d       	mov	r30, r0
    49da:	93 81       	ldd	r25, Z+3	; 0x03
    49dc:	69 2f       	mov	r22, r25
    49de:	41 e0       	ldi	r20, 0x01	; 1
    49e0:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <DIO_u8SetPinValue>

						DIO_u8SetPinValue(Copy_cfg-> u8PORT,Copy_cfg->u8OrangePin,DIO_u8PIN_LOW);
    49e4:	fe 01       	movw	r30, r28
    49e6:	e8 58       	subi	r30, 0x88	; 136
    49e8:	ff 4f       	sbci	r31, 0xFF	; 255
    49ea:	01 90       	ld	r0, Z+
    49ec:	f0 81       	ld	r31, Z
    49ee:	e0 2d       	mov	r30, r0
    49f0:	80 81       	ld	r24, Z
    49f2:	fe 01       	movw	r30, r28
    49f4:	e8 58       	subi	r30, 0x88	; 136
    49f6:	ff 4f       	sbci	r31, 0xFF	; 255
    49f8:	01 90       	ld	r0, Z+
    49fa:	f0 81       	ld	r31, Z
    49fc:	e0 2d       	mov	r30, r0
    49fe:	94 81       	ldd	r25, Z+4	; 0x04
    4a00:	69 2f       	mov	r22, r25
    4a02:	40 e0       	ldi	r20, 0x00	; 0
    4a04:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <DIO_u8SetPinValue>
    4a08:	80 e0       	ldi	r24, 0x00	; 0
    4a0a:	90 e0       	ldi	r25, 0x00	; 0
    4a0c:	a0 e4       	ldi	r26, 0x40	; 64
    4a0e:	b0 e4       	ldi	r27, 0x40	; 64
    4a10:	8d ab       	std	Y+53, r24	; 0x35
    4a12:	9e ab       	std	Y+54, r25	; 0x36
    4a14:	af ab       	std	Y+55, r26	; 0x37
    4a16:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a18:	6d a9       	ldd	r22, Y+53	; 0x35
    4a1a:	7e a9       	ldd	r23, Y+54	; 0x36
    4a1c:	8f a9       	ldd	r24, Y+55	; 0x37
    4a1e:	98 ad       	ldd	r25, Y+56	; 0x38
    4a20:	20 e0       	ldi	r18, 0x00	; 0
    4a22:	30 e0       	ldi	r19, 0x00	; 0
    4a24:	4a e7       	ldi	r20, 0x7A	; 122
    4a26:	55 e4       	ldi	r21, 0x45	; 69
    4a28:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4a2c:	dc 01       	movw	r26, r24
    4a2e:	cb 01       	movw	r24, r22
    4a30:	89 ab       	std	Y+49, r24	; 0x31
    4a32:	9a ab       	std	Y+50, r25	; 0x32
    4a34:	ab ab       	std	Y+51, r26	; 0x33
    4a36:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4a38:	69 a9       	ldd	r22, Y+49	; 0x31
    4a3a:	7a a9       	ldd	r23, Y+50	; 0x32
    4a3c:	8b a9       	ldd	r24, Y+51	; 0x33
    4a3e:	9c a9       	ldd	r25, Y+52	; 0x34
    4a40:	20 e0       	ldi	r18, 0x00	; 0
    4a42:	30 e0       	ldi	r19, 0x00	; 0
    4a44:	40 e8       	ldi	r20, 0x80	; 128
    4a46:	5f e3       	ldi	r21, 0x3F	; 63
    4a48:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    4a4c:	88 23       	and	r24, r24
    4a4e:	2c f4       	brge	.+10     	; 0x4a5a <STEP_u8Rotate+0x9cc>
		__ticks = 1;
    4a50:	81 e0       	ldi	r24, 0x01	; 1
    4a52:	90 e0       	ldi	r25, 0x00	; 0
    4a54:	98 ab       	std	Y+48, r25	; 0x30
    4a56:	8f a7       	std	Y+47, r24	; 0x2f
    4a58:	3f c0       	rjmp	.+126    	; 0x4ad8 <STEP_u8Rotate+0xa4a>
	else if (__tmp > 65535)
    4a5a:	69 a9       	ldd	r22, Y+49	; 0x31
    4a5c:	7a a9       	ldd	r23, Y+50	; 0x32
    4a5e:	8b a9       	ldd	r24, Y+51	; 0x33
    4a60:	9c a9       	ldd	r25, Y+52	; 0x34
    4a62:	20 e0       	ldi	r18, 0x00	; 0
    4a64:	3f ef       	ldi	r19, 0xFF	; 255
    4a66:	4f e7       	ldi	r20, 0x7F	; 127
    4a68:	57 e4       	ldi	r21, 0x47	; 71
    4a6a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    4a6e:	18 16       	cp	r1, r24
    4a70:	4c f5       	brge	.+82     	; 0x4ac4 <STEP_u8Rotate+0xa36>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a72:	6d a9       	ldd	r22, Y+53	; 0x35
    4a74:	7e a9       	ldd	r23, Y+54	; 0x36
    4a76:	8f a9       	ldd	r24, Y+55	; 0x37
    4a78:	98 ad       	ldd	r25, Y+56	; 0x38
    4a7a:	20 e0       	ldi	r18, 0x00	; 0
    4a7c:	30 e0       	ldi	r19, 0x00	; 0
    4a7e:	40 e2       	ldi	r20, 0x20	; 32
    4a80:	51 e4       	ldi	r21, 0x41	; 65
    4a82:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4a86:	dc 01       	movw	r26, r24
    4a88:	cb 01       	movw	r24, r22
    4a8a:	bc 01       	movw	r22, r24
    4a8c:	cd 01       	movw	r24, r26
    4a8e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4a92:	dc 01       	movw	r26, r24
    4a94:	cb 01       	movw	r24, r22
    4a96:	98 ab       	std	Y+48, r25	; 0x30
    4a98:	8f a7       	std	Y+47, r24	; 0x2f
    4a9a:	0f c0       	rjmp	.+30     	; 0x4aba <STEP_u8Rotate+0xa2c>
    4a9c:	80 e9       	ldi	r24, 0x90	; 144
    4a9e:	91 e0       	ldi	r25, 0x01	; 1
    4aa0:	9e a7       	std	Y+46, r25	; 0x2e
    4aa2:	8d a7       	std	Y+45, r24	; 0x2d
    4aa4:	8d a5       	ldd	r24, Y+45	; 0x2d
    4aa6:	9e a5       	ldd	r25, Y+46	; 0x2e
    4aa8:	01 97       	sbiw	r24, 0x01	; 1
    4aaa:	f1 f7       	brne	.-4      	; 0x4aa8 <STEP_u8Rotate+0xa1a>
    4aac:	9e a7       	std	Y+46, r25	; 0x2e
    4aae:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ab0:	8f a5       	ldd	r24, Y+47	; 0x2f
    4ab2:	98 a9       	ldd	r25, Y+48	; 0x30
    4ab4:	01 97       	sbiw	r24, 0x01	; 1
    4ab6:	98 ab       	std	Y+48, r25	; 0x30
    4ab8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4aba:	8f a5       	ldd	r24, Y+47	; 0x2f
    4abc:	98 a9       	ldd	r25, Y+48	; 0x30
    4abe:	00 97       	sbiw	r24, 0x00	; 0
    4ac0:	69 f7       	brne	.-38     	; 0x4a9c <STEP_u8Rotate+0xa0e>
    4ac2:	66 c2       	rjmp	.+1228   	; 0x4f90 <STEP_u8Rotate+0xf02>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ac4:	69 a9       	ldd	r22, Y+49	; 0x31
    4ac6:	7a a9       	ldd	r23, Y+50	; 0x32
    4ac8:	8b a9       	ldd	r24, Y+51	; 0x33
    4aca:	9c a9       	ldd	r25, Y+52	; 0x34
    4acc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4ad0:	dc 01       	movw	r26, r24
    4ad2:	cb 01       	movw	r24, r22
    4ad4:	98 ab       	std	Y+48, r25	; 0x30
    4ad6:	8f a7       	std	Y+47, r24	; 0x2f
    4ad8:	8f a5       	ldd	r24, Y+47	; 0x2f
    4ada:	98 a9       	ldd	r25, Y+48	; 0x30
    4adc:	9c a7       	std	Y+44, r25	; 0x2c
    4ade:	8b a7       	std	Y+43, r24	; 0x2b
    4ae0:	8b a5       	ldd	r24, Y+43	; 0x2b
    4ae2:	9c a5       	ldd	r25, Y+44	; 0x2c
    4ae4:	01 97       	sbiw	r24, 0x01	; 1
    4ae6:	f1 f7       	brne	.-4      	; 0x4ae4 <STEP_u8Rotate+0xa56>
    4ae8:	9c a7       	std	Y+44, r25	; 0x2c
    4aea:	8b a7       	std	Y+43, r24	; 0x2b
    4aec:	51 c2       	rjmp	.+1186   	; 0x4f90 <STEP_u8Rotate+0xf02>
						_delay_ms(3);
					}
		                 //STEP 2
					else if(i%4==1){
    4aee:	fe 01       	movw	r30, r28
    4af0:	ef 58       	subi	r30, 0x8F	; 143
    4af2:	ff 4f       	sbci	r31, 0xFF	; 255
    4af4:	80 81       	ld	r24, Z
    4af6:	91 81       	ldd	r25, Z+1	; 0x01
    4af8:	83 70       	andi	r24, 0x03	; 3
    4afa:	90 70       	andi	r25, 0x00	; 0
    4afc:	81 30       	cpi	r24, 0x01	; 1
    4afe:	91 05       	cpc	r25, r1
    4b00:	09 f0       	breq	.+2      	; 0x4b04 <STEP_u8Rotate+0xa76>
    4b02:	bb c0       	rjmp	.+374    	; 0x4c7a <STEP_u8Rotate+0xbec>
						DIO_u8SetPinValue(Copy_cfg-> u8PORT ,Copy_cfg->u8BluePin ,DIO_u8PIN_HIGH);
    4b04:	fe 01       	movw	r30, r28
    4b06:	e8 58       	subi	r30, 0x88	; 136
    4b08:	ff 4f       	sbci	r31, 0xFF	; 255
    4b0a:	01 90       	ld	r0, Z+
    4b0c:	f0 81       	ld	r31, Z
    4b0e:	e0 2d       	mov	r30, r0
    4b10:	80 81       	ld	r24, Z
    4b12:	fe 01       	movw	r30, r28
    4b14:	e8 58       	subi	r30, 0x88	; 136
    4b16:	ff 4f       	sbci	r31, 0xFF	; 255
    4b18:	01 90       	ld	r0, Z+
    4b1a:	f0 81       	ld	r31, Z
    4b1c:	e0 2d       	mov	r30, r0
    4b1e:	91 81       	ldd	r25, Z+1	; 0x01
    4b20:	69 2f       	mov	r22, r25
    4b22:	41 e0       	ldi	r20, 0x01	; 1
    4b24:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <DIO_u8SetPinValue>

					    DIO_u8SetPinValue(Copy_cfg-> u8PORT,Copy_cfg->u8PinkPin,DIO_u8PIN_HIGH);
    4b28:	fe 01       	movw	r30, r28
    4b2a:	e8 58       	subi	r30, 0x88	; 136
    4b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    4b2e:	01 90       	ld	r0, Z+
    4b30:	f0 81       	ld	r31, Z
    4b32:	e0 2d       	mov	r30, r0
    4b34:	80 81       	ld	r24, Z
    4b36:	fe 01       	movw	r30, r28
    4b38:	e8 58       	subi	r30, 0x88	; 136
    4b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    4b3c:	01 90       	ld	r0, Z+
    4b3e:	f0 81       	ld	r31, Z
    4b40:	e0 2d       	mov	r30, r0
    4b42:	92 81       	ldd	r25, Z+2	; 0x02
    4b44:	69 2f       	mov	r22, r25
    4b46:	41 e0       	ldi	r20, 0x01	; 1
    4b48:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <DIO_u8SetPinValue>

					    DIO_u8SetPinValue(Copy_cfg-> u8PORT,Copy_cfg->u8YellowPin,DIO_u8PIN_LOW);
    4b4c:	fe 01       	movw	r30, r28
    4b4e:	e8 58       	subi	r30, 0x88	; 136
    4b50:	ff 4f       	sbci	r31, 0xFF	; 255
    4b52:	01 90       	ld	r0, Z+
    4b54:	f0 81       	ld	r31, Z
    4b56:	e0 2d       	mov	r30, r0
    4b58:	80 81       	ld	r24, Z
    4b5a:	fe 01       	movw	r30, r28
    4b5c:	e8 58       	subi	r30, 0x88	; 136
    4b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b60:	01 90       	ld	r0, Z+
    4b62:	f0 81       	ld	r31, Z
    4b64:	e0 2d       	mov	r30, r0
    4b66:	93 81       	ldd	r25, Z+3	; 0x03
    4b68:	69 2f       	mov	r22, r25
    4b6a:	40 e0       	ldi	r20, 0x00	; 0
    4b6c:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <DIO_u8SetPinValue>

					    DIO_u8SetPinValue(Copy_cfg-> u8PORT,Copy_cfg->u8OrangePin,DIO_u8PIN_HIGH);
    4b70:	fe 01       	movw	r30, r28
    4b72:	e8 58       	subi	r30, 0x88	; 136
    4b74:	ff 4f       	sbci	r31, 0xFF	; 255
    4b76:	01 90       	ld	r0, Z+
    4b78:	f0 81       	ld	r31, Z
    4b7a:	e0 2d       	mov	r30, r0
    4b7c:	80 81       	ld	r24, Z
    4b7e:	fe 01       	movw	r30, r28
    4b80:	e8 58       	subi	r30, 0x88	; 136
    4b82:	ff 4f       	sbci	r31, 0xFF	; 255
    4b84:	01 90       	ld	r0, Z+
    4b86:	f0 81       	ld	r31, Z
    4b88:	e0 2d       	mov	r30, r0
    4b8a:	94 81       	ldd	r25, Z+4	; 0x04
    4b8c:	69 2f       	mov	r22, r25
    4b8e:	41 e0       	ldi	r20, 0x01	; 1
    4b90:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <DIO_u8SetPinValue>
    4b94:	80 e0       	ldi	r24, 0x00	; 0
    4b96:	90 e0       	ldi	r25, 0x00	; 0
    4b98:	a0 e4       	ldi	r26, 0x40	; 64
    4b9a:	b0 e4       	ldi	r27, 0x40	; 64
    4b9c:	8f a3       	std	Y+39, r24	; 0x27
    4b9e:	98 a7       	std	Y+40, r25	; 0x28
    4ba0:	a9 a7       	std	Y+41, r26	; 0x29
    4ba2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ba4:	6f a1       	ldd	r22, Y+39	; 0x27
    4ba6:	78 a5       	ldd	r23, Y+40	; 0x28
    4ba8:	89 a5       	ldd	r24, Y+41	; 0x29
    4baa:	9a a5       	ldd	r25, Y+42	; 0x2a
    4bac:	20 e0       	ldi	r18, 0x00	; 0
    4bae:	30 e0       	ldi	r19, 0x00	; 0
    4bb0:	4a e7       	ldi	r20, 0x7A	; 122
    4bb2:	55 e4       	ldi	r21, 0x45	; 69
    4bb4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4bb8:	dc 01       	movw	r26, r24
    4bba:	cb 01       	movw	r24, r22
    4bbc:	8b a3       	std	Y+35, r24	; 0x23
    4bbe:	9c a3       	std	Y+36, r25	; 0x24
    4bc0:	ad a3       	std	Y+37, r26	; 0x25
    4bc2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4bc4:	6b a1       	ldd	r22, Y+35	; 0x23
    4bc6:	7c a1       	ldd	r23, Y+36	; 0x24
    4bc8:	8d a1       	ldd	r24, Y+37	; 0x25
    4bca:	9e a1       	ldd	r25, Y+38	; 0x26
    4bcc:	20 e0       	ldi	r18, 0x00	; 0
    4bce:	30 e0       	ldi	r19, 0x00	; 0
    4bd0:	40 e8       	ldi	r20, 0x80	; 128
    4bd2:	5f e3       	ldi	r21, 0x3F	; 63
    4bd4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    4bd8:	88 23       	and	r24, r24
    4bda:	2c f4       	brge	.+10     	; 0x4be6 <STEP_u8Rotate+0xb58>
		__ticks = 1;
    4bdc:	81 e0       	ldi	r24, 0x01	; 1
    4bde:	90 e0       	ldi	r25, 0x00	; 0
    4be0:	9a a3       	std	Y+34, r25	; 0x22
    4be2:	89 a3       	std	Y+33, r24	; 0x21
    4be4:	3f c0       	rjmp	.+126    	; 0x4c64 <STEP_u8Rotate+0xbd6>
	else if (__tmp > 65535)
    4be6:	6b a1       	ldd	r22, Y+35	; 0x23
    4be8:	7c a1       	ldd	r23, Y+36	; 0x24
    4bea:	8d a1       	ldd	r24, Y+37	; 0x25
    4bec:	9e a1       	ldd	r25, Y+38	; 0x26
    4bee:	20 e0       	ldi	r18, 0x00	; 0
    4bf0:	3f ef       	ldi	r19, 0xFF	; 255
    4bf2:	4f e7       	ldi	r20, 0x7F	; 127
    4bf4:	57 e4       	ldi	r21, 0x47	; 71
    4bf6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    4bfa:	18 16       	cp	r1, r24
    4bfc:	4c f5       	brge	.+82     	; 0x4c50 <STEP_u8Rotate+0xbc2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4bfe:	6f a1       	ldd	r22, Y+39	; 0x27
    4c00:	78 a5       	ldd	r23, Y+40	; 0x28
    4c02:	89 a5       	ldd	r24, Y+41	; 0x29
    4c04:	9a a5       	ldd	r25, Y+42	; 0x2a
    4c06:	20 e0       	ldi	r18, 0x00	; 0
    4c08:	30 e0       	ldi	r19, 0x00	; 0
    4c0a:	40 e2       	ldi	r20, 0x20	; 32
    4c0c:	51 e4       	ldi	r21, 0x41	; 65
    4c0e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4c12:	dc 01       	movw	r26, r24
    4c14:	cb 01       	movw	r24, r22
    4c16:	bc 01       	movw	r22, r24
    4c18:	cd 01       	movw	r24, r26
    4c1a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4c1e:	dc 01       	movw	r26, r24
    4c20:	cb 01       	movw	r24, r22
    4c22:	9a a3       	std	Y+34, r25	; 0x22
    4c24:	89 a3       	std	Y+33, r24	; 0x21
    4c26:	0f c0       	rjmp	.+30     	; 0x4c46 <STEP_u8Rotate+0xbb8>
    4c28:	80 e9       	ldi	r24, 0x90	; 144
    4c2a:	91 e0       	ldi	r25, 0x01	; 1
    4c2c:	98 a3       	std	Y+32, r25	; 0x20
    4c2e:	8f 8f       	std	Y+31, r24	; 0x1f
    4c30:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4c32:	98 a1       	ldd	r25, Y+32	; 0x20
    4c34:	01 97       	sbiw	r24, 0x01	; 1
    4c36:	f1 f7       	brne	.-4      	; 0x4c34 <STEP_u8Rotate+0xba6>
    4c38:	98 a3       	std	Y+32, r25	; 0x20
    4c3a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c3c:	89 a1       	ldd	r24, Y+33	; 0x21
    4c3e:	9a a1       	ldd	r25, Y+34	; 0x22
    4c40:	01 97       	sbiw	r24, 0x01	; 1
    4c42:	9a a3       	std	Y+34, r25	; 0x22
    4c44:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c46:	89 a1       	ldd	r24, Y+33	; 0x21
    4c48:	9a a1       	ldd	r25, Y+34	; 0x22
    4c4a:	00 97       	sbiw	r24, 0x00	; 0
    4c4c:	69 f7       	brne	.-38     	; 0x4c28 <STEP_u8Rotate+0xb9a>
    4c4e:	a0 c1       	rjmp	.+832    	; 0x4f90 <STEP_u8Rotate+0xf02>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c50:	6b a1       	ldd	r22, Y+35	; 0x23
    4c52:	7c a1       	ldd	r23, Y+36	; 0x24
    4c54:	8d a1       	ldd	r24, Y+37	; 0x25
    4c56:	9e a1       	ldd	r25, Y+38	; 0x26
    4c58:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4c5c:	dc 01       	movw	r26, r24
    4c5e:	cb 01       	movw	r24, r22
    4c60:	9a a3       	std	Y+34, r25	; 0x22
    4c62:	89 a3       	std	Y+33, r24	; 0x21
    4c64:	89 a1       	ldd	r24, Y+33	; 0x21
    4c66:	9a a1       	ldd	r25, Y+34	; 0x22
    4c68:	9e 8f       	std	Y+30, r25	; 0x1e
    4c6a:	8d 8f       	std	Y+29, r24	; 0x1d
    4c6c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4c6e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4c70:	01 97       	sbiw	r24, 0x01	; 1
    4c72:	f1 f7       	brne	.-4      	; 0x4c70 <STEP_u8Rotate+0xbe2>
    4c74:	9e 8f       	std	Y+30, r25	; 0x1e
    4c76:	8d 8f       	std	Y+29, r24	; 0x1d
    4c78:	8b c1       	rjmp	.+790    	; 0x4f90 <STEP_u8Rotate+0xf02>
						_delay_ms(3);
					}
					else if(i%4==2){
    4c7a:	fe 01       	movw	r30, r28
    4c7c:	ef 58       	subi	r30, 0x8F	; 143
    4c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    4c80:	80 81       	ld	r24, Z
    4c82:	91 81       	ldd	r25, Z+1	; 0x01
    4c84:	83 70       	andi	r24, 0x03	; 3
    4c86:	90 70       	andi	r25, 0x00	; 0
    4c88:	82 30       	cpi	r24, 0x02	; 2
    4c8a:	91 05       	cpc	r25, r1
    4c8c:	09 f0       	breq	.+2      	; 0x4c90 <STEP_u8Rotate+0xc02>
    4c8e:	bb c0       	rjmp	.+374    	; 0x4e06 <STEP_u8Rotate+0xd78>
						DIO_u8SetPinValue(Copy_cfg-> u8PORT ,Copy_cfg->u8BluePin ,DIO_u8PIN_HIGH);
    4c90:	fe 01       	movw	r30, r28
    4c92:	e8 58       	subi	r30, 0x88	; 136
    4c94:	ff 4f       	sbci	r31, 0xFF	; 255
    4c96:	01 90       	ld	r0, Z+
    4c98:	f0 81       	ld	r31, Z
    4c9a:	e0 2d       	mov	r30, r0
    4c9c:	80 81       	ld	r24, Z
    4c9e:	fe 01       	movw	r30, r28
    4ca0:	e8 58       	subi	r30, 0x88	; 136
    4ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ca4:	01 90       	ld	r0, Z+
    4ca6:	f0 81       	ld	r31, Z
    4ca8:	e0 2d       	mov	r30, r0
    4caa:	91 81       	ldd	r25, Z+1	; 0x01
    4cac:	69 2f       	mov	r22, r25
    4cae:	41 e0       	ldi	r20, 0x01	; 1
    4cb0:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <DIO_u8SetPinValue>

						DIO_u8SetPinValue(Copy_cfg-> u8PORT,Copy_cfg->u8PinkPin,DIO_u8PIN_LOW);
    4cb4:	fe 01       	movw	r30, r28
    4cb6:	e8 58       	subi	r30, 0x88	; 136
    4cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    4cba:	01 90       	ld	r0, Z+
    4cbc:	f0 81       	ld	r31, Z
    4cbe:	e0 2d       	mov	r30, r0
    4cc0:	80 81       	ld	r24, Z
    4cc2:	fe 01       	movw	r30, r28
    4cc4:	e8 58       	subi	r30, 0x88	; 136
    4cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    4cc8:	01 90       	ld	r0, Z+
    4cca:	f0 81       	ld	r31, Z
    4ccc:	e0 2d       	mov	r30, r0
    4cce:	92 81       	ldd	r25, Z+2	; 0x02
    4cd0:	69 2f       	mov	r22, r25
    4cd2:	40 e0       	ldi	r20, 0x00	; 0
    4cd4:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <DIO_u8SetPinValue>

						DIO_u8SetPinValue(Copy_cfg-> u8PORT,Copy_cfg->u8YellowPin,DIO_u8PIN_HIGH);
    4cd8:	fe 01       	movw	r30, r28
    4cda:	e8 58       	subi	r30, 0x88	; 136
    4cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    4cde:	01 90       	ld	r0, Z+
    4ce0:	f0 81       	ld	r31, Z
    4ce2:	e0 2d       	mov	r30, r0
    4ce4:	80 81       	ld	r24, Z
    4ce6:	fe 01       	movw	r30, r28
    4ce8:	e8 58       	subi	r30, 0x88	; 136
    4cea:	ff 4f       	sbci	r31, 0xFF	; 255
    4cec:	01 90       	ld	r0, Z+
    4cee:	f0 81       	ld	r31, Z
    4cf0:	e0 2d       	mov	r30, r0
    4cf2:	93 81       	ldd	r25, Z+3	; 0x03
    4cf4:	69 2f       	mov	r22, r25
    4cf6:	41 e0       	ldi	r20, 0x01	; 1
    4cf8:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <DIO_u8SetPinValue>

						DIO_u8SetPinValue(Copy_cfg-> u8PORT,Copy_cfg->u8OrangePin,DIO_u8PIN_HIGH);
    4cfc:	fe 01       	movw	r30, r28
    4cfe:	e8 58       	subi	r30, 0x88	; 136
    4d00:	ff 4f       	sbci	r31, 0xFF	; 255
    4d02:	01 90       	ld	r0, Z+
    4d04:	f0 81       	ld	r31, Z
    4d06:	e0 2d       	mov	r30, r0
    4d08:	80 81       	ld	r24, Z
    4d0a:	fe 01       	movw	r30, r28
    4d0c:	e8 58       	subi	r30, 0x88	; 136
    4d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    4d10:	01 90       	ld	r0, Z+
    4d12:	f0 81       	ld	r31, Z
    4d14:	e0 2d       	mov	r30, r0
    4d16:	94 81       	ldd	r25, Z+4	; 0x04
    4d18:	69 2f       	mov	r22, r25
    4d1a:	41 e0       	ldi	r20, 0x01	; 1
    4d1c:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <DIO_u8SetPinValue>
    4d20:	80 e0       	ldi	r24, 0x00	; 0
    4d22:	90 e0       	ldi	r25, 0x00	; 0
    4d24:	a0 e4       	ldi	r26, 0x40	; 64
    4d26:	b0 e4       	ldi	r27, 0x40	; 64
    4d28:	89 8f       	std	Y+25, r24	; 0x19
    4d2a:	9a 8f       	std	Y+26, r25	; 0x1a
    4d2c:	ab 8f       	std	Y+27, r26	; 0x1b
    4d2e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d30:	69 8d       	ldd	r22, Y+25	; 0x19
    4d32:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4d34:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4d36:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4d38:	20 e0       	ldi	r18, 0x00	; 0
    4d3a:	30 e0       	ldi	r19, 0x00	; 0
    4d3c:	4a e7       	ldi	r20, 0x7A	; 122
    4d3e:	55 e4       	ldi	r21, 0x45	; 69
    4d40:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4d44:	dc 01       	movw	r26, r24
    4d46:	cb 01       	movw	r24, r22
    4d48:	8d 8b       	std	Y+21, r24	; 0x15
    4d4a:	9e 8b       	std	Y+22, r25	; 0x16
    4d4c:	af 8b       	std	Y+23, r26	; 0x17
    4d4e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4d50:	6d 89       	ldd	r22, Y+21	; 0x15
    4d52:	7e 89       	ldd	r23, Y+22	; 0x16
    4d54:	8f 89       	ldd	r24, Y+23	; 0x17
    4d56:	98 8d       	ldd	r25, Y+24	; 0x18
    4d58:	20 e0       	ldi	r18, 0x00	; 0
    4d5a:	30 e0       	ldi	r19, 0x00	; 0
    4d5c:	40 e8       	ldi	r20, 0x80	; 128
    4d5e:	5f e3       	ldi	r21, 0x3F	; 63
    4d60:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    4d64:	88 23       	and	r24, r24
    4d66:	2c f4       	brge	.+10     	; 0x4d72 <STEP_u8Rotate+0xce4>
		__ticks = 1;
    4d68:	81 e0       	ldi	r24, 0x01	; 1
    4d6a:	90 e0       	ldi	r25, 0x00	; 0
    4d6c:	9c 8b       	std	Y+20, r25	; 0x14
    4d6e:	8b 8b       	std	Y+19, r24	; 0x13
    4d70:	3f c0       	rjmp	.+126    	; 0x4df0 <STEP_u8Rotate+0xd62>
	else if (__tmp > 65535)
    4d72:	6d 89       	ldd	r22, Y+21	; 0x15
    4d74:	7e 89       	ldd	r23, Y+22	; 0x16
    4d76:	8f 89       	ldd	r24, Y+23	; 0x17
    4d78:	98 8d       	ldd	r25, Y+24	; 0x18
    4d7a:	20 e0       	ldi	r18, 0x00	; 0
    4d7c:	3f ef       	ldi	r19, 0xFF	; 255
    4d7e:	4f e7       	ldi	r20, 0x7F	; 127
    4d80:	57 e4       	ldi	r21, 0x47	; 71
    4d82:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    4d86:	18 16       	cp	r1, r24
    4d88:	4c f5       	brge	.+82     	; 0x4ddc <STEP_u8Rotate+0xd4e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d8a:	69 8d       	ldd	r22, Y+25	; 0x19
    4d8c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4d8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4d90:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4d92:	20 e0       	ldi	r18, 0x00	; 0
    4d94:	30 e0       	ldi	r19, 0x00	; 0
    4d96:	40 e2       	ldi	r20, 0x20	; 32
    4d98:	51 e4       	ldi	r21, 0x41	; 65
    4d9a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4d9e:	dc 01       	movw	r26, r24
    4da0:	cb 01       	movw	r24, r22
    4da2:	bc 01       	movw	r22, r24
    4da4:	cd 01       	movw	r24, r26
    4da6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4daa:	dc 01       	movw	r26, r24
    4dac:	cb 01       	movw	r24, r22
    4dae:	9c 8b       	std	Y+20, r25	; 0x14
    4db0:	8b 8b       	std	Y+19, r24	; 0x13
    4db2:	0f c0       	rjmp	.+30     	; 0x4dd2 <STEP_u8Rotate+0xd44>
    4db4:	80 e9       	ldi	r24, 0x90	; 144
    4db6:	91 e0       	ldi	r25, 0x01	; 1
    4db8:	9a 8b       	std	Y+18, r25	; 0x12
    4dba:	89 8b       	std	Y+17, r24	; 0x11
    4dbc:	89 89       	ldd	r24, Y+17	; 0x11
    4dbe:	9a 89       	ldd	r25, Y+18	; 0x12
    4dc0:	01 97       	sbiw	r24, 0x01	; 1
    4dc2:	f1 f7       	brne	.-4      	; 0x4dc0 <STEP_u8Rotate+0xd32>
    4dc4:	9a 8b       	std	Y+18, r25	; 0x12
    4dc6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4dc8:	8b 89       	ldd	r24, Y+19	; 0x13
    4dca:	9c 89       	ldd	r25, Y+20	; 0x14
    4dcc:	01 97       	sbiw	r24, 0x01	; 1
    4dce:	9c 8b       	std	Y+20, r25	; 0x14
    4dd0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4dd2:	8b 89       	ldd	r24, Y+19	; 0x13
    4dd4:	9c 89       	ldd	r25, Y+20	; 0x14
    4dd6:	00 97       	sbiw	r24, 0x00	; 0
    4dd8:	69 f7       	brne	.-38     	; 0x4db4 <STEP_u8Rotate+0xd26>
    4dda:	da c0       	rjmp	.+436    	; 0x4f90 <STEP_u8Rotate+0xf02>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ddc:	6d 89       	ldd	r22, Y+21	; 0x15
    4dde:	7e 89       	ldd	r23, Y+22	; 0x16
    4de0:	8f 89       	ldd	r24, Y+23	; 0x17
    4de2:	98 8d       	ldd	r25, Y+24	; 0x18
    4de4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4de8:	dc 01       	movw	r26, r24
    4dea:	cb 01       	movw	r24, r22
    4dec:	9c 8b       	std	Y+20, r25	; 0x14
    4dee:	8b 8b       	std	Y+19, r24	; 0x13
    4df0:	8b 89       	ldd	r24, Y+19	; 0x13
    4df2:	9c 89       	ldd	r25, Y+20	; 0x14
    4df4:	98 8b       	std	Y+16, r25	; 0x10
    4df6:	8f 87       	std	Y+15, r24	; 0x0f
    4df8:	8f 85       	ldd	r24, Y+15	; 0x0f
    4dfa:	98 89       	ldd	r25, Y+16	; 0x10
    4dfc:	01 97       	sbiw	r24, 0x01	; 1
    4dfe:	f1 f7       	brne	.-4      	; 0x4dfc <STEP_u8Rotate+0xd6e>
    4e00:	98 8b       	std	Y+16, r25	; 0x10
    4e02:	8f 87       	std	Y+15, r24	; 0x0f
    4e04:	c5 c0       	rjmp	.+394    	; 0x4f90 <STEP_u8Rotate+0xf02>
						_delay_ms(3);
					}
					else if(i%4==3){
    4e06:	fe 01       	movw	r30, r28
    4e08:	ef 58       	subi	r30, 0x8F	; 143
    4e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    4e0c:	80 81       	ld	r24, Z
    4e0e:	91 81       	ldd	r25, Z+1	; 0x01
    4e10:	83 70       	andi	r24, 0x03	; 3
    4e12:	90 70       	andi	r25, 0x00	; 0
    4e14:	83 30       	cpi	r24, 0x03	; 3
    4e16:	91 05       	cpc	r25, r1
    4e18:	09 f0       	breq	.+2      	; 0x4e1c <STEP_u8Rotate+0xd8e>
    4e1a:	ba c0       	rjmp	.+372    	; 0x4f90 <STEP_u8Rotate+0xf02>
						DIO_u8SetPinValue(Copy_cfg-> u8PORT ,Copy_cfg->u8BluePin ,DIO_u8PIN_LOW);
    4e1c:	fe 01       	movw	r30, r28
    4e1e:	e8 58       	subi	r30, 0x88	; 136
    4e20:	ff 4f       	sbci	r31, 0xFF	; 255
    4e22:	01 90       	ld	r0, Z+
    4e24:	f0 81       	ld	r31, Z
    4e26:	e0 2d       	mov	r30, r0
    4e28:	80 81       	ld	r24, Z
    4e2a:	fe 01       	movw	r30, r28
    4e2c:	e8 58       	subi	r30, 0x88	; 136
    4e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e30:	01 90       	ld	r0, Z+
    4e32:	f0 81       	ld	r31, Z
    4e34:	e0 2d       	mov	r30, r0
    4e36:	91 81       	ldd	r25, Z+1	; 0x01
    4e38:	69 2f       	mov	r22, r25
    4e3a:	40 e0       	ldi	r20, 0x00	; 0
    4e3c:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <DIO_u8SetPinValue>

						DIO_u8SetPinValue(Copy_cfg-> u8PORT,Copy_cfg->u8PinkPin,DIO_u8PIN_HIGH);
    4e40:	fe 01       	movw	r30, r28
    4e42:	e8 58       	subi	r30, 0x88	; 136
    4e44:	ff 4f       	sbci	r31, 0xFF	; 255
    4e46:	01 90       	ld	r0, Z+
    4e48:	f0 81       	ld	r31, Z
    4e4a:	e0 2d       	mov	r30, r0
    4e4c:	80 81       	ld	r24, Z
    4e4e:	fe 01       	movw	r30, r28
    4e50:	e8 58       	subi	r30, 0x88	; 136
    4e52:	ff 4f       	sbci	r31, 0xFF	; 255
    4e54:	01 90       	ld	r0, Z+
    4e56:	f0 81       	ld	r31, Z
    4e58:	e0 2d       	mov	r30, r0
    4e5a:	92 81       	ldd	r25, Z+2	; 0x02
    4e5c:	69 2f       	mov	r22, r25
    4e5e:	41 e0       	ldi	r20, 0x01	; 1
    4e60:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <DIO_u8SetPinValue>

						DIO_u8SetPinValue(Copy_cfg-> u8PORT,Copy_cfg->u8YellowPin,DIO_u8PIN_HIGH);
    4e64:	fe 01       	movw	r30, r28
    4e66:	e8 58       	subi	r30, 0x88	; 136
    4e68:	ff 4f       	sbci	r31, 0xFF	; 255
    4e6a:	01 90       	ld	r0, Z+
    4e6c:	f0 81       	ld	r31, Z
    4e6e:	e0 2d       	mov	r30, r0
    4e70:	80 81       	ld	r24, Z
    4e72:	fe 01       	movw	r30, r28
    4e74:	e8 58       	subi	r30, 0x88	; 136
    4e76:	ff 4f       	sbci	r31, 0xFF	; 255
    4e78:	01 90       	ld	r0, Z+
    4e7a:	f0 81       	ld	r31, Z
    4e7c:	e0 2d       	mov	r30, r0
    4e7e:	93 81       	ldd	r25, Z+3	; 0x03
    4e80:	69 2f       	mov	r22, r25
    4e82:	41 e0       	ldi	r20, 0x01	; 1
    4e84:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <DIO_u8SetPinValue>

						DIO_u8SetPinValue(Copy_cfg-> u8PORT,Copy_cfg->u8OrangePin,DIO_u8PIN_HIGH);
    4e88:	fe 01       	movw	r30, r28
    4e8a:	e8 58       	subi	r30, 0x88	; 136
    4e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    4e8e:	01 90       	ld	r0, Z+
    4e90:	f0 81       	ld	r31, Z
    4e92:	e0 2d       	mov	r30, r0
    4e94:	80 81       	ld	r24, Z
    4e96:	fe 01       	movw	r30, r28
    4e98:	e8 58       	subi	r30, 0x88	; 136
    4e9a:	ff 4f       	sbci	r31, 0xFF	; 255
    4e9c:	01 90       	ld	r0, Z+
    4e9e:	f0 81       	ld	r31, Z
    4ea0:	e0 2d       	mov	r30, r0
    4ea2:	94 81       	ldd	r25, Z+4	; 0x04
    4ea4:	69 2f       	mov	r22, r25
    4ea6:	41 e0       	ldi	r20, 0x01	; 1
    4ea8:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <DIO_u8SetPinValue>
    4eac:	80 e0       	ldi	r24, 0x00	; 0
    4eae:	90 e0       	ldi	r25, 0x00	; 0
    4eb0:	a0 e4       	ldi	r26, 0x40	; 64
    4eb2:	b0 e4       	ldi	r27, 0x40	; 64
    4eb4:	8b 87       	std	Y+11, r24	; 0x0b
    4eb6:	9c 87       	std	Y+12, r25	; 0x0c
    4eb8:	ad 87       	std	Y+13, r26	; 0x0d
    4eba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ebc:	6b 85       	ldd	r22, Y+11	; 0x0b
    4ebe:	7c 85       	ldd	r23, Y+12	; 0x0c
    4ec0:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ec2:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ec4:	20 e0       	ldi	r18, 0x00	; 0
    4ec6:	30 e0       	ldi	r19, 0x00	; 0
    4ec8:	4a e7       	ldi	r20, 0x7A	; 122
    4eca:	55 e4       	ldi	r21, 0x45	; 69
    4ecc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4ed0:	dc 01       	movw	r26, r24
    4ed2:	cb 01       	movw	r24, r22
    4ed4:	8f 83       	std	Y+7, r24	; 0x07
    4ed6:	98 87       	std	Y+8, r25	; 0x08
    4ed8:	a9 87       	std	Y+9, r26	; 0x09
    4eda:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4edc:	6f 81       	ldd	r22, Y+7	; 0x07
    4ede:	78 85       	ldd	r23, Y+8	; 0x08
    4ee0:	89 85       	ldd	r24, Y+9	; 0x09
    4ee2:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ee4:	20 e0       	ldi	r18, 0x00	; 0
    4ee6:	30 e0       	ldi	r19, 0x00	; 0
    4ee8:	40 e8       	ldi	r20, 0x80	; 128
    4eea:	5f e3       	ldi	r21, 0x3F	; 63
    4eec:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    4ef0:	88 23       	and	r24, r24
    4ef2:	2c f4       	brge	.+10     	; 0x4efe <STEP_u8Rotate+0xe70>
		__ticks = 1;
    4ef4:	81 e0       	ldi	r24, 0x01	; 1
    4ef6:	90 e0       	ldi	r25, 0x00	; 0
    4ef8:	9e 83       	std	Y+6, r25	; 0x06
    4efa:	8d 83       	std	Y+5, r24	; 0x05
    4efc:	3f c0       	rjmp	.+126    	; 0x4f7c <STEP_u8Rotate+0xeee>
	else if (__tmp > 65535)
    4efe:	6f 81       	ldd	r22, Y+7	; 0x07
    4f00:	78 85       	ldd	r23, Y+8	; 0x08
    4f02:	89 85       	ldd	r24, Y+9	; 0x09
    4f04:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f06:	20 e0       	ldi	r18, 0x00	; 0
    4f08:	3f ef       	ldi	r19, 0xFF	; 255
    4f0a:	4f e7       	ldi	r20, 0x7F	; 127
    4f0c:	57 e4       	ldi	r21, 0x47	; 71
    4f0e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    4f12:	18 16       	cp	r1, r24
    4f14:	4c f5       	brge	.+82     	; 0x4f68 <STEP_u8Rotate+0xeda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f16:	6b 85       	ldd	r22, Y+11	; 0x0b
    4f18:	7c 85       	ldd	r23, Y+12	; 0x0c
    4f1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    4f1e:	20 e0       	ldi	r18, 0x00	; 0
    4f20:	30 e0       	ldi	r19, 0x00	; 0
    4f22:	40 e2       	ldi	r20, 0x20	; 32
    4f24:	51 e4       	ldi	r21, 0x41	; 65
    4f26:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4f2a:	dc 01       	movw	r26, r24
    4f2c:	cb 01       	movw	r24, r22
    4f2e:	bc 01       	movw	r22, r24
    4f30:	cd 01       	movw	r24, r26
    4f32:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4f36:	dc 01       	movw	r26, r24
    4f38:	cb 01       	movw	r24, r22
    4f3a:	9e 83       	std	Y+6, r25	; 0x06
    4f3c:	8d 83       	std	Y+5, r24	; 0x05
    4f3e:	0f c0       	rjmp	.+30     	; 0x4f5e <STEP_u8Rotate+0xed0>
    4f40:	80 e9       	ldi	r24, 0x90	; 144
    4f42:	91 e0       	ldi	r25, 0x01	; 1
    4f44:	9c 83       	std	Y+4, r25	; 0x04
    4f46:	8b 83       	std	Y+3, r24	; 0x03
    4f48:	8b 81       	ldd	r24, Y+3	; 0x03
    4f4a:	9c 81       	ldd	r25, Y+4	; 0x04
    4f4c:	01 97       	sbiw	r24, 0x01	; 1
    4f4e:	f1 f7       	brne	.-4      	; 0x4f4c <STEP_u8Rotate+0xebe>
    4f50:	9c 83       	std	Y+4, r25	; 0x04
    4f52:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f54:	8d 81       	ldd	r24, Y+5	; 0x05
    4f56:	9e 81       	ldd	r25, Y+6	; 0x06
    4f58:	01 97       	sbiw	r24, 0x01	; 1
    4f5a:	9e 83       	std	Y+6, r25	; 0x06
    4f5c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f5e:	8d 81       	ldd	r24, Y+5	; 0x05
    4f60:	9e 81       	ldd	r25, Y+6	; 0x06
    4f62:	00 97       	sbiw	r24, 0x00	; 0
    4f64:	69 f7       	brne	.-38     	; 0x4f40 <STEP_u8Rotate+0xeb2>
    4f66:	14 c0       	rjmp	.+40     	; 0x4f90 <STEP_u8Rotate+0xf02>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f68:	6f 81       	ldd	r22, Y+7	; 0x07
    4f6a:	78 85       	ldd	r23, Y+8	; 0x08
    4f6c:	89 85       	ldd	r24, Y+9	; 0x09
    4f6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f70:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4f74:	dc 01       	movw	r26, r24
    4f76:	cb 01       	movw	r24, r22
    4f78:	9e 83       	std	Y+6, r25	; 0x06
    4f7a:	8d 83       	std	Y+5, r24	; 0x05
    4f7c:	8d 81       	ldd	r24, Y+5	; 0x05
    4f7e:	9e 81       	ldd	r25, Y+6	; 0x06
    4f80:	9a 83       	std	Y+2, r25	; 0x02
    4f82:	89 83       	std	Y+1, r24	; 0x01
    4f84:	89 81       	ldd	r24, Y+1	; 0x01
    4f86:	9a 81       	ldd	r25, Y+2	; 0x02
    4f88:	01 97       	sbiw	r24, 0x01	; 1
    4f8a:	f1 f7       	brne	.-4      	; 0x4f88 <STEP_u8Rotate+0xefa>
    4f8c:	9a 83       	std	Y+2, r25	; 0x02
    4f8e:	89 83       	std	Y+1, r24	; 0x01
	}
	else if(Copy_Direction==CCW)
			{//////360
				//Local_u16Steps=(uint16)(((uint32)Copy_Angle*2048UL)/360UL);

				for(uint16 i=0; i<Local_u16Steps;i++)
    4f90:	de 01       	movw	r26, r28
    4f92:	af 58       	subi	r26, 0x8F	; 143
    4f94:	bf 4f       	sbci	r27, 0xFF	; 255
    4f96:	fe 01       	movw	r30, r28
    4f98:	ef 58       	subi	r30, 0x8F	; 143
    4f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f9c:	80 81       	ld	r24, Z
    4f9e:	91 81       	ldd	r25, Z+1	; 0x01
    4fa0:	01 96       	adiw	r24, 0x01	; 1
    4fa2:	8d 93       	st	X+, r24
    4fa4:	9c 93       	st	X, r25
    4fa6:	fe 01       	movw	r30, r28
    4fa8:	ef 58       	subi	r30, 0x8F	; 143
    4faa:	ff 4f       	sbci	r31, 0xFF	; 255
    4fac:	de 01       	movw	r26, r28
    4fae:	ab 58       	subi	r26, 0x8B	; 139
    4fb0:	bf 4f       	sbci	r27, 0xFF	; 255
    4fb2:	20 81       	ld	r18, Z
    4fb4:	31 81       	ldd	r19, Z+1	; 0x01
    4fb6:	8d 91       	ld	r24, X+
    4fb8:	9c 91       	ld	r25, X
    4fba:	11 97       	sbiw	r26, 0x01	; 1
    4fbc:	28 17       	cp	r18, r24
    4fbe:	39 07       	cpc	r19, r25
    4fc0:	08 f4       	brcc	.+2      	; 0x4fc4 <STEP_u8Rotate+0xf36>
    4fc2:	d0 cc       	rjmp	.-1632   	; 0x4964 <STEP_u8Rotate+0x8d6>
    4fc4:	05 c0       	rjmp	.+10     	; 0x4fd0 <STEP_u8Rotate+0xf42>


}
else
{
	Local_u8LocalState=NULL_PTR_ERR;
    4fc6:	fe 01       	movw	r30, r28
    4fc8:	e9 58       	subi	r30, 0x89	; 137
    4fca:	ff 4f       	sbci	r31, 0xFF	; 255
    4fcc:	82 e0       	ldi	r24, 0x02	; 2
    4fce:	80 83       	st	Z, r24

}

return Local_u8LocalState;
    4fd0:	fe 01       	movw	r30, r28
    4fd2:	e9 58       	subi	r30, 0x89	; 137
    4fd4:	ff 4f       	sbci	r31, 0xFF	; 255
    4fd6:	80 81       	ld	r24, Z
}
    4fd8:	c4 58       	subi	r28, 0x84	; 132
    4fda:	df 4f       	sbci	r29, 0xFF	; 255
    4fdc:	0f b6       	in	r0, 0x3f	; 63
    4fde:	f8 94       	cli
    4fe0:	de bf       	out	0x3e, r29	; 62
    4fe2:	0f be       	out	0x3f, r0	; 63
    4fe4:	cd bf       	out	0x3d, r28	; 61
    4fe6:	cf 91       	pop	r28
    4fe8:	df 91       	pop	r29
    4fea:	1f 91       	pop	r17
    4fec:	0f 91       	pop	r16
    4fee:	08 95       	ret

00004ff0 <main>:
            .u8YellowPin =  DIO_u8PIN2,
            .u8OrangePin= DIO_u8PIN3
};

void main(void)
{
    4ff0:	0f 93       	push	r16
    4ff2:	1f 93       	push	r17
    4ff4:	df 93       	push	r29
    4ff6:	cf 93       	push	r28
    4ff8:	cd b7       	in	r28, 0x3d	; 61
    4ffa:	de b7       	in	r29, 0x3e	; 62
    4ffc:	ca 54       	subi	r28, 0x4A	; 74
    4ffe:	d0 40       	sbci	r29, 0x00	; 0
    5000:	0f b6       	in	r0, 0x3f	; 63
    5002:	f8 94       	cli
    5004:	de bf       	out	0x3e, r29	; 62
    5006:	0f be       	out	0x3f, r0	; 63
    5008:	cd bf       	out	0x3d, r28	; 61

PORT_voidInit();
    500a:	0e 94 21 20 	call	0x4042	; 0x4042 <PORT_voidInit>
CLCD_VoidInit();
    500e:	0e 94 90 06 	call	0xd20	; 0xd20 <CLCD_VoidInit>
uint8 Local_u8KeypadKey= 0xff ;
    5012:	fe 01       	movw	r30, r28
    5014:	e6 5b       	subi	r30, 0xB6	; 182
    5016:	ff 4f       	sbci	r31, 0xFF	; 255
    5018:	8f ef       	ldi	r24, 0xFF	; 255
    501a:	80 83       	st	Z, r24
CLCD_VoidGoToXY(5,0);
    501c:	85 e0       	ldi	r24, 0x05	; 5
    501e:	60 e0       	ldi	r22, 0x00	; 0
    5020:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <CLCD_VoidGoToXY>
CLCD_u8SendString("Welcome");
    5024:	87 ea       	ldi	r24, 0xA7	; 167
    5026:	90 e0       	ldi	r25, 0x00	; 0
    5028:	0e 94 2a 07 	call	0xe54	; 0xe54 <CLCD_u8SendString>
    502c:	fe 01       	movw	r30, r28
    502e:	ed 5b       	subi	r30, 0xBD	; 189
    5030:	ff 4f       	sbci	r31, 0xFF	; 255
    5032:	80 e0       	ldi	r24, 0x00	; 0
    5034:	90 e0       	ldi	r25, 0x00	; 0
    5036:	aa e7       	ldi	r26, 0x7A	; 122
    5038:	b4 e4       	ldi	r27, 0x44	; 68
    503a:	80 83       	st	Z, r24
    503c:	91 83       	std	Z+1, r25	; 0x01
    503e:	a2 83       	std	Z+2, r26	; 0x02
    5040:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5042:	8e 01       	movw	r16, r28
    5044:	01 5c       	subi	r16, 0xC1	; 193
    5046:	1f 4f       	sbci	r17, 0xFF	; 255
    5048:	fe 01       	movw	r30, r28
    504a:	ed 5b       	subi	r30, 0xBD	; 189
    504c:	ff 4f       	sbci	r31, 0xFF	; 255
    504e:	60 81       	ld	r22, Z
    5050:	71 81       	ldd	r23, Z+1	; 0x01
    5052:	82 81       	ldd	r24, Z+2	; 0x02
    5054:	93 81       	ldd	r25, Z+3	; 0x03
    5056:	20 e0       	ldi	r18, 0x00	; 0
    5058:	30 e0       	ldi	r19, 0x00	; 0
    505a:	4a e7       	ldi	r20, 0x7A	; 122
    505c:	55 e4       	ldi	r21, 0x45	; 69
    505e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    5062:	dc 01       	movw	r26, r24
    5064:	cb 01       	movw	r24, r22
    5066:	f8 01       	movw	r30, r16
    5068:	80 83       	st	Z, r24
    506a:	91 83       	std	Z+1, r25	; 0x01
    506c:	a2 83       	std	Z+2, r26	; 0x02
    506e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5070:	fe 01       	movw	r30, r28
    5072:	ff 96       	adiw	r30, 0x3f	; 63
    5074:	60 81       	ld	r22, Z
    5076:	71 81       	ldd	r23, Z+1	; 0x01
    5078:	82 81       	ldd	r24, Z+2	; 0x02
    507a:	93 81       	ldd	r25, Z+3	; 0x03
    507c:	20 e0       	ldi	r18, 0x00	; 0
    507e:	30 e0       	ldi	r19, 0x00	; 0
    5080:	40 e8       	ldi	r20, 0x80	; 128
    5082:	5f e3       	ldi	r21, 0x3F	; 63
    5084:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    5088:	88 23       	and	r24, r24
    508a:	2c f4       	brge	.+10     	; 0x5096 <main+0xa6>
		__ticks = 1;
    508c:	81 e0       	ldi	r24, 0x01	; 1
    508e:	90 e0       	ldi	r25, 0x00	; 0
    5090:	9e af       	std	Y+62, r25	; 0x3e
    5092:	8d af       	std	Y+61, r24	; 0x3d
    5094:	46 c0       	rjmp	.+140    	; 0x5122 <main+0x132>
	else if (__tmp > 65535)
    5096:	fe 01       	movw	r30, r28
    5098:	ff 96       	adiw	r30, 0x3f	; 63
    509a:	60 81       	ld	r22, Z
    509c:	71 81       	ldd	r23, Z+1	; 0x01
    509e:	82 81       	ldd	r24, Z+2	; 0x02
    50a0:	93 81       	ldd	r25, Z+3	; 0x03
    50a2:	20 e0       	ldi	r18, 0x00	; 0
    50a4:	3f ef       	ldi	r19, 0xFF	; 255
    50a6:	4f e7       	ldi	r20, 0x7F	; 127
    50a8:	57 e4       	ldi	r21, 0x47	; 71
    50aa:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    50ae:	18 16       	cp	r1, r24
    50b0:	64 f5       	brge	.+88     	; 0x510a <main+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    50b2:	fe 01       	movw	r30, r28
    50b4:	ed 5b       	subi	r30, 0xBD	; 189
    50b6:	ff 4f       	sbci	r31, 0xFF	; 255
    50b8:	60 81       	ld	r22, Z
    50ba:	71 81       	ldd	r23, Z+1	; 0x01
    50bc:	82 81       	ldd	r24, Z+2	; 0x02
    50be:	93 81       	ldd	r25, Z+3	; 0x03
    50c0:	20 e0       	ldi	r18, 0x00	; 0
    50c2:	30 e0       	ldi	r19, 0x00	; 0
    50c4:	40 e2       	ldi	r20, 0x20	; 32
    50c6:	51 e4       	ldi	r21, 0x41	; 65
    50c8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    50cc:	dc 01       	movw	r26, r24
    50ce:	cb 01       	movw	r24, r22
    50d0:	bc 01       	movw	r22, r24
    50d2:	cd 01       	movw	r24, r26
    50d4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    50d8:	dc 01       	movw	r26, r24
    50da:	cb 01       	movw	r24, r22
    50dc:	9e af       	std	Y+62, r25	; 0x3e
    50de:	8d af       	std	Y+61, r24	; 0x3d
    50e0:	0f c0       	rjmp	.+30     	; 0x5100 <main+0x110>
    50e2:	80 e9       	ldi	r24, 0x90	; 144
    50e4:	91 e0       	ldi	r25, 0x01	; 1
    50e6:	9c af       	std	Y+60, r25	; 0x3c
    50e8:	8b af       	std	Y+59, r24	; 0x3b
    50ea:	8b ad       	ldd	r24, Y+59	; 0x3b
    50ec:	9c ad       	ldd	r25, Y+60	; 0x3c
    50ee:	01 97       	sbiw	r24, 0x01	; 1
    50f0:	f1 f7       	brne	.-4      	; 0x50ee <main+0xfe>
    50f2:	9c af       	std	Y+60, r25	; 0x3c
    50f4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    50f6:	8d ad       	ldd	r24, Y+61	; 0x3d
    50f8:	9e ad       	ldd	r25, Y+62	; 0x3e
    50fa:	01 97       	sbiw	r24, 0x01	; 1
    50fc:	9e af       	std	Y+62, r25	; 0x3e
    50fe:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5100:	8d ad       	ldd	r24, Y+61	; 0x3d
    5102:	9e ad       	ldd	r25, Y+62	; 0x3e
    5104:	00 97       	sbiw	r24, 0x00	; 0
    5106:	69 f7       	brne	.-38     	; 0x50e2 <main+0xf2>
    5108:	16 c0       	rjmp	.+44     	; 0x5136 <main+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    510a:	fe 01       	movw	r30, r28
    510c:	ff 96       	adiw	r30, 0x3f	; 63
    510e:	60 81       	ld	r22, Z
    5110:	71 81       	ldd	r23, Z+1	; 0x01
    5112:	82 81       	ldd	r24, Z+2	; 0x02
    5114:	93 81       	ldd	r25, Z+3	; 0x03
    5116:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    511a:	dc 01       	movw	r26, r24
    511c:	cb 01       	movw	r24, r22
    511e:	9e af       	std	Y+62, r25	; 0x3e
    5120:	8d af       	std	Y+61, r24	; 0x3d
    5122:	8d ad       	ldd	r24, Y+61	; 0x3d
    5124:	9e ad       	ldd	r25, Y+62	; 0x3e
    5126:	9a af       	std	Y+58, r25	; 0x3a
    5128:	89 af       	std	Y+57, r24	; 0x39
    512a:	89 ad       	ldd	r24, Y+57	; 0x39
    512c:	9a ad       	ldd	r25, Y+58	; 0x3a
    512e:	01 97       	sbiw	r24, 0x01	; 1
    5130:	f1 f7       	brne	.-4      	; 0x512e <main+0x13e>
    5132:	9a af       	std	Y+58, r25	; 0x3a
    5134:	89 af       	std	Y+57, r24	; 0x39
_delay_ms(1000);

void_HamokshaF();
    5136:	0e 94 ba 1c 	call	0x3974	; 0x3974 <void_HamokshaF>



///while(1){}

CLCD_voidClear();
    513a:	0e 94 55 08 	call	0x10aa	; 0x10aa <CLCD_voidClear>
CLCD_VoidGoToXY(0,0);
    513e:	80 e0       	ldi	r24, 0x00	; 0
    5140:	60 e0       	ldi	r22, 0x00	; 0
    5142:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <CLCD_VoidGoToXY>
CLCD_u8SendString("1 -> DC Motor");
    5146:	8f ea       	ldi	r24, 0xAF	; 175
    5148:	90 e0       	ldi	r25, 0x00	; 0
    514a:	0e 94 2a 07 	call	0xe54	; 0xe54 <CLCD_u8SendString>
CLCD_VoidGoToXY(0,1);
    514e:	80 e0       	ldi	r24, 0x00	; 0
    5150:	61 e0       	ldi	r22, 0x01	; 1
    5152:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <CLCD_VoidGoToXY>
CLCD_u8SendString("2 -> Step Motor");
    5156:	8d eb       	ldi	r24, 0xBD	; 189
    5158:	90 e0       	ldi	r25, 0x00	; 0
    515a:	0e 94 2a 07 	call	0xe54	; 0xe54 <CLCD_u8SendString>





Local_u8KeypadKey= Scan_u8Option(Local_u8KeypadKey);
    515e:	fe 01       	movw	r30, r28
    5160:	e6 5b       	subi	r30, 0xB6	; 182
    5162:	ff 4f       	sbci	r31, 0xFF	; 255
    5164:	80 81       	ld	r24, Z
    5166:	0e 94 9d 1c 	call	0x393a	; 0x393a <Scan_u8Option>
    516a:	fe 01       	movw	r30, r28
    516c:	e6 5b       	subi	r30, 0xB6	; 182
    516e:	ff 4f       	sbci	r31, 0xFF	; 255
    5170:	80 83       	st	Z, r24

   if (Local_u8KeypadKey==1)
    5172:	fe 01       	movw	r30, r28
    5174:	e6 5b       	subi	r30, 0xB6	; 182
    5176:	ff 4f       	sbci	r31, 0xFF	; 255
    5178:	80 81       	ld	r24, Z
    517a:	81 30       	cpi	r24, 0x01	; 1
    517c:	09 f0       	breq	.+2      	; 0x5180 <main+0x190>
    517e:	94 c1       	rjmp	.+808    	; 0x54a8 <main+0x4b8>
   {

	   CLCD_voidClear();
    5180:	0e 94 55 08 	call	0x10aa	; 0x10aa <CLCD_voidClear>
	   CLCD_VoidGoToXY(0,0);
    5184:	80 e0       	ldi	r24, 0x00	; 0
    5186:	60 e0       	ldi	r22, 0x00	; 0
    5188:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <CLCD_VoidGoToXY>
	   CLCD_u8SendString("1->CW");
    518c:	8d ec       	ldi	r24, 0xCD	; 205
    518e:	90 e0       	ldi	r25, 0x00	; 0
    5190:	0e 94 2a 07 	call	0xe54	; 0xe54 <CLCD_u8SendString>
	   CLCD_VoidGoToXY(0,1);
    5194:	80 e0       	ldi	r24, 0x00	; 0
    5196:	61 e0       	ldi	r22, 0x01	; 1
    5198:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <CLCD_VoidGoToXY>
	   CLCD_u8SendString("2->CCW");
    519c:	83 ed       	ldi	r24, 0xD3	; 211
    519e:	90 e0       	ldi	r25, 0x00	; 0
    51a0:	0e 94 2a 07 	call	0xe54	; 0xe54 <CLCD_u8SendString>

	   Local_u8KeypadKey = Scan_u8Option(Local_u8KeypadKey);
    51a4:	fe 01       	movw	r30, r28
    51a6:	e6 5b       	subi	r30, 0xB6	; 182
    51a8:	ff 4f       	sbci	r31, 0xFF	; 255
    51aa:	80 81       	ld	r24, Z
    51ac:	0e 94 9d 1c 	call	0x393a	; 0x393a <Scan_u8Option>
    51b0:	fe 01       	movw	r30, r28
    51b2:	e6 5b       	subi	r30, 0xB6	; 182
    51b4:	ff 4f       	sbci	r31, 0xFF	; 255
    51b6:	80 83       	st	Z, r24
	   if (Local_u8KeypadKey==1)
    51b8:	fe 01       	movw	r30, r28
    51ba:	e6 5b       	subi	r30, 0xB6	; 182
    51bc:	ff 4f       	sbci	r31, 0xFF	; 255
    51be:	80 81       	ld	r24, Z
    51c0:	81 30       	cpi	r24, 0x01	; 1
    51c2:	09 f0       	breq	.+2      	; 0x51c6 <main+0x1d6>
    51c4:	77 c0       	rjmp	.+238    	; 0x52b4 <main+0x2c4>
	   {
		 DcMotor_CW();
    51c6:	0e 94 9e 18 	call	0x313c	; 0x313c <DcMotor_CW>
    51ca:	80 e0       	ldi	r24, 0x00	; 0
    51cc:	90 e4       	ldi	r25, 0x40	; 64
    51ce:	ac e9       	ldi	r26, 0x9C	; 156
    51d0:	b5 e4       	ldi	r27, 0x45	; 69
    51d2:	8d ab       	std	Y+53, r24	; 0x35
    51d4:	9e ab       	std	Y+54, r25	; 0x36
    51d6:	af ab       	std	Y+55, r26	; 0x37
    51d8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    51da:	6d a9       	ldd	r22, Y+53	; 0x35
    51dc:	7e a9       	ldd	r23, Y+54	; 0x36
    51de:	8f a9       	ldd	r24, Y+55	; 0x37
    51e0:	98 ad       	ldd	r25, Y+56	; 0x38
    51e2:	20 e0       	ldi	r18, 0x00	; 0
    51e4:	30 e0       	ldi	r19, 0x00	; 0
    51e6:	4a e7       	ldi	r20, 0x7A	; 122
    51e8:	55 e4       	ldi	r21, 0x45	; 69
    51ea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    51ee:	dc 01       	movw	r26, r24
    51f0:	cb 01       	movw	r24, r22
    51f2:	89 ab       	std	Y+49, r24	; 0x31
    51f4:	9a ab       	std	Y+50, r25	; 0x32
    51f6:	ab ab       	std	Y+51, r26	; 0x33
    51f8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    51fa:	69 a9       	ldd	r22, Y+49	; 0x31
    51fc:	7a a9       	ldd	r23, Y+50	; 0x32
    51fe:	8b a9       	ldd	r24, Y+51	; 0x33
    5200:	9c a9       	ldd	r25, Y+52	; 0x34
    5202:	20 e0       	ldi	r18, 0x00	; 0
    5204:	30 e0       	ldi	r19, 0x00	; 0
    5206:	40 e8       	ldi	r20, 0x80	; 128
    5208:	5f e3       	ldi	r21, 0x3F	; 63
    520a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    520e:	88 23       	and	r24, r24
    5210:	2c f4       	brge	.+10     	; 0x521c <main+0x22c>
		__ticks = 1;
    5212:	81 e0       	ldi	r24, 0x01	; 1
    5214:	90 e0       	ldi	r25, 0x00	; 0
    5216:	98 ab       	std	Y+48, r25	; 0x30
    5218:	8f a7       	std	Y+47, r24	; 0x2f
    521a:	3f c0       	rjmp	.+126    	; 0x529a <main+0x2aa>
	else if (__tmp > 65535)
    521c:	69 a9       	ldd	r22, Y+49	; 0x31
    521e:	7a a9       	ldd	r23, Y+50	; 0x32
    5220:	8b a9       	ldd	r24, Y+51	; 0x33
    5222:	9c a9       	ldd	r25, Y+52	; 0x34
    5224:	20 e0       	ldi	r18, 0x00	; 0
    5226:	3f ef       	ldi	r19, 0xFF	; 255
    5228:	4f e7       	ldi	r20, 0x7F	; 127
    522a:	57 e4       	ldi	r21, 0x47	; 71
    522c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    5230:	18 16       	cp	r1, r24
    5232:	4c f5       	brge	.+82     	; 0x5286 <main+0x296>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5234:	6d a9       	ldd	r22, Y+53	; 0x35
    5236:	7e a9       	ldd	r23, Y+54	; 0x36
    5238:	8f a9       	ldd	r24, Y+55	; 0x37
    523a:	98 ad       	ldd	r25, Y+56	; 0x38
    523c:	20 e0       	ldi	r18, 0x00	; 0
    523e:	30 e0       	ldi	r19, 0x00	; 0
    5240:	40 e2       	ldi	r20, 0x20	; 32
    5242:	51 e4       	ldi	r21, 0x41	; 65
    5244:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    5248:	dc 01       	movw	r26, r24
    524a:	cb 01       	movw	r24, r22
    524c:	bc 01       	movw	r22, r24
    524e:	cd 01       	movw	r24, r26
    5250:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5254:	dc 01       	movw	r26, r24
    5256:	cb 01       	movw	r24, r22
    5258:	98 ab       	std	Y+48, r25	; 0x30
    525a:	8f a7       	std	Y+47, r24	; 0x2f
    525c:	0f c0       	rjmp	.+30     	; 0x527c <main+0x28c>
    525e:	80 e9       	ldi	r24, 0x90	; 144
    5260:	91 e0       	ldi	r25, 0x01	; 1
    5262:	9e a7       	std	Y+46, r25	; 0x2e
    5264:	8d a7       	std	Y+45, r24	; 0x2d
    5266:	8d a5       	ldd	r24, Y+45	; 0x2d
    5268:	9e a5       	ldd	r25, Y+46	; 0x2e
    526a:	01 97       	sbiw	r24, 0x01	; 1
    526c:	f1 f7       	brne	.-4      	; 0x526a <main+0x27a>
    526e:	9e a7       	std	Y+46, r25	; 0x2e
    5270:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5272:	8f a5       	ldd	r24, Y+47	; 0x2f
    5274:	98 a9       	ldd	r25, Y+48	; 0x30
    5276:	01 97       	sbiw	r24, 0x01	; 1
    5278:	98 ab       	std	Y+48, r25	; 0x30
    527a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    527c:	8f a5       	ldd	r24, Y+47	; 0x2f
    527e:	98 a9       	ldd	r25, Y+48	; 0x30
    5280:	00 97       	sbiw	r24, 0x00	; 0
    5282:	69 f7       	brne	.-38     	; 0x525e <main+0x26e>
    5284:	14 c0       	rjmp	.+40     	; 0x52ae <main+0x2be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5286:	69 a9       	ldd	r22, Y+49	; 0x31
    5288:	7a a9       	ldd	r23, Y+50	; 0x32
    528a:	8b a9       	ldd	r24, Y+51	; 0x33
    528c:	9c a9       	ldd	r25, Y+52	; 0x34
    528e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5292:	dc 01       	movw	r26, r24
    5294:	cb 01       	movw	r24, r22
    5296:	98 ab       	std	Y+48, r25	; 0x30
    5298:	8f a7       	std	Y+47, r24	; 0x2f
    529a:	8f a5       	ldd	r24, Y+47	; 0x2f
    529c:	98 a9       	ldd	r25, Y+48	; 0x30
    529e:	9c a7       	std	Y+44, r25	; 0x2c
    52a0:	8b a7       	std	Y+43, r24	; 0x2b
    52a2:	8b a5       	ldd	r24, Y+43	; 0x2b
    52a4:	9c a5       	ldd	r25, Y+44	; 0x2c
    52a6:	01 97       	sbiw	r24, 0x01	; 1
    52a8:	f1 f7       	brne	.-4      	; 0x52a6 <main+0x2b6>
    52aa:	9c a7       	std	Y+44, r25	; 0x2c
    52ac:	8b a7       	std	Y+43, r24	; 0x2b
		 _delay_ms(5000);
		 DcMotor_Stop();
    52ae:	0e 94 c0 18 	call	0x3180	; 0x3180 <DcMotor_Stop>
    52b2:	7b c0       	rjmp	.+246    	; 0x53aa <main+0x3ba>
	   }
	   else if(Local_u8KeypadKey==2)
    52b4:	fe 01       	movw	r30, r28
    52b6:	e6 5b       	subi	r30, 0xB6	; 182
    52b8:	ff 4f       	sbci	r31, 0xFF	; 255
    52ba:	80 81       	ld	r24, Z
    52bc:	82 30       	cpi	r24, 0x02	; 2
    52be:	09 f0       	breq	.+2      	; 0x52c2 <main+0x2d2>
    52c0:	74 c0       	rjmp	.+232    	; 0x53aa <main+0x3ba>
	   {

		   DcMotor_CCW();
    52c2:	0e 94 af 18 	call	0x315e	; 0x315e <DcMotor_CCW>
    52c6:	80 e0       	ldi	r24, 0x00	; 0
    52c8:	90 e4       	ldi	r25, 0x40	; 64
    52ca:	ac e9       	ldi	r26, 0x9C	; 156
    52cc:	b5 e4       	ldi	r27, 0x45	; 69
    52ce:	8f a3       	std	Y+39, r24	; 0x27
    52d0:	98 a7       	std	Y+40, r25	; 0x28
    52d2:	a9 a7       	std	Y+41, r26	; 0x29
    52d4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    52d6:	6f a1       	ldd	r22, Y+39	; 0x27
    52d8:	78 a5       	ldd	r23, Y+40	; 0x28
    52da:	89 a5       	ldd	r24, Y+41	; 0x29
    52dc:	9a a5       	ldd	r25, Y+42	; 0x2a
    52de:	20 e0       	ldi	r18, 0x00	; 0
    52e0:	30 e0       	ldi	r19, 0x00	; 0
    52e2:	4a e7       	ldi	r20, 0x7A	; 122
    52e4:	55 e4       	ldi	r21, 0x45	; 69
    52e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    52ea:	dc 01       	movw	r26, r24
    52ec:	cb 01       	movw	r24, r22
    52ee:	8b a3       	std	Y+35, r24	; 0x23
    52f0:	9c a3       	std	Y+36, r25	; 0x24
    52f2:	ad a3       	std	Y+37, r26	; 0x25
    52f4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    52f6:	6b a1       	ldd	r22, Y+35	; 0x23
    52f8:	7c a1       	ldd	r23, Y+36	; 0x24
    52fa:	8d a1       	ldd	r24, Y+37	; 0x25
    52fc:	9e a1       	ldd	r25, Y+38	; 0x26
    52fe:	20 e0       	ldi	r18, 0x00	; 0
    5300:	30 e0       	ldi	r19, 0x00	; 0
    5302:	40 e8       	ldi	r20, 0x80	; 128
    5304:	5f e3       	ldi	r21, 0x3F	; 63
    5306:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    530a:	88 23       	and	r24, r24
    530c:	2c f4       	brge	.+10     	; 0x5318 <main+0x328>
		__ticks = 1;
    530e:	81 e0       	ldi	r24, 0x01	; 1
    5310:	90 e0       	ldi	r25, 0x00	; 0
    5312:	9a a3       	std	Y+34, r25	; 0x22
    5314:	89 a3       	std	Y+33, r24	; 0x21
    5316:	3f c0       	rjmp	.+126    	; 0x5396 <main+0x3a6>
	else if (__tmp > 65535)
    5318:	6b a1       	ldd	r22, Y+35	; 0x23
    531a:	7c a1       	ldd	r23, Y+36	; 0x24
    531c:	8d a1       	ldd	r24, Y+37	; 0x25
    531e:	9e a1       	ldd	r25, Y+38	; 0x26
    5320:	20 e0       	ldi	r18, 0x00	; 0
    5322:	3f ef       	ldi	r19, 0xFF	; 255
    5324:	4f e7       	ldi	r20, 0x7F	; 127
    5326:	57 e4       	ldi	r21, 0x47	; 71
    5328:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    532c:	18 16       	cp	r1, r24
    532e:	4c f5       	brge	.+82     	; 0x5382 <main+0x392>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5330:	6f a1       	ldd	r22, Y+39	; 0x27
    5332:	78 a5       	ldd	r23, Y+40	; 0x28
    5334:	89 a5       	ldd	r24, Y+41	; 0x29
    5336:	9a a5       	ldd	r25, Y+42	; 0x2a
    5338:	20 e0       	ldi	r18, 0x00	; 0
    533a:	30 e0       	ldi	r19, 0x00	; 0
    533c:	40 e2       	ldi	r20, 0x20	; 32
    533e:	51 e4       	ldi	r21, 0x41	; 65
    5340:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    5344:	dc 01       	movw	r26, r24
    5346:	cb 01       	movw	r24, r22
    5348:	bc 01       	movw	r22, r24
    534a:	cd 01       	movw	r24, r26
    534c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5350:	dc 01       	movw	r26, r24
    5352:	cb 01       	movw	r24, r22
    5354:	9a a3       	std	Y+34, r25	; 0x22
    5356:	89 a3       	std	Y+33, r24	; 0x21
    5358:	0f c0       	rjmp	.+30     	; 0x5378 <main+0x388>
    535a:	80 e9       	ldi	r24, 0x90	; 144
    535c:	91 e0       	ldi	r25, 0x01	; 1
    535e:	98 a3       	std	Y+32, r25	; 0x20
    5360:	8f 8f       	std	Y+31, r24	; 0x1f
    5362:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5364:	98 a1       	ldd	r25, Y+32	; 0x20
    5366:	01 97       	sbiw	r24, 0x01	; 1
    5368:	f1 f7       	brne	.-4      	; 0x5366 <main+0x376>
    536a:	98 a3       	std	Y+32, r25	; 0x20
    536c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    536e:	89 a1       	ldd	r24, Y+33	; 0x21
    5370:	9a a1       	ldd	r25, Y+34	; 0x22
    5372:	01 97       	sbiw	r24, 0x01	; 1
    5374:	9a a3       	std	Y+34, r25	; 0x22
    5376:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5378:	89 a1       	ldd	r24, Y+33	; 0x21
    537a:	9a a1       	ldd	r25, Y+34	; 0x22
    537c:	00 97       	sbiw	r24, 0x00	; 0
    537e:	69 f7       	brne	.-38     	; 0x535a <main+0x36a>
    5380:	14 c0       	rjmp	.+40     	; 0x53aa <main+0x3ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5382:	6b a1       	ldd	r22, Y+35	; 0x23
    5384:	7c a1       	ldd	r23, Y+36	; 0x24
    5386:	8d a1       	ldd	r24, Y+37	; 0x25
    5388:	9e a1       	ldd	r25, Y+38	; 0x26
    538a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    538e:	dc 01       	movw	r26, r24
    5390:	cb 01       	movw	r24, r22
    5392:	9a a3       	std	Y+34, r25	; 0x22
    5394:	89 a3       	std	Y+33, r24	; 0x21
    5396:	89 a1       	ldd	r24, Y+33	; 0x21
    5398:	9a a1       	ldd	r25, Y+34	; 0x22
    539a:	9e 8f       	std	Y+30, r25	; 0x1e
    539c:	8d 8f       	std	Y+29, r24	; 0x1d
    539e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    53a0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    53a2:	01 97       	sbiw	r24, 0x01	; 1
    53a4:	f1 f7       	brne	.-4      	; 0x53a2 <main+0x3b2>
    53a6:	9e 8f       	std	Y+30, r25	; 0x1e
    53a8:	8d 8f       	std	Y+29, r24	; 0x1d
		   		 _delay_ms(5000);
		   		//DcMotor_Stop();
	   }
	   CLCD_voidClear();
    53aa:	0e 94 55 08 	call	0x10aa	; 0x10aa <CLCD_voidClear>
	   CLCD_VoidGoToXY(5,0);
    53ae:	85 e0       	ldi	r24, 0x05	; 5
    53b0:	60 e0       	ldi	r22, 0x00	; 0
    53b2:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <CLCD_VoidGoToXY>
	   CLCD_u8SendString("THANKS <3");
    53b6:	8a ed       	ldi	r24, 0xDA	; 218
    53b8:	90 e0       	ldi	r25, 0x00	; 0
    53ba:	0e 94 2a 07 	call	0xe54	; 0xe54 <CLCD_u8SendString>
    53be:	80 e0       	ldi	r24, 0x00	; 0
    53c0:	90 e0       	ldi	r25, 0x00	; 0
    53c2:	aa ef       	ldi	r26, 0xFA	; 250
    53c4:	b4 e4       	ldi	r27, 0x44	; 68
    53c6:	89 8f       	std	Y+25, r24	; 0x19
    53c8:	9a 8f       	std	Y+26, r25	; 0x1a
    53ca:	ab 8f       	std	Y+27, r26	; 0x1b
    53cc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    53ce:	69 8d       	ldd	r22, Y+25	; 0x19
    53d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    53d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    53d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    53d6:	20 e0       	ldi	r18, 0x00	; 0
    53d8:	30 e0       	ldi	r19, 0x00	; 0
    53da:	4a e7       	ldi	r20, 0x7A	; 122
    53dc:	55 e4       	ldi	r21, 0x45	; 69
    53de:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    53e2:	dc 01       	movw	r26, r24
    53e4:	cb 01       	movw	r24, r22
    53e6:	8d 8b       	std	Y+21, r24	; 0x15
    53e8:	9e 8b       	std	Y+22, r25	; 0x16
    53ea:	af 8b       	std	Y+23, r26	; 0x17
    53ec:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    53ee:	6d 89       	ldd	r22, Y+21	; 0x15
    53f0:	7e 89       	ldd	r23, Y+22	; 0x16
    53f2:	8f 89       	ldd	r24, Y+23	; 0x17
    53f4:	98 8d       	ldd	r25, Y+24	; 0x18
    53f6:	20 e0       	ldi	r18, 0x00	; 0
    53f8:	30 e0       	ldi	r19, 0x00	; 0
    53fa:	40 e8       	ldi	r20, 0x80	; 128
    53fc:	5f e3       	ldi	r21, 0x3F	; 63
    53fe:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    5402:	88 23       	and	r24, r24
    5404:	2c f4       	brge	.+10     	; 0x5410 <main+0x420>
		__ticks = 1;
    5406:	81 e0       	ldi	r24, 0x01	; 1
    5408:	90 e0       	ldi	r25, 0x00	; 0
    540a:	9c 8b       	std	Y+20, r25	; 0x14
    540c:	8b 8b       	std	Y+19, r24	; 0x13
    540e:	3f c0       	rjmp	.+126    	; 0x548e <main+0x49e>
	else if (__tmp > 65535)
    5410:	6d 89       	ldd	r22, Y+21	; 0x15
    5412:	7e 89       	ldd	r23, Y+22	; 0x16
    5414:	8f 89       	ldd	r24, Y+23	; 0x17
    5416:	98 8d       	ldd	r25, Y+24	; 0x18
    5418:	20 e0       	ldi	r18, 0x00	; 0
    541a:	3f ef       	ldi	r19, 0xFF	; 255
    541c:	4f e7       	ldi	r20, 0x7F	; 127
    541e:	57 e4       	ldi	r21, 0x47	; 71
    5420:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    5424:	18 16       	cp	r1, r24
    5426:	4c f5       	brge	.+82     	; 0x547a <main+0x48a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5428:	69 8d       	ldd	r22, Y+25	; 0x19
    542a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    542c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    542e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5430:	20 e0       	ldi	r18, 0x00	; 0
    5432:	30 e0       	ldi	r19, 0x00	; 0
    5434:	40 e2       	ldi	r20, 0x20	; 32
    5436:	51 e4       	ldi	r21, 0x41	; 65
    5438:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    543c:	dc 01       	movw	r26, r24
    543e:	cb 01       	movw	r24, r22
    5440:	bc 01       	movw	r22, r24
    5442:	cd 01       	movw	r24, r26
    5444:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5448:	dc 01       	movw	r26, r24
    544a:	cb 01       	movw	r24, r22
    544c:	9c 8b       	std	Y+20, r25	; 0x14
    544e:	8b 8b       	std	Y+19, r24	; 0x13
    5450:	0f c0       	rjmp	.+30     	; 0x5470 <main+0x480>
    5452:	80 e9       	ldi	r24, 0x90	; 144
    5454:	91 e0       	ldi	r25, 0x01	; 1
    5456:	9a 8b       	std	Y+18, r25	; 0x12
    5458:	89 8b       	std	Y+17, r24	; 0x11
    545a:	89 89       	ldd	r24, Y+17	; 0x11
    545c:	9a 89       	ldd	r25, Y+18	; 0x12
    545e:	01 97       	sbiw	r24, 0x01	; 1
    5460:	f1 f7       	brne	.-4      	; 0x545e <main+0x46e>
    5462:	9a 8b       	std	Y+18, r25	; 0x12
    5464:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5466:	8b 89       	ldd	r24, Y+19	; 0x13
    5468:	9c 89       	ldd	r25, Y+20	; 0x14
    546a:	01 97       	sbiw	r24, 0x01	; 1
    546c:	9c 8b       	std	Y+20, r25	; 0x14
    546e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5470:	8b 89       	ldd	r24, Y+19	; 0x13
    5472:	9c 89       	ldd	r25, Y+20	; 0x14
    5474:	00 97       	sbiw	r24, 0x00	; 0
    5476:	69 f7       	brne	.-38     	; 0x5452 <main+0x462>
    5478:	14 c0       	rjmp	.+40     	; 0x54a2 <main+0x4b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    547a:	6d 89       	ldd	r22, Y+21	; 0x15
    547c:	7e 89       	ldd	r23, Y+22	; 0x16
    547e:	8f 89       	ldd	r24, Y+23	; 0x17
    5480:	98 8d       	ldd	r25, Y+24	; 0x18
    5482:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5486:	dc 01       	movw	r26, r24
    5488:	cb 01       	movw	r24, r22
    548a:	9c 8b       	std	Y+20, r25	; 0x14
    548c:	8b 8b       	std	Y+19, r24	; 0x13
    548e:	8b 89       	ldd	r24, Y+19	; 0x13
    5490:	9c 89       	ldd	r25, Y+20	; 0x14
    5492:	98 8b       	std	Y+16, r25	; 0x10
    5494:	8f 87       	std	Y+15, r24	; 0x0f
    5496:	8f 85       	ldd	r24, Y+15	; 0x0f
    5498:	98 89       	ldd	r25, Y+16	; 0x10
    549a:	01 97       	sbiw	r24, 0x01	; 1
    549c:	f1 f7       	brne	.-4      	; 0x549a <main+0x4aa>
    549e:	98 8b       	std	Y+16, r25	; 0x10
    54a0:	8f 87       	std	Y+15, r24	; 0x0f
	   _delay_ms(2000);

	   void_HamokshaB();
    54a2:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <void_HamokshaB>
    54a6:	22 c1       	rjmp	.+580    	; 0x56ec <main+0x6fc>

   }

   /*Stepper Motor Option*/
   else if(Local_u8KeypadKey==2)
    54a8:	fe 01       	movw	r30, r28
    54aa:	e6 5b       	subi	r30, 0xB6	; 182
    54ac:	ff 4f       	sbci	r31, 0xFF	; 255
    54ae:	80 81       	ld	r24, Z
    54b0:	82 30       	cpi	r24, 0x02	; 2
    54b2:	09 f0       	breq	.+2      	; 0x54b6 <main+0x4c6>
    54b4:	1b c1       	rjmp	.+566    	; 0x56ec <main+0x6fc>
   {
	   uint8 Local_u8KeypadKey= 0xff ;
    54b6:	fe 01       	movw	r30, r28
    54b8:	e7 5b       	subi	r30, 0xB7	; 183
    54ba:	ff 4f       	sbci	r31, 0xFF	; 255
    54bc:	8f ef       	ldi	r24, 0xFF	; 255
    54be:	80 83       	st	Z, r24
	   uint8 Local_u8Angle=0,Local_u8Direction=0;
    54c0:	fe 01       	movw	r30, r28
    54c2:	e8 5b       	subi	r30, 0xB8	; 184
    54c4:	ff 4f       	sbci	r31, 0xFF	; 255
    54c6:	10 82       	st	Z, r1
    54c8:	fe 01       	movw	r30, r28
    54ca:	e9 5b       	subi	r30, 0xB9	; 185
    54cc:	ff 4f       	sbci	r31, 0xFF	; 255
    54ce:	10 82       	st	Z, r1

	   CLCD_voidClear();
    54d0:	0e 94 55 08 	call	0x10aa	; 0x10aa <CLCD_voidClear>
	  	   CLCD_VoidGoToXY(0,0);
    54d4:	80 e0       	ldi	r24, 0x00	; 0
    54d6:	60 e0       	ldi	r22, 0x00	; 0
    54d8:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <CLCD_VoidGoToXY>
	  	   CLCD_u8SendString("1->CW");
    54dc:	8d ec       	ldi	r24, 0xCD	; 205
    54de:	90 e0       	ldi	r25, 0x00	; 0
    54e0:	0e 94 2a 07 	call	0xe54	; 0xe54 <CLCD_u8SendString>
	  	   CLCD_VoidGoToXY(0,1);
    54e4:	80 e0       	ldi	r24, 0x00	; 0
    54e6:	61 e0       	ldi	r22, 0x01	; 1
    54e8:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <CLCD_VoidGoToXY>
	  	   CLCD_u8SendString("2->CCW");
    54ec:	83 ed       	ldi	r24, 0xD3	; 211
    54ee:	90 e0       	ldi	r25, 0x00	; 0
    54f0:	0e 94 2a 07 	call	0xe54	; 0xe54 <CLCD_u8SendString>

	  	 Local_u8KeypadKey=Scan_u8Option(Local_u8KeypadKey);
    54f4:	fe 01       	movw	r30, r28
    54f6:	e7 5b       	subi	r30, 0xB7	; 183
    54f8:	ff 4f       	sbci	r31, 0xFF	; 255
    54fa:	80 81       	ld	r24, Z
    54fc:	0e 94 9d 1c 	call	0x393a	; 0x393a <Scan_u8Option>
    5500:	fe 01       	movw	r30, r28
    5502:	e7 5b       	subi	r30, 0xB7	; 183
    5504:	ff 4f       	sbci	r31, 0xFF	; 255
    5506:	80 83       	st	Z, r24

       if(Local_u8KeypadKey==1)
    5508:	fe 01       	movw	r30, r28
    550a:	e7 5b       	subi	r30, 0xB7	; 183
    550c:	ff 4f       	sbci	r31, 0xFF	; 255
    550e:	80 81       	ld	r24, Z
    5510:	81 30       	cpi	r24, 0x01	; 1
    5512:	31 f4       	brne	.+12     	; 0x5520 <main+0x530>
		{Local_u8Direction=CW;
    5514:	fe 01       	movw	r30, r28
    5516:	e9 5b       	subi	r30, 0xB9	; 185
    5518:	ff 4f       	sbci	r31, 0xFF	; 255
    551a:	81 e0       	ldi	r24, 0x01	; 1
    551c:	80 83       	st	Z, r24
    551e:	0b c0       	rjmp	.+22     	; 0x5536 <main+0x546>
		}
		else if(Local_u8KeypadKey==2)
    5520:	fe 01       	movw	r30, r28
    5522:	e7 5b       	subi	r30, 0xB7	; 183
    5524:	ff 4f       	sbci	r31, 0xFF	; 255
    5526:	80 81       	ld	r24, Z
    5528:	82 30       	cpi	r24, 0x02	; 2
    552a:	29 f4       	brne	.+10     	; 0x5536 <main+0x546>
		{Local_u8Direction=CCW;
    552c:	fe 01       	movw	r30, r28
    552e:	e9 5b       	subi	r30, 0xB9	; 185
    5530:	ff 4f       	sbci	r31, 0xFF	; 255
    5532:	82 e0       	ldi	r24, 0x02	; 2
    5534:	80 83       	st	Z, r24
		}
       //scan angle
       CLCD_voidClear();
    5536:	0e 94 55 08 	call	0x10aa	; 0x10aa <CLCD_voidClear>
       CLCD_VoidGoToXY(0,0);
    553a:	80 e0       	ldi	r24, 0x00	; 0
    553c:	60 e0       	ldi	r22, 0x00	; 0
    553e:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <CLCD_VoidGoToXY>
      CLCD_u8SendString("Angle:");
    5542:	84 ee       	ldi	r24, 0xE4	; 228
    5544:	90 e0       	ldi	r25, 0x00	; 0
    5546:	0e 94 2a 07 	call	0xe54	; 0xe54 <CLCD_u8SendString>
      Local_u8KeypadKey = 0xff;
    554a:	fe 01       	movw	r30, r28
    554c:	e7 5b       	subi	r30, 0xB7	; 183
    554e:	ff 4f       	sbci	r31, 0xFF	; 255
    5550:	8f ef       	ldi	r24, 0xFF	; 255
    5552:	80 83       	st	Z, r24
    5554:	06 c0       	rjmp	.+12     	; 0x5562 <main+0x572>
      while(1)
      				{

      					while(Local_u8KeypadKey == 0xff)
      					{
      						Local_u8KeypadKey = KPD_u8GetPressedKey() ;
    5556:	0e 94 6b 1f 	call	0x3ed6	; 0x3ed6 <KPD_u8GetPressedKey>
    555a:	fe 01       	movw	r30, r28
    555c:	e7 5b       	subi	r30, 0xB7	; 183
    555e:	ff 4f       	sbci	r31, 0xFF	; 255
    5560:	80 83       	st	Z, r24
      CLCD_u8SendString("Angle:");
      Local_u8KeypadKey = 0xff;
      while(1)
      				{

      					while(Local_u8KeypadKey == 0xff)
    5562:	fe 01       	movw	r30, r28
    5564:	e7 5b       	subi	r30, 0xB7	; 183
    5566:	ff 4f       	sbci	r31, 0xFF	; 255
    5568:	80 81       	ld	r24, Z
    556a:	8f 3f       	cpi	r24, 0xFF	; 255
    556c:	a1 f3       	breq	.-24     	; 0x5556 <main+0x566>
      					{
      						Local_u8KeypadKey = KPD_u8GetPressedKey() ;
      					}

      					if(Local_u8KeypadKey =='D')
    556e:	fe 01       	movw	r30, r28
    5570:	e7 5b       	subi	r30, 0xB7	; 183
    5572:	ff 4f       	sbci	r31, 0xFF	; 255
    5574:	80 81       	ld	r24, Z
    5576:	84 34       	cpi	r24, 0x44	; 68
    5578:	61 f1       	breq	.+88     	; 0x55d2 <main+0x5e2>
      					{
      						break;
      					}
      					else
      					{
      						CLCD_voidSendNumber(Local_u8KeypadKey);
    557a:	fe 01       	movw	r30, r28
    557c:	e7 5b       	subi	r30, 0xB7	; 183
    557e:	ff 4f       	sbci	r31, 0xFF	; 255
    5580:	80 81       	ld	r24, Z
    5582:	88 2f       	mov	r24, r24
    5584:	90 e0       	ldi	r25, 0x00	; 0
    5586:	a0 e0       	ldi	r26, 0x00	; 0
    5588:	b0 e0       	ldi	r27, 0x00	; 0
    558a:	bc 01       	movw	r22, r24
    558c:	cd 01       	movw	r24, r26
    558e:	0e 94 5d 07 	call	0xeba	; 0xeba <CLCD_voidSendNumber>
      						Local_u8Angle = Local_u8Angle * (uint16)10 + (uint16)Local_u8KeypadKey;
    5592:	fe 01       	movw	r30, r28
    5594:	e8 5b       	subi	r30, 0xB8	; 184
    5596:	ff 4f       	sbci	r31, 0xFF	; 255
    5598:	80 81       	ld	r24, Z
    559a:	88 2f       	mov	r24, r24
    559c:	90 e0       	ldi	r25, 0x00	; 0
    559e:	9c 01       	movw	r18, r24
    55a0:	22 0f       	add	r18, r18
    55a2:	33 1f       	adc	r19, r19
    55a4:	c9 01       	movw	r24, r18
    55a6:	88 0f       	add	r24, r24
    55a8:	99 1f       	adc	r25, r25
    55aa:	88 0f       	add	r24, r24
    55ac:	99 1f       	adc	r25, r25
    55ae:	82 0f       	add	r24, r18
    55b0:	93 1f       	adc	r25, r19
    55b2:	98 2f       	mov	r25, r24
    55b4:	de 01       	movw	r26, r28
    55b6:	a8 5b       	subi	r26, 0xB8	; 184
    55b8:	bf 4f       	sbci	r27, 0xFF	; 255
    55ba:	fe 01       	movw	r30, r28
    55bc:	e7 5b       	subi	r30, 0xB7	; 183
    55be:	ff 4f       	sbci	r31, 0xFF	; 255
    55c0:	80 81       	ld	r24, Z
    55c2:	89 0f       	add	r24, r25
    55c4:	8c 93       	st	X, r24
      						Local_u8KeypadKey = 0xff;
    55c6:	fe 01       	movw	r30, r28
    55c8:	e7 5b       	subi	r30, 0xB7	; 183
    55ca:	ff 4f       	sbci	r31, 0xFF	; 255
    55cc:	8f ef       	ldi	r24, 0xFF	; 255
    55ce:	80 83       	st	Z, r24
    55d0:	c8 cf       	rjmp	.-112    	; 0x5562 <main+0x572>
      					;
      					}

      				}
       STEP_u8Rotate ( &Local_StepperMotor, Local_u8Direction, Local_u8Angle);
    55d2:	fe 01       	movw	r30, r28
    55d4:	e8 5b       	subi	r30, 0xB8	; 184
    55d6:	ff 4f       	sbci	r31, 0xFF	; 255
    55d8:	80 81       	ld	r24, Z
    55da:	28 2f       	mov	r18, r24
    55dc:	30 e0       	ldi	r19, 0x00	; 0
    55de:	8c ef       	ldi	r24, 0xFC	; 252
    55e0:	90 e0       	ldi	r25, 0x00	; 0
    55e2:	fe 01       	movw	r30, r28
    55e4:	e9 5b       	subi	r30, 0xB9	; 185
    55e6:	ff 4f       	sbci	r31, 0xFF	; 255
    55e8:	60 81       	ld	r22, Z
    55ea:	a9 01       	movw	r20, r18
    55ec:	0e 94 47 20 	call	0x408e	; 0x408e <STEP_u8Rotate>

       CLCD_voidClear();
    55f0:	0e 94 55 08 	call	0x10aa	; 0x10aa <CLCD_voidClear>
       CLCD_VoidGoToXY(4,0);
    55f4:	84 e0       	ldi	r24, 0x04	; 4
    55f6:	60 e0       	ldi	r22, 0x00	; 0
    55f8:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <CLCD_VoidGoToXY>
      CLCD_u8SendString("FINISHED");
    55fc:	8b ee       	ldi	r24, 0xEB	; 235
    55fe:	90 e0       	ldi	r25, 0x00	; 0
    5600:	0e 94 2a 07 	call	0xe54	; 0xe54 <CLCD_u8SendString>
    5604:	80 e0       	ldi	r24, 0x00	; 0
    5606:	90 e0       	ldi	r25, 0x00	; 0
    5608:	aa ef       	ldi	r26, 0xFA	; 250
    560a:	b4 e4       	ldi	r27, 0x44	; 68
    560c:	8b 87       	std	Y+11, r24	; 0x0b
    560e:	9c 87       	std	Y+12, r25	; 0x0c
    5610:	ad 87       	std	Y+13, r26	; 0x0d
    5612:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5614:	6b 85       	ldd	r22, Y+11	; 0x0b
    5616:	7c 85       	ldd	r23, Y+12	; 0x0c
    5618:	8d 85       	ldd	r24, Y+13	; 0x0d
    561a:	9e 85       	ldd	r25, Y+14	; 0x0e
    561c:	20 e0       	ldi	r18, 0x00	; 0
    561e:	30 e0       	ldi	r19, 0x00	; 0
    5620:	4a e7       	ldi	r20, 0x7A	; 122
    5622:	55 e4       	ldi	r21, 0x45	; 69
    5624:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    5628:	dc 01       	movw	r26, r24
    562a:	cb 01       	movw	r24, r22
    562c:	8f 83       	std	Y+7, r24	; 0x07
    562e:	98 87       	std	Y+8, r25	; 0x08
    5630:	a9 87       	std	Y+9, r26	; 0x09
    5632:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5634:	6f 81       	ldd	r22, Y+7	; 0x07
    5636:	78 85       	ldd	r23, Y+8	; 0x08
    5638:	89 85       	ldd	r24, Y+9	; 0x09
    563a:	9a 85       	ldd	r25, Y+10	; 0x0a
    563c:	20 e0       	ldi	r18, 0x00	; 0
    563e:	30 e0       	ldi	r19, 0x00	; 0
    5640:	40 e8       	ldi	r20, 0x80	; 128
    5642:	5f e3       	ldi	r21, 0x3F	; 63
    5644:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    5648:	88 23       	and	r24, r24
    564a:	2c f4       	brge	.+10     	; 0x5656 <main+0x666>
		__ticks = 1;
    564c:	81 e0       	ldi	r24, 0x01	; 1
    564e:	90 e0       	ldi	r25, 0x00	; 0
    5650:	9e 83       	std	Y+6, r25	; 0x06
    5652:	8d 83       	std	Y+5, r24	; 0x05
    5654:	3f c0       	rjmp	.+126    	; 0x56d4 <main+0x6e4>
	else if (__tmp > 65535)
    5656:	6f 81       	ldd	r22, Y+7	; 0x07
    5658:	78 85       	ldd	r23, Y+8	; 0x08
    565a:	89 85       	ldd	r24, Y+9	; 0x09
    565c:	9a 85       	ldd	r25, Y+10	; 0x0a
    565e:	20 e0       	ldi	r18, 0x00	; 0
    5660:	3f ef       	ldi	r19, 0xFF	; 255
    5662:	4f e7       	ldi	r20, 0x7F	; 127
    5664:	57 e4       	ldi	r21, 0x47	; 71
    5666:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    566a:	18 16       	cp	r1, r24
    566c:	4c f5       	brge	.+82     	; 0x56c0 <main+0x6d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    566e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5670:	7c 85       	ldd	r23, Y+12	; 0x0c
    5672:	8d 85       	ldd	r24, Y+13	; 0x0d
    5674:	9e 85       	ldd	r25, Y+14	; 0x0e
    5676:	20 e0       	ldi	r18, 0x00	; 0
    5678:	30 e0       	ldi	r19, 0x00	; 0
    567a:	40 e2       	ldi	r20, 0x20	; 32
    567c:	51 e4       	ldi	r21, 0x41	; 65
    567e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    5682:	dc 01       	movw	r26, r24
    5684:	cb 01       	movw	r24, r22
    5686:	bc 01       	movw	r22, r24
    5688:	cd 01       	movw	r24, r26
    568a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    568e:	dc 01       	movw	r26, r24
    5690:	cb 01       	movw	r24, r22
    5692:	9e 83       	std	Y+6, r25	; 0x06
    5694:	8d 83       	std	Y+5, r24	; 0x05
    5696:	0f c0       	rjmp	.+30     	; 0x56b6 <main+0x6c6>
    5698:	80 e9       	ldi	r24, 0x90	; 144
    569a:	91 e0       	ldi	r25, 0x01	; 1
    569c:	9c 83       	std	Y+4, r25	; 0x04
    569e:	8b 83       	std	Y+3, r24	; 0x03
    56a0:	8b 81       	ldd	r24, Y+3	; 0x03
    56a2:	9c 81       	ldd	r25, Y+4	; 0x04
    56a4:	01 97       	sbiw	r24, 0x01	; 1
    56a6:	f1 f7       	brne	.-4      	; 0x56a4 <main+0x6b4>
    56a8:	9c 83       	std	Y+4, r25	; 0x04
    56aa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    56ac:	8d 81       	ldd	r24, Y+5	; 0x05
    56ae:	9e 81       	ldd	r25, Y+6	; 0x06
    56b0:	01 97       	sbiw	r24, 0x01	; 1
    56b2:	9e 83       	std	Y+6, r25	; 0x06
    56b4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    56b6:	8d 81       	ldd	r24, Y+5	; 0x05
    56b8:	9e 81       	ldd	r25, Y+6	; 0x06
    56ba:	00 97       	sbiw	r24, 0x00	; 0
    56bc:	69 f7       	brne	.-38     	; 0x5698 <main+0x6a8>
    56be:	14 c0       	rjmp	.+40     	; 0x56e8 <main+0x6f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    56c0:	6f 81       	ldd	r22, Y+7	; 0x07
    56c2:	78 85       	ldd	r23, Y+8	; 0x08
    56c4:	89 85       	ldd	r24, Y+9	; 0x09
    56c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    56c8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    56cc:	dc 01       	movw	r26, r24
    56ce:	cb 01       	movw	r24, r22
    56d0:	9e 83       	std	Y+6, r25	; 0x06
    56d2:	8d 83       	std	Y+5, r24	; 0x05
    56d4:	8d 81       	ldd	r24, Y+5	; 0x05
    56d6:	9e 81       	ldd	r25, Y+6	; 0x06
    56d8:	9a 83       	std	Y+2, r25	; 0x02
    56da:	89 83       	std	Y+1, r24	; 0x01
    56dc:	89 81       	ldd	r24, Y+1	; 0x01
    56de:	9a 81       	ldd	r25, Y+2	; 0x02
    56e0:	01 97       	sbiw	r24, 0x01	; 1
    56e2:	f1 f7       	brne	.-4      	; 0x56e0 <main+0x6f0>
    56e4:	9a 83       	std	Y+2, r25	; 0x02
    56e6:	89 83       	std	Y+1, r24	; 0x01
      _delay_ms(2000);
      void_HamokshaB();
    56e8:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <void_HamokshaB>
   }
}
    56ec:	c6 5b       	subi	r28, 0xB6	; 182
    56ee:	df 4f       	sbci	r29, 0xFF	; 255
    56f0:	0f b6       	in	r0, 0x3f	; 63
    56f2:	f8 94       	cli
    56f4:	de bf       	out	0x3e, r29	; 62
    56f6:	0f be       	out	0x3f, r0	; 63
    56f8:	cd bf       	out	0x3d, r28	; 61
    56fa:	cf 91       	pop	r28
    56fc:	df 91       	pop	r29
    56fe:	1f 91       	pop	r17
    5700:	0f 91       	pop	r16
    5702:	08 95       	ret

00005704 <__udivmodsi4>:
    5704:	a1 e2       	ldi	r26, 0x21	; 33
    5706:	1a 2e       	mov	r1, r26
    5708:	aa 1b       	sub	r26, r26
    570a:	bb 1b       	sub	r27, r27
    570c:	fd 01       	movw	r30, r26
    570e:	0d c0       	rjmp	.+26     	; 0x572a <__udivmodsi4_ep>

00005710 <__udivmodsi4_loop>:
    5710:	aa 1f       	adc	r26, r26
    5712:	bb 1f       	adc	r27, r27
    5714:	ee 1f       	adc	r30, r30
    5716:	ff 1f       	adc	r31, r31
    5718:	a2 17       	cp	r26, r18
    571a:	b3 07       	cpc	r27, r19
    571c:	e4 07       	cpc	r30, r20
    571e:	f5 07       	cpc	r31, r21
    5720:	20 f0       	brcs	.+8      	; 0x572a <__udivmodsi4_ep>
    5722:	a2 1b       	sub	r26, r18
    5724:	b3 0b       	sbc	r27, r19
    5726:	e4 0b       	sbc	r30, r20
    5728:	f5 0b       	sbc	r31, r21

0000572a <__udivmodsi4_ep>:
    572a:	66 1f       	adc	r22, r22
    572c:	77 1f       	adc	r23, r23
    572e:	88 1f       	adc	r24, r24
    5730:	99 1f       	adc	r25, r25
    5732:	1a 94       	dec	r1
    5734:	69 f7       	brne	.-38     	; 0x5710 <__udivmodsi4_loop>
    5736:	60 95       	com	r22
    5738:	70 95       	com	r23
    573a:	80 95       	com	r24
    573c:	90 95       	com	r25
    573e:	9b 01       	movw	r18, r22
    5740:	ac 01       	movw	r20, r24
    5742:	bd 01       	movw	r22, r26
    5744:	cf 01       	movw	r24, r30
    5746:	08 95       	ret

00005748 <__divmodsi4>:
    5748:	97 fb       	bst	r25, 7
    574a:	09 2e       	mov	r0, r25
    574c:	05 26       	eor	r0, r21
    574e:	0e d0       	rcall	.+28     	; 0x576c <__divmodsi4_neg1>
    5750:	57 fd       	sbrc	r21, 7
    5752:	04 d0       	rcall	.+8      	; 0x575c <__divmodsi4_neg2>
    5754:	d7 df       	rcall	.-82     	; 0x5704 <__udivmodsi4>
    5756:	0a d0       	rcall	.+20     	; 0x576c <__divmodsi4_neg1>
    5758:	00 1c       	adc	r0, r0
    575a:	38 f4       	brcc	.+14     	; 0x576a <__divmodsi4_exit>

0000575c <__divmodsi4_neg2>:
    575c:	50 95       	com	r21
    575e:	40 95       	com	r20
    5760:	30 95       	com	r19
    5762:	21 95       	neg	r18
    5764:	3f 4f       	sbci	r19, 0xFF	; 255
    5766:	4f 4f       	sbci	r20, 0xFF	; 255
    5768:	5f 4f       	sbci	r21, 0xFF	; 255

0000576a <__divmodsi4_exit>:
    576a:	08 95       	ret

0000576c <__divmodsi4_neg1>:
    576c:	f6 f7       	brtc	.-4      	; 0x576a <__divmodsi4_exit>
    576e:	90 95       	com	r25
    5770:	80 95       	com	r24
    5772:	70 95       	com	r23
    5774:	61 95       	neg	r22
    5776:	7f 4f       	sbci	r23, 0xFF	; 255
    5778:	8f 4f       	sbci	r24, 0xFF	; 255
    577a:	9f 4f       	sbci	r25, 0xFF	; 255
    577c:	08 95       	ret

0000577e <__prologue_saves__>:
    577e:	2f 92       	push	r2
    5780:	3f 92       	push	r3
    5782:	4f 92       	push	r4
    5784:	5f 92       	push	r5
    5786:	6f 92       	push	r6
    5788:	7f 92       	push	r7
    578a:	8f 92       	push	r8
    578c:	9f 92       	push	r9
    578e:	af 92       	push	r10
    5790:	bf 92       	push	r11
    5792:	cf 92       	push	r12
    5794:	df 92       	push	r13
    5796:	ef 92       	push	r14
    5798:	ff 92       	push	r15
    579a:	0f 93       	push	r16
    579c:	1f 93       	push	r17
    579e:	cf 93       	push	r28
    57a0:	df 93       	push	r29
    57a2:	cd b7       	in	r28, 0x3d	; 61
    57a4:	de b7       	in	r29, 0x3e	; 62
    57a6:	ca 1b       	sub	r28, r26
    57a8:	db 0b       	sbc	r29, r27
    57aa:	0f b6       	in	r0, 0x3f	; 63
    57ac:	f8 94       	cli
    57ae:	de bf       	out	0x3e, r29	; 62
    57b0:	0f be       	out	0x3f, r0	; 63
    57b2:	cd bf       	out	0x3d, r28	; 61
    57b4:	09 94       	ijmp

000057b6 <__epilogue_restores__>:
    57b6:	2a 88       	ldd	r2, Y+18	; 0x12
    57b8:	39 88       	ldd	r3, Y+17	; 0x11
    57ba:	48 88       	ldd	r4, Y+16	; 0x10
    57bc:	5f 84       	ldd	r5, Y+15	; 0x0f
    57be:	6e 84       	ldd	r6, Y+14	; 0x0e
    57c0:	7d 84       	ldd	r7, Y+13	; 0x0d
    57c2:	8c 84       	ldd	r8, Y+12	; 0x0c
    57c4:	9b 84       	ldd	r9, Y+11	; 0x0b
    57c6:	aa 84       	ldd	r10, Y+10	; 0x0a
    57c8:	b9 84       	ldd	r11, Y+9	; 0x09
    57ca:	c8 84       	ldd	r12, Y+8	; 0x08
    57cc:	df 80       	ldd	r13, Y+7	; 0x07
    57ce:	ee 80       	ldd	r14, Y+6	; 0x06
    57d0:	fd 80       	ldd	r15, Y+5	; 0x05
    57d2:	0c 81       	ldd	r16, Y+4	; 0x04
    57d4:	1b 81       	ldd	r17, Y+3	; 0x03
    57d6:	aa 81       	ldd	r26, Y+2	; 0x02
    57d8:	b9 81       	ldd	r27, Y+1	; 0x01
    57da:	ce 0f       	add	r28, r30
    57dc:	d1 1d       	adc	r29, r1
    57de:	0f b6       	in	r0, 0x3f	; 63
    57e0:	f8 94       	cli
    57e2:	de bf       	out	0x3e, r29	; 62
    57e4:	0f be       	out	0x3f, r0	; 63
    57e6:	cd bf       	out	0x3d, r28	; 61
    57e8:	ed 01       	movw	r28, r26
    57ea:	08 95       	ret

000057ec <_exit>:
    57ec:	f8 94       	cli

000057ee <__stop_program>:
    57ee:	ff cf       	rjmp	.-2      	; 0x57ee <__stop_program>
