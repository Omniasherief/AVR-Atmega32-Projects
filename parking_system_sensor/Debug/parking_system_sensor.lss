
parking_system_sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005174  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00005174  00005208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800168  00800168  00005310  2**0
                  ALLOC
  3 .stab         00003fa8  00000000  00000000  00005310  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001d89  00000000  00000000  000092b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000b041  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000b1a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000b330  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000d375  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000e476  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000f3f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000f578  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000f83a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000100c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 b3 24 	jmp	0x4966	; 0x4966 <__vector_4>
      14:	0c 94 86 24 	jmp	0x490c	; 0x490c <__vector_5>
      18:	0c 94 59 24 	jmp	0x48b2	; 0x48b2 <__vector_6>
      1c:	0c 94 2c 24 	jmp	0x4858	; 0x4858 <__vector_7>
      20:	0c 94 ff 23 	jmp	0x47fe	; 0x47fe <__vector_8>
      24:	0c 94 d2 23 	jmp	0x47a4	; 0x47a4 <__vector_9>
      28:	0c 94 a5 23 	jmp	0x474a	; 0x474a <__vector_10>
      2c:	0c 94 78 23 	jmp	0x46f0	; 0x46f0 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e7       	ldi	r30, 0x74	; 116
      68:	f1 e5       	ldi	r31, 0x51	; 81
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e6       	ldi	r26, 0x68	; 104
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 37       	cpi	r26, 0x78	; 120
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 57 26 	call	0x4cae	; 0x4cae <main>
      8a:	0c 94 b8 28 	jmp	0x5170	; 0x5170 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 81 28 	jmp	0x5102	; 0x5102 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 ed       	ldi	r26, 0xD8	; 216
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 9d 28 	jmp	0x513a	; 0x513a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 8d 28 	jmp	0x511a	; 0x511a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a9 28 	jmp	0x5152	; 0x5152 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 8d 28 	jmp	0x511a	; 0x511a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a9 28 	jmp	0x5152	; 0x5152 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 81 28 	jmp	0x5102	; 0x5102 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	88 ed       	ldi	r24, 0xD8	; 216
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 9d 28 	jmp	0x513a	; 0x513a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 89 28 	jmp	0x5112	; 0x5112 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	68 ed       	ldi	r22, 0xD8	; 216
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 a5 28 	jmp	0x514a	; 0x514a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 8d 28 	jmp	0x511a	; 0x511a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 a9 28 	jmp	0x5152	; 0x5152 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 8d 28 	jmp	0x511a	; 0x511a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 a9 28 	jmp	0x5152	; 0x5152 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 8d 28 	jmp	0x511a	; 0x511a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 a9 28 	jmp	0x5152	; 0x5152 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 91 28 	jmp	0x5122	; 0x5122 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 ad 28 	jmp	0x515a	; 0x515a <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <Buzz_u8On>:

#include "DIO_interface.h"
#include "Buzzer_interface.h"

uint8 Buzz_u8On(const Buzz_config_t* Copy_pstConfig)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <Buzz_u8On+0x6>
     ca4:	0f 92       	push	r0
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
     caa:	9b 83       	std	Y+3, r25	; 0x03
     cac:	8a 83       	std	Y+2, r24	; 0x02
	 uint8 Local_u8Err_State =OK;
     cae:	19 82       	std	Y+1, r1	; 0x01
	 if(Copy_pstConfig!=NULL)
     cb0:	8a 81       	ldd	r24, Y+2	; 0x02
     cb2:	9b 81       	ldd	r25, Y+3	; 0x03
     cb4:	00 97       	sbiw	r24, 0x00	; 0
     cb6:	19 f1       	breq	.+70     	; 0xcfe <Buzz_u8On+0x60>
	 {
		 if (Copy_pstConfig->u8ActiveType==Buzz_Active_high)
     cb8:	ea 81       	ldd	r30, Y+2	; 0x02
     cba:	fb 81       	ldd	r31, Y+3	; 0x03
     cbc:	82 81       	ldd	r24, Z+2	; 0x02
     cbe:	81 30       	cpi	r24, 0x01	; 1
     cc0:	59 f4       	brne	.+22     	; 0xcd8 <Buzz_u8On+0x3a>
		 {
			 DIO_u8SetPinValue(Copy_pstConfig->u8Port,Copy_pstConfig->u8Pin,DIO_u8PIN_HIGH);
     cc2:	ea 81       	ldd	r30, Y+2	; 0x02
     cc4:	fb 81       	ldd	r31, Y+3	; 0x03
     cc6:	80 81       	ld	r24, Z
     cc8:	ea 81       	ldd	r30, Y+2	; 0x02
     cca:	fb 81       	ldd	r31, Y+3	; 0x03
     ccc:	91 81       	ldd	r25, Z+1	; 0x01
     cce:	69 2f       	mov	r22, r25
     cd0:	41 e0       	ldi	r20, 0x01	; 1
     cd2:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <DIO_u8SetPinValue>
     cd6:	15 c0       	rjmp	.+42     	; 0xd02 <Buzz_u8On+0x64>
		 }
		 else if (Copy_pstConfig->u8ActiveType==Buzz_Actve_low)
     cd8:	ea 81       	ldd	r30, Y+2	; 0x02
     cda:	fb 81       	ldd	r31, Y+3	; 0x03
     cdc:	82 81       	ldd	r24, Z+2	; 0x02
     cde:	88 23       	and	r24, r24
     ce0:	59 f4       	brne	.+22     	; 0xcf8 <Buzz_u8On+0x5a>
		 {
			 DIO_u8SetPinValue(Copy_pstConfig->u8Port,Copy_pstConfig->u8Pin,DIO_u8PIN_LOW);
     ce2:	ea 81       	ldd	r30, Y+2	; 0x02
     ce4:	fb 81       	ldd	r31, Y+3	; 0x03
     ce6:	80 81       	ld	r24, Z
     ce8:	ea 81       	ldd	r30, Y+2	; 0x02
     cea:	fb 81       	ldd	r31, Y+3	; 0x03
     cec:	91 81       	ldd	r25, Z+1	; 0x01
     cee:	69 2f       	mov	r22, r25
     cf0:	40 e0       	ldi	r20, 0x00	; 0
     cf2:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <DIO_u8SetPinValue>
     cf6:	05 c0       	rjmp	.+10     	; 0xd02 <Buzz_u8On+0x64>
		 }
		 else
		 {
			 Local_u8Err_State=NOK;
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	89 83       	std	Y+1, r24	; 0x01
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <Buzz_u8On+0x64>
		 }
	 }

	 else
	 {
		 Local_u8Err_State=NULL_PTR_ERR;
     cfe:	82 e0       	ldi	r24, 0x02	; 2
     d00:	89 83       	std	Y+1, r24	; 0x01
	 }
 return Local_u8Err_State;
     d02:	89 81       	ldd	r24, Y+1	; 0x01
}
     d04:	0f 90       	pop	r0
     d06:	0f 90       	pop	r0
     d08:	0f 90       	pop	r0
     d0a:	cf 91       	pop	r28
     d0c:	df 91       	pop	r29
     d0e:	08 95       	ret

00000d10 <Buzz_u8Off>:
uint8 Buzz_u8Off(const Buzz_config_t* Copy_pstConfig)
{
     d10:	df 93       	push	r29
     d12:	cf 93       	push	r28
     d14:	00 d0       	rcall	.+0      	; 0xd16 <Buzz_u8Off+0x6>
     d16:	0f 92       	push	r0
     d18:	cd b7       	in	r28, 0x3d	; 61
     d1a:	de b7       	in	r29, 0x3e	; 62
     d1c:	9b 83       	std	Y+3, r25	; 0x03
     d1e:	8a 83       	std	Y+2, r24	; 0x02
	 uint8 Local_u8Err_State =OK;
     d20:	19 82       	std	Y+1, r1	; 0x01
	 if(Copy_pstConfig!=NULL)
     d22:	8a 81       	ldd	r24, Y+2	; 0x02
     d24:	9b 81       	ldd	r25, Y+3	; 0x03
     d26:	00 97       	sbiw	r24, 0x00	; 0
     d28:	19 f1       	breq	.+70     	; 0xd70 <Buzz_u8Off+0x60>
	 {
		 if (Copy_pstConfig->u8ActiveType==Buzz_Active_high)
     d2a:	ea 81       	ldd	r30, Y+2	; 0x02
     d2c:	fb 81       	ldd	r31, Y+3	; 0x03
     d2e:	82 81       	ldd	r24, Z+2	; 0x02
     d30:	81 30       	cpi	r24, 0x01	; 1
     d32:	59 f4       	brne	.+22     	; 0xd4a <Buzz_u8Off+0x3a>
		 {
			 DIO_u8SetPinValue(Copy_pstConfig->u8Port,Copy_pstConfig->u8Pin,DIO_u8PIN_LOW);
     d34:	ea 81       	ldd	r30, Y+2	; 0x02
     d36:	fb 81       	ldd	r31, Y+3	; 0x03
     d38:	80 81       	ld	r24, Z
     d3a:	ea 81       	ldd	r30, Y+2	; 0x02
     d3c:	fb 81       	ldd	r31, Y+3	; 0x03
     d3e:	91 81       	ldd	r25, Z+1	; 0x01
     d40:	69 2f       	mov	r22, r25
     d42:	40 e0       	ldi	r20, 0x00	; 0
     d44:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <DIO_u8SetPinValue>
     d48:	15 c0       	rjmp	.+42     	; 0xd74 <Buzz_u8Off+0x64>
		 }
		 else if (Copy_pstConfig->u8ActiveType==Buzz_Actve_low)
     d4a:	ea 81       	ldd	r30, Y+2	; 0x02
     d4c:	fb 81       	ldd	r31, Y+3	; 0x03
     d4e:	82 81       	ldd	r24, Z+2	; 0x02
     d50:	88 23       	and	r24, r24
     d52:	59 f4       	brne	.+22     	; 0xd6a <Buzz_u8Off+0x5a>
		 {
			 DIO_u8SetPinValue(Copy_pstConfig->u8Port,Copy_pstConfig->u8Pin,DIO_u8PIN_HIGH);
     d54:	ea 81       	ldd	r30, Y+2	; 0x02
     d56:	fb 81       	ldd	r31, Y+3	; 0x03
     d58:	80 81       	ld	r24, Z
     d5a:	ea 81       	ldd	r30, Y+2	; 0x02
     d5c:	fb 81       	ldd	r31, Y+3	; 0x03
     d5e:	91 81       	ldd	r25, Z+1	; 0x01
     d60:	69 2f       	mov	r22, r25
     d62:	41 e0       	ldi	r20, 0x01	; 1
     d64:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <DIO_u8SetPinValue>
     d68:	05 c0       	rjmp	.+10     	; 0xd74 <Buzz_u8Off+0x64>
		 }
		 else
		 {
			 Local_u8Err_State=NOK;
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	89 83       	std	Y+1, r24	; 0x01
     d6e:	02 c0       	rjmp	.+4      	; 0xd74 <Buzz_u8Off+0x64>
		 }
	 }

	 else
	 {
		 Local_u8Err_State=NULL_PTR_ERR;
     d70:	82 e0       	ldi	r24, 0x02	; 2
     d72:	89 83       	std	Y+1, r24	; 0x01
	 }
 return Local_u8Err_State;
     d74:	89 81       	ldd	r24, Y+1	; 0x01
}
     d76:	0f 90       	pop	r0
     d78:	0f 90       	pop	r0
     d7a:	0f 90       	pop	r0
     d7c:	cf 91       	pop	r28
     d7e:	df 91       	pop	r29
     d80:	08 95       	ret

00000d82 <Buzz_u8Toggle>:
uint8 Buzz_u8Toggle(const Buzz_config_t* Copy_pstConfig)
{
     d82:	df 93       	push	r29
     d84:	cf 93       	push	r28
     d86:	00 d0       	rcall	.+0      	; 0xd88 <Buzz_u8Toggle+0x6>
     d88:	0f 92       	push	r0
     d8a:	cd b7       	in	r28, 0x3d	; 61
     d8c:	de b7       	in	r29, 0x3e	; 62
     d8e:	9b 83       	std	Y+3, r25	; 0x03
     d90:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8Err_State =OK;
     d92:	19 82       	std	Y+1, r1	; 0x01
   if(Copy_pstConfig!=NULL)
     d94:	8a 81       	ldd	r24, Y+2	; 0x02
     d96:	9b 81       	ldd	r25, Y+3	; 0x03
     d98:	00 97       	sbiw	r24, 0x00	; 0
     d9a:	51 f0       	breq	.+20     	; 0xdb0 <Buzz_u8Toggle+0x2e>
   {
	   DIO_u8TogglePinValue(Copy_pstConfig->u8Port,Copy_pstConfig->u8Pin);
     d9c:	ea 81       	ldd	r30, Y+2	; 0x02
     d9e:	fb 81       	ldd	r31, Y+3	; 0x03
     da0:	80 81       	ld	r24, Z
     da2:	ea 81       	ldd	r30, Y+2	; 0x02
     da4:	fb 81       	ldd	r31, Y+3	; 0x03
     da6:	91 81       	ldd	r25, Z+1	; 0x01
     da8:	69 2f       	mov	r22, r25
     daa:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <DIO_u8TogglePinValue>
     dae:	02 c0       	rjmp	.+4      	; 0xdb4 <Buzz_u8Toggle+0x32>

   }
   else
   {

	   Local_u8Err_State=NULL_PTR_ERR;
     db0:	82 e0       	ldi	r24, 0x02	; 2
     db2:	89 83       	std	Y+1, r24	; 0x01
   }
   return Local_u8Err_State;
     db4:	89 81       	ldd	r24, Y+1	; 0x01
}
     db6:	0f 90       	pop	r0
     db8:	0f 90       	pop	r0
     dba:	0f 90       	pop	r0
     dbc:	cf 91       	pop	r28
     dbe:	df 91       	pop	r29
     dc0:	08 95       	ret

00000dc2 <voidSetHalfDataPort>:
#include"CLCD_interface.h"
#include"CLCD_prv.h"
#include"CLCD_cfg.h"
#if CLCD_u8BIT_MODE ==FOUR_BIT
static void voidSetHalfDataPort(uint8 Copy_u8Data)
{
     dc2:	df 93       	push	r29
     dc4:	cf 93       	push	r28
     dc6:	0f 92       	push	r0
     dc8:	cd b7       	in	r28, 0x3d	; 61
     dca:	de b7       	in	r29, 0x3e	; 62
     dcc:	89 83       	std	Y+1, r24	; 0x01
DIO_u8SetPinValue(CLCD_u8DATA_PORT,CLCD_u8D4_PIN,GET_BIT(Copy_u8Data,0));
     dce:	89 81       	ldd	r24, Y+1	; 0x01
     dd0:	98 2f       	mov	r25, r24
     dd2:	91 70       	andi	r25, 0x01	; 1
     dd4:	80 e0       	ldi	r24, 0x00	; 0
     dd6:	63 e0       	ldi	r22, 0x03	; 3
     dd8:	49 2f       	mov	r20, r25
     dda:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <DIO_u8SetPinValue>
DIO_u8SetPinValue(CLCD_u8DATA_PORT,CLCD_u8D5_PIN,GET_BIT(Copy_u8Data,1));
     dde:	89 81       	ldd	r24, Y+1	; 0x01
     de0:	86 95       	lsr	r24
     de2:	98 2f       	mov	r25, r24
     de4:	91 70       	andi	r25, 0x01	; 1
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	64 e0       	ldi	r22, 0x04	; 4
     dea:	49 2f       	mov	r20, r25
     dec:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <DIO_u8SetPinValue>
DIO_u8SetPinValue(CLCD_u8DATA_PORT,CLCD_u8D6_PIN,GET_BIT(Copy_u8Data,2));
     df0:	89 81       	ldd	r24, Y+1	; 0x01
     df2:	86 95       	lsr	r24
     df4:	86 95       	lsr	r24
     df6:	98 2f       	mov	r25, r24
     df8:	91 70       	andi	r25, 0x01	; 1
     dfa:	80 e0       	ldi	r24, 0x00	; 0
     dfc:	65 e0       	ldi	r22, 0x05	; 5
     dfe:	49 2f       	mov	r20, r25
     e00:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <DIO_u8SetPinValue>
DIO_u8SetPinValue(CLCD_u8DATA_PORT,CLCD_u8D7_PIN,GET_BIT(Copy_u8Data,3));
     e04:	89 81       	ldd	r24, Y+1	; 0x01
     e06:	86 95       	lsr	r24
     e08:	86 95       	lsr	r24
     e0a:	86 95       	lsr	r24
     e0c:	98 2f       	mov	r25, r24
     e0e:	91 70       	andi	r25, 0x01	; 1
     e10:	80 e0       	ldi	r24, 0x00	; 0
     e12:	66 e0       	ldi	r22, 0x06	; 6
     e14:	49 2f       	mov	r20, r25
     e16:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <DIO_u8SetPinValue>
}
     e1a:	0f 90       	pop	r0
     e1c:	cf 91       	pop	r28
     e1e:	df 91       	pop	r29
     e20:	08 95       	ret

00000e22 <voidSendEnablePulse>:
#endif

static void voidSendEnablePulse(void)
{
     e22:	df 93       	push	r29
     e24:	cf 93       	push	r28
     e26:	cd b7       	in	r28, 0x3d	; 61
     e28:	de b7       	in	r29, 0x3e	; 62
     e2a:	2e 97       	sbiw	r28, 0x0e	; 14
     e2c:	0f b6       	in	r0, 0x3f	; 63
     e2e:	f8 94       	cli
     e30:	de bf       	out	0x3e, r29	; 62
     e32:	0f be       	out	0x3f, r0	; 63
     e34:	cd bf       	out	0x3d, r28	; 61

	// send enable pulse
	DIO_u8SetPinValue(CLCD_u8CTRL_PORT,CLCD_u8E_PIN,DIO_u8PIN_HIGH );
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	62 e0       	ldi	r22, 0x02	; 2
     e3a:	41 e0       	ldi	r20, 0x01	; 1
     e3c:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <DIO_u8SetPinValue>
     e40:	80 e0       	ldi	r24, 0x00	; 0
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	a0 e0       	ldi	r26, 0x00	; 0
     e46:	b0 e4       	ldi	r27, 0x40	; 64
     e48:	8b 87       	std	Y+11, r24	; 0x0b
     e4a:	9c 87       	std	Y+12, r25	; 0x0c
     e4c:	ad 87       	std	Y+13, r26	; 0x0d
     e4e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e50:	6b 85       	ldd	r22, Y+11	; 0x0b
     e52:	7c 85       	ldd	r23, Y+12	; 0x0c
     e54:	8d 85       	ldd	r24, Y+13	; 0x0d
     e56:	9e 85       	ldd	r25, Y+14	; 0x0e
     e58:	20 e0       	ldi	r18, 0x00	; 0
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	4a e7       	ldi	r20, 0x7A	; 122
     e5e:	55 e4       	ldi	r21, 0x45	; 69
     e60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e64:	dc 01       	movw	r26, r24
     e66:	cb 01       	movw	r24, r22
     e68:	8f 83       	std	Y+7, r24	; 0x07
     e6a:	98 87       	std	Y+8, r25	; 0x08
     e6c:	a9 87       	std	Y+9, r26	; 0x09
     e6e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e70:	6f 81       	ldd	r22, Y+7	; 0x07
     e72:	78 85       	ldd	r23, Y+8	; 0x08
     e74:	89 85       	ldd	r24, Y+9	; 0x09
     e76:	9a 85       	ldd	r25, Y+10	; 0x0a
     e78:	20 e0       	ldi	r18, 0x00	; 0
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	40 e8       	ldi	r20, 0x80	; 128
     e7e:	5f e3       	ldi	r21, 0x3F	; 63
     e80:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     e84:	88 23       	and	r24, r24
     e86:	2c f4       	brge	.+10     	; 0xe92 <voidSendEnablePulse+0x70>
		__ticks = 1;
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	9e 83       	std	Y+6, r25	; 0x06
     e8e:	8d 83       	std	Y+5, r24	; 0x05
     e90:	3f c0       	rjmp	.+126    	; 0xf10 <voidSendEnablePulse+0xee>
	else if (__tmp > 65535)
     e92:	6f 81       	ldd	r22, Y+7	; 0x07
     e94:	78 85       	ldd	r23, Y+8	; 0x08
     e96:	89 85       	ldd	r24, Y+9	; 0x09
     e98:	9a 85       	ldd	r25, Y+10	; 0x0a
     e9a:	20 e0       	ldi	r18, 0x00	; 0
     e9c:	3f ef       	ldi	r19, 0xFF	; 255
     e9e:	4f e7       	ldi	r20, 0x7F	; 127
     ea0:	57 e4       	ldi	r21, 0x47	; 71
     ea2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     ea6:	18 16       	cp	r1, r24
     ea8:	4c f5       	brge	.+82     	; 0xefc <voidSendEnablePulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eaa:	6b 85       	ldd	r22, Y+11	; 0x0b
     eac:	7c 85       	ldd	r23, Y+12	; 0x0c
     eae:	8d 85       	ldd	r24, Y+13	; 0x0d
     eb0:	9e 85       	ldd	r25, Y+14	; 0x0e
     eb2:	20 e0       	ldi	r18, 0x00	; 0
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	40 e2       	ldi	r20, 0x20	; 32
     eb8:	51 e4       	ldi	r21, 0x41	; 65
     eba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ebe:	dc 01       	movw	r26, r24
     ec0:	cb 01       	movw	r24, r22
     ec2:	bc 01       	movw	r22, r24
     ec4:	cd 01       	movw	r24, r26
     ec6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eca:	dc 01       	movw	r26, r24
     ecc:	cb 01       	movw	r24, r22
     ece:	9e 83       	std	Y+6, r25	; 0x06
     ed0:	8d 83       	std	Y+5, r24	; 0x05
     ed2:	0f c0       	rjmp	.+30     	; 0xef2 <voidSendEnablePulse+0xd0>
     ed4:	80 e9       	ldi	r24, 0x90	; 144
     ed6:	91 e0       	ldi	r25, 0x01	; 1
     ed8:	9c 83       	std	Y+4, r25	; 0x04
     eda:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     edc:	8b 81       	ldd	r24, Y+3	; 0x03
     ede:	9c 81       	ldd	r25, Y+4	; 0x04
     ee0:	01 97       	sbiw	r24, 0x01	; 1
     ee2:	f1 f7       	brne	.-4      	; 0xee0 <voidSendEnablePulse+0xbe>
     ee4:	9c 83       	std	Y+4, r25	; 0x04
     ee6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ee8:	8d 81       	ldd	r24, Y+5	; 0x05
     eea:	9e 81       	ldd	r25, Y+6	; 0x06
     eec:	01 97       	sbiw	r24, 0x01	; 1
     eee:	9e 83       	std	Y+6, r25	; 0x06
     ef0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ef2:	8d 81       	ldd	r24, Y+5	; 0x05
     ef4:	9e 81       	ldd	r25, Y+6	; 0x06
     ef6:	00 97       	sbiw	r24, 0x00	; 0
     ef8:	69 f7       	brne	.-38     	; 0xed4 <voidSendEnablePulse+0xb2>
     efa:	14 c0       	rjmp	.+40     	; 0xf24 <voidSendEnablePulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     efc:	6f 81       	ldd	r22, Y+7	; 0x07
     efe:	78 85       	ldd	r23, Y+8	; 0x08
     f00:	89 85       	ldd	r24, Y+9	; 0x09
     f02:	9a 85       	ldd	r25, Y+10	; 0x0a
     f04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f08:	dc 01       	movw	r26, r24
     f0a:	cb 01       	movw	r24, r22
     f0c:	9e 83       	std	Y+6, r25	; 0x06
     f0e:	8d 83       	std	Y+5, r24	; 0x05
     f10:	8d 81       	ldd	r24, Y+5	; 0x05
     f12:	9e 81       	ldd	r25, Y+6	; 0x06
     f14:	9a 83       	std	Y+2, r25	; 0x02
     f16:	89 83       	std	Y+1, r24	; 0x01
     f18:	89 81       	ldd	r24, Y+1	; 0x01
     f1a:	9a 81       	ldd	r25, Y+2	; 0x02
     f1c:	01 97       	sbiw	r24, 0x01	; 1
     f1e:	f1 f7       	brne	.-4      	; 0xf1c <voidSendEnablePulse+0xfa>
     f20:	9a 83       	std	Y+2, r25	; 0x02
     f22:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_u8CTRL_PORT,CLCD_u8E_PIN,DIO_u8PIN_LOW);
     f24:	80 e0       	ldi	r24, 0x00	; 0
     f26:	62 e0       	ldi	r22, 0x02	; 2
     f28:	40 e0       	ldi	r20, 0x00	; 0
     f2a:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <DIO_u8SetPinValue>
}
     f2e:	2e 96       	adiw	r28, 0x0e	; 14
     f30:	0f b6       	in	r0, 0x3f	; 63
     f32:	f8 94       	cli
     f34:	de bf       	out	0x3e, r29	; 62
     f36:	0f be       	out	0x3f, r0	; 63
     f38:	cd bf       	out	0x3d, r28	; 61
     f3a:	cf 91       	pop	r28
     f3c:	df 91       	pop	r29
     f3e:	08 95       	ret

00000f40 <CLCD_voidSendCmd>:


void CLCD_voidSendCmd(uint8 Copy_u8Cmd)
{ //set RS pin to low for command
     f40:	df 93       	push	r29
     f42:	cf 93       	push	r28
     f44:	0f 92       	push	r0
     f46:	cd b7       	in	r28, 0x3d	; 61
     f48:	de b7       	in	r29, 0x3e	; 62
     f4a:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(CLCD_u8CTRL_PORT,CLCD_u8RS_PIN,DIO_u8PIN_LOW);
     f4c:	80 e0       	ldi	r24, 0x00	; 0
     f4e:	61 e0       	ldi	r22, 0x01	; 1
     f50:	40 e0       	ldi	r20, 0x00	; 0
     f52:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <DIO_u8SetPinValue>
	//send the command
	DIO_u8SetPortValue(CLCD_u8DATA_PORT,Copy_u8Cmd);
	voidSendEnablePulse();
#elif 	CLCD_u8BIT_MODE==FOUR_BIT
	/*Send the 4 Most significant bits of the command first*/
	voidSetHalfDataPort(Copy_u8Cmd >> 4);
     f56:	89 81       	ldd	r24, Y+1	; 0x01
     f58:	82 95       	swap	r24
     f5a:	8f 70       	andi	r24, 0x0F	; 15
     f5c:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <voidSetHalfDataPort>
	voidSendEnablePulse();
     f60:	0e 94 11 07 	call	0xe22	; 0xe22 <voidSendEnablePulse>
	voidSetHalfDataPort(Copy_u8Cmd);
     f64:	89 81       	ldd	r24, Y+1	; 0x01
     f66:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <voidSetHalfDataPort>
	voidSendEnablePulse();
     f6a:	0e 94 11 07 	call	0xe22	; 0xe22 <voidSendEnablePulse>
#else
#error wrong CLCD_u8BIT_MODE configuration option
#endif

}
     f6e:	0f 90       	pop	r0
     f70:	cf 91       	pop	r28
     f72:	df 91       	pop	r29
     f74:	08 95       	ret

00000f76 <CLCD_voidSendData>:
void CLCD_voidSendData(uint8 Copy_u8Data)
{
     f76:	df 93       	push	r29
     f78:	cf 93       	push	r28
     f7a:	0f 92       	push	r0
     f7c:	cd b7       	in	r28, 0x3d	; 61
     f7e:	de b7       	in	r29, 0x3e	; 62
     f80:	89 83       	std	Y+1, r24	; 0x01

	 //set RS pin to HIGH for DATA
		DIO_u8SetPinValue(CLCD_u8CTRL_PORT,CLCD_u8RS_PIN,DIO_u8PIN_HIGH);
     f82:	80 e0       	ldi	r24, 0x00	; 0
     f84:	61 e0       	ldi	r22, 0x01	; 1
     f86:	41 e0       	ldi	r20, 0x01	; 1
     f88:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <DIO_u8SetPinValue>
	DIO_u8SetPortValue(CLCD_u8DATA_PORT,Copy_u8Data);//
	voidSendEnablePulse();

#elif CLCD_u8BIT_MODE == FOUR_BIT
	/*Send the 4 Most significant bits of the data first*/
	voidSetHalfDataPort(Copy_u8Data >> 4);
     f8c:	89 81       	ldd	r24, Y+1	; 0x01
     f8e:	82 95       	swap	r24
     f90:	8f 70       	andi	r24, 0x0F	; 15
     f92:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <voidSetHalfDataPort>
	voidSendEnablePulse();
     f96:	0e 94 11 07 	call	0xe22	; 0xe22 <voidSendEnablePulse>
	voidSetHalfDataPort(Copy_u8Data);
     f9a:	89 81       	ldd	r24, Y+1	; 0x01
     f9c:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <voidSetHalfDataPort>
	voidSendEnablePulse();
     fa0:	0e 94 11 07 	call	0xe22	; 0xe22 <voidSendEnablePulse>

#else
#error wrong CLCD_u8BIT_MODE configuration option
#endif

}
     fa4:	0f 90       	pop	r0
     fa6:	cf 91       	pop	r28
     fa8:	df 91       	pop	r29
     faa:	08 95       	ret

00000fac <CLCD_VoidInit>:
void CLCD_VoidInit(void)
{//if rs ==0 it is command ..low
     fac:	df 93       	push	r29
     fae:	cf 93       	push	r28
     fb0:	cd b7       	in	r28, 0x3d	; 61
     fb2:	de b7       	in	r29, 0x3e	; 62
     fb4:	2e 97       	sbiw	r28, 0x0e	; 14
     fb6:	0f b6       	in	r0, 0x3f	; 63
     fb8:	f8 94       	cli
     fba:	de bf       	out	0x3e, r29	; 62
     fbc:	0f be       	out	0x3f, r0	; 63
     fbe:	cd bf       	out	0x3d, r28	; 61
     fc0:	80 e0       	ldi	r24, 0x00	; 0
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	a0 e2       	ldi	r26, 0x20	; 32
     fc6:	b2 e4       	ldi	r27, 0x42	; 66
     fc8:	8b 87       	std	Y+11, r24	; 0x0b
     fca:	9c 87       	std	Y+12, r25	; 0x0c
     fcc:	ad 87       	std	Y+13, r26	; 0x0d
     fce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fd0:	6b 85       	ldd	r22, Y+11	; 0x0b
     fd2:	7c 85       	ldd	r23, Y+12	; 0x0c
     fd4:	8d 85       	ldd	r24, Y+13	; 0x0d
     fd6:	9e 85       	ldd	r25, Y+14	; 0x0e
     fd8:	20 e0       	ldi	r18, 0x00	; 0
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	4a e7       	ldi	r20, 0x7A	; 122
     fde:	55 e4       	ldi	r21, 0x45	; 69
     fe0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fe4:	dc 01       	movw	r26, r24
     fe6:	cb 01       	movw	r24, r22
     fe8:	8f 83       	std	Y+7, r24	; 0x07
     fea:	98 87       	std	Y+8, r25	; 0x08
     fec:	a9 87       	std	Y+9, r26	; 0x09
     fee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ff0:	6f 81       	ldd	r22, Y+7	; 0x07
     ff2:	78 85       	ldd	r23, Y+8	; 0x08
     ff4:	89 85       	ldd	r24, Y+9	; 0x09
     ff6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ff8:	20 e0       	ldi	r18, 0x00	; 0
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	40 e8       	ldi	r20, 0x80	; 128
     ffe:	5f e3       	ldi	r21, 0x3F	; 63
    1000:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1004:	88 23       	and	r24, r24
    1006:	2c f4       	brge	.+10     	; 0x1012 <CLCD_VoidInit+0x66>
		__ticks = 1;
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	9e 83       	std	Y+6, r25	; 0x06
    100e:	8d 83       	std	Y+5, r24	; 0x05
    1010:	3f c0       	rjmp	.+126    	; 0x1090 <CLCD_VoidInit+0xe4>
	else if (__tmp > 65535)
    1012:	6f 81       	ldd	r22, Y+7	; 0x07
    1014:	78 85       	ldd	r23, Y+8	; 0x08
    1016:	89 85       	ldd	r24, Y+9	; 0x09
    1018:	9a 85       	ldd	r25, Y+10	; 0x0a
    101a:	20 e0       	ldi	r18, 0x00	; 0
    101c:	3f ef       	ldi	r19, 0xFF	; 255
    101e:	4f e7       	ldi	r20, 0x7F	; 127
    1020:	57 e4       	ldi	r21, 0x47	; 71
    1022:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1026:	18 16       	cp	r1, r24
    1028:	4c f5       	brge	.+82     	; 0x107c <CLCD_VoidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    102a:	6b 85       	ldd	r22, Y+11	; 0x0b
    102c:	7c 85       	ldd	r23, Y+12	; 0x0c
    102e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1030:	9e 85       	ldd	r25, Y+14	; 0x0e
    1032:	20 e0       	ldi	r18, 0x00	; 0
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	40 e2       	ldi	r20, 0x20	; 32
    1038:	51 e4       	ldi	r21, 0x41	; 65
    103a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    103e:	dc 01       	movw	r26, r24
    1040:	cb 01       	movw	r24, r22
    1042:	bc 01       	movw	r22, r24
    1044:	cd 01       	movw	r24, r26
    1046:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    104a:	dc 01       	movw	r26, r24
    104c:	cb 01       	movw	r24, r22
    104e:	9e 83       	std	Y+6, r25	; 0x06
    1050:	8d 83       	std	Y+5, r24	; 0x05
    1052:	0f c0       	rjmp	.+30     	; 0x1072 <CLCD_VoidInit+0xc6>
    1054:	80 e9       	ldi	r24, 0x90	; 144
    1056:	91 e0       	ldi	r25, 0x01	; 1
    1058:	9c 83       	std	Y+4, r25	; 0x04
    105a:	8b 83       	std	Y+3, r24	; 0x03
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	9c 81       	ldd	r25, Y+4	; 0x04
    1060:	01 97       	sbiw	r24, 0x01	; 1
    1062:	f1 f7       	brne	.-4      	; 0x1060 <CLCD_VoidInit+0xb4>
    1064:	9c 83       	std	Y+4, r25	; 0x04
    1066:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1068:	8d 81       	ldd	r24, Y+5	; 0x05
    106a:	9e 81       	ldd	r25, Y+6	; 0x06
    106c:	01 97       	sbiw	r24, 0x01	; 1
    106e:	9e 83       	std	Y+6, r25	; 0x06
    1070:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1072:	8d 81       	ldd	r24, Y+5	; 0x05
    1074:	9e 81       	ldd	r25, Y+6	; 0x06
    1076:	00 97       	sbiw	r24, 0x00	; 0
    1078:	69 f7       	brne	.-38     	; 0x1054 <CLCD_VoidInit+0xa8>
    107a:	14 c0       	rjmp	.+40     	; 0x10a4 <CLCD_VoidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    107c:	6f 81       	ldd	r22, Y+7	; 0x07
    107e:	78 85       	ldd	r23, Y+8	; 0x08
    1080:	89 85       	ldd	r24, Y+9	; 0x09
    1082:	9a 85       	ldd	r25, Y+10	; 0x0a
    1084:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1088:	dc 01       	movw	r26, r24
    108a:	cb 01       	movw	r24, r22
    108c:	9e 83       	std	Y+6, r25	; 0x06
    108e:	8d 83       	std	Y+5, r24	; 0x05
    1090:	8d 81       	ldd	r24, Y+5	; 0x05
    1092:	9e 81       	ldd	r25, Y+6	; 0x06
    1094:	9a 83       	std	Y+2, r25	; 0x02
    1096:	89 83       	std	Y+1, r24	; 0x01
    1098:	89 81       	ldd	r24, Y+1	; 0x01
    109a:	9a 81       	ldd	r25, Y+2	; 0x02
    109c:	01 97       	sbiw	r24, 0x01	; 1
    109e:	f1 f7       	brne	.-4      	; 0x109c <CLCD_VoidInit+0xf0>
    10a0:	9a 83       	std	Y+2, r25	; 0x02
    10a2:	89 83       	std	Y+1, r24	; 0x01
#if  CLCD_u8BIT_MODE == EIGHT_BIT
	//function set command :2lines , font size 5*11
	CLCD_voidSendCmd(0b00111100);

#elif  CLCD_u8BIT_MODE == FOUR_BIT
		voidSetHalfDataPort(0b0010);
    10a4:	82 e0       	ldi	r24, 0x02	; 2
    10a6:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <voidSetHalfDataPort>
		voidSendEnablePulse();
    10aa:	0e 94 11 07 	call	0xe22	; 0xe22 <voidSendEnablePulse>
		voidSetHalfDataPort(0b0010);
    10ae:	82 e0       	ldi	r24, 0x02	; 2
    10b0:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <voidSetHalfDataPort>
		voidSendEnablePulse();
    10b4:	0e 94 11 07 	call	0xe22	; 0xe22 <voidSendEnablePulse>
		voidSetHalfDataPort(0b1000);
    10b8:	88 e0       	ldi	r24, 0x08	; 8
    10ba:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <voidSetHalfDataPort>
		voidSendEnablePulse();
    10be:	0e 94 11 07 	call	0xe22	; 0xe22 <voidSendEnablePulse>

	#endif

	//display on off control: display on, cursor off , blink cursor off
	CLCD_voidSendCmd(0b00001100);
    10c2:	8c e0       	ldi	r24, 0x0C	; 12
    10c4:	0e 94 a0 07 	call	0xf40	; 0xf40 <CLCD_voidSendCmd>
	//clear display
	CLCD_voidSendCmd(1);
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	0e 94 a0 07 	call	0xf40	; 0xf40 <CLCD_voidSendCmd>

}
    10ce:	2e 96       	adiw	r28, 0x0e	; 14
    10d0:	0f b6       	in	r0, 0x3f	; 63
    10d2:	f8 94       	cli
    10d4:	de bf       	out	0x3e, r29	; 62
    10d6:	0f be       	out	0x3f, r0	; 63
    10d8:	cd bf       	out	0x3d, r28	; 61
    10da:	cf 91       	pop	r28
    10dc:	df 91       	pop	r29
    10de:	08 95       	ret

000010e0 <CLCD_u8SendString>:

uint8 CLCD_u8SendString(const char* Copy_pchString)
{
    10e0:	df 93       	push	r29
    10e2:	cf 93       	push	r28
    10e4:	00 d0       	rcall	.+0      	; 0x10e6 <CLCD_u8SendString+0x6>
    10e6:	00 d0       	rcall	.+0      	; 0x10e8 <CLCD_u8SendString+0x8>
    10e8:	cd b7       	in	r28, 0x3d	; 61
    10ea:	de b7       	in	r29, 0x3e	; 62
    10ec:	9c 83       	std	Y+4, r25	; 0x04
    10ee:	8b 83       	std	Y+3, r24	; 0x03

uint8 Local_u8ErrorState=OK;
    10f0:	1a 82       	std	Y+2, r1	; 0x02
 if(Copy_pchString!=NULL)
    10f2:	8b 81       	ldd	r24, Y+3	; 0x03
    10f4:	9c 81       	ldd	r25, Y+4	; 0x04
    10f6:	00 97       	sbiw	r24, 0x00	; 0
    10f8:	e1 f0       	breq	.+56     	; 0x1132 <CLCD_u8SendString+0x52>
 {
  uint8 Local_u8Iteratot=0u;
    10fa:	19 82       	std	Y+1, r1	; 0x01
    10fc:	0e c0       	rjmp	.+28     	; 0x111a <CLCD_u8SendString+0x3a>
   while(Copy_pchString[Local_u8Iteratot]!='\0')
      {
	    CLCD_voidSendData(Copy_pchString[Local_u8Iteratot]);
    10fe:	89 81       	ldd	r24, Y+1	; 0x01
    1100:	28 2f       	mov	r18, r24
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	8b 81       	ldd	r24, Y+3	; 0x03
    1106:	9c 81       	ldd	r25, Y+4	; 0x04
    1108:	fc 01       	movw	r30, r24
    110a:	e2 0f       	add	r30, r18
    110c:	f3 1f       	adc	r31, r19
    110e:	80 81       	ld	r24, Z
    1110:	0e 94 bb 07 	call	0xf76	; 0xf76 <CLCD_voidSendData>
	    Local_u8Iteratot++;
    1114:	89 81       	ldd	r24, Y+1	; 0x01
    1116:	8f 5f       	subi	r24, 0xFF	; 255
    1118:	89 83       	std	Y+1, r24	; 0x01

uint8 Local_u8ErrorState=OK;
 if(Copy_pchString!=NULL)
 {
  uint8 Local_u8Iteratot=0u;
   while(Copy_pchString[Local_u8Iteratot]!='\0')
    111a:	89 81       	ldd	r24, Y+1	; 0x01
    111c:	28 2f       	mov	r18, r24
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	8b 81       	ldd	r24, Y+3	; 0x03
    1122:	9c 81       	ldd	r25, Y+4	; 0x04
    1124:	fc 01       	movw	r30, r24
    1126:	e2 0f       	add	r30, r18
    1128:	f3 1f       	adc	r31, r19
    112a:	80 81       	ld	r24, Z
    112c:	88 23       	and	r24, r24
    112e:	39 f7       	brne	.-50     	; 0x10fe <CLCD_u8SendString+0x1e>
    1130:	02 c0       	rjmp	.+4      	; 0x1136 <CLCD_u8SendString+0x56>
      }

 }
 else
  {
 	Local_u8ErrorState=  NULL_PTR_ERR;
    1132:	82 e0       	ldi	r24, 0x02	; 2
    1134:	8a 83       	std	Y+2, r24	; 0x02
  }
 return Local_u8ErrorState;
    1136:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1138:	0f 90       	pop	r0
    113a:	0f 90       	pop	r0
    113c:	0f 90       	pop	r0
    113e:	0f 90       	pop	r0
    1140:	cf 91       	pop	r28
    1142:	df 91       	pop	r29
    1144:	08 95       	ret

00001146 <CLCD_voidSendNumber>:
void CLCD_voidSendNumber(sint32 Copy_s32Number )
{ char Local_chNumber[10];
    1146:	df 93       	push	r29
    1148:	cf 93       	push	r28
    114a:	cd b7       	in	r28, 0x3d	; 61
    114c:	de b7       	in	r29, 0x3e	; 62
    114e:	61 97       	sbiw	r28, 0x11	; 17
    1150:	0f b6       	in	r0, 0x3f	; 63
    1152:	f8 94       	cli
    1154:	de bf       	out	0x3e, r29	; 62
    1156:	0f be       	out	0x3f, r0	; 63
    1158:	cd bf       	out	0x3d, r28	; 61
    115a:	6e 87       	std	Y+14, r22	; 0x0e
    115c:	7f 87       	std	Y+15, r23	; 0x0f
    115e:	88 8b       	std	Y+16, r24	; 0x10
    1160:	99 8b       	std	Y+17, r25	; 0x11
  uint8 Local_u8RightDigit,Local_u8Counter1=0u;
    1162:	1a 82       	std	Y+2, r1	; 0x02
  sint8 Local_s8Counter2=0;
    1164:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_s32Number==0)
    1166:	8e 85       	ldd	r24, Y+14	; 0x0e
    1168:	9f 85       	ldd	r25, Y+15	; 0x0f
    116a:	a8 89       	ldd	r26, Y+16	; 0x10
    116c:	b9 89       	ldd	r27, Y+17	; 0x11
    116e:	00 97       	sbiw	r24, 0x00	; 0
    1170:	a1 05       	cpc	r26, r1
    1172:	b1 05       	cpc	r27, r1
    1174:	21 f4       	brne	.+8      	; 0x117e <CLCD_voidSendNumber+0x38>
	{
		CLCD_voidSendData('0');
    1176:	80 e3       	ldi	r24, 0x30	; 48
    1178:	0e 94 bb 07 	call	0xf76	; 0xf76 <CLCD_voidSendData>
    117c:	67 c0       	rjmp	.+206    	; 0x124c <CLCD_voidSendNumber+0x106>
		return;
	}
	else if (Copy_s32Number<0)
    117e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1180:	9f 85       	ldd	r25, Y+15	; 0x0f
    1182:	a8 89       	ldd	r26, Y+16	; 0x10
    1184:	b9 89       	ldd	r27, Y+17	; 0x11
    1186:	bb 23       	and	r27, r27
    1188:	0c f0       	brlt	.+2      	; 0x118c <CLCD_voidSendNumber+0x46>
    118a:	43 c0       	rjmp	.+134    	; 0x1212 <CLCD_voidSendNumber+0xcc>
	{ //make -ve -> +ve and print - "sign" on clcd
		Copy_s32Number *=-1;
    118c:	8e 85       	ldd	r24, Y+14	; 0x0e
    118e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1190:	a8 89       	ldd	r26, Y+16	; 0x10
    1192:	b9 89       	ldd	r27, Y+17	; 0x11
    1194:	b0 95       	com	r27
    1196:	a0 95       	com	r26
    1198:	90 95       	com	r25
    119a:	81 95       	neg	r24
    119c:	9f 4f       	sbci	r25, 0xFF	; 255
    119e:	af 4f       	sbci	r26, 0xFF	; 255
    11a0:	bf 4f       	sbci	r27, 0xFF	; 255
    11a2:	8e 87       	std	Y+14, r24	; 0x0e
    11a4:	9f 87       	std	Y+15, r25	; 0x0f
    11a6:	a8 8b       	std	Y+16, r26	; 0x10
    11a8:	b9 8b       	std	Y+17, r27	; 0x11
		CLCD_voidSendData('-');
    11aa:	8d e2       	ldi	r24, 0x2D	; 45
    11ac:	0e 94 bb 07 	call	0xf76	; 0xf76 <CLCD_voidSendData>
    11b0:	30 c0       	rjmp	.+96     	; 0x1212 <CLCD_voidSendNumber+0xcc>

	}
	while(Copy_s32Number!=0)
	{
		Local_u8RightDigit=(uint8)((uint32)Copy_s32Number %10);//get right most digit
    11b2:	8e 85       	ldd	r24, Y+14	; 0x0e
    11b4:	9f 85       	ldd	r25, Y+15	; 0x0f
    11b6:	a8 89       	ldd	r26, Y+16	; 0x10
    11b8:	b9 89       	ldd	r27, Y+17	; 0x11
    11ba:	2a e0       	ldi	r18, 0x0A	; 10
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	40 e0       	ldi	r20, 0x00	; 0
    11c0:	50 e0       	ldi	r21, 0x00	; 0
    11c2:	bc 01       	movw	r22, r24
    11c4:	cd 01       	movw	r24, r26
    11c6:	0e 94 44 28 	call	0x5088	; 0x5088 <__udivmodsi4>
    11ca:	dc 01       	movw	r26, r24
    11cc:	cb 01       	movw	r24, r22
    11ce:	8b 83       	std	Y+3, r24	; 0x03
		Copy_s32Number/=10; //remove right digit
    11d0:	8e 85       	ldd	r24, Y+14	; 0x0e
    11d2:	9f 85       	ldd	r25, Y+15	; 0x0f
    11d4:	a8 89       	ldd	r26, Y+16	; 0x10
    11d6:	b9 89       	ldd	r27, Y+17	; 0x11
    11d8:	2a e0       	ldi	r18, 0x0A	; 10
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	40 e0       	ldi	r20, 0x00	; 0
    11de:	50 e0       	ldi	r21, 0x00	; 0
    11e0:	bc 01       	movw	r22, r24
    11e2:	cd 01       	movw	r24, r26
    11e4:	0e 94 66 28 	call	0x50cc	; 0x50cc <__divmodsi4>
    11e8:	da 01       	movw	r26, r20
    11ea:	c9 01       	movw	r24, r18
    11ec:	8e 87       	std	Y+14, r24	; 0x0e
    11ee:	9f 87       	std	Y+15, r25	; 0x0f
    11f0:	a8 8b       	std	Y+16, r26	; 0x10
    11f2:	b9 8b       	std	Y+17, r27	; 0x11
		Local_chNumber[Local_u8Counter1]=Local_u8RightDigit+'0'; //CONVERT TO ASCII
    11f4:	8a 81       	ldd	r24, Y+2	; 0x02
    11f6:	28 2f       	mov	r18, r24
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	8b 81       	ldd	r24, Y+3	; 0x03
    11fc:	48 2f       	mov	r20, r24
    11fe:	40 5d       	subi	r20, 0xD0	; 208
    1200:	ce 01       	movw	r24, r28
    1202:	04 96       	adiw	r24, 0x04	; 4
    1204:	fc 01       	movw	r30, r24
    1206:	e2 0f       	add	r30, r18
    1208:	f3 1f       	adc	r31, r19
    120a:	40 83       	st	Z, r20
		Local_u8Counter1++;
    120c:	8a 81       	ldd	r24, Y+2	; 0x02
    120e:	8f 5f       	subi	r24, 0xFF	; 255
    1210:	8a 83       	std	Y+2, r24	; 0x02
	{ //make -ve -> +ve and print - "sign" on clcd
		Copy_s32Number *=-1;
		CLCD_voidSendData('-');

	}
	while(Copy_s32Number!=0)
    1212:	8e 85       	ldd	r24, Y+14	; 0x0e
    1214:	9f 85       	ldd	r25, Y+15	; 0x0f
    1216:	a8 89       	ldd	r26, Y+16	; 0x10
    1218:	b9 89       	ldd	r27, Y+17	; 0x11
    121a:	00 97       	sbiw	r24, 0x00	; 0
    121c:	a1 05       	cpc	r26, r1
    121e:	b1 05       	cpc	r27, r1
    1220:	41 f6       	brne	.-112    	; 0x11b2 <CLCD_voidSendNumber+0x6c>
		Local_u8Counter1++;


	}
	/////////////
	for(Local_s8Counter2 =(sint8)Local_u8Counter1-1; Local_s8Counter2>=0;Local_s8Counter2--)
    1222:	8a 81       	ldd	r24, Y+2	; 0x02
    1224:	81 50       	subi	r24, 0x01	; 1
    1226:	89 83       	std	Y+1, r24	; 0x01
    1228:	0e c0       	rjmp	.+28     	; 0x1246 <CLCD_voidSendNumber+0x100>

	{
		CLCD_voidSendData(Local_chNumber[(uint8)Local_s8Counter2]);
    122a:	89 81       	ldd	r24, Y+1	; 0x01
    122c:	28 2f       	mov	r18, r24
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	ce 01       	movw	r24, r28
    1232:	04 96       	adiw	r24, 0x04	; 4
    1234:	fc 01       	movw	r30, r24
    1236:	e2 0f       	add	r30, r18
    1238:	f3 1f       	adc	r31, r19
    123a:	80 81       	ld	r24, Z
    123c:	0e 94 bb 07 	call	0xf76	; 0xf76 <CLCD_voidSendData>
		Local_u8Counter1++;


	}
	/////////////
	for(Local_s8Counter2 =(sint8)Local_u8Counter1-1; Local_s8Counter2>=0;Local_s8Counter2--)
    1240:	89 81       	ldd	r24, Y+1	; 0x01
    1242:	81 50       	subi	r24, 0x01	; 1
    1244:	89 83       	std	Y+1, r24	; 0x01
    1246:	89 81       	ldd	r24, Y+1	; 0x01
    1248:	88 23       	and	r24, r24
    124a:	7c f7       	brge	.-34     	; 0x122a <CLCD_voidSendNumber+0xe4>

	{
		CLCD_voidSendData(Local_chNumber[(uint8)Local_s8Counter2]);
	}
}
    124c:	61 96       	adiw	r28, 0x11	; 17
    124e:	0f b6       	in	r0, 0x3f	; 63
    1250:	f8 94       	cli
    1252:	de bf       	out	0x3e, r29	; 62
    1254:	0f be       	out	0x3f, r0	; 63
    1256:	cd bf       	out	0x3d, r28	; 61
    1258:	cf 91       	pop	r28
    125a:	df 91       	pop	r29
    125c:	08 95       	ret

0000125e <CLCD_VoidGoToXY>:
void CLCD_VoidGoToXY(uint8 Copy_u8Xpos,uint8 Copy_u8Ypos)
{
    125e:	df 93       	push	r29
    1260:	cf 93       	push	r28
    1262:	00 d0       	rcall	.+0      	; 0x1264 <CLCD_VoidGoToXY+0x6>
    1264:	0f 92       	push	r0
    1266:	cd b7       	in	r28, 0x3d	; 61
    1268:	de b7       	in	r29, 0x3e	; 62
    126a:	8a 83       	std	Y+2, r24	; 0x02
    126c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8Adress ;
	if(Copy_u8Ypos==0u)
    126e:	8b 81       	ldd	r24, Y+3	; 0x03
    1270:	88 23       	and	r24, r24
    1272:	19 f4       	brne	.+6      	; 0x127a <CLCD_VoidGoToXY+0x1c>
	{
		Local_u8Adress=Copy_u8Xpos;
    1274:	8a 81       	ldd	r24, Y+2	; 0x02
    1276:	89 83       	std	Y+1, r24	; 0x01
    1278:	06 c0       	rjmp	.+12     	; 0x1286 <CLCD_VoidGoToXY+0x28>
	}
	else if(Copy_u8Ypos==1u)
    127a:	8b 81       	ldd	r24, Y+3	; 0x03
    127c:	81 30       	cpi	r24, 0x01	; 1
    127e:	19 f4       	brne	.+6      	; 0x1286 <CLCD_VoidGoToXY+0x28>
	{
		Local_u8Adress=0x40+Copy_u8Xpos;
    1280:	8a 81       	ldd	r24, Y+2	; 0x02
    1282:	80 5c       	subi	r24, 0xC0	; 192
    1284:	89 83       	std	Y+1, r24	; 0x01

	}
	// WE CAN USE IT INSTEAD OF IF.IFELSE :Local_u8Adress=ox40*Copy_u8Ypos+Copy_u8Xpos;
   // SET BIT 7 FOR SET DDRAM ADDRESS COMMAND
	SET_BIT(Local_u8Adress,7);
    1286:	89 81       	ldd	r24, Y+1	; 0x01
    1288:	80 68       	ori	r24, 0x80	; 128
    128a:	89 83       	std	Y+1, r24	; 0x01
	//EXECUTE SET DDRam address command
   CLCD_voidSendCmd(Local_u8Adress);
    128c:	89 81       	ldd	r24, Y+1	; 0x01
    128e:	0e 94 a0 07 	call	0xf40	; 0xf40 <CLCD_voidSendCmd>

}
    1292:	0f 90       	pop	r0
    1294:	0f 90       	pop	r0
    1296:	0f 90       	pop	r0
    1298:	cf 91       	pop	r28
    129a:	df 91       	pop	r29
    129c:	08 95       	ret

0000129e <CLCD_u8SpecialCharacter>:
uint8 CLCD_u8SpecialCharacter(uint8 Copy_u8LocationNum, uint8 * Copy_puPattern,uint8 Copy_u8Xpos,uint8 Copy_u8Ypos)
{
    129e:	df 93       	push	r29
    12a0:	cf 93       	push	r28
    12a2:	cd b7       	in	r28, 0x3d	; 61
    12a4:	de b7       	in	r29, 0x3e	; 62
    12a6:	28 97       	sbiw	r28, 0x08	; 8
    12a8:	0f b6       	in	r0, 0x3f	; 63
    12aa:	f8 94       	cli
    12ac:	de bf       	out	0x3e, r29	; 62
    12ae:	0f be       	out	0x3f, r0	; 63
    12b0:	cd bf       	out	0x3d, r28	; 61
    12b2:	8c 83       	std	Y+4, r24	; 0x04
    12b4:	7e 83       	std	Y+6, r23	; 0x06
    12b6:	6d 83       	std	Y+5, r22	; 0x05
    12b8:	4f 83       	std	Y+7, r20	; 0x07
    12ba:	28 87       	std	Y+8, r18	; 0x08
uint8 Local_u8ErrorState=OK;
    12bc:	1b 82       	std	Y+3, r1	; 0x03
uint8 Local_u8Counter=0;
    12be:	1a 82       	std	Y+2, r1	; 0x02
if(Copy_puPattern!=NULL)
    12c0:	8d 81       	ldd	r24, Y+5	; 0x05
    12c2:	9e 81       	ldd	r25, Y+6	; 0x06
    12c4:	00 97       	sbiw	r24, 0x00	; 0
    12c6:	59 f1       	breq	.+86     	; 0x131e <CLCD_u8SpecialCharacter+0x80>
{
	uint8 Local_u8CGRAMAddress= Copy_u8LocationNum*8;
    12c8:	8c 81       	ldd	r24, Y+4	; 0x04
    12ca:	88 2f       	mov	r24, r24
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	88 0f       	add	r24, r24
    12d0:	99 1f       	adc	r25, r25
    12d2:	88 0f       	add	r24, r24
    12d4:	99 1f       	adc	r25, r25
    12d6:	88 0f       	add	r24, r24
    12d8:	99 1f       	adc	r25, r25
    12da:	89 83       	std	Y+1, r24	; 0x01
	//set bit 6 for CGRAM ADDRESS  command
	SET_BIT(Local_u8CGRAMAddress,6u);
    12dc:	89 81       	ldd	r24, Y+1	; 0x01
    12de:	80 64       	ori	r24, 0x40	; 64
    12e0:	89 83       	std	Y+1, r24	; 0x01
	// set CGRAM address
	CLCD_voidSendCmd(Local_u8CGRAMAddress);
    12e2:	89 81       	ldd	r24, Y+1	; 0x01
    12e4:	0e 94 a0 07 	call	0xf40	; 0xf40 <CLCD_voidSendCmd>
	//write the input pattern inside cGRAM
	for(Local_u8Counter=0;Local_u8Counter<8;Local_u8Counter++)
    12e8:	1a 82       	std	Y+2, r1	; 0x02
    12ea:	0e c0       	rjmp	.+28     	; 0x1308 <CLCD_u8SpecialCharacter+0x6a>
	{
		CLCD_voidSendData(Copy_puPattern[Local_u8Counter]);
    12ec:	8a 81       	ldd	r24, Y+2	; 0x02
    12ee:	28 2f       	mov	r18, r24
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	8d 81       	ldd	r24, Y+5	; 0x05
    12f4:	9e 81       	ldd	r25, Y+6	; 0x06
    12f6:	fc 01       	movw	r30, r24
    12f8:	e2 0f       	add	r30, r18
    12fa:	f3 1f       	adc	r31, r19
    12fc:	80 81       	ld	r24, Z
    12fe:	0e 94 bb 07 	call	0xf76	; 0xf76 <CLCD_voidSendData>
	//set bit 6 for CGRAM ADDRESS  command
	SET_BIT(Local_u8CGRAMAddress,6u);
	// set CGRAM address
	CLCD_voidSendCmd(Local_u8CGRAMAddress);
	//write the input pattern inside cGRAM
	for(Local_u8Counter=0;Local_u8Counter<8;Local_u8Counter++)
    1302:	8a 81       	ldd	r24, Y+2	; 0x02
    1304:	8f 5f       	subi	r24, 0xFF	; 255
    1306:	8a 83       	std	Y+2, r24	; 0x02
    1308:	8a 81       	ldd	r24, Y+2	; 0x02
    130a:	88 30       	cpi	r24, 0x08	; 8
    130c:	78 f3       	brcs	.-34     	; 0x12ec <CLCD_u8SpecialCharacter+0x4e>
	{
		CLCD_voidSendData(Copy_puPattern[Local_u8Counter]);
	}
	//GO BACK TO DDRAM
	CLCD_VoidGoToXY(Copy_u8Xpos,Copy_u8Ypos);
    130e:	8f 81       	ldd	r24, Y+7	; 0x07
    1310:	68 85       	ldd	r22, Y+8	; 0x08
    1312:	0e 94 2f 09 	call	0x125e	; 0x125e <CLCD_VoidGoToXY>
	//WRITE SPECIAL PATTERN INSIDE CGRAM " DISPLAY
	CLCD_voidSendData(Copy_u8LocationNum);
    1316:	8c 81       	ldd	r24, Y+4	; 0x04
    1318:	0e 94 bb 07 	call	0xf76	; 0xf76 <CLCD_voidSendData>
    131c:	02 c0       	rjmp	.+4      	; 0x1322 <CLCD_u8SpecialCharacter+0x84>
}
else
{
	Local_u8ErrorState=NULL_PTR_ERR;
    131e:	82 e0       	ldi	r24, 0x02	; 2
    1320:	8b 83       	std	Y+3, r24	; 0x03
}
return Local_u8ErrorState;
    1322:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1324:	28 96       	adiw	r28, 0x08	; 8
    1326:	0f b6       	in	r0, 0x3f	; 63
    1328:	f8 94       	cli
    132a:	de bf       	out	0x3e, r29	; 62
    132c:	0f be       	out	0x3f, r0	; 63
    132e:	cd bf       	out	0x3d, r28	; 61
    1330:	cf 91       	pop	r28
    1332:	df 91       	pop	r29
    1334:	08 95       	ret

00001336 <CLCD_voidClear>:

void CLCD_voidClear()
{
    1336:	df 93       	push	r29
    1338:	cf 93       	push	r28
    133a:	cd b7       	in	r28, 0x3d	; 61
    133c:	de b7       	in	r29, 0x3e	; 62
CLCD_voidSendCmd(1);
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	0e 94 a0 07 	call	0xf40	; 0xf40 <CLCD_voidSendCmd>
}
    1344:	cf 91       	pop	r28
    1346:	df 91       	pop	r29
    1348:	08 95       	ret

0000134a <CLCD_voidHamoksha>:

void CLCD_voidHamoksha()
{
    134a:	0f 93       	push	r16
    134c:	1f 93       	push	r17
    134e:	df 93       	push	r29
    1350:	cf 93       	push	r28
    1352:	cd b7       	in	r28, 0x3d	; 61
    1354:	de b7       	in	r29, 0x3e	; 62
    1356:	c3 56       	subi	r28, 0x63	; 99
    1358:	d1 40       	sbci	r29, 0x01	; 1
    135a:	0f b6       	in	r0, 0x3f	; 63
    135c:	f8 94       	cli
    135e:	de bf       	out	0x3e, r29	; 62
    1360:	0f be       	out	0x3f, r0	; 63
    1362:	cd bf       	out	0x3d, r28	; 61
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000001
           ,0b00011111,
            0b00011111,0};
    1364:	ce 01       	movw	r24, r28
    1366:	8e 51       	subi	r24, 0x1E	; 30
    1368:	9f 4f       	sbci	r25, 0xFF	; 255
    136a:	ce 5c       	subi	r28, 0xCE	; 206
    136c:	de 4f       	sbci	r29, 0xFE	; 254
    136e:	99 83       	std	Y+1, r25	; 0x01
    1370:	88 83       	st	Y, r24
    1372:	c2 53       	subi	r28, 0x32	; 50
    1374:	d1 40       	sbci	r29, 0x01	; 1
    1376:	88 e2       	ldi	r24, 0x28	; 40
    1378:	91 e0       	ldi	r25, 0x01	; 1
    137a:	cc 5c       	subi	r28, 0xCC	; 204
    137c:	de 4f       	sbci	r29, 0xFE	; 254
    137e:	99 83       	std	Y+1, r25	; 0x01
    1380:	88 83       	st	Y, r24
    1382:	c4 53       	subi	r28, 0x34	; 52
    1384:	d1 40       	sbci	r29, 0x01	; 1
    1386:	98 e0       	ldi	r25, 0x08	; 8
    1388:	ca 5c       	subi	r28, 0xCA	; 202
    138a:	de 4f       	sbci	r29, 0xFE	; 254
    138c:	98 83       	st	Y, r25
    138e:	c6 53       	subi	r28, 0x36	; 54
    1390:	d1 40       	sbci	r29, 0x01	; 1
    1392:	cc 5c       	subi	r28, 0xCC	; 204
    1394:	de 4f       	sbci	r29, 0xFE	; 254
    1396:	e8 81       	ld	r30, Y
    1398:	f9 81       	ldd	r31, Y+1	; 0x01
    139a:	c4 53       	subi	r28, 0x34	; 52
    139c:	d1 40       	sbci	r29, 0x01	; 1
    139e:	00 80       	ld	r0, Z
    13a0:	cc 5c       	subi	r28, 0xCC	; 204
    13a2:	de 4f       	sbci	r29, 0xFE	; 254
    13a4:	88 81       	ld	r24, Y
    13a6:	99 81       	ldd	r25, Y+1	; 0x01
    13a8:	c4 53       	subi	r28, 0x34	; 52
    13aa:	d1 40       	sbci	r29, 0x01	; 1
    13ac:	01 96       	adiw	r24, 0x01	; 1
    13ae:	cc 5c       	subi	r28, 0xCC	; 204
    13b0:	de 4f       	sbci	r29, 0xFE	; 254
    13b2:	99 83       	std	Y+1, r25	; 0x01
    13b4:	88 83       	st	Y, r24
    13b6:	c4 53       	subi	r28, 0x34	; 52
    13b8:	d1 40       	sbci	r29, 0x01	; 1
    13ba:	ce 5c       	subi	r28, 0xCE	; 206
    13bc:	de 4f       	sbci	r29, 0xFE	; 254
    13be:	e8 81       	ld	r30, Y
    13c0:	f9 81       	ldd	r31, Y+1	; 0x01
    13c2:	c2 53       	subi	r28, 0x32	; 50
    13c4:	d1 40       	sbci	r29, 0x01	; 1
    13c6:	00 82       	st	Z, r0
    13c8:	ce 5c       	subi	r28, 0xCE	; 206
    13ca:	de 4f       	sbci	r29, 0xFE	; 254
    13cc:	88 81       	ld	r24, Y
    13ce:	99 81       	ldd	r25, Y+1	; 0x01
    13d0:	c2 53       	subi	r28, 0x32	; 50
    13d2:	d1 40       	sbci	r29, 0x01	; 1
    13d4:	01 96       	adiw	r24, 0x01	; 1
    13d6:	ce 5c       	subi	r28, 0xCE	; 206
    13d8:	de 4f       	sbci	r29, 0xFE	; 254
    13da:	99 83       	std	Y+1, r25	; 0x01
    13dc:	88 83       	st	Y, r24
    13de:	c2 53       	subi	r28, 0x32	; 50
    13e0:	d1 40       	sbci	r29, 0x01	; 1
    13e2:	ca 5c       	subi	r28, 0xCA	; 202
    13e4:	de 4f       	sbci	r29, 0xFE	; 254
    13e6:	98 81       	ld	r25, Y
    13e8:	c6 53       	subi	r28, 0x36	; 54
    13ea:	d1 40       	sbci	r29, 0x01	; 1
    13ec:	91 50       	subi	r25, 0x01	; 1
    13ee:	ca 5c       	subi	r28, 0xCA	; 202
    13f0:	de 4f       	sbci	r29, 0xFE	; 254
    13f2:	98 83       	st	Y, r25
    13f4:	c6 53       	subi	r28, 0x36	; 54
    13f6:	d1 40       	sbci	r29, 0x01	; 1
    13f8:	ca 5c       	subi	r28, 0xCA	; 202
    13fa:	de 4f       	sbci	r29, 0xFE	; 254
    13fc:	e8 81       	ld	r30, Y
    13fe:	c6 53       	subi	r28, 0x36	; 54
    1400:	d1 40       	sbci	r29, 0x01	; 1
    1402:	ee 23       	and	r30, r30
    1404:	31 f6       	brne	.-116    	; 0x1392 <CLCD_voidHamoksha+0x48>
                                         0b00001110,
                                         0b00010101,
                                         0b00010101,
                                         0b00000100
                                        ,0b00001010,
                                         0b00001010,0};
    1406:	ce 01       	movw	r24, r28
    1408:	86 51       	subi	r24, 0x16	; 22
    140a:	9f 4f       	sbci	r25, 0xFF	; 255
    140c:	c9 5c       	subi	r28, 0xC9	; 201
    140e:	de 4f       	sbci	r29, 0xFE	; 254
    1410:	99 83       	std	Y+1, r25	; 0x01
    1412:	88 83       	st	Y, r24
    1414:	c7 53       	subi	r28, 0x37	; 55
    1416:	d1 40       	sbci	r29, 0x01	; 1
    1418:	80 e2       	ldi	r24, 0x20	; 32
    141a:	91 e0       	ldi	r25, 0x01	; 1
    141c:	c7 5c       	subi	r28, 0xC7	; 199
    141e:	de 4f       	sbci	r29, 0xFE	; 254
    1420:	99 83       	std	Y+1, r25	; 0x01
    1422:	88 83       	st	Y, r24
    1424:	c9 53       	subi	r28, 0x39	; 57
    1426:	d1 40       	sbci	r29, 0x01	; 1
    1428:	98 e0       	ldi	r25, 0x08	; 8
    142a:	c5 5c       	subi	r28, 0xC5	; 197
    142c:	de 4f       	sbci	r29, 0xFE	; 254
    142e:	98 83       	st	Y, r25
    1430:	cb 53       	subi	r28, 0x3B	; 59
    1432:	d1 40       	sbci	r29, 0x01	; 1
    1434:	c7 5c       	subi	r28, 0xC7	; 199
    1436:	de 4f       	sbci	r29, 0xFE	; 254
    1438:	e8 81       	ld	r30, Y
    143a:	f9 81       	ldd	r31, Y+1	; 0x01
    143c:	c9 53       	subi	r28, 0x39	; 57
    143e:	d1 40       	sbci	r29, 0x01	; 1
    1440:	00 80       	ld	r0, Z
    1442:	c7 5c       	subi	r28, 0xC7	; 199
    1444:	de 4f       	sbci	r29, 0xFE	; 254
    1446:	88 81       	ld	r24, Y
    1448:	99 81       	ldd	r25, Y+1	; 0x01
    144a:	c9 53       	subi	r28, 0x39	; 57
    144c:	d1 40       	sbci	r29, 0x01	; 1
    144e:	01 96       	adiw	r24, 0x01	; 1
    1450:	c7 5c       	subi	r28, 0xC7	; 199
    1452:	de 4f       	sbci	r29, 0xFE	; 254
    1454:	99 83       	std	Y+1, r25	; 0x01
    1456:	88 83       	st	Y, r24
    1458:	c9 53       	subi	r28, 0x39	; 57
    145a:	d1 40       	sbci	r29, 0x01	; 1
    145c:	c9 5c       	subi	r28, 0xC9	; 201
    145e:	de 4f       	sbci	r29, 0xFE	; 254
    1460:	e8 81       	ld	r30, Y
    1462:	f9 81       	ldd	r31, Y+1	; 0x01
    1464:	c7 53       	subi	r28, 0x37	; 55
    1466:	d1 40       	sbci	r29, 0x01	; 1
    1468:	00 82       	st	Z, r0
    146a:	c9 5c       	subi	r28, 0xC9	; 201
    146c:	de 4f       	sbci	r29, 0xFE	; 254
    146e:	88 81       	ld	r24, Y
    1470:	99 81       	ldd	r25, Y+1	; 0x01
    1472:	c7 53       	subi	r28, 0x37	; 55
    1474:	d1 40       	sbci	r29, 0x01	; 1
    1476:	01 96       	adiw	r24, 0x01	; 1
    1478:	c9 5c       	subi	r28, 0xC9	; 201
    147a:	de 4f       	sbci	r29, 0xFE	; 254
    147c:	99 83       	std	Y+1, r25	; 0x01
    147e:	88 83       	st	Y, r24
    1480:	c7 53       	subi	r28, 0x37	; 55
    1482:	d1 40       	sbci	r29, 0x01	; 1
    1484:	c5 5c       	subi	r28, 0xC5	; 197
    1486:	de 4f       	sbci	r29, 0xFE	; 254
    1488:	98 81       	ld	r25, Y
    148a:	cb 53       	subi	r28, 0x3B	; 59
    148c:	d1 40       	sbci	r29, 0x01	; 1
    148e:	91 50       	subi	r25, 0x01	; 1
    1490:	c5 5c       	subi	r28, 0xC5	; 197
    1492:	de 4f       	sbci	r29, 0xFE	; 254
    1494:	98 83       	st	Y, r25
    1496:	cb 53       	subi	r28, 0x3B	; 59
    1498:	d1 40       	sbci	r29, 0x01	; 1
    149a:	c5 5c       	subi	r28, 0xC5	; 197
    149c:	de 4f       	sbci	r29, 0xFE	; 254
    149e:	e8 81       	ld	r30, Y
    14a0:	cb 53       	subi	r28, 0x3B	; 59
    14a2:	d1 40       	sbci	r29, 0x01	; 1
    14a4:	ee 23       	and	r30, r30
    14a6:	31 f6       	brne	.-116    	; 0x1434 <CLCD_voidHamoksha+0xea>
	                                         0b00011111,
	                                         0b00010101,
	                                         0b00000100,
	                                         0b00000100
	                                        ,0b00010001,
	                                         0b00010001,0};
    14a8:	ce 01       	movw	r24, r28
    14aa:	8e 50       	subi	r24, 0x0E	; 14
    14ac:	9f 4f       	sbci	r25, 0xFF	; 255
    14ae:	c4 5c       	subi	r28, 0xC4	; 196
    14b0:	de 4f       	sbci	r29, 0xFE	; 254
    14b2:	99 83       	std	Y+1, r25	; 0x01
    14b4:	88 83       	st	Y, r24
    14b6:	cc 53       	subi	r28, 0x3C	; 60
    14b8:	d1 40       	sbci	r29, 0x01	; 1
    14ba:	88 e1       	ldi	r24, 0x18	; 24
    14bc:	91 e0       	ldi	r25, 0x01	; 1
    14be:	c2 5c       	subi	r28, 0xC2	; 194
    14c0:	de 4f       	sbci	r29, 0xFE	; 254
    14c2:	99 83       	std	Y+1, r25	; 0x01
    14c4:	88 83       	st	Y, r24
    14c6:	ce 53       	subi	r28, 0x3E	; 62
    14c8:	d1 40       	sbci	r29, 0x01	; 1
    14ca:	98 e0       	ldi	r25, 0x08	; 8
    14cc:	c0 5c       	subi	r28, 0xC0	; 192
    14ce:	de 4f       	sbci	r29, 0xFE	; 254
    14d0:	98 83       	st	Y, r25
    14d2:	c0 54       	subi	r28, 0x40	; 64
    14d4:	d1 40       	sbci	r29, 0x01	; 1
    14d6:	c2 5c       	subi	r28, 0xC2	; 194
    14d8:	de 4f       	sbci	r29, 0xFE	; 254
    14da:	e8 81       	ld	r30, Y
    14dc:	f9 81       	ldd	r31, Y+1	; 0x01
    14de:	ce 53       	subi	r28, 0x3E	; 62
    14e0:	d1 40       	sbci	r29, 0x01	; 1
    14e2:	00 80       	ld	r0, Z
    14e4:	c2 5c       	subi	r28, 0xC2	; 194
    14e6:	de 4f       	sbci	r29, 0xFE	; 254
    14e8:	88 81       	ld	r24, Y
    14ea:	99 81       	ldd	r25, Y+1	; 0x01
    14ec:	ce 53       	subi	r28, 0x3E	; 62
    14ee:	d1 40       	sbci	r29, 0x01	; 1
    14f0:	01 96       	adiw	r24, 0x01	; 1
    14f2:	c2 5c       	subi	r28, 0xC2	; 194
    14f4:	de 4f       	sbci	r29, 0xFE	; 254
    14f6:	99 83       	std	Y+1, r25	; 0x01
    14f8:	88 83       	st	Y, r24
    14fa:	ce 53       	subi	r28, 0x3E	; 62
    14fc:	d1 40       	sbci	r29, 0x01	; 1
    14fe:	c4 5c       	subi	r28, 0xC4	; 196
    1500:	de 4f       	sbci	r29, 0xFE	; 254
    1502:	e8 81       	ld	r30, Y
    1504:	f9 81       	ldd	r31, Y+1	; 0x01
    1506:	cc 53       	subi	r28, 0x3C	; 60
    1508:	d1 40       	sbci	r29, 0x01	; 1
    150a:	00 82       	st	Z, r0
    150c:	c4 5c       	subi	r28, 0xC4	; 196
    150e:	de 4f       	sbci	r29, 0xFE	; 254
    1510:	88 81       	ld	r24, Y
    1512:	99 81       	ldd	r25, Y+1	; 0x01
    1514:	cc 53       	subi	r28, 0x3C	; 60
    1516:	d1 40       	sbci	r29, 0x01	; 1
    1518:	01 96       	adiw	r24, 0x01	; 1
    151a:	c4 5c       	subi	r28, 0xC4	; 196
    151c:	de 4f       	sbci	r29, 0xFE	; 254
    151e:	99 83       	std	Y+1, r25	; 0x01
    1520:	88 83       	st	Y, r24
    1522:	cc 53       	subi	r28, 0x3C	; 60
    1524:	d1 40       	sbci	r29, 0x01	; 1
    1526:	c0 5c       	subi	r28, 0xC0	; 192
    1528:	de 4f       	sbci	r29, 0xFE	; 254
    152a:	98 81       	ld	r25, Y
    152c:	c0 54       	subi	r28, 0x40	; 64
    152e:	d1 40       	sbci	r29, 0x01	; 1
    1530:	91 50       	subi	r25, 0x01	; 1
    1532:	c0 5c       	subi	r28, 0xC0	; 192
    1534:	de 4f       	sbci	r29, 0xFE	; 254
    1536:	98 83       	st	Y, r25
    1538:	c0 54       	subi	r28, 0x40	; 64
    153a:	d1 40       	sbci	r29, 0x01	; 1
    153c:	c0 5c       	subi	r28, 0xC0	; 192
    153e:	de 4f       	sbci	r29, 0xFE	; 254
    1540:	e8 81       	ld	r30, Y
    1542:	c0 54       	subi	r28, 0x40	; 64
    1544:	d1 40       	sbci	r29, 0x01	; 1
    1546:	ee 23       	and	r30, r30
    1548:	31 f6       	brne	.-116    	; 0x14d6 <CLCD_voidHamoksha+0x18c>
	                                         0b00011111,
	                                         0b00010101,
	                                         0b00000100,
	                                         0b00000100
	                                        ,0b00001010,
	                                         0b00001010,0};
    154a:	ce 01       	movw	r24, r28
    154c:	86 50       	subi	r24, 0x06	; 6
    154e:	9f 4f       	sbci	r25, 0xFF	; 255
    1550:	cf 5b       	subi	r28, 0xBF	; 191
    1552:	de 4f       	sbci	r29, 0xFE	; 254
    1554:	99 83       	std	Y+1, r25	; 0x01
    1556:	88 83       	st	Y, r24
    1558:	c1 54       	subi	r28, 0x41	; 65
    155a:	d1 40       	sbci	r29, 0x01	; 1
    155c:	80 e1       	ldi	r24, 0x10	; 16
    155e:	91 e0       	ldi	r25, 0x01	; 1
    1560:	cd 5b       	subi	r28, 0xBD	; 189
    1562:	de 4f       	sbci	r29, 0xFE	; 254
    1564:	99 83       	std	Y+1, r25	; 0x01
    1566:	88 83       	st	Y, r24
    1568:	c3 54       	subi	r28, 0x43	; 67
    156a:	d1 40       	sbci	r29, 0x01	; 1
    156c:	98 e0       	ldi	r25, 0x08	; 8
    156e:	cb 5b       	subi	r28, 0xBB	; 187
    1570:	de 4f       	sbci	r29, 0xFE	; 254
    1572:	98 83       	st	Y, r25
    1574:	c5 54       	subi	r28, 0x45	; 69
    1576:	d1 40       	sbci	r29, 0x01	; 1
    1578:	cd 5b       	subi	r28, 0xBD	; 189
    157a:	de 4f       	sbci	r29, 0xFE	; 254
    157c:	e8 81       	ld	r30, Y
    157e:	f9 81       	ldd	r31, Y+1	; 0x01
    1580:	c3 54       	subi	r28, 0x43	; 67
    1582:	d1 40       	sbci	r29, 0x01	; 1
    1584:	00 80       	ld	r0, Z
    1586:	cd 5b       	subi	r28, 0xBD	; 189
    1588:	de 4f       	sbci	r29, 0xFE	; 254
    158a:	88 81       	ld	r24, Y
    158c:	99 81       	ldd	r25, Y+1	; 0x01
    158e:	c3 54       	subi	r28, 0x43	; 67
    1590:	d1 40       	sbci	r29, 0x01	; 1
    1592:	01 96       	adiw	r24, 0x01	; 1
    1594:	cd 5b       	subi	r28, 0xBD	; 189
    1596:	de 4f       	sbci	r29, 0xFE	; 254
    1598:	99 83       	std	Y+1, r25	; 0x01
    159a:	88 83       	st	Y, r24
    159c:	c3 54       	subi	r28, 0x43	; 67
    159e:	d1 40       	sbci	r29, 0x01	; 1
    15a0:	cf 5b       	subi	r28, 0xBF	; 191
    15a2:	de 4f       	sbci	r29, 0xFE	; 254
    15a4:	e8 81       	ld	r30, Y
    15a6:	f9 81       	ldd	r31, Y+1	; 0x01
    15a8:	c1 54       	subi	r28, 0x41	; 65
    15aa:	d1 40       	sbci	r29, 0x01	; 1
    15ac:	00 82       	st	Z, r0
    15ae:	cf 5b       	subi	r28, 0xBF	; 191
    15b0:	de 4f       	sbci	r29, 0xFE	; 254
    15b2:	88 81       	ld	r24, Y
    15b4:	99 81       	ldd	r25, Y+1	; 0x01
    15b6:	c1 54       	subi	r28, 0x41	; 65
    15b8:	d1 40       	sbci	r29, 0x01	; 1
    15ba:	01 96       	adiw	r24, 0x01	; 1
    15bc:	cf 5b       	subi	r28, 0xBF	; 191
    15be:	de 4f       	sbci	r29, 0xFE	; 254
    15c0:	99 83       	std	Y+1, r25	; 0x01
    15c2:	88 83       	st	Y, r24
    15c4:	c1 54       	subi	r28, 0x41	; 65
    15c6:	d1 40       	sbci	r29, 0x01	; 1
    15c8:	cb 5b       	subi	r28, 0xBB	; 187
    15ca:	de 4f       	sbci	r29, 0xFE	; 254
    15cc:	98 81       	ld	r25, Y
    15ce:	c5 54       	subi	r28, 0x45	; 69
    15d0:	d1 40       	sbci	r29, 0x01	; 1
    15d2:	91 50       	subi	r25, 0x01	; 1
    15d4:	cb 5b       	subi	r28, 0xBB	; 187
    15d6:	de 4f       	sbci	r29, 0xFE	; 254
    15d8:	98 83       	st	Y, r25
    15da:	c5 54       	subi	r28, 0x45	; 69
    15dc:	d1 40       	sbci	r29, 0x01	; 1
    15de:	cb 5b       	subi	r28, 0xBB	; 187
    15e0:	de 4f       	sbci	r29, 0xFE	; 254
    15e2:	e8 81       	ld	r30, Y
    15e4:	c5 54       	subi	r28, 0x45	; 69
    15e6:	d1 40       	sbci	r29, 0x01	; 1
    15e8:	ee 23       	and	r30, r30
    15ea:	31 f6       	brne	.-116    	; 0x1578 <CLCD_voidHamoksha+0x22e>
                                         0b00001110,
                                         0b00000100,
                                         0b00000100,
                                         0b00000100
                                        ,0b00001010,
                                         0b00001010,0};
    15ec:	ce 01       	movw	r24, r28
    15ee:	8e 5f       	subi	r24, 0xFE	; 254
    15f0:	9e 4f       	sbci	r25, 0xFE	; 254
    15f2:	ca 5b       	subi	r28, 0xBA	; 186
    15f4:	de 4f       	sbci	r29, 0xFE	; 254
    15f6:	99 83       	std	Y+1, r25	; 0x01
    15f8:	88 83       	st	Y, r24
    15fa:	c6 54       	subi	r28, 0x46	; 70
    15fc:	d1 40       	sbci	r29, 0x01	; 1
    15fe:	88 e0       	ldi	r24, 0x08	; 8
    1600:	91 e0       	ldi	r25, 0x01	; 1
    1602:	c8 5b       	subi	r28, 0xB8	; 184
    1604:	de 4f       	sbci	r29, 0xFE	; 254
    1606:	99 83       	std	Y+1, r25	; 0x01
    1608:	88 83       	st	Y, r24
    160a:	c8 54       	subi	r28, 0x48	; 72
    160c:	d1 40       	sbci	r29, 0x01	; 1
    160e:	98 e0       	ldi	r25, 0x08	; 8
    1610:	c6 5b       	subi	r28, 0xB6	; 182
    1612:	de 4f       	sbci	r29, 0xFE	; 254
    1614:	98 83       	st	Y, r25
    1616:	ca 54       	subi	r28, 0x4A	; 74
    1618:	d1 40       	sbci	r29, 0x01	; 1
    161a:	c8 5b       	subi	r28, 0xB8	; 184
    161c:	de 4f       	sbci	r29, 0xFE	; 254
    161e:	e8 81       	ld	r30, Y
    1620:	f9 81       	ldd	r31, Y+1	; 0x01
    1622:	c8 54       	subi	r28, 0x48	; 72
    1624:	d1 40       	sbci	r29, 0x01	; 1
    1626:	00 80       	ld	r0, Z
    1628:	c8 5b       	subi	r28, 0xB8	; 184
    162a:	de 4f       	sbci	r29, 0xFE	; 254
    162c:	88 81       	ld	r24, Y
    162e:	99 81       	ldd	r25, Y+1	; 0x01
    1630:	c8 54       	subi	r28, 0x48	; 72
    1632:	d1 40       	sbci	r29, 0x01	; 1
    1634:	01 96       	adiw	r24, 0x01	; 1
    1636:	c8 5b       	subi	r28, 0xB8	; 184
    1638:	de 4f       	sbci	r29, 0xFE	; 254
    163a:	99 83       	std	Y+1, r25	; 0x01
    163c:	88 83       	st	Y, r24
    163e:	c8 54       	subi	r28, 0x48	; 72
    1640:	d1 40       	sbci	r29, 0x01	; 1
    1642:	ca 5b       	subi	r28, 0xBA	; 186
    1644:	de 4f       	sbci	r29, 0xFE	; 254
    1646:	e8 81       	ld	r30, Y
    1648:	f9 81       	ldd	r31, Y+1	; 0x01
    164a:	c6 54       	subi	r28, 0x46	; 70
    164c:	d1 40       	sbci	r29, 0x01	; 1
    164e:	00 82       	st	Z, r0
    1650:	ca 5b       	subi	r28, 0xBA	; 186
    1652:	de 4f       	sbci	r29, 0xFE	; 254
    1654:	88 81       	ld	r24, Y
    1656:	99 81       	ldd	r25, Y+1	; 0x01
    1658:	c6 54       	subi	r28, 0x46	; 70
    165a:	d1 40       	sbci	r29, 0x01	; 1
    165c:	01 96       	adiw	r24, 0x01	; 1
    165e:	ca 5b       	subi	r28, 0xBA	; 186
    1660:	de 4f       	sbci	r29, 0xFE	; 254
    1662:	99 83       	std	Y+1, r25	; 0x01
    1664:	88 83       	st	Y, r24
    1666:	c6 54       	subi	r28, 0x46	; 70
    1668:	d1 40       	sbci	r29, 0x01	; 1
    166a:	c6 5b       	subi	r28, 0xB6	; 182
    166c:	de 4f       	sbci	r29, 0xFE	; 254
    166e:	98 81       	ld	r25, Y
    1670:	ca 54       	subi	r28, 0x4A	; 74
    1672:	d1 40       	sbci	r29, 0x01	; 1
    1674:	91 50       	subi	r25, 0x01	; 1
    1676:	c6 5b       	subi	r28, 0xB6	; 182
    1678:	de 4f       	sbci	r29, 0xFE	; 254
    167a:	98 83       	st	Y, r25
    167c:	ca 54       	subi	r28, 0x4A	; 74
    167e:	d1 40       	sbci	r29, 0x01	; 1
    1680:	c6 5b       	subi	r28, 0xB6	; 182
    1682:	de 4f       	sbci	r29, 0xFE	; 254
    1684:	e8 81       	ld	r30, Y
    1686:	ca 54       	subi	r28, 0x4A	; 74
    1688:	d1 40       	sbci	r29, 0x01	; 1
    168a:	ee 23       	and	r30, r30
    168c:	31 f6       	brne	.-116    	; 0x161a <CLCD_voidHamoksha+0x2d0>
                                         0b00001110,
                                         0b00000100,
                                         0b00000100,
                                         0b00000100
                                        ,0b00001001,
                                         0b00001001,0};
    168e:	ce 01       	movw	r24, r28
    1690:	86 5f       	subi	r24, 0xF6	; 246
    1692:	9e 4f       	sbci	r25, 0xFE	; 254
    1694:	c5 5b       	subi	r28, 0xB5	; 181
    1696:	de 4f       	sbci	r29, 0xFE	; 254
    1698:	99 83       	std	Y+1, r25	; 0x01
    169a:	88 83       	st	Y, r24
    169c:	cb 54       	subi	r28, 0x4B	; 75
    169e:	d1 40       	sbci	r29, 0x01	; 1
    16a0:	80 e0       	ldi	r24, 0x00	; 0
    16a2:	91 e0       	ldi	r25, 0x01	; 1
    16a4:	c3 5b       	subi	r28, 0xB3	; 179
    16a6:	de 4f       	sbci	r29, 0xFE	; 254
    16a8:	99 83       	std	Y+1, r25	; 0x01
    16aa:	88 83       	st	Y, r24
    16ac:	cd 54       	subi	r28, 0x4D	; 77
    16ae:	d1 40       	sbci	r29, 0x01	; 1
    16b0:	98 e0       	ldi	r25, 0x08	; 8
    16b2:	c1 5b       	subi	r28, 0xB1	; 177
    16b4:	de 4f       	sbci	r29, 0xFE	; 254
    16b6:	98 83       	st	Y, r25
    16b8:	cf 54       	subi	r28, 0x4F	; 79
    16ba:	d1 40       	sbci	r29, 0x01	; 1
    16bc:	c3 5b       	subi	r28, 0xB3	; 179
    16be:	de 4f       	sbci	r29, 0xFE	; 254
    16c0:	e8 81       	ld	r30, Y
    16c2:	f9 81       	ldd	r31, Y+1	; 0x01
    16c4:	cd 54       	subi	r28, 0x4D	; 77
    16c6:	d1 40       	sbci	r29, 0x01	; 1
    16c8:	00 80       	ld	r0, Z
    16ca:	c3 5b       	subi	r28, 0xB3	; 179
    16cc:	de 4f       	sbci	r29, 0xFE	; 254
    16ce:	88 81       	ld	r24, Y
    16d0:	99 81       	ldd	r25, Y+1	; 0x01
    16d2:	cd 54       	subi	r28, 0x4D	; 77
    16d4:	d1 40       	sbci	r29, 0x01	; 1
    16d6:	01 96       	adiw	r24, 0x01	; 1
    16d8:	c3 5b       	subi	r28, 0xB3	; 179
    16da:	de 4f       	sbci	r29, 0xFE	; 254
    16dc:	99 83       	std	Y+1, r25	; 0x01
    16de:	88 83       	st	Y, r24
    16e0:	cd 54       	subi	r28, 0x4D	; 77
    16e2:	d1 40       	sbci	r29, 0x01	; 1
    16e4:	c5 5b       	subi	r28, 0xB5	; 181
    16e6:	de 4f       	sbci	r29, 0xFE	; 254
    16e8:	e8 81       	ld	r30, Y
    16ea:	f9 81       	ldd	r31, Y+1	; 0x01
    16ec:	cb 54       	subi	r28, 0x4B	; 75
    16ee:	d1 40       	sbci	r29, 0x01	; 1
    16f0:	00 82       	st	Z, r0
    16f2:	c5 5b       	subi	r28, 0xB5	; 181
    16f4:	de 4f       	sbci	r29, 0xFE	; 254
    16f6:	88 81       	ld	r24, Y
    16f8:	99 81       	ldd	r25, Y+1	; 0x01
    16fa:	cb 54       	subi	r28, 0x4B	; 75
    16fc:	d1 40       	sbci	r29, 0x01	; 1
    16fe:	01 96       	adiw	r24, 0x01	; 1
    1700:	c5 5b       	subi	r28, 0xB5	; 181
    1702:	de 4f       	sbci	r29, 0xFE	; 254
    1704:	99 83       	std	Y+1, r25	; 0x01
    1706:	88 83       	st	Y, r24
    1708:	cb 54       	subi	r28, 0x4B	; 75
    170a:	d1 40       	sbci	r29, 0x01	; 1
    170c:	c1 5b       	subi	r28, 0xB1	; 177
    170e:	de 4f       	sbci	r29, 0xFE	; 254
    1710:	98 81       	ld	r25, Y
    1712:	cf 54       	subi	r28, 0x4F	; 79
    1714:	d1 40       	sbci	r29, 0x01	; 1
    1716:	91 50       	subi	r25, 0x01	; 1
    1718:	c1 5b       	subi	r28, 0xB1	; 177
    171a:	de 4f       	sbci	r29, 0xFE	; 254
    171c:	98 83       	st	Y, r25
    171e:	cf 54       	subi	r28, 0x4F	; 79
    1720:	d1 40       	sbci	r29, 0x01	; 1
    1722:	c1 5b       	subi	r28, 0xB1	; 177
    1724:	de 4f       	sbci	r29, 0xFE	; 254
    1726:	e8 81       	ld	r30, Y
    1728:	cf 54       	subi	r28, 0x4F	; 79
    172a:	d1 40       	sbci	r29, 0x01	; 1
    172c:	ee 23       	and	r30, r30
    172e:	31 f6       	brne	.-116    	; 0x16bc <CLCD_voidHamoksha+0x372>
	                                         0b00001110,
	                                         0b00000100,
	                                         0b00000101,
	                                         0b00000101
	                                        ,0b00001010,
	                                         0b00001000,0};
    1730:	ce 01       	movw	r24, r28
    1732:	8e 5e       	subi	r24, 0xEE	; 238
    1734:	9e 4f       	sbci	r25, 0xFE	; 254
    1736:	c0 5b       	subi	r28, 0xB0	; 176
    1738:	de 4f       	sbci	r29, 0xFE	; 254
    173a:	99 83       	std	Y+1, r25	; 0x01
    173c:	88 83       	st	Y, r24
    173e:	c0 55       	subi	r28, 0x50	; 80
    1740:	d1 40       	sbci	r29, 0x01	; 1
    1742:	88 ef       	ldi	r24, 0xF8	; 248
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	ce 5a       	subi	r28, 0xAE	; 174
    1748:	de 4f       	sbci	r29, 0xFE	; 254
    174a:	99 83       	std	Y+1, r25	; 0x01
    174c:	88 83       	st	Y, r24
    174e:	c2 55       	subi	r28, 0x52	; 82
    1750:	d1 40       	sbci	r29, 0x01	; 1
    1752:	98 e0       	ldi	r25, 0x08	; 8
    1754:	cc 5a       	subi	r28, 0xAC	; 172
    1756:	de 4f       	sbci	r29, 0xFE	; 254
    1758:	98 83       	st	Y, r25
    175a:	c4 55       	subi	r28, 0x54	; 84
    175c:	d1 40       	sbci	r29, 0x01	; 1
    175e:	ce 5a       	subi	r28, 0xAE	; 174
    1760:	de 4f       	sbci	r29, 0xFE	; 254
    1762:	e8 81       	ld	r30, Y
    1764:	f9 81       	ldd	r31, Y+1	; 0x01
    1766:	c2 55       	subi	r28, 0x52	; 82
    1768:	d1 40       	sbci	r29, 0x01	; 1
    176a:	00 80       	ld	r0, Z
    176c:	ce 5a       	subi	r28, 0xAE	; 174
    176e:	de 4f       	sbci	r29, 0xFE	; 254
    1770:	88 81       	ld	r24, Y
    1772:	99 81       	ldd	r25, Y+1	; 0x01
    1774:	c2 55       	subi	r28, 0x52	; 82
    1776:	d1 40       	sbci	r29, 0x01	; 1
    1778:	01 96       	adiw	r24, 0x01	; 1
    177a:	ce 5a       	subi	r28, 0xAE	; 174
    177c:	de 4f       	sbci	r29, 0xFE	; 254
    177e:	99 83       	std	Y+1, r25	; 0x01
    1780:	88 83       	st	Y, r24
    1782:	c2 55       	subi	r28, 0x52	; 82
    1784:	d1 40       	sbci	r29, 0x01	; 1
    1786:	c0 5b       	subi	r28, 0xB0	; 176
    1788:	de 4f       	sbci	r29, 0xFE	; 254
    178a:	e8 81       	ld	r30, Y
    178c:	f9 81       	ldd	r31, Y+1	; 0x01
    178e:	c0 55       	subi	r28, 0x50	; 80
    1790:	d1 40       	sbci	r29, 0x01	; 1
    1792:	00 82       	st	Z, r0
    1794:	c0 5b       	subi	r28, 0xB0	; 176
    1796:	de 4f       	sbci	r29, 0xFE	; 254
    1798:	88 81       	ld	r24, Y
    179a:	99 81       	ldd	r25, Y+1	; 0x01
    179c:	c0 55       	subi	r28, 0x50	; 80
    179e:	d1 40       	sbci	r29, 0x01	; 1
    17a0:	01 96       	adiw	r24, 0x01	; 1
    17a2:	c0 5b       	subi	r28, 0xB0	; 176
    17a4:	de 4f       	sbci	r29, 0xFE	; 254
    17a6:	99 83       	std	Y+1, r25	; 0x01
    17a8:	88 83       	st	Y, r24
    17aa:	c0 55       	subi	r28, 0x50	; 80
    17ac:	d1 40       	sbci	r29, 0x01	; 1
    17ae:	cc 5a       	subi	r28, 0xAC	; 172
    17b0:	de 4f       	sbci	r29, 0xFE	; 254
    17b2:	98 81       	ld	r25, Y
    17b4:	c4 55       	subi	r28, 0x54	; 84
    17b6:	d1 40       	sbci	r29, 0x01	; 1
    17b8:	91 50       	subi	r25, 0x01	; 1
    17ba:	cc 5a       	subi	r28, 0xAC	; 172
    17bc:	de 4f       	sbci	r29, 0xFE	; 254
    17be:	98 83       	st	Y, r25
    17c0:	c4 55       	subi	r28, 0x54	; 84
    17c2:	d1 40       	sbci	r29, 0x01	; 1
    17c4:	cc 5a       	subi	r28, 0xAC	; 172
    17c6:	de 4f       	sbci	r29, 0xFE	; 254
    17c8:	e8 81       	ld	r30, Y
    17ca:	c4 55       	subi	r28, 0x54	; 84
    17cc:	d1 40       	sbci	r29, 0x01	; 1
    17ce:	ee 23       	and	r30, r30
    17d0:	31 f6       	brne	.-116    	; 0x175e <CLCD_voidHamoksha+0x414>
            0b00011111,
            0b00011111,
            0b00011111,
            0b00011111
           ,0b00011111,
            0b00011111,0};
    17d2:	ce 01       	movw	r24, r28
    17d4:	86 5e       	subi	r24, 0xE6	; 230
    17d6:	9e 4f       	sbci	r25, 0xFE	; 254
    17d8:	cb 5a       	subi	r28, 0xAB	; 171
    17da:	de 4f       	sbci	r29, 0xFE	; 254
    17dc:	99 83       	std	Y+1, r25	; 0x01
    17de:	88 83       	st	Y, r24
    17e0:	c5 55       	subi	r28, 0x55	; 85
    17e2:	d1 40       	sbci	r29, 0x01	; 1
    17e4:	80 ef       	ldi	r24, 0xF0	; 240
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	c9 5a       	subi	r28, 0xA9	; 169
    17ea:	de 4f       	sbci	r29, 0xFE	; 254
    17ec:	99 83       	std	Y+1, r25	; 0x01
    17ee:	88 83       	st	Y, r24
    17f0:	c7 55       	subi	r28, 0x57	; 87
    17f2:	d1 40       	sbci	r29, 0x01	; 1
    17f4:	98 e0       	ldi	r25, 0x08	; 8
    17f6:	c7 5a       	subi	r28, 0xA7	; 167
    17f8:	de 4f       	sbci	r29, 0xFE	; 254
    17fa:	98 83       	st	Y, r25
    17fc:	c9 55       	subi	r28, 0x59	; 89
    17fe:	d1 40       	sbci	r29, 0x01	; 1
    1800:	c9 5a       	subi	r28, 0xA9	; 169
    1802:	de 4f       	sbci	r29, 0xFE	; 254
    1804:	e8 81       	ld	r30, Y
    1806:	f9 81       	ldd	r31, Y+1	; 0x01
    1808:	c7 55       	subi	r28, 0x57	; 87
    180a:	d1 40       	sbci	r29, 0x01	; 1
    180c:	00 80       	ld	r0, Z
    180e:	c9 5a       	subi	r28, 0xA9	; 169
    1810:	de 4f       	sbci	r29, 0xFE	; 254
    1812:	88 81       	ld	r24, Y
    1814:	99 81       	ldd	r25, Y+1	; 0x01
    1816:	c7 55       	subi	r28, 0x57	; 87
    1818:	d1 40       	sbci	r29, 0x01	; 1
    181a:	01 96       	adiw	r24, 0x01	; 1
    181c:	c9 5a       	subi	r28, 0xA9	; 169
    181e:	de 4f       	sbci	r29, 0xFE	; 254
    1820:	99 83       	std	Y+1, r25	; 0x01
    1822:	88 83       	st	Y, r24
    1824:	c7 55       	subi	r28, 0x57	; 87
    1826:	d1 40       	sbci	r29, 0x01	; 1
    1828:	cb 5a       	subi	r28, 0xAB	; 171
    182a:	de 4f       	sbci	r29, 0xFE	; 254
    182c:	e8 81       	ld	r30, Y
    182e:	f9 81       	ldd	r31, Y+1	; 0x01
    1830:	c5 55       	subi	r28, 0x55	; 85
    1832:	d1 40       	sbci	r29, 0x01	; 1
    1834:	00 82       	st	Z, r0
    1836:	cb 5a       	subi	r28, 0xAB	; 171
    1838:	de 4f       	sbci	r29, 0xFE	; 254
    183a:	88 81       	ld	r24, Y
    183c:	99 81       	ldd	r25, Y+1	; 0x01
    183e:	c5 55       	subi	r28, 0x55	; 85
    1840:	d1 40       	sbci	r29, 0x01	; 1
    1842:	01 96       	adiw	r24, 0x01	; 1
    1844:	cb 5a       	subi	r28, 0xAB	; 171
    1846:	de 4f       	sbci	r29, 0xFE	; 254
    1848:	99 83       	std	Y+1, r25	; 0x01
    184a:	88 83       	st	Y, r24
    184c:	c5 55       	subi	r28, 0x55	; 85
    184e:	d1 40       	sbci	r29, 0x01	; 1
    1850:	c7 5a       	subi	r28, 0xA7	; 167
    1852:	de 4f       	sbci	r29, 0xFE	; 254
    1854:	98 81       	ld	r25, Y
    1856:	c9 55       	subi	r28, 0x59	; 89
    1858:	d1 40       	sbci	r29, 0x01	; 1
    185a:	91 50       	subi	r25, 0x01	; 1
    185c:	c7 5a       	subi	r28, 0xA7	; 167
    185e:	de 4f       	sbci	r29, 0xFE	; 254
    1860:	98 83       	st	Y, r25
    1862:	c9 55       	subi	r28, 0x59	; 89
    1864:	d1 40       	sbci	r29, 0x01	; 1
    1866:	c7 5a       	subi	r28, 0xA7	; 167
    1868:	de 4f       	sbci	r29, 0xFE	; 254
    186a:	e8 81       	ld	r30, Y
    186c:	c9 55       	subi	r28, 0x59	; 89
    186e:	d1 40       	sbci	r29, 0x01	; 1
    1870:	ee 23       	and	r30, r30
    1872:	31 f6       	brne	.-116    	; 0x1800 <CLCD_voidHamoksha+0x4b6>
	            0b00011111,
	            0b00011111,
	            0b00011111,
	            0b00000000
	           ,0b00000000,
	            0b00000000,0};
    1874:	ce 01       	movw	r24, r28
    1876:	8e 5d       	subi	r24, 0xDE	; 222
    1878:	9e 4f       	sbci	r25, 0xFE	; 254
    187a:	c6 5a       	subi	r28, 0xA6	; 166
    187c:	de 4f       	sbci	r29, 0xFE	; 254
    187e:	99 83       	std	Y+1, r25	; 0x01
    1880:	88 83       	st	Y, r24
    1882:	ca 55       	subi	r28, 0x5A	; 90
    1884:	d1 40       	sbci	r29, 0x01	; 1
    1886:	88 ee       	ldi	r24, 0xE8	; 232
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	c4 5a       	subi	r28, 0xA4	; 164
    188c:	de 4f       	sbci	r29, 0xFE	; 254
    188e:	99 83       	std	Y+1, r25	; 0x01
    1890:	88 83       	st	Y, r24
    1892:	cc 55       	subi	r28, 0x5C	; 92
    1894:	d1 40       	sbci	r29, 0x01	; 1
    1896:	98 e0       	ldi	r25, 0x08	; 8
    1898:	c2 5a       	subi	r28, 0xA2	; 162
    189a:	de 4f       	sbci	r29, 0xFE	; 254
    189c:	98 83       	st	Y, r25
    189e:	ce 55       	subi	r28, 0x5E	; 94
    18a0:	d1 40       	sbci	r29, 0x01	; 1
    18a2:	c4 5a       	subi	r28, 0xA4	; 164
    18a4:	de 4f       	sbci	r29, 0xFE	; 254
    18a6:	e8 81       	ld	r30, Y
    18a8:	f9 81       	ldd	r31, Y+1	; 0x01
    18aa:	cc 55       	subi	r28, 0x5C	; 92
    18ac:	d1 40       	sbci	r29, 0x01	; 1
    18ae:	00 80       	ld	r0, Z
    18b0:	c4 5a       	subi	r28, 0xA4	; 164
    18b2:	de 4f       	sbci	r29, 0xFE	; 254
    18b4:	88 81       	ld	r24, Y
    18b6:	99 81       	ldd	r25, Y+1	; 0x01
    18b8:	cc 55       	subi	r28, 0x5C	; 92
    18ba:	d1 40       	sbci	r29, 0x01	; 1
    18bc:	01 96       	adiw	r24, 0x01	; 1
    18be:	c4 5a       	subi	r28, 0xA4	; 164
    18c0:	de 4f       	sbci	r29, 0xFE	; 254
    18c2:	99 83       	std	Y+1, r25	; 0x01
    18c4:	88 83       	st	Y, r24
    18c6:	cc 55       	subi	r28, 0x5C	; 92
    18c8:	d1 40       	sbci	r29, 0x01	; 1
    18ca:	c6 5a       	subi	r28, 0xA6	; 166
    18cc:	de 4f       	sbci	r29, 0xFE	; 254
    18ce:	e8 81       	ld	r30, Y
    18d0:	f9 81       	ldd	r31, Y+1	; 0x01
    18d2:	ca 55       	subi	r28, 0x5A	; 90
    18d4:	d1 40       	sbci	r29, 0x01	; 1
    18d6:	00 82       	st	Z, r0
    18d8:	c6 5a       	subi	r28, 0xA6	; 166
    18da:	de 4f       	sbci	r29, 0xFE	; 254
    18dc:	88 81       	ld	r24, Y
    18de:	99 81       	ldd	r25, Y+1	; 0x01
    18e0:	ca 55       	subi	r28, 0x5A	; 90
    18e2:	d1 40       	sbci	r29, 0x01	; 1
    18e4:	01 96       	adiw	r24, 0x01	; 1
    18e6:	c6 5a       	subi	r28, 0xA6	; 166
    18e8:	de 4f       	sbci	r29, 0xFE	; 254
    18ea:	99 83       	std	Y+1, r25	; 0x01
    18ec:	88 83       	st	Y, r24
    18ee:	ca 55       	subi	r28, 0x5A	; 90
    18f0:	d1 40       	sbci	r29, 0x01	; 1
    18f2:	c2 5a       	subi	r28, 0xA2	; 162
    18f4:	de 4f       	sbci	r29, 0xFE	; 254
    18f6:	98 81       	ld	r25, Y
    18f8:	ce 55       	subi	r28, 0x5E	; 94
    18fa:	d1 40       	sbci	r29, 0x01	; 1
    18fc:	91 50       	subi	r25, 0x01	; 1
    18fe:	c2 5a       	subi	r28, 0xA2	; 162
    1900:	de 4f       	sbci	r29, 0xFE	; 254
    1902:	98 83       	st	Y, r25
    1904:	ce 55       	subi	r28, 0x5E	; 94
    1906:	d1 40       	sbci	r29, 0x01	; 1
    1908:	c2 5a       	subi	r28, 0xA2	; 162
    190a:	de 4f       	sbci	r29, 0xFE	; 254
    190c:	e8 81       	ld	r30, Y
    190e:	ce 55       	subi	r28, 0x5E	; 94
    1910:	d1 40       	sbci	r29, 0x01	; 1
    1912:	ee 23       	and	r30, r30
    1914:	31 f6       	brne	.-116    	; 0x18a2 <CLCD_voidHamoksha+0x558>
                                   0b00001110,
                                   0b00001110,
                                   0b00000000,
                                   0b00000000
                                  ,0b00000000,
                                   0b00000000,0};
    1916:	ce 01       	movw	r24, r28
    1918:	86 5d       	subi	r24, 0xD6	; 214
    191a:	9e 4f       	sbci	r25, 0xFE	; 254
    191c:	c1 5a       	subi	r28, 0xA1	; 161
    191e:	de 4f       	sbci	r29, 0xFE	; 254
    1920:	99 83       	std	Y+1, r25	; 0x01
    1922:	88 83       	st	Y, r24
    1924:	cf 55       	subi	r28, 0x5F	; 95
    1926:	d1 40       	sbci	r29, 0x01	; 1
    1928:	80 ee       	ldi	r24, 0xE0	; 224
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	cf 59       	subi	r28, 0x9F	; 159
    192e:	de 4f       	sbci	r29, 0xFE	; 254
    1930:	99 83       	std	Y+1, r25	; 0x01
    1932:	88 83       	st	Y, r24
    1934:	c1 56       	subi	r28, 0x61	; 97
    1936:	d1 40       	sbci	r29, 0x01	; 1
    1938:	98 e0       	ldi	r25, 0x08	; 8
    193a:	cd 59       	subi	r28, 0x9D	; 157
    193c:	de 4f       	sbci	r29, 0xFE	; 254
    193e:	98 83       	st	Y, r25
    1940:	c3 56       	subi	r28, 0x63	; 99
    1942:	d1 40       	sbci	r29, 0x01	; 1
    1944:	cf 59       	subi	r28, 0x9F	; 159
    1946:	de 4f       	sbci	r29, 0xFE	; 254
    1948:	e8 81       	ld	r30, Y
    194a:	f9 81       	ldd	r31, Y+1	; 0x01
    194c:	c1 56       	subi	r28, 0x61	; 97
    194e:	d1 40       	sbci	r29, 0x01	; 1
    1950:	00 80       	ld	r0, Z
    1952:	cf 59       	subi	r28, 0x9F	; 159
    1954:	de 4f       	sbci	r29, 0xFE	; 254
    1956:	88 81       	ld	r24, Y
    1958:	99 81       	ldd	r25, Y+1	; 0x01
    195a:	c1 56       	subi	r28, 0x61	; 97
    195c:	d1 40       	sbci	r29, 0x01	; 1
    195e:	01 96       	adiw	r24, 0x01	; 1
    1960:	cf 59       	subi	r28, 0x9F	; 159
    1962:	de 4f       	sbci	r29, 0xFE	; 254
    1964:	99 83       	std	Y+1, r25	; 0x01
    1966:	88 83       	st	Y, r24
    1968:	c1 56       	subi	r28, 0x61	; 97
    196a:	d1 40       	sbci	r29, 0x01	; 1
    196c:	c1 5a       	subi	r28, 0xA1	; 161
    196e:	de 4f       	sbci	r29, 0xFE	; 254
    1970:	e8 81       	ld	r30, Y
    1972:	f9 81       	ldd	r31, Y+1	; 0x01
    1974:	cf 55       	subi	r28, 0x5F	; 95
    1976:	d1 40       	sbci	r29, 0x01	; 1
    1978:	00 82       	st	Z, r0
    197a:	c1 5a       	subi	r28, 0xA1	; 161
    197c:	de 4f       	sbci	r29, 0xFE	; 254
    197e:	88 81       	ld	r24, Y
    1980:	99 81       	ldd	r25, Y+1	; 0x01
    1982:	cf 55       	subi	r28, 0x5F	; 95
    1984:	d1 40       	sbci	r29, 0x01	; 1
    1986:	01 96       	adiw	r24, 0x01	; 1
    1988:	c1 5a       	subi	r28, 0xA1	; 161
    198a:	de 4f       	sbci	r29, 0xFE	; 254
    198c:	99 83       	std	Y+1, r25	; 0x01
    198e:	88 83       	st	Y, r24
    1990:	cf 55       	subi	r28, 0x5F	; 95
    1992:	d1 40       	sbci	r29, 0x01	; 1
    1994:	cd 59       	subi	r28, 0x9D	; 157
    1996:	de 4f       	sbci	r29, 0xFE	; 254
    1998:	98 81       	ld	r25, Y
    199a:	c3 56       	subi	r28, 0x63	; 99
    199c:	d1 40       	sbci	r29, 0x01	; 1
    199e:	91 50       	subi	r25, 0x01	; 1
    19a0:	cd 59       	subi	r28, 0x9D	; 157
    19a2:	de 4f       	sbci	r29, 0xFE	; 254
    19a4:	98 83       	st	Y, r25
    19a6:	c3 56       	subi	r28, 0x63	; 99
    19a8:	d1 40       	sbci	r29, 0x01	; 1
    19aa:	cd 59       	subi	r28, 0x9D	; 157
    19ac:	de 4f       	sbci	r29, 0xFE	; 254
    19ae:	e8 81       	ld	r30, Y
    19b0:	c3 56       	subi	r28, 0x63	; 99
    19b2:	d1 40       	sbci	r29, 0x01	; 1
    19b4:	ee 23       	and	r30, r30
    19b6:	31 f6       	brne	.-116    	; 0x1944 <CLCD_voidHamoksha+0x5fa>





CLCD_voidClear();
    19b8:	0e 94 9b 09 	call	0x1336	; 0x1336 <CLCD_voidClear>
	CLCD_VoidGoToXY(0,0);
    19bc:	80 e0       	ldi	r24, 0x00	; 0
    19be:	60 e0       	ldi	r22, 0x00	; 0
    19c0:	0e 94 2f 09 	call	0x125e	; 0x125e <CLCD_VoidGoToXY>
	CLCD_u8SendString("HI I AM HAMOKSHA");
    19c4:	80 e6       	ldi	r24, 0x60	; 96
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	0e 94 70 08 	call	0x10e0	; 0x10e0 <CLCD_u8SendString>

	CLCD_u8SpecialCharacter(0,Local_u8HamokshaPattern1,7,1);
    19cc:	9e 01       	movw	r18, r28
    19ce:	26 51       	subi	r18, 0x16	; 22
    19d0:	3f 4f       	sbci	r19, 0xFF	; 255
    19d2:	80 e0       	ldi	r24, 0x00	; 0
    19d4:	b9 01       	movw	r22, r18
    19d6:	47 e0       	ldi	r20, 0x07	; 7
    19d8:	21 e0       	ldi	r18, 0x01	; 1
    19da:	0e 94 4f 09 	call	0x129e	; 0x129e <CLCD_u8SpecialCharacter>
    19de:	fe 01       	movw	r30, r28
    19e0:	e3 52       	subi	r30, 0x23	; 35
    19e2:	ff 4f       	sbci	r31, 0xFF	; 255
    19e4:	80 e0       	ldi	r24, 0x00	; 0
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	af e2       	ldi	r26, 0x2F	; 47
    19ea:	b4 e4       	ldi	r27, 0x44	; 68
    19ec:	80 83       	st	Z, r24
    19ee:	91 83       	std	Z+1, r25	; 0x01
    19f0:	a2 83       	std	Z+2, r26	; 0x02
    19f2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19f4:	8e 01       	movw	r16, r28
    19f6:	07 52       	subi	r16, 0x27	; 39
    19f8:	1f 4f       	sbci	r17, 0xFF	; 255
    19fa:	fe 01       	movw	r30, r28
    19fc:	e3 52       	subi	r30, 0x23	; 35
    19fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1a00:	60 81       	ld	r22, Z
    1a02:	71 81       	ldd	r23, Z+1	; 0x01
    1a04:	82 81       	ldd	r24, Z+2	; 0x02
    1a06:	93 81       	ldd	r25, Z+3	; 0x03
    1a08:	20 e0       	ldi	r18, 0x00	; 0
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	4a e7       	ldi	r20, 0x7A	; 122
    1a0e:	55 e4       	ldi	r21, 0x45	; 69
    1a10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a14:	dc 01       	movw	r26, r24
    1a16:	cb 01       	movw	r24, r22
    1a18:	f8 01       	movw	r30, r16
    1a1a:	80 83       	st	Z, r24
    1a1c:	91 83       	std	Z+1, r25	; 0x01
    1a1e:	a2 83       	std	Z+2, r26	; 0x02
    1a20:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a22:	fe 01       	movw	r30, r28
    1a24:	e7 52       	subi	r30, 0x27	; 39
    1a26:	ff 4f       	sbci	r31, 0xFF	; 255
    1a28:	60 81       	ld	r22, Z
    1a2a:	71 81       	ldd	r23, Z+1	; 0x01
    1a2c:	82 81       	ldd	r24, Z+2	; 0x02
    1a2e:	93 81       	ldd	r25, Z+3	; 0x03
    1a30:	20 e0       	ldi	r18, 0x00	; 0
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	40 e8       	ldi	r20, 0x80	; 128
    1a36:	5f e3       	ldi	r21, 0x3F	; 63
    1a38:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a3c:	88 23       	and	r24, r24
    1a3e:	44 f4       	brge	.+16     	; 0x1a50 <CLCD_voidHamoksha+0x706>
		__ticks = 1;
    1a40:	fe 01       	movw	r30, r28
    1a42:	e9 52       	subi	r30, 0x29	; 41
    1a44:	ff 4f       	sbci	r31, 0xFF	; 255
    1a46:	81 e0       	ldi	r24, 0x01	; 1
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	91 83       	std	Z+1, r25	; 0x01
    1a4c:	80 83       	st	Z, r24
    1a4e:	64 c0       	rjmp	.+200    	; 0x1b18 <CLCD_voidHamoksha+0x7ce>
	else if (__tmp > 65535)
    1a50:	fe 01       	movw	r30, r28
    1a52:	e7 52       	subi	r30, 0x27	; 39
    1a54:	ff 4f       	sbci	r31, 0xFF	; 255
    1a56:	60 81       	ld	r22, Z
    1a58:	71 81       	ldd	r23, Z+1	; 0x01
    1a5a:	82 81       	ldd	r24, Z+2	; 0x02
    1a5c:	93 81       	ldd	r25, Z+3	; 0x03
    1a5e:	20 e0       	ldi	r18, 0x00	; 0
    1a60:	3f ef       	ldi	r19, 0xFF	; 255
    1a62:	4f e7       	ldi	r20, 0x7F	; 127
    1a64:	57 e4       	ldi	r21, 0x47	; 71
    1a66:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a6a:	18 16       	cp	r1, r24
    1a6c:	0c f0       	brlt	.+2      	; 0x1a70 <CLCD_voidHamoksha+0x726>
    1a6e:	43 c0       	rjmp	.+134    	; 0x1af6 <CLCD_voidHamoksha+0x7ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a70:	fe 01       	movw	r30, r28
    1a72:	e3 52       	subi	r30, 0x23	; 35
    1a74:	ff 4f       	sbci	r31, 0xFF	; 255
    1a76:	60 81       	ld	r22, Z
    1a78:	71 81       	ldd	r23, Z+1	; 0x01
    1a7a:	82 81       	ldd	r24, Z+2	; 0x02
    1a7c:	93 81       	ldd	r25, Z+3	; 0x03
    1a7e:	20 e0       	ldi	r18, 0x00	; 0
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	40 e2       	ldi	r20, 0x20	; 32
    1a84:	51 e4       	ldi	r21, 0x41	; 65
    1a86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a8a:	dc 01       	movw	r26, r24
    1a8c:	cb 01       	movw	r24, r22
    1a8e:	8e 01       	movw	r16, r28
    1a90:	09 52       	subi	r16, 0x29	; 41
    1a92:	1f 4f       	sbci	r17, 0xFF	; 255
    1a94:	bc 01       	movw	r22, r24
    1a96:	cd 01       	movw	r24, r26
    1a98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a9c:	dc 01       	movw	r26, r24
    1a9e:	cb 01       	movw	r24, r22
    1aa0:	f8 01       	movw	r30, r16
    1aa2:	91 83       	std	Z+1, r25	; 0x01
    1aa4:	80 83       	st	Z, r24
    1aa6:	1f c0       	rjmp	.+62     	; 0x1ae6 <CLCD_voidHamoksha+0x79c>
    1aa8:	fe 01       	movw	r30, r28
    1aaa:	eb 52       	subi	r30, 0x2B	; 43
    1aac:	ff 4f       	sbci	r31, 0xFF	; 255
    1aae:	80 e9       	ldi	r24, 0x90	; 144
    1ab0:	91 e0       	ldi	r25, 0x01	; 1
    1ab2:	91 83       	std	Z+1, r25	; 0x01
    1ab4:	80 83       	st	Z, r24
    1ab6:	fe 01       	movw	r30, r28
    1ab8:	eb 52       	subi	r30, 0x2B	; 43
    1aba:	ff 4f       	sbci	r31, 0xFF	; 255
    1abc:	80 81       	ld	r24, Z
    1abe:	91 81       	ldd	r25, Z+1	; 0x01
    1ac0:	01 97       	sbiw	r24, 0x01	; 1
    1ac2:	f1 f7       	brne	.-4      	; 0x1ac0 <CLCD_voidHamoksha+0x776>
    1ac4:	fe 01       	movw	r30, r28
    1ac6:	eb 52       	subi	r30, 0x2B	; 43
    1ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aca:	91 83       	std	Z+1, r25	; 0x01
    1acc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ace:	de 01       	movw	r26, r28
    1ad0:	a9 52       	subi	r26, 0x29	; 41
    1ad2:	bf 4f       	sbci	r27, 0xFF	; 255
    1ad4:	fe 01       	movw	r30, r28
    1ad6:	e9 52       	subi	r30, 0x29	; 41
    1ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ada:	80 81       	ld	r24, Z
    1adc:	91 81       	ldd	r25, Z+1	; 0x01
    1ade:	01 97       	sbiw	r24, 0x01	; 1
    1ae0:	11 96       	adiw	r26, 0x01	; 1
    1ae2:	9c 93       	st	X, r25
    1ae4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ae6:	fe 01       	movw	r30, r28
    1ae8:	e9 52       	subi	r30, 0x29	; 41
    1aea:	ff 4f       	sbci	r31, 0xFF	; 255
    1aec:	80 81       	ld	r24, Z
    1aee:	91 81       	ldd	r25, Z+1	; 0x01
    1af0:	00 97       	sbiw	r24, 0x00	; 0
    1af2:	d1 f6       	brne	.-76     	; 0x1aa8 <CLCD_voidHamoksha+0x75e>
    1af4:	27 c0       	rjmp	.+78     	; 0x1b44 <CLCD_voidHamoksha+0x7fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1af6:	8e 01       	movw	r16, r28
    1af8:	09 52       	subi	r16, 0x29	; 41
    1afa:	1f 4f       	sbci	r17, 0xFF	; 255
    1afc:	fe 01       	movw	r30, r28
    1afe:	e7 52       	subi	r30, 0x27	; 39
    1b00:	ff 4f       	sbci	r31, 0xFF	; 255
    1b02:	60 81       	ld	r22, Z
    1b04:	71 81       	ldd	r23, Z+1	; 0x01
    1b06:	82 81       	ldd	r24, Z+2	; 0x02
    1b08:	93 81       	ldd	r25, Z+3	; 0x03
    1b0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b0e:	dc 01       	movw	r26, r24
    1b10:	cb 01       	movw	r24, r22
    1b12:	f8 01       	movw	r30, r16
    1b14:	91 83       	std	Z+1, r25	; 0x01
    1b16:	80 83       	st	Z, r24
    1b18:	de 01       	movw	r26, r28
    1b1a:	ad 52       	subi	r26, 0x2D	; 45
    1b1c:	bf 4f       	sbci	r27, 0xFF	; 255
    1b1e:	fe 01       	movw	r30, r28
    1b20:	e9 52       	subi	r30, 0x29	; 41
    1b22:	ff 4f       	sbci	r31, 0xFF	; 255
    1b24:	80 81       	ld	r24, Z
    1b26:	91 81       	ldd	r25, Z+1	; 0x01
    1b28:	8d 93       	st	X+, r24
    1b2a:	9c 93       	st	X, r25
    1b2c:	fe 01       	movw	r30, r28
    1b2e:	ed 52       	subi	r30, 0x2D	; 45
    1b30:	ff 4f       	sbci	r31, 0xFF	; 255
    1b32:	80 81       	ld	r24, Z
    1b34:	91 81       	ldd	r25, Z+1	; 0x01
    1b36:	01 97       	sbiw	r24, 0x01	; 1
    1b38:	f1 f7       	brne	.-4      	; 0x1b36 <CLCD_voidHamoksha+0x7ec>
    1b3a:	fe 01       	movw	r30, r28
    1b3c:	ed 52       	subi	r30, 0x2D	; 45
    1b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b40:	91 83       	std	Z+1, r25	; 0x01
    1b42:	80 83       	st	Z, r24
	_delay_ms(700);
	CLCD_voidClear();
    1b44:	0e 94 9b 09 	call	0x1336	; 0x1336 <CLCD_voidClear>
	CLCD_VoidGoToXY(0,0);
    1b48:	80 e0       	ldi	r24, 0x00	; 0
    1b4a:	60 e0       	ldi	r22, 0x00	; 0
    1b4c:	0e 94 2f 09 	call	0x125e	; 0x125e <CLCD_VoidGoToXY>
	CLCD_u8SendString("I CAN RUN");
    1b50:	81 e7       	ldi	r24, 0x71	; 113
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	0e 94 70 08 	call	0x10e0	; 0x10e0 <CLCD_u8SendString>
    1b58:	fe 01       	movw	r30, r28
    1b5a:	e1 53       	subi	r30, 0x31	; 49
    1b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5e:	80 e0       	ldi	r24, 0x00	; 0
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	a6 e1       	ldi	r26, 0x16	; 22
    1b64:	b4 e4       	ldi	r27, 0x44	; 68
    1b66:	80 83       	st	Z, r24
    1b68:	91 83       	std	Z+1, r25	; 0x01
    1b6a:	a2 83       	std	Z+2, r26	; 0x02
    1b6c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b6e:	8e 01       	movw	r16, r28
    1b70:	05 53       	subi	r16, 0x35	; 53
    1b72:	1f 4f       	sbci	r17, 0xFF	; 255
    1b74:	fe 01       	movw	r30, r28
    1b76:	e1 53       	subi	r30, 0x31	; 49
    1b78:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7a:	60 81       	ld	r22, Z
    1b7c:	71 81       	ldd	r23, Z+1	; 0x01
    1b7e:	82 81       	ldd	r24, Z+2	; 0x02
    1b80:	93 81       	ldd	r25, Z+3	; 0x03
    1b82:	20 e0       	ldi	r18, 0x00	; 0
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	4a e7       	ldi	r20, 0x7A	; 122
    1b88:	55 e4       	ldi	r21, 0x45	; 69
    1b8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b8e:	dc 01       	movw	r26, r24
    1b90:	cb 01       	movw	r24, r22
    1b92:	f8 01       	movw	r30, r16
    1b94:	80 83       	st	Z, r24
    1b96:	91 83       	std	Z+1, r25	; 0x01
    1b98:	a2 83       	std	Z+2, r26	; 0x02
    1b9a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b9c:	fe 01       	movw	r30, r28
    1b9e:	e5 53       	subi	r30, 0x35	; 53
    1ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba2:	60 81       	ld	r22, Z
    1ba4:	71 81       	ldd	r23, Z+1	; 0x01
    1ba6:	82 81       	ldd	r24, Z+2	; 0x02
    1ba8:	93 81       	ldd	r25, Z+3	; 0x03
    1baa:	20 e0       	ldi	r18, 0x00	; 0
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	40 e8       	ldi	r20, 0x80	; 128
    1bb0:	5f e3       	ldi	r21, 0x3F	; 63
    1bb2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bb6:	88 23       	and	r24, r24
    1bb8:	44 f4       	brge	.+16     	; 0x1bca <CLCD_voidHamoksha+0x880>
		__ticks = 1;
    1bba:	fe 01       	movw	r30, r28
    1bbc:	e7 53       	subi	r30, 0x37	; 55
    1bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc0:	81 e0       	ldi	r24, 0x01	; 1
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	91 83       	std	Z+1, r25	; 0x01
    1bc6:	80 83       	st	Z, r24
    1bc8:	64 c0       	rjmp	.+200    	; 0x1c92 <CLCD_voidHamoksha+0x948>
	else if (__tmp > 65535)
    1bca:	fe 01       	movw	r30, r28
    1bcc:	e5 53       	subi	r30, 0x35	; 53
    1bce:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd0:	60 81       	ld	r22, Z
    1bd2:	71 81       	ldd	r23, Z+1	; 0x01
    1bd4:	82 81       	ldd	r24, Z+2	; 0x02
    1bd6:	93 81       	ldd	r25, Z+3	; 0x03
    1bd8:	20 e0       	ldi	r18, 0x00	; 0
    1bda:	3f ef       	ldi	r19, 0xFF	; 255
    1bdc:	4f e7       	ldi	r20, 0x7F	; 127
    1bde:	57 e4       	ldi	r21, 0x47	; 71
    1be0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1be4:	18 16       	cp	r1, r24
    1be6:	0c f0       	brlt	.+2      	; 0x1bea <CLCD_voidHamoksha+0x8a0>
    1be8:	43 c0       	rjmp	.+134    	; 0x1c70 <CLCD_voidHamoksha+0x926>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bea:	fe 01       	movw	r30, r28
    1bec:	e1 53       	subi	r30, 0x31	; 49
    1bee:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf0:	60 81       	ld	r22, Z
    1bf2:	71 81       	ldd	r23, Z+1	; 0x01
    1bf4:	82 81       	ldd	r24, Z+2	; 0x02
    1bf6:	93 81       	ldd	r25, Z+3	; 0x03
    1bf8:	20 e0       	ldi	r18, 0x00	; 0
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	40 e2       	ldi	r20, 0x20	; 32
    1bfe:	51 e4       	ldi	r21, 0x41	; 65
    1c00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c04:	dc 01       	movw	r26, r24
    1c06:	cb 01       	movw	r24, r22
    1c08:	8e 01       	movw	r16, r28
    1c0a:	07 53       	subi	r16, 0x37	; 55
    1c0c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c0e:	bc 01       	movw	r22, r24
    1c10:	cd 01       	movw	r24, r26
    1c12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c16:	dc 01       	movw	r26, r24
    1c18:	cb 01       	movw	r24, r22
    1c1a:	f8 01       	movw	r30, r16
    1c1c:	91 83       	std	Z+1, r25	; 0x01
    1c1e:	80 83       	st	Z, r24
    1c20:	1f c0       	rjmp	.+62     	; 0x1c60 <CLCD_voidHamoksha+0x916>
    1c22:	fe 01       	movw	r30, r28
    1c24:	e9 53       	subi	r30, 0x39	; 57
    1c26:	ff 4f       	sbci	r31, 0xFF	; 255
    1c28:	80 e9       	ldi	r24, 0x90	; 144
    1c2a:	91 e0       	ldi	r25, 0x01	; 1
    1c2c:	91 83       	std	Z+1, r25	; 0x01
    1c2e:	80 83       	st	Z, r24
    1c30:	fe 01       	movw	r30, r28
    1c32:	e9 53       	subi	r30, 0x39	; 57
    1c34:	ff 4f       	sbci	r31, 0xFF	; 255
    1c36:	80 81       	ld	r24, Z
    1c38:	91 81       	ldd	r25, Z+1	; 0x01
    1c3a:	01 97       	sbiw	r24, 0x01	; 1
    1c3c:	f1 f7       	brne	.-4      	; 0x1c3a <CLCD_voidHamoksha+0x8f0>
    1c3e:	fe 01       	movw	r30, r28
    1c40:	e9 53       	subi	r30, 0x39	; 57
    1c42:	ff 4f       	sbci	r31, 0xFF	; 255
    1c44:	91 83       	std	Z+1, r25	; 0x01
    1c46:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c48:	de 01       	movw	r26, r28
    1c4a:	a7 53       	subi	r26, 0x37	; 55
    1c4c:	bf 4f       	sbci	r27, 0xFF	; 255
    1c4e:	fe 01       	movw	r30, r28
    1c50:	e7 53       	subi	r30, 0x37	; 55
    1c52:	ff 4f       	sbci	r31, 0xFF	; 255
    1c54:	80 81       	ld	r24, Z
    1c56:	91 81       	ldd	r25, Z+1	; 0x01
    1c58:	01 97       	sbiw	r24, 0x01	; 1
    1c5a:	11 96       	adiw	r26, 0x01	; 1
    1c5c:	9c 93       	st	X, r25
    1c5e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c60:	fe 01       	movw	r30, r28
    1c62:	e7 53       	subi	r30, 0x37	; 55
    1c64:	ff 4f       	sbci	r31, 0xFF	; 255
    1c66:	80 81       	ld	r24, Z
    1c68:	91 81       	ldd	r25, Z+1	; 0x01
    1c6a:	00 97       	sbiw	r24, 0x00	; 0
    1c6c:	d1 f6       	brne	.-76     	; 0x1c22 <CLCD_voidHamoksha+0x8d8>
    1c6e:	28 c0       	rjmp	.+80     	; 0x1cc0 <CLCD_voidHamoksha+0x976>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c70:	8e 01       	movw	r16, r28
    1c72:	07 53       	subi	r16, 0x37	; 55
    1c74:	1f 4f       	sbci	r17, 0xFF	; 255
    1c76:	fe 01       	movw	r30, r28
    1c78:	e5 53       	subi	r30, 0x35	; 53
    1c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c7c:	60 81       	ld	r22, Z
    1c7e:	71 81       	ldd	r23, Z+1	; 0x01
    1c80:	82 81       	ldd	r24, Z+2	; 0x02
    1c82:	93 81       	ldd	r25, Z+3	; 0x03
    1c84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c88:	dc 01       	movw	r26, r24
    1c8a:	cb 01       	movw	r24, r22
    1c8c:	f8 01       	movw	r30, r16
    1c8e:	91 83       	std	Z+1, r25	; 0x01
    1c90:	80 83       	st	Z, r24
    1c92:	de 01       	movw	r26, r28
    1c94:	ab 53       	subi	r26, 0x3B	; 59
    1c96:	bf 4f       	sbci	r27, 0xFF	; 255
    1c98:	fe 01       	movw	r30, r28
    1c9a:	e7 53       	subi	r30, 0x37	; 55
    1c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9e:	80 81       	ld	r24, Z
    1ca0:	91 81       	ldd	r25, Z+1	; 0x01
    1ca2:	11 96       	adiw	r26, 0x01	; 1
    1ca4:	9c 93       	st	X, r25
    1ca6:	8e 93       	st	-X, r24
    1ca8:	fe 01       	movw	r30, r28
    1caa:	eb 53       	subi	r30, 0x3B	; 59
    1cac:	ff 4f       	sbci	r31, 0xFF	; 255
    1cae:	80 81       	ld	r24, Z
    1cb0:	91 81       	ldd	r25, Z+1	; 0x01
    1cb2:	01 97       	sbiw	r24, 0x01	; 1
    1cb4:	f1 f7       	brne	.-4      	; 0x1cb2 <CLCD_voidHamoksha+0x968>
    1cb6:	fe 01       	movw	r30, r28
    1cb8:	eb 53       	subi	r30, 0x3B	; 59
    1cba:	ff 4f       	sbci	r31, 0xFF	; 255
    1cbc:	91 83       	std	Z+1, r25	; 0x01
    1cbe:	80 83       	st	Z, r24
	_delay_ms(600);
uint8 i=0;
    1cc0:	fe 01       	movw	r30, r28
    1cc2:	ef 51       	subi	r30, 0x1F	; 31
    1cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc6:	10 82       	st	Z, r1
    1cc8:	93 c1       	rjmp	.+806    	; 0x1ff0 <CLCD_voidHamoksha+0xca6>
while(i<16)
	{   CLCD_voidClear();
    1cca:	0e 94 9b 09 	call	0x1336	; 0x1336 <CLCD_voidClear>
		CLCD_u8SpecialCharacter(0,Local_u8HamokshaPattern4,i++,1);
    1cce:	fe 01       	movw	r30, r28
    1cd0:	ef 51       	subi	r30, 0x1F	; 31
    1cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd4:	90 81       	ld	r25, Z
    1cd6:	de 01       	movw	r26, r28
    1cd8:	af 51       	subi	r26, 0x1F	; 31
    1cda:	bf 4f       	sbci	r27, 0xFF	; 255
    1cdc:	fe 01       	movw	r30, r28
    1cde:	ef 51       	subi	r30, 0x1F	; 31
    1ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce2:	80 81       	ld	r24, Z
    1ce4:	8f 5f       	subi	r24, 0xFF	; 255
    1ce6:	8c 93       	st	X, r24
    1ce8:	9e 01       	movw	r18, r28
    1cea:	2e 5f       	subi	r18, 0xFE	; 254
    1cec:	3e 4f       	sbci	r19, 0xFE	; 254
    1cee:	80 e0       	ldi	r24, 0x00	; 0
    1cf0:	b9 01       	movw	r22, r18
    1cf2:	49 2f       	mov	r20, r25
    1cf4:	21 e0       	ldi	r18, 0x01	; 1
    1cf6:	0e 94 4f 09 	call	0x129e	; 0x129e <CLCD_u8SpecialCharacter>
    1cfa:	fe 01       	movw	r30, r28
    1cfc:	ef 53       	subi	r30, 0x3F	; 63
    1cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1d00:	80 e0       	ldi	r24, 0x00	; 0
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	a0 e2       	ldi	r26, 0x20	; 32
    1d06:	b2 e4       	ldi	r27, 0x42	; 66
    1d08:	80 83       	st	Z, r24
    1d0a:	91 83       	std	Z+1, r25	; 0x01
    1d0c:	a2 83       	std	Z+2, r26	; 0x02
    1d0e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d10:	8e 01       	movw	r16, r28
    1d12:	03 54       	subi	r16, 0x43	; 67
    1d14:	1f 4f       	sbci	r17, 0xFF	; 255
    1d16:	fe 01       	movw	r30, r28
    1d18:	ef 53       	subi	r30, 0x3F	; 63
    1d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1c:	60 81       	ld	r22, Z
    1d1e:	71 81       	ldd	r23, Z+1	; 0x01
    1d20:	82 81       	ldd	r24, Z+2	; 0x02
    1d22:	93 81       	ldd	r25, Z+3	; 0x03
    1d24:	20 e0       	ldi	r18, 0x00	; 0
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	4a e7       	ldi	r20, 0x7A	; 122
    1d2a:	55 e4       	ldi	r21, 0x45	; 69
    1d2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d30:	dc 01       	movw	r26, r24
    1d32:	cb 01       	movw	r24, r22
    1d34:	f8 01       	movw	r30, r16
    1d36:	80 83       	st	Z, r24
    1d38:	91 83       	std	Z+1, r25	; 0x01
    1d3a:	a2 83       	std	Z+2, r26	; 0x02
    1d3c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d3e:	fe 01       	movw	r30, r28
    1d40:	e3 54       	subi	r30, 0x43	; 67
    1d42:	ff 4f       	sbci	r31, 0xFF	; 255
    1d44:	60 81       	ld	r22, Z
    1d46:	71 81       	ldd	r23, Z+1	; 0x01
    1d48:	82 81       	ldd	r24, Z+2	; 0x02
    1d4a:	93 81       	ldd	r25, Z+3	; 0x03
    1d4c:	20 e0       	ldi	r18, 0x00	; 0
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	40 e8       	ldi	r20, 0x80	; 128
    1d52:	5f e3       	ldi	r21, 0x3F	; 63
    1d54:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d58:	88 23       	and	r24, r24
    1d5a:	44 f4       	brge	.+16     	; 0x1d6c <CLCD_voidHamoksha+0xa22>
		__ticks = 1;
    1d5c:	fe 01       	movw	r30, r28
    1d5e:	e5 54       	subi	r30, 0x45	; 69
    1d60:	ff 4f       	sbci	r31, 0xFF	; 255
    1d62:	81 e0       	ldi	r24, 0x01	; 1
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	91 83       	std	Z+1, r25	; 0x01
    1d68:	80 83       	st	Z, r24
    1d6a:	64 c0       	rjmp	.+200    	; 0x1e34 <CLCD_voidHamoksha+0xaea>
	else if (__tmp > 65535)
    1d6c:	fe 01       	movw	r30, r28
    1d6e:	e3 54       	subi	r30, 0x43	; 67
    1d70:	ff 4f       	sbci	r31, 0xFF	; 255
    1d72:	60 81       	ld	r22, Z
    1d74:	71 81       	ldd	r23, Z+1	; 0x01
    1d76:	82 81       	ldd	r24, Z+2	; 0x02
    1d78:	93 81       	ldd	r25, Z+3	; 0x03
    1d7a:	20 e0       	ldi	r18, 0x00	; 0
    1d7c:	3f ef       	ldi	r19, 0xFF	; 255
    1d7e:	4f e7       	ldi	r20, 0x7F	; 127
    1d80:	57 e4       	ldi	r21, 0x47	; 71
    1d82:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d86:	18 16       	cp	r1, r24
    1d88:	0c f0       	brlt	.+2      	; 0x1d8c <CLCD_voidHamoksha+0xa42>
    1d8a:	43 c0       	rjmp	.+134    	; 0x1e12 <CLCD_voidHamoksha+0xac8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d8c:	fe 01       	movw	r30, r28
    1d8e:	ef 53       	subi	r30, 0x3F	; 63
    1d90:	ff 4f       	sbci	r31, 0xFF	; 255
    1d92:	60 81       	ld	r22, Z
    1d94:	71 81       	ldd	r23, Z+1	; 0x01
    1d96:	82 81       	ldd	r24, Z+2	; 0x02
    1d98:	93 81       	ldd	r25, Z+3	; 0x03
    1d9a:	20 e0       	ldi	r18, 0x00	; 0
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	40 e2       	ldi	r20, 0x20	; 32
    1da0:	51 e4       	ldi	r21, 0x41	; 65
    1da2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1da6:	dc 01       	movw	r26, r24
    1da8:	cb 01       	movw	r24, r22
    1daa:	8e 01       	movw	r16, r28
    1dac:	05 54       	subi	r16, 0x45	; 69
    1dae:	1f 4f       	sbci	r17, 0xFF	; 255
    1db0:	bc 01       	movw	r22, r24
    1db2:	cd 01       	movw	r24, r26
    1db4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1db8:	dc 01       	movw	r26, r24
    1dba:	cb 01       	movw	r24, r22
    1dbc:	f8 01       	movw	r30, r16
    1dbe:	91 83       	std	Z+1, r25	; 0x01
    1dc0:	80 83       	st	Z, r24
    1dc2:	1f c0       	rjmp	.+62     	; 0x1e02 <CLCD_voidHamoksha+0xab8>
    1dc4:	fe 01       	movw	r30, r28
    1dc6:	e7 54       	subi	r30, 0x47	; 71
    1dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dca:	80 e9       	ldi	r24, 0x90	; 144
    1dcc:	91 e0       	ldi	r25, 0x01	; 1
    1dce:	91 83       	std	Z+1, r25	; 0x01
    1dd0:	80 83       	st	Z, r24
    1dd2:	fe 01       	movw	r30, r28
    1dd4:	e7 54       	subi	r30, 0x47	; 71
    1dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd8:	80 81       	ld	r24, Z
    1dda:	91 81       	ldd	r25, Z+1	; 0x01
    1ddc:	01 97       	sbiw	r24, 0x01	; 1
    1dde:	f1 f7       	brne	.-4      	; 0x1ddc <CLCD_voidHamoksha+0xa92>
    1de0:	fe 01       	movw	r30, r28
    1de2:	e7 54       	subi	r30, 0x47	; 71
    1de4:	ff 4f       	sbci	r31, 0xFF	; 255
    1de6:	91 83       	std	Z+1, r25	; 0x01
    1de8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dea:	de 01       	movw	r26, r28
    1dec:	a5 54       	subi	r26, 0x45	; 69
    1dee:	bf 4f       	sbci	r27, 0xFF	; 255
    1df0:	fe 01       	movw	r30, r28
    1df2:	e5 54       	subi	r30, 0x45	; 69
    1df4:	ff 4f       	sbci	r31, 0xFF	; 255
    1df6:	80 81       	ld	r24, Z
    1df8:	91 81       	ldd	r25, Z+1	; 0x01
    1dfa:	01 97       	sbiw	r24, 0x01	; 1
    1dfc:	11 96       	adiw	r26, 0x01	; 1
    1dfe:	9c 93       	st	X, r25
    1e00:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e02:	fe 01       	movw	r30, r28
    1e04:	e5 54       	subi	r30, 0x45	; 69
    1e06:	ff 4f       	sbci	r31, 0xFF	; 255
    1e08:	80 81       	ld	r24, Z
    1e0a:	91 81       	ldd	r25, Z+1	; 0x01
    1e0c:	00 97       	sbiw	r24, 0x00	; 0
    1e0e:	d1 f6       	brne	.-76     	; 0x1dc4 <CLCD_voidHamoksha+0xa7a>
    1e10:	27 c0       	rjmp	.+78     	; 0x1e60 <CLCD_voidHamoksha+0xb16>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e12:	8e 01       	movw	r16, r28
    1e14:	05 54       	subi	r16, 0x45	; 69
    1e16:	1f 4f       	sbci	r17, 0xFF	; 255
    1e18:	fe 01       	movw	r30, r28
    1e1a:	e3 54       	subi	r30, 0x43	; 67
    1e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1e:	60 81       	ld	r22, Z
    1e20:	71 81       	ldd	r23, Z+1	; 0x01
    1e22:	82 81       	ldd	r24, Z+2	; 0x02
    1e24:	93 81       	ldd	r25, Z+3	; 0x03
    1e26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e2a:	dc 01       	movw	r26, r24
    1e2c:	cb 01       	movw	r24, r22
    1e2e:	f8 01       	movw	r30, r16
    1e30:	91 83       	std	Z+1, r25	; 0x01
    1e32:	80 83       	st	Z, r24
    1e34:	de 01       	movw	r26, r28
    1e36:	a9 54       	subi	r26, 0x49	; 73
    1e38:	bf 4f       	sbci	r27, 0xFF	; 255
    1e3a:	fe 01       	movw	r30, r28
    1e3c:	e5 54       	subi	r30, 0x45	; 69
    1e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e40:	80 81       	ld	r24, Z
    1e42:	91 81       	ldd	r25, Z+1	; 0x01
    1e44:	8d 93       	st	X+, r24
    1e46:	9c 93       	st	X, r25
    1e48:	fe 01       	movw	r30, r28
    1e4a:	e9 54       	subi	r30, 0x49	; 73
    1e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4e:	80 81       	ld	r24, Z
    1e50:	91 81       	ldd	r25, Z+1	; 0x01
    1e52:	01 97       	sbiw	r24, 0x01	; 1
    1e54:	f1 f7       	brne	.-4      	; 0x1e52 <CLCD_voidHamoksha+0xb08>
    1e56:	fe 01       	movw	r30, r28
    1e58:	e9 54       	subi	r30, 0x49	; 73
    1e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5c:	91 83       	std	Z+1, r25	; 0x01
    1e5e:	80 83       	st	Z, r24
		_delay_ms(40);
		CLCD_u8SpecialCharacter(0,Local_u8HamokshaPattern5,i,1);
    1e60:	9e 01       	movw	r18, r28
    1e62:	26 5f       	subi	r18, 0xF6	; 246
    1e64:	3e 4f       	sbci	r19, 0xFE	; 254
    1e66:	fe 01       	movw	r30, r28
    1e68:	ef 51       	subi	r30, 0x1F	; 31
    1e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6c:	80 e0       	ldi	r24, 0x00	; 0
    1e6e:	b9 01       	movw	r22, r18
    1e70:	40 81       	ld	r20, Z
    1e72:	21 e0       	ldi	r18, 0x01	; 1
    1e74:	0e 94 4f 09 	call	0x129e	; 0x129e <CLCD_u8SpecialCharacter>
    1e78:	fe 01       	movw	r30, r28
    1e7a:	ed 54       	subi	r30, 0x4D	; 77
    1e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7e:	80 e0       	ldi	r24, 0x00	; 0
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	a0 e2       	ldi	r26, 0x20	; 32
    1e84:	b2 e4       	ldi	r27, 0x42	; 66
    1e86:	80 83       	st	Z, r24
    1e88:	91 83       	std	Z+1, r25	; 0x01
    1e8a:	a2 83       	std	Z+2, r26	; 0x02
    1e8c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e8e:	8e 01       	movw	r16, r28
    1e90:	01 55       	subi	r16, 0x51	; 81
    1e92:	1f 4f       	sbci	r17, 0xFF	; 255
    1e94:	fe 01       	movw	r30, r28
    1e96:	ed 54       	subi	r30, 0x4D	; 77
    1e98:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9a:	60 81       	ld	r22, Z
    1e9c:	71 81       	ldd	r23, Z+1	; 0x01
    1e9e:	82 81       	ldd	r24, Z+2	; 0x02
    1ea0:	93 81       	ldd	r25, Z+3	; 0x03
    1ea2:	20 e0       	ldi	r18, 0x00	; 0
    1ea4:	30 e0       	ldi	r19, 0x00	; 0
    1ea6:	4a e7       	ldi	r20, 0x7A	; 122
    1ea8:	55 e4       	ldi	r21, 0x45	; 69
    1eaa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eae:	dc 01       	movw	r26, r24
    1eb0:	cb 01       	movw	r24, r22
    1eb2:	f8 01       	movw	r30, r16
    1eb4:	80 83       	st	Z, r24
    1eb6:	91 83       	std	Z+1, r25	; 0x01
    1eb8:	a2 83       	std	Z+2, r26	; 0x02
    1eba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ebc:	fe 01       	movw	r30, r28
    1ebe:	e1 55       	subi	r30, 0x51	; 81
    1ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec2:	60 81       	ld	r22, Z
    1ec4:	71 81       	ldd	r23, Z+1	; 0x01
    1ec6:	82 81       	ldd	r24, Z+2	; 0x02
    1ec8:	93 81       	ldd	r25, Z+3	; 0x03
    1eca:	20 e0       	ldi	r18, 0x00	; 0
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	40 e8       	ldi	r20, 0x80	; 128
    1ed0:	5f e3       	ldi	r21, 0x3F	; 63
    1ed2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ed6:	88 23       	and	r24, r24
    1ed8:	44 f4       	brge	.+16     	; 0x1eea <CLCD_voidHamoksha+0xba0>
		__ticks = 1;
    1eda:	fe 01       	movw	r30, r28
    1edc:	e3 55       	subi	r30, 0x53	; 83
    1ede:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee0:	81 e0       	ldi	r24, 0x01	; 1
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	91 83       	std	Z+1, r25	; 0x01
    1ee6:	80 83       	st	Z, r24
    1ee8:	64 c0       	rjmp	.+200    	; 0x1fb2 <CLCD_voidHamoksha+0xc68>
	else if (__tmp > 65535)
    1eea:	fe 01       	movw	r30, r28
    1eec:	e1 55       	subi	r30, 0x51	; 81
    1eee:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef0:	60 81       	ld	r22, Z
    1ef2:	71 81       	ldd	r23, Z+1	; 0x01
    1ef4:	82 81       	ldd	r24, Z+2	; 0x02
    1ef6:	93 81       	ldd	r25, Z+3	; 0x03
    1ef8:	20 e0       	ldi	r18, 0x00	; 0
    1efa:	3f ef       	ldi	r19, 0xFF	; 255
    1efc:	4f e7       	ldi	r20, 0x7F	; 127
    1efe:	57 e4       	ldi	r21, 0x47	; 71
    1f00:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f04:	18 16       	cp	r1, r24
    1f06:	0c f0       	brlt	.+2      	; 0x1f0a <CLCD_voidHamoksha+0xbc0>
    1f08:	43 c0       	rjmp	.+134    	; 0x1f90 <CLCD_voidHamoksha+0xc46>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f0a:	fe 01       	movw	r30, r28
    1f0c:	ed 54       	subi	r30, 0x4D	; 77
    1f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f10:	60 81       	ld	r22, Z
    1f12:	71 81       	ldd	r23, Z+1	; 0x01
    1f14:	82 81       	ldd	r24, Z+2	; 0x02
    1f16:	93 81       	ldd	r25, Z+3	; 0x03
    1f18:	20 e0       	ldi	r18, 0x00	; 0
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	40 e2       	ldi	r20, 0x20	; 32
    1f1e:	51 e4       	ldi	r21, 0x41	; 65
    1f20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f24:	dc 01       	movw	r26, r24
    1f26:	cb 01       	movw	r24, r22
    1f28:	8e 01       	movw	r16, r28
    1f2a:	03 55       	subi	r16, 0x53	; 83
    1f2c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f2e:	bc 01       	movw	r22, r24
    1f30:	cd 01       	movw	r24, r26
    1f32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f36:	dc 01       	movw	r26, r24
    1f38:	cb 01       	movw	r24, r22
    1f3a:	f8 01       	movw	r30, r16
    1f3c:	91 83       	std	Z+1, r25	; 0x01
    1f3e:	80 83       	st	Z, r24
    1f40:	1f c0       	rjmp	.+62     	; 0x1f80 <CLCD_voidHamoksha+0xc36>
    1f42:	fe 01       	movw	r30, r28
    1f44:	e5 55       	subi	r30, 0x55	; 85
    1f46:	ff 4f       	sbci	r31, 0xFF	; 255
    1f48:	80 e9       	ldi	r24, 0x90	; 144
    1f4a:	91 e0       	ldi	r25, 0x01	; 1
    1f4c:	91 83       	std	Z+1, r25	; 0x01
    1f4e:	80 83       	st	Z, r24
    1f50:	fe 01       	movw	r30, r28
    1f52:	e5 55       	subi	r30, 0x55	; 85
    1f54:	ff 4f       	sbci	r31, 0xFF	; 255
    1f56:	80 81       	ld	r24, Z
    1f58:	91 81       	ldd	r25, Z+1	; 0x01
    1f5a:	01 97       	sbiw	r24, 0x01	; 1
    1f5c:	f1 f7       	brne	.-4      	; 0x1f5a <CLCD_voidHamoksha+0xc10>
    1f5e:	fe 01       	movw	r30, r28
    1f60:	e5 55       	subi	r30, 0x55	; 85
    1f62:	ff 4f       	sbci	r31, 0xFF	; 255
    1f64:	91 83       	std	Z+1, r25	; 0x01
    1f66:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f68:	de 01       	movw	r26, r28
    1f6a:	a3 55       	subi	r26, 0x53	; 83
    1f6c:	bf 4f       	sbci	r27, 0xFF	; 255
    1f6e:	fe 01       	movw	r30, r28
    1f70:	e3 55       	subi	r30, 0x53	; 83
    1f72:	ff 4f       	sbci	r31, 0xFF	; 255
    1f74:	80 81       	ld	r24, Z
    1f76:	91 81       	ldd	r25, Z+1	; 0x01
    1f78:	01 97       	sbiw	r24, 0x01	; 1
    1f7a:	11 96       	adiw	r26, 0x01	; 1
    1f7c:	9c 93       	st	X, r25
    1f7e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f80:	fe 01       	movw	r30, r28
    1f82:	e3 55       	subi	r30, 0x53	; 83
    1f84:	ff 4f       	sbci	r31, 0xFF	; 255
    1f86:	80 81       	ld	r24, Z
    1f88:	91 81       	ldd	r25, Z+1	; 0x01
    1f8a:	00 97       	sbiw	r24, 0x00	; 0
    1f8c:	d1 f6       	brne	.-76     	; 0x1f42 <CLCD_voidHamoksha+0xbf8>
    1f8e:	27 c0       	rjmp	.+78     	; 0x1fde <CLCD_voidHamoksha+0xc94>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f90:	8e 01       	movw	r16, r28
    1f92:	03 55       	subi	r16, 0x53	; 83
    1f94:	1f 4f       	sbci	r17, 0xFF	; 255
    1f96:	fe 01       	movw	r30, r28
    1f98:	e1 55       	subi	r30, 0x51	; 81
    1f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9c:	60 81       	ld	r22, Z
    1f9e:	71 81       	ldd	r23, Z+1	; 0x01
    1fa0:	82 81       	ldd	r24, Z+2	; 0x02
    1fa2:	93 81       	ldd	r25, Z+3	; 0x03
    1fa4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa8:	dc 01       	movw	r26, r24
    1faa:	cb 01       	movw	r24, r22
    1fac:	f8 01       	movw	r30, r16
    1fae:	91 83       	std	Z+1, r25	; 0x01
    1fb0:	80 83       	st	Z, r24
    1fb2:	de 01       	movw	r26, r28
    1fb4:	a7 55       	subi	r26, 0x57	; 87
    1fb6:	bf 4f       	sbci	r27, 0xFF	; 255
    1fb8:	fe 01       	movw	r30, r28
    1fba:	e3 55       	subi	r30, 0x53	; 83
    1fbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fbe:	80 81       	ld	r24, Z
    1fc0:	91 81       	ldd	r25, Z+1	; 0x01
    1fc2:	8d 93       	st	X+, r24
    1fc4:	9c 93       	st	X, r25
    1fc6:	fe 01       	movw	r30, r28
    1fc8:	e7 55       	subi	r30, 0x57	; 87
    1fca:	ff 4f       	sbci	r31, 0xFF	; 255
    1fcc:	80 81       	ld	r24, Z
    1fce:	91 81       	ldd	r25, Z+1	; 0x01
    1fd0:	01 97       	sbiw	r24, 0x01	; 1
    1fd2:	f1 f7       	brne	.-4      	; 0x1fd0 <CLCD_voidHamoksha+0xc86>
    1fd4:	fe 01       	movw	r30, r28
    1fd6:	e7 55       	subi	r30, 0x57	; 87
    1fd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fda:	91 83       	std	Z+1, r25	; 0x01
    1fdc:	80 83       	st	Z, r24
		_delay_ms(40);
		        i++;
    1fde:	de 01       	movw	r26, r28
    1fe0:	af 51       	subi	r26, 0x1F	; 31
    1fe2:	bf 4f       	sbci	r27, 0xFF	; 255
    1fe4:	fe 01       	movw	r30, r28
    1fe6:	ef 51       	subi	r30, 0x1F	; 31
    1fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fea:	80 81       	ld	r24, Z
    1fec:	8f 5f       	subi	r24, 0xFF	; 255
    1fee:	8c 93       	st	X, r24
	CLCD_voidClear();
	CLCD_VoidGoToXY(0,0);
	CLCD_u8SendString("I CAN RUN");
	_delay_ms(600);
uint8 i=0;
while(i<16)
    1ff0:	fe 01       	movw	r30, r28
    1ff2:	ef 51       	subi	r30, 0x1F	; 31
    1ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff6:	80 81       	ld	r24, Z
    1ff8:	80 31       	cpi	r24, 0x10	; 16
    1ffa:	08 f4       	brcc	.+2      	; 0x1ffe <CLCD_voidHamoksha+0xcb4>
    1ffc:	66 ce       	rjmp	.-820    	; 0x1cca <CLCD_voidHamoksha+0x980>
		CLCD_u8SpecialCharacter(0,Local_u8HamokshaPattern5,i,1);
		_delay_ms(40);
		        i++;

	}
CLCD_voidClear();
    1ffe:	0e 94 9b 09 	call	0x1336	; 0x1336 <CLCD_voidClear>
CLCD_VoidGoToXY(0,0);
    2002:	80 e0       	ldi	r24, 0x00	; 0
    2004:	60 e0       	ldi	r22, 0x00	; 0
    2006:	0e 94 2f 09 	call	0x125e	; 0x125e <CLCD_VoidGoToXY>
	CLCD_u8SendString("I CAN DANCE");
    200a:	8b e7       	ldi	r24, 0x7B	; 123
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	0e 94 70 08 	call	0x10e0	; 0x10e0 <CLCD_u8SendString>
    2012:	fe 01       	movw	r30, r28
    2014:	eb 55       	subi	r30, 0x5B	; 91
    2016:	ff 4f       	sbci	r31, 0xFF	; 255
    2018:	80 e0       	ldi	r24, 0x00	; 0
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	a6 e1       	ldi	r26, 0x16	; 22
    201e:	b4 e4       	ldi	r27, 0x44	; 68
    2020:	80 83       	st	Z, r24
    2022:	91 83       	std	Z+1, r25	; 0x01
    2024:	a2 83       	std	Z+2, r26	; 0x02
    2026:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2028:	8e 01       	movw	r16, r28
    202a:	0f 55       	subi	r16, 0x5F	; 95
    202c:	1f 4f       	sbci	r17, 0xFF	; 255
    202e:	fe 01       	movw	r30, r28
    2030:	eb 55       	subi	r30, 0x5B	; 91
    2032:	ff 4f       	sbci	r31, 0xFF	; 255
    2034:	60 81       	ld	r22, Z
    2036:	71 81       	ldd	r23, Z+1	; 0x01
    2038:	82 81       	ldd	r24, Z+2	; 0x02
    203a:	93 81       	ldd	r25, Z+3	; 0x03
    203c:	20 e0       	ldi	r18, 0x00	; 0
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	4a e7       	ldi	r20, 0x7A	; 122
    2042:	55 e4       	ldi	r21, 0x45	; 69
    2044:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2048:	dc 01       	movw	r26, r24
    204a:	cb 01       	movw	r24, r22
    204c:	f8 01       	movw	r30, r16
    204e:	80 83       	st	Z, r24
    2050:	91 83       	std	Z+1, r25	; 0x01
    2052:	a2 83       	std	Z+2, r26	; 0x02
    2054:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2056:	fe 01       	movw	r30, r28
    2058:	ef 55       	subi	r30, 0x5F	; 95
    205a:	ff 4f       	sbci	r31, 0xFF	; 255
    205c:	60 81       	ld	r22, Z
    205e:	71 81       	ldd	r23, Z+1	; 0x01
    2060:	82 81       	ldd	r24, Z+2	; 0x02
    2062:	93 81       	ldd	r25, Z+3	; 0x03
    2064:	20 e0       	ldi	r18, 0x00	; 0
    2066:	30 e0       	ldi	r19, 0x00	; 0
    2068:	40 e8       	ldi	r20, 0x80	; 128
    206a:	5f e3       	ldi	r21, 0x3F	; 63
    206c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2070:	88 23       	and	r24, r24
    2072:	44 f4       	brge	.+16     	; 0x2084 <CLCD_voidHamoksha+0xd3a>
		__ticks = 1;
    2074:	fe 01       	movw	r30, r28
    2076:	e1 56       	subi	r30, 0x61	; 97
    2078:	ff 4f       	sbci	r31, 0xFF	; 255
    207a:	81 e0       	ldi	r24, 0x01	; 1
    207c:	90 e0       	ldi	r25, 0x00	; 0
    207e:	91 83       	std	Z+1, r25	; 0x01
    2080:	80 83       	st	Z, r24
    2082:	64 c0       	rjmp	.+200    	; 0x214c <CLCD_voidHamoksha+0xe02>
	else if (__tmp > 65535)
    2084:	fe 01       	movw	r30, r28
    2086:	ef 55       	subi	r30, 0x5F	; 95
    2088:	ff 4f       	sbci	r31, 0xFF	; 255
    208a:	60 81       	ld	r22, Z
    208c:	71 81       	ldd	r23, Z+1	; 0x01
    208e:	82 81       	ldd	r24, Z+2	; 0x02
    2090:	93 81       	ldd	r25, Z+3	; 0x03
    2092:	20 e0       	ldi	r18, 0x00	; 0
    2094:	3f ef       	ldi	r19, 0xFF	; 255
    2096:	4f e7       	ldi	r20, 0x7F	; 127
    2098:	57 e4       	ldi	r21, 0x47	; 71
    209a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    209e:	18 16       	cp	r1, r24
    20a0:	0c f0       	brlt	.+2      	; 0x20a4 <CLCD_voidHamoksha+0xd5a>
    20a2:	43 c0       	rjmp	.+134    	; 0x212a <CLCD_voidHamoksha+0xde0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20a4:	fe 01       	movw	r30, r28
    20a6:	eb 55       	subi	r30, 0x5B	; 91
    20a8:	ff 4f       	sbci	r31, 0xFF	; 255
    20aa:	60 81       	ld	r22, Z
    20ac:	71 81       	ldd	r23, Z+1	; 0x01
    20ae:	82 81       	ldd	r24, Z+2	; 0x02
    20b0:	93 81       	ldd	r25, Z+3	; 0x03
    20b2:	20 e0       	ldi	r18, 0x00	; 0
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	40 e2       	ldi	r20, 0x20	; 32
    20b8:	51 e4       	ldi	r21, 0x41	; 65
    20ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20be:	dc 01       	movw	r26, r24
    20c0:	cb 01       	movw	r24, r22
    20c2:	8e 01       	movw	r16, r28
    20c4:	01 56       	subi	r16, 0x61	; 97
    20c6:	1f 4f       	sbci	r17, 0xFF	; 255
    20c8:	bc 01       	movw	r22, r24
    20ca:	cd 01       	movw	r24, r26
    20cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d0:	dc 01       	movw	r26, r24
    20d2:	cb 01       	movw	r24, r22
    20d4:	f8 01       	movw	r30, r16
    20d6:	91 83       	std	Z+1, r25	; 0x01
    20d8:	80 83       	st	Z, r24
    20da:	1f c0       	rjmp	.+62     	; 0x211a <CLCD_voidHamoksha+0xdd0>
    20dc:	fe 01       	movw	r30, r28
    20de:	e3 56       	subi	r30, 0x63	; 99
    20e0:	ff 4f       	sbci	r31, 0xFF	; 255
    20e2:	80 e9       	ldi	r24, 0x90	; 144
    20e4:	91 e0       	ldi	r25, 0x01	; 1
    20e6:	91 83       	std	Z+1, r25	; 0x01
    20e8:	80 83       	st	Z, r24
    20ea:	fe 01       	movw	r30, r28
    20ec:	e3 56       	subi	r30, 0x63	; 99
    20ee:	ff 4f       	sbci	r31, 0xFF	; 255
    20f0:	80 81       	ld	r24, Z
    20f2:	91 81       	ldd	r25, Z+1	; 0x01
    20f4:	01 97       	sbiw	r24, 0x01	; 1
    20f6:	f1 f7       	brne	.-4      	; 0x20f4 <CLCD_voidHamoksha+0xdaa>
    20f8:	fe 01       	movw	r30, r28
    20fa:	e3 56       	subi	r30, 0x63	; 99
    20fc:	ff 4f       	sbci	r31, 0xFF	; 255
    20fe:	91 83       	std	Z+1, r25	; 0x01
    2100:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2102:	de 01       	movw	r26, r28
    2104:	a1 56       	subi	r26, 0x61	; 97
    2106:	bf 4f       	sbci	r27, 0xFF	; 255
    2108:	fe 01       	movw	r30, r28
    210a:	e1 56       	subi	r30, 0x61	; 97
    210c:	ff 4f       	sbci	r31, 0xFF	; 255
    210e:	80 81       	ld	r24, Z
    2110:	91 81       	ldd	r25, Z+1	; 0x01
    2112:	01 97       	sbiw	r24, 0x01	; 1
    2114:	11 96       	adiw	r26, 0x01	; 1
    2116:	9c 93       	st	X, r25
    2118:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    211a:	fe 01       	movw	r30, r28
    211c:	e1 56       	subi	r30, 0x61	; 97
    211e:	ff 4f       	sbci	r31, 0xFF	; 255
    2120:	80 81       	ld	r24, Z
    2122:	91 81       	ldd	r25, Z+1	; 0x01
    2124:	00 97       	sbiw	r24, 0x00	; 0
    2126:	d1 f6       	brne	.-76     	; 0x20dc <CLCD_voidHamoksha+0xd92>
    2128:	28 c0       	rjmp	.+80     	; 0x217a <CLCD_voidHamoksha+0xe30>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    212a:	8e 01       	movw	r16, r28
    212c:	01 56       	subi	r16, 0x61	; 97
    212e:	1f 4f       	sbci	r17, 0xFF	; 255
    2130:	fe 01       	movw	r30, r28
    2132:	ef 55       	subi	r30, 0x5F	; 95
    2134:	ff 4f       	sbci	r31, 0xFF	; 255
    2136:	60 81       	ld	r22, Z
    2138:	71 81       	ldd	r23, Z+1	; 0x01
    213a:	82 81       	ldd	r24, Z+2	; 0x02
    213c:	93 81       	ldd	r25, Z+3	; 0x03
    213e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2142:	dc 01       	movw	r26, r24
    2144:	cb 01       	movw	r24, r22
    2146:	f8 01       	movw	r30, r16
    2148:	91 83       	std	Z+1, r25	; 0x01
    214a:	80 83       	st	Z, r24
    214c:	de 01       	movw	r26, r28
    214e:	a5 56       	subi	r26, 0x65	; 101
    2150:	bf 4f       	sbci	r27, 0xFF	; 255
    2152:	fe 01       	movw	r30, r28
    2154:	e1 56       	subi	r30, 0x61	; 97
    2156:	ff 4f       	sbci	r31, 0xFF	; 255
    2158:	80 81       	ld	r24, Z
    215a:	91 81       	ldd	r25, Z+1	; 0x01
    215c:	11 96       	adiw	r26, 0x01	; 1
    215e:	9c 93       	st	X, r25
    2160:	8e 93       	st	-X, r24
    2162:	fe 01       	movw	r30, r28
    2164:	e5 56       	subi	r30, 0x65	; 101
    2166:	ff 4f       	sbci	r31, 0xFF	; 255
    2168:	80 81       	ld	r24, Z
    216a:	91 81       	ldd	r25, Z+1	; 0x01
    216c:	01 97       	sbiw	r24, 0x01	; 1
    216e:	f1 f7       	brne	.-4      	; 0x216c <CLCD_voidHamoksha+0xe22>
    2170:	fe 01       	movw	r30, r28
    2172:	e5 56       	subi	r30, 0x65	; 101
    2174:	ff 4f       	sbci	r31, 0xFF	; 255
    2176:	91 83       	std	Z+1, r25	; 0x01
    2178:	80 83       	st	Z, r24
	_delay_ms(600);
	 i=0;
    217a:	fe 01       	movw	r30, r28
    217c:	ef 51       	subi	r30, 0x1F	; 31
    217e:	ff 4f       	sbci	r31, 0xFF	; 255
    2180:	10 82       	st	Z, r1
    2182:	3d c2       	rjmp	.+1146   	; 0x25fe <CLCD_voidHamoksha+0x12b4>
	while(i<10)
	{
		CLCD_u8SpecialCharacter(0,Local_u8HamokshaPattern1,7,1);
    2184:	9e 01       	movw	r18, r28
    2186:	26 51       	subi	r18, 0x16	; 22
    2188:	3f 4f       	sbci	r19, 0xFF	; 255
    218a:	80 e0       	ldi	r24, 0x00	; 0
    218c:	b9 01       	movw	r22, r18
    218e:	47 e0       	ldi	r20, 0x07	; 7
    2190:	21 e0       	ldi	r18, 0x01	; 1
    2192:	0e 94 4f 09 	call	0x129e	; 0x129e <CLCD_u8SpecialCharacter>
    2196:	fe 01       	movw	r30, r28
    2198:	e9 56       	subi	r30, 0x69	; 105
    219a:	ff 4f       	sbci	r31, 0xFF	; 255
    219c:	80 e0       	ldi	r24, 0x00	; 0
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	a0 e2       	ldi	r26, 0x20	; 32
    21a2:	b2 e4       	ldi	r27, 0x42	; 66
    21a4:	80 83       	st	Z, r24
    21a6:	91 83       	std	Z+1, r25	; 0x01
    21a8:	a2 83       	std	Z+2, r26	; 0x02
    21aa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ac:	8e 01       	movw	r16, r28
    21ae:	0d 56       	subi	r16, 0x6D	; 109
    21b0:	1f 4f       	sbci	r17, 0xFF	; 255
    21b2:	fe 01       	movw	r30, r28
    21b4:	e9 56       	subi	r30, 0x69	; 105
    21b6:	ff 4f       	sbci	r31, 0xFF	; 255
    21b8:	60 81       	ld	r22, Z
    21ba:	71 81       	ldd	r23, Z+1	; 0x01
    21bc:	82 81       	ldd	r24, Z+2	; 0x02
    21be:	93 81       	ldd	r25, Z+3	; 0x03
    21c0:	20 e0       	ldi	r18, 0x00	; 0
    21c2:	30 e0       	ldi	r19, 0x00	; 0
    21c4:	4a e7       	ldi	r20, 0x7A	; 122
    21c6:	55 e4       	ldi	r21, 0x45	; 69
    21c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21cc:	dc 01       	movw	r26, r24
    21ce:	cb 01       	movw	r24, r22
    21d0:	f8 01       	movw	r30, r16
    21d2:	80 83       	st	Z, r24
    21d4:	91 83       	std	Z+1, r25	; 0x01
    21d6:	a2 83       	std	Z+2, r26	; 0x02
    21d8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21da:	fe 01       	movw	r30, r28
    21dc:	ed 56       	subi	r30, 0x6D	; 109
    21de:	ff 4f       	sbci	r31, 0xFF	; 255
    21e0:	60 81       	ld	r22, Z
    21e2:	71 81       	ldd	r23, Z+1	; 0x01
    21e4:	82 81       	ldd	r24, Z+2	; 0x02
    21e6:	93 81       	ldd	r25, Z+3	; 0x03
    21e8:	20 e0       	ldi	r18, 0x00	; 0
    21ea:	30 e0       	ldi	r19, 0x00	; 0
    21ec:	40 e8       	ldi	r20, 0x80	; 128
    21ee:	5f e3       	ldi	r21, 0x3F	; 63
    21f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21f4:	88 23       	and	r24, r24
    21f6:	44 f4       	brge	.+16     	; 0x2208 <CLCD_voidHamoksha+0xebe>
		__ticks = 1;
    21f8:	fe 01       	movw	r30, r28
    21fa:	ef 56       	subi	r30, 0x6F	; 111
    21fc:	ff 4f       	sbci	r31, 0xFF	; 255
    21fe:	81 e0       	ldi	r24, 0x01	; 1
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	91 83       	std	Z+1, r25	; 0x01
    2204:	80 83       	st	Z, r24
    2206:	64 c0       	rjmp	.+200    	; 0x22d0 <CLCD_voidHamoksha+0xf86>
	else if (__tmp > 65535)
    2208:	fe 01       	movw	r30, r28
    220a:	ed 56       	subi	r30, 0x6D	; 109
    220c:	ff 4f       	sbci	r31, 0xFF	; 255
    220e:	60 81       	ld	r22, Z
    2210:	71 81       	ldd	r23, Z+1	; 0x01
    2212:	82 81       	ldd	r24, Z+2	; 0x02
    2214:	93 81       	ldd	r25, Z+3	; 0x03
    2216:	20 e0       	ldi	r18, 0x00	; 0
    2218:	3f ef       	ldi	r19, 0xFF	; 255
    221a:	4f e7       	ldi	r20, 0x7F	; 127
    221c:	57 e4       	ldi	r21, 0x47	; 71
    221e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2222:	18 16       	cp	r1, r24
    2224:	0c f0       	brlt	.+2      	; 0x2228 <CLCD_voidHamoksha+0xede>
    2226:	43 c0       	rjmp	.+134    	; 0x22ae <CLCD_voidHamoksha+0xf64>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2228:	fe 01       	movw	r30, r28
    222a:	e9 56       	subi	r30, 0x69	; 105
    222c:	ff 4f       	sbci	r31, 0xFF	; 255
    222e:	60 81       	ld	r22, Z
    2230:	71 81       	ldd	r23, Z+1	; 0x01
    2232:	82 81       	ldd	r24, Z+2	; 0x02
    2234:	93 81       	ldd	r25, Z+3	; 0x03
    2236:	20 e0       	ldi	r18, 0x00	; 0
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	40 e2       	ldi	r20, 0x20	; 32
    223c:	51 e4       	ldi	r21, 0x41	; 65
    223e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2242:	dc 01       	movw	r26, r24
    2244:	cb 01       	movw	r24, r22
    2246:	8e 01       	movw	r16, r28
    2248:	0f 56       	subi	r16, 0x6F	; 111
    224a:	1f 4f       	sbci	r17, 0xFF	; 255
    224c:	bc 01       	movw	r22, r24
    224e:	cd 01       	movw	r24, r26
    2250:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2254:	dc 01       	movw	r26, r24
    2256:	cb 01       	movw	r24, r22
    2258:	f8 01       	movw	r30, r16
    225a:	91 83       	std	Z+1, r25	; 0x01
    225c:	80 83       	st	Z, r24
    225e:	1f c0       	rjmp	.+62     	; 0x229e <CLCD_voidHamoksha+0xf54>
    2260:	fe 01       	movw	r30, r28
    2262:	e1 57       	subi	r30, 0x71	; 113
    2264:	ff 4f       	sbci	r31, 0xFF	; 255
    2266:	80 e9       	ldi	r24, 0x90	; 144
    2268:	91 e0       	ldi	r25, 0x01	; 1
    226a:	91 83       	std	Z+1, r25	; 0x01
    226c:	80 83       	st	Z, r24
    226e:	fe 01       	movw	r30, r28
    2270:	e1 57       	subi	r30, 0x71	; 113
    2272:	ff 4f       	sbci	r31, 0xFF	; 255
    2274:	80 81       	ld	r24, Z
    2276:	91 81       	ldd	r25, Z+1	; 0x01
    2278:	01 97       	sbiw	r24, 0x01	; 1
    227a:	f1 f7       	brne	.-4      	; 0x2278 <CLCD_voidHamoksha+0xf2e>
    227c:	fe 01       	movw	r30, r28
    227e:	e1 57       	subi	r30, 0x71	; 113
    2280:	ff 4f       	sbci	r31, 0xFF	; 255
    2282:	91 83       	std	Z+1, r25	; 0x01
    2284:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2286:	de 01       	movw	r26, r28
    2288:	af 56       	subi	r26, 0x6F	; 111
    228a:	bf 4f       	sbci	r27, 0xFF	; 255
    228c:	fe 01       	movw	r30, r28
    228e:	ef 56       	subi	r30, 0x6F	; 111
    2290:	ff 4f       	sbci	r31, 0xFF	; 255
    2292:	80 81       	ld	r24, Z
    2294:	91 81       	ldd	r25, Z+1	; 0x01
    2296:	01 97       	sbiw	r24, 0x01	; 1
    2298:	11 96       	adiw	r26, 0x01	; 1
    229a:	9c 93       	st	X, r25
    229c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    229e:	fe 01       	movw	r30, r28
    22a0:	ef 56       	subi	r30, 0x6F	; 111
    22a2:	ff 4f       	sbci	r31, 0xFF	; 255
    22a4:	80 81       	ld	r24, Z
    22a6:	91 81       	ldd	r25, Z+1	; 0x01
    22a8:	00 97       	sbiw	r24, 0x00	; 0
    22aa:	d1 f6       	brne	.-76     	; 0x2260 <CLCD_voidHamoksha+0xf16>
    22ac:	27 c0       	rjmp	.+78     	; 0x22fc <CLCD_voidHamoksha+0xfb2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22ae:	8e 01       	movw	r16, r28
    22b0:	0f 56       	subi	r16, 0x6F	; 111
    22b2:	1f 4f       	sbci	r17, 0xFF	; 255
    22b4:	fe 01       	movw	r30, r28
    22b6:	ed 56       	subi	r30, 0x6D	; 109
    22b8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ba:	60 81       	ld	r22, Z
    22bc:	71 81       	ldd	r23, Z+1	; 0x01
    22be:	82 81       	ldd	r24, Z+2	; 0x02
    22c0:	93 81       	ldd	r25, Z+3	; 0x03
    22c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c6:	dc 01       	movw	r26, r24
    22c8:	cb 01       	movw	r24, r22
    22ca:	f8 01       	movw	r30, r16
    22cc:	91 83       	std	Z+1, r25	; 0x01
    22ce:	80 83       	st	Z, r24
    22d0:	de 01       	movw	r26, r28
    22d2:	a3 57       	subi	r26, 0x73	; 115
    22d4:	bf 4f       	sbci	r27, 0xFF	; 255
    22d6:	fe 01       	movw	r30, r28
    22d8:	ef 56       	subi	r30, 0x6F	; 111
    22da:	ff 4f       	sbci	r31, 0xFF	; 255
    22dc:	80 81       	ld	r24, Z
    22de:	91 81       	ldd	r25, Z+1	; 0x01
    22e0:	8d 93       	st	X+, r24
    22e2:	9c 93       	st	X, r25
    22e4:	fe 01       	movw	r30, r28
    22e6:	e3 57       	subi	r30, 0x73	; 115
    22e8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ea:	80 81       	ld	r24, Z
    22ec:	91 81       	ldd	r25, Z+1	; 0x01
    22ee:	01 97       	sbiw	r24, 0x01	; 1
    22f0:	f1 f7       	brne	.-4      	; 0x22ee <CLCD_voidHamoksha+0xfa4>
    22f2:	fe 01       	movw	r30, r28
    22f4:	e3 57       	subi	r30, 0x73	; 115
    22f6:	ff 4f       	sbci	r31, 0xFF	; 255
    22f8:	91 83       	std	Z+1, r25	; 0x01
    22fa:	80 83       	st	Z, r24
		_delay_ms(40);
		CLCD_u8SpecialCharacter(1,Local_u8HamokshaPattern2,7,1);
    22fc:	9e 01       	movw	r18, r28
    22fe:	2e 50       	subi	r18, 0x0E	; 14
    2300:	3f 4f       	sbci	r19, 0xFF	; 255
    2302:	81 e0       	ldi	r24, 0x01	; 1
    2304:	b9 01       	movw	r22, r18
    2306:	47 e0       	ldi	r20, 0x07	; 7
    2308:	21 e0       	ldi	r18, 0x01	; 1
    230a:	0e 94 4f 09 	call	0x129e	; 0x129e <CLCD_u8SpecialCharacter>
    230e:	fe 01       	movw	r30, r28
    2310:	e7 57       	subi	r30, 0x77	; 119
    2312:	ff 4f       	sbci	r31, 0xFF	; 255
    2314:	80 e0       	ldi	r24, 0x00	; 0
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	a0 e2       	ldi	r26, 0x20	; 32
    231a:	b2 e4       	ldi	r27, 0x42	; 66
    231c:	80 83       	st	Z, r24
    231e:	91 83       	std	Z+1, r25	; 0x01
    2320:	a2 83       	std	Z+2, r26	; 0x02
    2322:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2324:	8e 01       	movw	r16, r28
    2326:	0b 57       	subi	r16, 0x7B	; 123
    2328:	1f 4f       	sbci	r17, 0xFF	; 255
    232a:	fe 01       	movw	r30, r28
    232c:	e7 57       	subi	r30, 0x77	; 119
    232e:	ff 4f       	sbci	r31, 0xFF	; 255
    2330:	60 81       	ld	r22, Z
    2332:	71 81       	ldd	r23, Z+1	; 0x01
    2334:	82 81       	ldd	r24, Z+2	; 0x02
    2336:	93 81       	ldd	r25, Z+3	; 0x03
    2338:	20 e0       	ldi	r18, 0x00	; 0
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	4a e7       	ldi	r20, 0x7A	; 122
    233e:	55 e4       	ldi	r21, 0x45	; 69
    2340:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2344:	dc 01       	movw	r26, r24
    2346:	cb 01       	movw	r24, r22
    2348:	f8 01       	movw	r30, r16
    234a:	80 83       	st	Z, r24
    234c:	91 83       	std	Z+1, r25	; 0x01
    234e:	a2 83       	std	Z+2, r26	; 0x02
    2350:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2352:	fe 01       	movw	r30, r28
    2354:	eb 57       	subi	r30, 0x7B	; 123
    2356:	ff 4f       	sbci	r31, 0xFF	; 255
    2358:	60 81       	ld	r22, Z
    235a:	71 81       	ldd	r23, Z+1	; 0x01
    235c:	82 81       	ldd	r24, Z+2	; 0x02
    235e:	93 81       	ldd	r25, Z+3	; 0x03
    2360:	20 e0       	ldi	r18, 0x00	; 0
    2362:	30 e0       	ldi	r19, 0x00	; 0
    2364:	40 e8       	ldi	r20, 0x80	; 128
    2366:	5f e3       	ldi	r21, 0x3F	; 63
    2368:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    236c:	88 23       	and	r24, r24
    236e:	44 f4       	brge	.+16     	; 0x2380 <CLCD_voidHamoksha+0x1036>
		__ticks = 1;
    2370:	fe 01       	movw	r30, r28
    2372:	ed 57       	subi	r30, 0x7D	; 125
    2374:	ff 4f       	sbci	r31, 0xFF	; 255
    2376:	81 e0       	ldi	r24, 0x01	; 1
    2378:	90 e0       	ldi	r25, 0x00	; 0
    237a:	91 83       	std	Z+1, r25	; 0x01
    237c:	80 83       	st	Z, r24
    237e:	64 c0       	rjmp	.+200    	; 0x2448 <CLCD_voidHamoksha+0x10fe>
	else if (__tmp > 65535)
    2380:	fe 01       	movw	r30, r28
    2382:	eb 57       	subi	r30, 0x7B	; 123
    2384:	ff 4f       	sbci	r31, 0xFF	; 255
    2386:	60 81       	ld	r22, Z
    2388:	71 81       	ldd	r23, Z+1	; 0x01
    238a:	82 81       	ldd	r24, Z+2	; 0x02
    238c:	93 81       	ldd	r25, Z+3	; 0x03
    238e:	20 e0       	ldi	r18, 0x00	; 0
    2390:	3f ef       	ldi	r19, 0xFF	; 255
    2392:	4f e7       	ldi	r20, 0x7F	; 127
    2394:	57 e4       	ldi	r21, 0x47	; 71
    2396:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    239a:	18 16       	cp	r1, r24
    239c:	0c f0       	brlt	.+2      	; 0x23a0 <CLCD_voidHamoksha+0x1056>
    239e:	43 c0       	rjmp	.+134    	; 0x2426 <CLCD_voidHamoksha+0x10dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23a0:	fe 01       	movw	r30, r28
    23a2:	e7 57       	subi	r30, 0x77	; 119
    23a4:	ff 4f       	sbci	r31, 0xFF	; 255
    23a6:	60 81       	ld	r22, Z
    23a8:	71 81       	ldd	r23, Z+1	; 0x01
    23aa:	82 81       	ldd	r24, Z+2	; 0x02
    23ac:	93 81       	ldd	r25, Z+3	; 0x03
    23ae:	20 e0       	ldi	r18, 0x00	; 0
    23b0:	30 e0       	ldi	r19, 0x00	; 0
    23b2:	40 e2       	ldi	r20, 0x20	; 32
    23b4:	51 e4       	ldi	r21, 0x41	; 65
    23b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ba:	dc 01       	movw	r26, r24
    23bc:	cb 01       	movw	r24, r22
    23be:	8e 01       	movw	r16, r28
    23c0:	0d 57       	subi	r16, 0x7D	; 125
    23c2:	1f 4f       	sbci	r17, 0xFF	; 255
    23c4:	bc 01       	movw	r22, r24
    23c6:	cd 01       	movw	r24, r26
    23c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23cc:	dc 01       	movw	r26, r24
    23ce:	cb 01       	movw	r24, r22
    23d0:	f8 01       	movw	r30, r16
    23d2:	91 83       	std	Z+1, r25	; 0x01
    23d4:	80 83       	st	Z, r24
    23d6:	1f c0       	rjmp	.+62     	; 0x2416 <CLCD_voidHamoksha+0x10cc>
    23d8:	fe 01       	movw	r30, r28
    23da:	ef 57       	subi	r30, 0x7F	; 127
    23dc:	ff 4f       	sbci	r31, 0xFF	; 255
    23de:	80 e9       	ldi	r24, 0x90	; 144
    23e0:	91 e0       	ldi	r25, 0x01	; 1
    23e2:	91 83       	std	Z+1, r25	; 0x01
    23e4:	80 83       	st	Z, r24
    23e6:	fe 01       	movw	r30, r28
    23e8:	ef 57       	subi	r30, 0x7F	; 127
    23ea:	ff 4f       	sbci	r31, 0xFF	; 255
    23ec:	80 81       	ld	r24, Z
    23ee:	91 81       	ldd	r25, Z+1	; 0x01
    23f0:	01 97       	sbiw	r24, 0x01	; 1
    23f2:	f1 f7       	brne	.-4      	; 0x23f0 <CLCD_voidHamoksha+0x10a6>
    23f4:	fe 01       	movw	r30, r28
    23f6:	ef 57       	subi	r30, 0x7F	; 127
    23f8:	ff 4f       	sbci	r31, 0xFF	; 255
    23fa:	91 83       	std	Z+1, r25	; 0x01
    23fc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23fe:	de 01       	movw	r26, r28
    2400:	ad 57       	subi	r26, 0x7D	; 125
    2402:	bf 4f       	sbci	r27, 0xFF	; 255
    2404:	fe 01       	movw	r30, r28
    2406:	ed 57       	subi	r30, 0x7D	; 125
    2408:	ff 4f       	sbci	r31, 0xFF	; 255
    240a:	80 81       	ld	r24, Z
    240c:	91 81       	ldd	r25, Z+1	; 0x01
    240e:	01 97       	sbiw	r24, 0x01	; 1
    2410:	11 96       	adiw	r26, 0x01	; 1
    2412:	9c 93       	st	X, r25
    2414:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2416:	fe 01       	movw	r30, r28
    2418:	ed 57       	subi	r30, 0x7D	; 125
    241a:	ff 4f       	sbci	r31, 0xFF	; 255
    241c:	80 81       	ld	r24, Z
    241e:	91 81       	ldd	r25, Z+1	; 0x01
    2420:	00 97       	sbiw	r24, 0x00	; 0
    2422:	d1 f6       	brne	.-76     	; 0x23d8 <CLCD_voidHamoksha+0x108e>
    2424:	27 c0       	rjmp	.+78     	; 0x2474 <CLCD_voidHamoksha+0x112a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2426:	8e 01       	movw	r16, r28
    2428:	0d 57       	subi	r16, 0x7D	; 125
    242a:	1f 4f       	sbci	r17, 0xFF	; 255
    242c:	fe 01       	movw	r30, r28
    242e:	eb 57       	subi	r30, 0x7B	; 123
    2430:	ff 4f       	sbci	r31, 0xFF	; 255
    2432:	60 81       	ld	r22, Z
    2434:	71 81       	ldd	r23, Z+1	; 0x01
    2436:	82 81       	ldd	r24, Z+2	; 0x02
    2438:	93 81       	ldd	r25, Z+3	; 0x03
    243a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    243e:	dc 01       	movw	r26, r24
    2440:	cb 01       	movw	r24, r22
    2442:	f8 01       	movw	r30, r16
    2444:	91 83       	std	Z+1, r25	; 0x01
    2446:	80 83       	st	Z, r24
    2448:	de 01       	movw	r26, r28
    244a:	a1 58       	subi	r26, 0x81	; 129
    244c:	bf 4f       	sbci	r27, 0xFF	; 255
    244e:	fe 01       	movw	r30, r28
    2450:	ed 57       	subi	r30, 0x7D	; 125
    2452:	ff 4f       	sbci	r31, 0xFF	; 255
    2454:	80 81       	ld	r24, Z
    2456:	91 81       	ldd	r25, Z+1	; 0x01
    2458:	8d 93       	st	X+, r24
    245a:	9c 93       	st	X, r25
    245c:	fe 01       	movw	r30, r28
    245e:	e1 58       	subi	r30, 0x81	; 129
    2460:	ff 4f       	sbci	r31, 0xFF	; 255
    2462:	80 81       	ld	r24, Z
    2464:	91 81       	ldd	r25, Z+1	; 0x01
    2466:	01 97       	sbiw	r24, 0x01	; 1
    2468:	f1 f7       	brne	.-4      	; 0x2466 <CLCD_voidHamoksha+0x111c>
    246a:	fe 01       	movw	r30, r28
    246c:	e1 58       	subi	r30, 0x81	; 129
    246e:	ff 4f       	sbci	r31, 0xFF	; 255
    2470:	91 83       	std	Z+1, r25	; 0x01
    2472:	80 83       	st	Z, r24
		_delay_ms(40);
		CLCD_u8SpecialCharacter(2,Local_u8HamokshaPattern3,7,1);
    2474:	9e 01       	movw	r18, r28
    2476:	26 50       	subi	r18, 0x06	; 6
    2478:	3f 4f       	sbci	r19, 0xFF	; 255
    247a:	82 e0       	ldi	r24, 0x02	; 2
    247c:	b9 01       	movw	r22, r18
    247e:	47 e0       	ldi	r20, 0x07	; 7
    2480:	21 e0       	ldi	r18, 0x01	; 1
    2482:	0e 94 4f 09 	call	0x129e	; 0x129e <CLCD_u8SpecialCharacter>
    2486:	fe 01       	movw	r30, r28
    2488:	e5 58       	subi	r30, 0x85	; 133
    248a:	ff 4f       	sbci	r31, 0xFF	; 255
    248c:	80 e0       	ldi	r24, 0x00	; 0
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	a0 e2       	ldi	r26, 0x20	; 32
    2492:	b2 e4       	ldi	r27, 0x42	; 66
    2494:	80 83       	st	Z, r24
    2496:	91 83       	std	Z+1, r25	; 0x01
    2498:	a2 83       	std	Z+2, r26	; 0x02
    249a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    249c:	8e 01       	movw	r16, r28
    249e:	09 58       	subi	r16, 0x89	; 137
    24a0:	1f 4f       	sbci	r17, 0xFF	; 255
    24a2:	fe 01       	movw	r30, r28
    24a4:	e5 58       	subi	r30, 0x85	; 133
    24a6:	ff 4f       	sbci	r31, 0xFF	; 255
    24a8:	60 81       	ld	r22, Z
    24aa:	71 81       	ldd	r23, Z+1	; 0x01
    24ac:	82 81       	ldd	r24, Z+2	; 0x02
    24ae:	93 81       	ldd	r25, Z+3	; 0x03
    24b0:	20 e0       	ldi	r18, 0x00	; 0
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	4a e7       	ldi	r20, 0x7A	; 122
    24b6:	55 e4       	ldi	r21, 0x45	; 69
    24b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24bc:	dc 01       	movw	r26, r24
    24be:	cb 01       	movw	r24, r22
    24c0:	f8 01       	movw	r30, r16
    24c2:	80 83       	st	Z, r24
    24c4:	91 83       	std	Z+1, r25	; 0x01
    24c6:	a2 83       	std	Z+2, r26	; 0x02
    24c8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24ca:	fe 01       	movw	r30, r28
    24cc:	e9 58       	subi	r30, 0x89	; 137
    24ce:	ff 4f       	sbci	r31, 0xFF	; 255
    24d0:	60 81       	ld	r22, Z
    24d2:	71 81       	ldd	r23, Z+1	; 0x01
    24d4:	82 81       	ldd	r24, Z+2	; 0x02
    24d6:	93 81       	ldd	r25, Z+3	; 0x03
    24d8:	20 e0       	ldi	r18, 0x00	; 0
    24da:	30 e0       	ldi	r19, 0x00	; 0
    24dc:	40 e8       	ldi	r20, 0x80	; 128
    24de:	5f e3       	ldi	r21, 0x3F	; 63
    24e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24e4:	88 23       	and	r24, r24
    24e6:	44 f4       	brge	.+16     	; 0x24f8 <CLCD_voidHamoksha+0x11ae>
		__ticks = 1;
    24e8:	fe 01       	movw	r30, r28
    24ea:	eb 58       	subi	r30, 0x8B	; 139
    24ec:	ff 4f       	sbci	r31, 0xFF	; 255
    24ee:	81 e0       	ldi	r24, 0x01	; 1
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	91 83       	std	Z+1, r25	; 0x01
    24f4:	80 83       	st	Z, r24
    24f6:	64 c0       	rjmp	.+200    	; 0x25c0 <CLCD_voidHamoksha+0x1276>
	else if (__tmp > 65535)
    24f8:	fe 01       	movw	r30, r28
    24fa:	e9 58       	subi	r30, 0x89	; 137
    24fc:	ff 4f       	sbci	r31, 0xFF	; 255
    24fe:	60 81       	ld	r22, Z
    2500:	71 81       	ldd	r23, Z+1	; 0x01
    2502:	82 81       	ldd	r24, Z+2	; 0x02
    2504:	93 81       	ldd	r25, Z+3	; 0x03
    2506:	20 e0       	ldi	r18, 0x00	; 0
    2508:	3f ef       	ldi	r19, 0xFF	; 255
    250a:	4f e7       	ldi	r20, 0x7F	; 127
    250c:	57 e4       	ldi	r21, 0x47	; 71
    250e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2512:	18 16       	cp	r1, r24
    2514:	0c f0       	brlt	.+2      	; 0x2518 <CLCD_voidHamoksha+0x11ce>
    2516:	43 c0       	rjmp	.+134    	; 0x259e <CLCD_voidHamoksha+0x1254>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2518:	fe 01       	movw	r30, r28
    251a:	e5 58       	subi	r30, 0x85	; 133
    251c:	ff 4f       	sbci	r31, 0xFF	; 255
    251e:	60 81       	ld	r22, Z
    2520:	71 81       	ldd	r23, Z+1	; 0x01
    2522:	82 81       	ldd	r24, Z+2	; 0x02
    2524:	93 81       	ldd	r25, Z+3	; 0x03
    2526:	20 e0       	ldi	r18, 0x00	; 0
    2528:	30 e0       	ldi	r19, 0x00	; 0
    252a:	40 e2       	ldi	r20, 0x20	; 32
    252c:	51 e4       	ldi	r21, 0x41	; 65
    252e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2532:	dc 01       	movw	r26, r24
    2534:	cb 01       	movw	r24, r22
    2536:	8e 01       	movw	r16, r28
    2538:	0b 58       	subi	r16, 0x8B	; 139
    253a:	1f 4f       	sbci	r17, 0xFF	; 255
    253c:	bc 01       	movw	r22, r24
    253e:	cd 01       	movw	r24, r26
    2540:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2544:	dc 01       	movw	r26, r24
    2546:	cb 01       	movw	r24, r22
    2548:	f8 01       	movw	r30, r16
    254a:	91 83       	std	Z+1, r25	; 0x01
    254c:	80 83       	st	Z, r24
    254e:	1f c0       	rjmp	.+62     	; 0x258e <CLCD_voidHamoksha+0x1244>
    2550:	fe 01       	movw	r30, r28
    2552:	ed 58       	subi	r30, 0x8D	; 141
    2554:	ff 4f       	sbci	r31, 0xFF	; 255
    2556:	80 e9       	ldi	r24, 0x90	; 144
    2558:	91 e0       	ldi	r25, 0x01	; 1
    255a:	91 83       	std	Z+1, r25	; 0x01
    255c:	80 83       	st	Z, r24
    255e:	fe 01       	movw	r30, r28
    2560:	ed 58       	subi	r30, 0x8D	; 141
    2562:	ff 4f       	sbci	r31, 0xFF	; 255
    2564:	80 81       	ld	r24, Z
    2566:	91 81       	ldd	r25, Z+1	; 0x01
    2568:	01 97       	sbiw	r24, 0x01	; 1
    256a:	f1 f7       	brne	.-4      	; 0x2568 <CLCD_voidHamoksha+0x121e>
    256c:	fe 01       	movw	r30, r28
    256e:	ed 58       	subi	r30, 0x8D	; 141
    2570:	ff 4f       	sbci	r31, 0xFF	; 255
    2572:	91 83       	std	Z+1, r25	; 0x01
    2574:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2576:	de 01       	movw	r26, r28
    2578:	ab 58       	subi	r26, 0x8B	; 139
    257a:	bf 4f       	sbci	r27, 0xFF	; 255
    257c:	fe 01       	movw	r30, r28
    257e:	eb 58       	subi	r30, 0x8B	; 139
    2580:	ff 4f       	sbci	r31, 0xFF	; 255
    2582:	80 81       	ld	r24, Z
    2584:	91 81       	ldd	r25, Z+1	; 0x01
    2586:	01 97       	sbiw	r24, 0x01	; 1
    2588:	11 96       	adiw	r26, 0x01	; 1
    258a:	9c 93       	st	X, r25
    258c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    258e:	fe 01       	movw	r30, r28
    2590:	eb 58       	subi	r30, 0x8B	; 139
    2592:	ff 4f       	sbci	r31, 0xFF	; 255
    2594:	80 81       	ld	r24, Z
    2596:	91 81       	ldd	r25, Z+1	; 0x01
    2598:	00 97       	sbiw	r24, 0x00	; 0
    259a:	d1 f6       	brne	.-76     	; 0x2550 <CLCD_voidHamoksha+0x1206>
    259c:	27 c0       	rjmp	.+78     	; 0x25ec <CLCD_voidHamoksha+0x12a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    259e:	8e 01       	movw	r16, r28
    25a0:	0b 58       	subi	r16, 0x8B	; 139
    25a2:	1f 4f       	sbci	r17, 0xFF	; 255
    25a4:	fe 01       	movw	r30, r28
    25a6:	e9 58       	subi	r30, 0x89	; 137
    25a8:	ff 4f       	sbci	r31, 0xFF	; 255
    25aa:	60 81       	ld	r22, Z
    25ac:	71 81       	ldd	r23, Z+1	; 0x01
    25ae:	82 81       	ldd	r24, Z+2	; 0x02
    25b0:	93 81       	ldd	r25, Z+3	; 0x03
    25b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25b6:	dc 01       	movw	r26, r24
    25b8:	cb 01       	movw	r24, r22
    25ba:	f8 01       	movw	r30, r16
    25bc:	91 83       	std	Z+1, r25	; 0x01
    25be:	80 83       	st	Z, r24
    25c0:	de 01       	movw	r26, r28
    25c2:	af 58       	subi	r26, 0x8F	; 143
    25c4:	bf 4f       	sbci	r27, 0xFF	; 255
    25c6:	fe 01       	movw	r30, r28
    25c8:	eb 58       	subi	r30, 0x8B	; 139
    25ca:	ff 4f       	sbci	r31, 0xFF	; 255
    25cc:	80 81       	ld	r24, Z
    25ce:	91 81       	ldd	r25, Z+1	; 0x01
    25d0:	8d 93       	st	X+, r24
    25d2:	9c 93       	st	X, r25
    25d4:	fe 01       	movw	r30, r28
    25d6:	ef 58       	subi	r30, 0x8F	; 143
    25d8:	ff 4f       	sbci	r31, 0xFF	; 255
    25da:	80 81       	ld	r24, Z
    25dc:	91 81       	ldd	r25, Z+1	; 0x01
    25de:	01 97       	sbiw	r24, 0x01	; 1
    25e0:	f1 f7       	brne	.-4      	; 0x25de <CLCD_voidHamoksha+0x1294>
    25e2:	fe 01       	movw	r30, r28
    25e4:	ef 58       	subi	r30, 0x8F	; 143
    25e6:	ff 4f       	sbci	r31, 0xFF	; 255
    25e8:	91 83       	std	Z+1, r25	; 0x01
    25ea:	80 83       	st	Z, r24
		_delay_ms(40);
        i++;
    25ec:	de 01       	movw	r26, r28
    25ee:	af 51       	subi	r26, 0x1F	; 31
    25f0:	bf 4f       	sbci	r27, 0xFF	; 255
    25f2:	fe 01       	movw	r30, r28
    25f4:	ef 51       	subi	r30, 0x1F	; 31
    25f6:	ff 4f       	sbci	r31, 0xFF	; 255
    25f8:	80 81       	ld	r24, Z
    25fa:	8f 5f       	subi	r24, 0xFF	; 255
    25fc:	8c 93       	st	X, r24
CLCD_voidClear();
CLCD_VoidGoToXY(0,0);
	CLCD_u8SendString("I CAN DANCE");
	_delay_ms(600);
	 i=0;
	while(i<10)
    25fe:	fe 01       	movw	r30, r28
    2600:	ef 51       	subi	r30, 0x1F	; 31
    2602:	ff 4f       	sbci	r31, 0xFF	; 255
    2604:	80 81       	ld	r24, Z
    2606:	8a 30       	cpi	r24, 0x0A	; 10
    2608:	08 f4       	brcc	.+2      	; 0x260c <CLCD_voidHamoksha+0x12c2>
    260a:	bc cd       	rjmp	.-1160   	; 0x2184 <CLCD_voidHamoksha+0xe3a>
		CLCD_u8SpecialCharacter(2,Local_u8HamokshaPattern3,7,1);
		_delay_ms(40);
        i++;

	}
	CLCD_voidClear();
    260c:	0e 94 9b 09 	call	0x1336	; 0x1336 <CLCD_voidClear>
	CLCD_VoidGoToXY(0,0);
    2610:	80 e0       	ldi	r24, 0x00	; 0
    2612:	60 e0       	ldi	r22, 0x00	; 0
    2614:	0e 94 2f 09 	call	0x125e	; 0x125e <CLCD_VoidGoToXY>
	CLCD_u8SendString(" I play Football");
    2618:	87 e8       	ldi	r24, 0x87	; 135
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	0e 94 70 08 	call	0x10e0	; 0x10e0 <CLCD_u8SendString>
    2620:	fe 01       	movw	r30, r28
    2622:	e3 59       	subi	r30, 0x93	; 147
    2624:	ff 4f       	sbci	r31, 0xFF	; 255
    2626:	80 e0       	ldi	r24, 0x00	; 0
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	a6 e1       	ldi	r26, 0x16	; 22
    262c:	b4 e4       	ldi	r27, 0x44	; 68
    262e:	80 83       	st	Z, r24
    2630:	91 83       	std	Z+1, r25	; 0x01
    2632:	a2 83       	std	Z+2, r26	; 0x02
    2634:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2636:	8e 01       	movw	r16, r28
    2638:	07 59       	subi	r16, 0x97	; 151
    263a:	1f 4f       	sbci	r17, 0xFF	; 255
    263c:	fe 01       	movw	r30, r28
    263e:	e3 59       	subi	r30, 0x93	; 147
    2640:	ff 4f       	sbci	r31, 0xFF	; 255
    2642:	60 81       	ld	r22, Z
    2644:	71 81       	ldd	r23, Z+1	; 0x01
    2646:	82 81       	ldd	r24, Z+2	; 0x02
    2648:	93 81       	ldd	r25, Z+3	; 0x03
    264a:	20 e0       	ldi	r18, 0x00	; 0
    264c:	30 e0       	ldi	r19, 0x00	; 0
    264e:	4a e7       	ldi	r20, 0x7A	; 122
    2650:	55 e4       	ldi	r21, 0x45	; 69
    2652:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2656:	dc 01       	movw	r26, r24
    2658:	cb 01       	movw	r24, r22
    265a:	f8 01       	movw	r30, r16
    265c:	80 83       	st	Z, r24
    265e:	91 83       	std	Z+1, r25	; 0x01
    2660:	a2 83       	std	Z+2, r26	; 0x02
    2662:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2664:	fe 01       	movw	r30, r28
    2666:	e7 59       	subi	r30, 0x97	; 151
    2668:	ff 4f       	sbci	r31, 0xFF	; 255
    266a:	60 81       	ld	r22, Z
    266c:	71 81       	ldd	r23, Z+1	; 0x01
    266e:	82 81       	ldd	r24, Z+2	; 0x02
    2670:	93 81       	ldd	r25, Z+3	; 0x03
    2672:	20 e0       	ldi	r18, 0x00	; 0
    2674:	30 e0       	ldi	r19, 0x00	; 0
    2676:	40 e8       	ldi	r20, 0x80	; 128
    2678:	5f e3       	ldi	r21, 0x3F	; 63
    267a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    267e:	88 23       	and	r24, r24
    2680:	44 f4       	brge	.+16     	; 0x2692 <CLCD_voidHamoksha+0x1348>
		__ticks = 1;
    2682:	fe 01       	movw	r30, r28
    2684:	e9 59       	subi	r30, 0x99	; 153
    2686:	ff 4f       	sbci	r31, 0xFF	; 255
    2688:	81 e0       	ldi	r24, 0x01	; 1
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	91 83       	std	Z+1, r25	; 0x01
    268e:	80 83       	st	Z, r24
    2690:	64 c0       	rjmp	.+200    	; 0x275a <CLCD_voidHamoksha+0x1410>
	else if (__tmp > 65535)
    2692:	fe 01       	movw	r30, r28
    2694:	e7 59       	subi	r30, 0x97	; 151
    2696:	ff 4f       	sbci	r31, 0xFF	; 255
    2698:	60 81       	ld	r22, Z
    269a:	71 81       	ldd	r23, Z+1	; 0x01
    269c:	82 81       	ldd	r24, Z+2	; 0x02
    269e:	93 81       	ldd	r25, Z+3	; 0x03
    26a0:	20 e0       	ldi	r18, 0x00	; 0
    26a2:	3f ef       	ldi	r19, 0xFF	; 255
    26a4:	4f e7       	ldi	r20, 0x7F	; 127
    26a6:	57 e4       	ldi	r21, 0x47	; 71
    26a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26ac:	18 16       	cp	r1, r24
    26ae:	0c f0       	brlt	.+2      	; 0x26b2 <CLCD_voidHamoksha+0x1368>
    26b0:	43 c0       	rjmp	.+134    	; 0x2738 <CLCD_voidHamoksha+0x13ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26b2:	fe 01       	movw	r30, r28
    26b4:	e3 59       	subi	r30, 0x93	; 147
    26b6:	ff 4f       	sbci	r31, 0xFF	; 255
    26b8:	60 81       	ld	r22, Z
    26ba:	71 81       	ldd	r23, Z+1	; 0x01
    26bc:	82 81       	ldd	r24, Z+2	; 0x02
    26be:	93 81       	ldd	r25, Z+3	; 0x03
    26c0:	20 e0       	ldi	r18, 0x00	; 0
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	40 e2       	ldi	r20, 0x20	; 32
    26c6:	51 e4       	ldi	r21, 0x41	; 65
    26c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26cc:	dc 01       	movw	r26, r24
    26ce:	cb 01       	movw	r24, r22
    26d0:	8e 01       	movw	r16, r28
    26d2:	09 59       	subi	r16, 0x99	; 153
    26d4:	1f 4f       	sbci	r17, 0xFF	; 255
    26d6:	bc 01       	movw	r22, r24
    26d8:	cd 01       	movw	r24, r26
    26da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26de:	dc 01       	movw	r26, r24
    26e0:	cb 01       	movw	r24, r22
    26e2:	f8 01       	movw	r30, r16
    26e4:	91 83       	std	Z+1, r25	; 0x01
    26e6:	80 83       	st	Z, r24
    26e8:	1f c0       	rjmp	.+62     	; 0x2728 <CLCD_voidHamoksha+0x13de>
    26ea:	fe 01       	movw	r30, r28
    26ec:	eb 59       	subi	r30, 0x9B	; 155
    26ee:	ff 4f       	sbci	r31, 0xFF	; 255
    26f0:	80 e9       	ldi	r24, 0x90	; 144
    26f2:	91 e0       	ldi	r25, 0x01	; 1
    26f4:	91 83       	std	Z+1, r25	; 0x01
    26f6:	80 83       	st	Z, r24
    26f8:	fe 01       	movw	r30, r28
    26fa:	eb 59       	subi	r30, 0x9B	; 155
    26fc:	ff 4f       	sbci	r31, 0xFF	; 255
    26fe:	80 81       	ld	r24, Z
    2700:	91 81       	ldd	r25, Z+1	; 0x01
    2702:	01 97       	sbiw	r24, 0x01	; 1
    2704:	f1 f7       	brne	.-4      	; 0x2702 <CLCD_voidHamoksha+0x13b8>
    2706:	fe 01       	movw	r30, r28
    2708:	eb 59       	subi	r30, 0x9B	; 155
    270a:	ff 4f       	sbci	r31, 0xFF	; 255
    270c:	91 83       	std	Z+1, r25	; 0x01
    270e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2710:	de 01       	movw	r26, r28
    2712:	a9 59       	subi	r26, 0x99	; 153
    2714:	bf 4f       	sbci	r27, 0xFF	; 255
    2716:	fe 01       	movw	r30, r28
    2718:	e9 59       	subi	r30, 0x99	; 153
    271a:	ff 4f       	sbci	r31, 0xFF	; 255
    271c:	80 81       	ld	r24, Z
    271e:	91 81       	ldd	r25, Z+1	; 0x01
    2720:	01 97       	sbiw	r24, 0x01	; 1
    2722:	11 96       	adiw	r26, 0x01	; 1
    2724:	9c 93       	st	X, r25
    2726:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2728:	fe 01       	movw	r30, r28
    272a:	e9 59       	subi	r30, 0x99	; 153
    272c:	ff 4f       	sbci	r31, 0xFF	; 255
    272e:	80 81       	ld	r24, Z
    2730:	91 81       	ldd	r25, Z+1	; 0x01
    2732:	00 97       	sbiw	r24, 0x00	; 0
    2734:	d1 f6       	brne	.-76     	; 0x26ea <CLCD_voidHamoksha+0x13a0>
    2736:	28 c0       	rjmp	.+80     	; 0x2788 <CLCD_voidHamoksha+0x143e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2738:	8e 01       	movw	r16, r28
    273a:	09 59       	subi	r16, 0x99	; 153
    273c:	1f 4f       	sbci	r17, 0xFF	; 255
    273e:	fe 01       	movw	r30, r28
    2740:	e7 59       	subi	r30, 0x97	; 151
    2742:	ff 4f       	sbci	r31, 0xFF	; 255
    2744:	60 81       	ld	r22, Z
    2746:	71 81       	ldd	r23, Z+1	; 0x01
    2748:	82 81       	ldd	r24, Z+2	; 0x02
    274a:	93 81       	ldd	r25, Z+3	; 0x03
    274c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2750:	dc 01       	movw	r26, r24
    2752:	cb 01       	movw	r24, r22
    2754:	f8 01       	movw	r30, r16
    2756:	91 83       	std	Z+1, r25	; 0x01
    2758:	80 83       	st	Z, r24
    275a:	de 01       	movw	r26, r28
    275c:	ad 59       	subi	r26, 0x9D	; 157
    275e:	bf 4f       	sbci	r27, 0xFF	; 255
    2760:	fe 01       	movw	r30, r28
    2762:	e9 59       	subi	r30, 0x99	; 153
    2764:	ff 4f       	sbci	r31, 0xFF	; 255
    2766:	80 81       	ld	r24, Z
    2768:	91 81       	ldd	r25, Z+1	; 0x01
    276a:	11 96       	adiw	r26, 0x01	; 1
    276c:	9c 93       	st	X, r25
    276e:	8e 93       	st	-X, r24
    2770:	fe 01       	movw	r30, r28
    2772:	ed 59       	subi	r30, 0x9D	; 157
    2774:	ff 4f       	sbci	r31, 0xFF	; 255
    2776:	80 81       	ld	r24, Z
    2778:	91 81       	ldd	r25, Z+1	; 0x01
    277a:	01 97       	sbiw	r24, 0x01	; 1
    277c:	f1 f7       	brne	.-4      	; 0x277a <CLCD_voidHamoksha+0x1430>
    277e:	fe 01       	movw	r30, r28
    2780:	ed 59       	subi	r30, 0x9D	; 157
    2782:	ff 4f       	sbci	r31, 0xFF	; 255
    2784:	91 83       	std	Z+1, r25	; 0x01
    2786:	80 83       	st	Z, r24
	_delay_ms(600);
	i=0;
    2788:	fe 01       	movw	r30, r28
    278a:	ef 51       	subi	r30, 0x1F	; 31
    278c:	ff 4f       	sbci	r31, 0xFF	; 255
    278e:	10 82       	st	Z, r1
    2790:	93 c1       	rjmp	.+806    	; 0x2ab8 <CLCD_voidHamoksha+0x176e>
	{
		while(i<16)
			{   CLCD_voidClear();
    2792:	0e 94 9b 09 	call	0x1336	; 0x1336 <CLCD_voidClear>
				CLCD_u8SpecialCharacter(0,Local_u8HamokshaPattern4,i++,1);
    2796:	fe 01       	movw	r30, r28
    2798:	ef 51       	subi	r30, 0x1F	; 31
    279a:	ff 4f       	sbci	r31, 0xFF	; 255
    279c:	90 81       	ld	r25, Z
    279e:	de 01       	movw	r26, r28
    27a0:	af 51       	subi	r26, 0x1F	; 31
    27a2:	bf 4f       	sbci	r27, 0xFF	; 255
    27a4:	fe 01       	movw	r30, r28
    27a6:	ef 51       	subi	r30, 0x1F	; 31
    27a8:	ff 4f       	sbci	r31, 0xFF	; 255
    27aa:	80 81       	ld	r24, Z
    27ac:	8f 5f       	subi	r24, 0xFF	; 255
    27ae:	8c 93       	st	X, r24
    27b0:	9e 01       	movw	r18, r28
    27b2:	2e 5f       	subi	r18, 0xFE	; 254
    27b4:	3e 4f       	sbci	r19, 0xFE	; 254
    27b6:	80 e0       	ldi	r24, 0x00	; 0
    27b8:	b9 01       	movw	r22, r18
    27ba:	49 2f       	mov	r20, r25
    27bc:	21 e0       	ldi	r18, 0x01	; 1
    27be:	0e 94 4f 09 	call	0x129e	; 0x129e <CLCD_u8SpecialCharacter>
    27c2:	fe 01       	movw	r30, r28
    27c4:	e1 5a       	subi	r30, 0xA1	; 161
    27c6:	ff 4f       	sbci	r31, 0xFF	; 255
    27c8:	80 e0       	ldi	r24, 0x00	; 0
    27ca:	90 e0       	ldi	r25, 0x00	; 0
    27cc:	a0 e2       	ldi	r26, 0x20	; 32
    27ce:	b2 e4       	ldi	r27, 0x42	; 66
    27d0:	80 83       	st	Z, r24
    27d2:	91 83       	std	Z+1, r25	; 0x01
    27d4:	a2 83       	std	Z+2, r26	; 0x02
    27d6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27d8:	8e 01       	movw	r16, r28
    27da:	05 5a       	subi	r16, 0xA5	; 165
    27dc:	1f 4f       	sbci	r17, 0xFF	; 255
    27de:	fe 01       	movw	r30, r28
    27e0:	e1 5a       	subi	r30, 0xA1	; 161
    27e2:	ff 4f       	sbci	r31, 0xFF	; 255
    27e4:	60 81       	ld	r22, Z
    27e6:	71 81       	ldd	r23, Z+1	; 0x01
    27e8:	82 81       	ldd	r24, Z+2	; 0x02
    27ea:	93 81       	ldd	r25, Z+3	; 0x03
    27ec:	20 e0       	ldi	r18, 0x00	; 0
    27ee:	30 e0       	ldi	r19, 0x00	; 0
    27f0:	4a e7       	ldi	r20, 0x7A	; 122
    27f2:	55 e4       	ldi	r21, 0x45	; 69
    27f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27f8:	dc 01       	movw	r26, r24
    27fa:	cb 01       	movw	r24, r22
    27fc:	f8 01       	movw	r30, r16
    27fe:	80 83       	st	Z, r24
    2800:	91 83       	std	Z+1, r25	; 0x01
    2802:	a2 83       	std	Z+2, r26	; 0x02
    2804:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2806:	fe 01       	movw	r30, r28
    2808:	e5 5a       	subi	r30, 0xA5	; 165
    280a:	ff 4f       	sbci	r31, 0xFF	; 255
    280c:	60 81       	ld	r22, Z
    280e:	71 81       	ldd	r23, Z+1	; 0x01
    2810:	82 81       	ldd	r24, Z+2	; 0x02
    2812:	93 81       	ldd	r25, Z+3	; 0x03
    2814:	20 e0       	ldi	r18, 0x00	; 0
    2816:	30 e0       	ldi	r19, 0x00	; 0
    2818:	40 e8       	ldi	r20, 0x80	; 128
    281a:	5f e3       	ldi	r21, 0x3F	; 63
    281c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2820:	88 23       	and	r24, r24
    2822:	44 f4       	brge	.+16     	; 0x2834 <CLCD_voidHamoksha+0x14ea>
		__ticks = 1;
    2824:	fe 01       	movw	r30, r28
    2826:	e7 5a       	subi	r30, 0xA7	; 167
    2828:	ff 4f       	sbci	r31, 0xFF	; 255
    282a:	81 e0       	ldi	r24, 0x01	; 1
    282c:	90 e0       	ldi	r25, 0x00	; 0
    282e:	91 83       	std	Z+1, r25	; 0x01
    2830:	80 83       	st	Z, r24
    2832:	64 c0       	rjmp	.+200    	; 0x28fc <CLCD_voidHamoksha+0x15b2>
	else if (__tmp > 65535)
    2834:	fe 01       	movw	r30, r28
    2836:	e5 5a       	subi	r30, 0xA5	; 165
    2838:	ff 4f       	sbci	r31, 0xFF	; 255
    283a:	60 81       	ld	r22, Z
    283c:	71 81       	ldd	r23, Z+1	; 0x01
    283e:	82 81       	ldd	r24, Z+2	; 0x02
    2840:	93 81       	ldd	r25, Z+3	; 0x03
    2842:	20 e0       	ldi	r18, 0x00	; 0
    2844:	3f ef       	ldi	r19, 0xFF	; 255
    2846:	4f e7       	ldi	r20, 0x7F	; 127
    2848:	57 e4       	ldi	r21, 0x47	; 71
    284a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    284e:	18 16       	cp	r1, r24
    2850:	0c f0       	brlt	.+2      	; 0x2854 <CLCD_voidHamoksha+0x150a>
    2852:	43 c0       	rjmp	.+134    	; 0x28da <CLCD_voidHamoksha+0x1590>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2854:	fe 01       	movw	r30, r28
    2856:	e1 5a       	subi	r30, 0xA1	; 161
    2858:	ff 4f       	sbci	r31, 0xFF	; 255
    285a:	60 81       	ld	r22, Z
    285c:	71 81       	ldd	r23, Z+1	; 0x01
    285e:	82 81       	ldd	r24, Z+2	; 0x02
    2860:	93 81       	ldd	r25, Z+3	; 0x03
    2862:	20 e0       	ldi	r18, 0x00	; 0
    2864:	30 e0       	ldi	r19, 0x00	; 0
    2866:	40 e2       	ldi	r20, 0x20	; 32
    2868:	51 e4       	ldi	r21, 0x41	; 65
    286a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    286e:	dc 01       	movw	r26, r24
    2870:	cb 01       	movw	r24, r22
    2872:	8e 01       	movw	r16, r28
    2874:	07 5a       	subi	r16, 0xA7	; 167
    2876:	1f 4f       	sbci	r17, 0xFF	; 255
    2878:	bc 01       	movw	r22, r24
    287a:	cd 01       	movw	r24, r26
    287c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2880:	dc 01       	movw	r26, r24
    2882:	cb 01       	movw	r24, r22
    2884:	f8 01       	movw	r30, r16
    2886:	91 83       	std	Z+1, r25	; 0x01
    2888:	80 83       	st	Z, r24
    288a:	1f c0       	rjmp	.+62     	; 0x28ca <CLCD_voidHamoksha+0x1580>
    288c:	fe 01       	movw	r30, r28
    288e:	e9 5a       	subi	r30, 0xA9	; 169
    2890:	ff 4f       	sbci	r31, 0xFF	; 255
    2892:	80 e9       	ldi	r24, 0x90	; 144
    2894:	91 e0       	ldi	r25, 0x01	; 1
    2896:	91 83       	std	Z+1, r25	; 0x01
    2898:	80 83       	st	Z, r24
    289a:	fe 01       	movw	r30, r28
    289c:	e9 5a       	subi	r30, 0xA9	; 169
    289e:	ff 4f       	sbci	r31, 0xFF	; 255
    28a0:	80 81       	ld	r24, Z
    28a2:	91 81       	ldd	r25, Z+1	; 0x01
    28a4:	01 97       	sbiw	r24, 0x01	; 1
    28a6:	f1 f7       	brne	.-4      	; 0x28a4 <CLCD_voidHamoksha+0x155a>
    28a8:	fe 01       	movw	r30, r28
    28aa:	e9 5a       	subi	r30, 0xA9	; 169
    28ac:	ff 4f       	sbci	r31, 0xFF	; 255
    28ae:	91 83       	std	Z+1, r25	; 0x01
    28b0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28b2:	de 01       	movw	r26, r28
    28b4:	a7 5a       	subi	r26, 0xA7	; 167
    28b6:	bf 4f       	sbci	r27, 0xFF	; 255
    28b8:	fe 01       	movw	r30, r28
    28ba:	e7 5a       	subi	r30, 0xA7	; 167
    28bc:	ff 4f       	sbci	r31, 0xFF	; 255
    28be:	80 81       	ld	r24, Z
    28c0:	91 81       	ldd	r25, Z+1	; 0x01
    28c2:	01 97       	sbiw	r24, 0x01	; 1
    28c4:	11 96       	adiw	r26, 0x01	; 1
    28c6:	9c 93       	st	X, r25
    28c8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28ca:	fe 01       	movw	r30, r28
    28cc:	e7 5a       	subi	r30, 0xA7	; 167
    28ce:	ff 4f       	sbci	r31, 0xFF	; 255
    28d0:	80 81       	ld	r24, Z
    28d2:	91 81       	ldd	r25, Z+1	; 0x01
    28d4:	00 97       	sbiw	r24, 0x00	; 0
    28d6:	d1 f6       	brne	.-76     	; 0x288c <CLCD_voidHamoksha+0x1542>
    28d8:	27 c0       	rjmp	.+78     	; 0x2928 <CLCD_voidHamoksha+0x15de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28da:	8e 01       	movw	r16, r28
    28dc:	07 5a       	subi	r16, 0xA7	; 167
    28de:	1f 4f       	sbci	r17, 0xFF	; 255
    28e0:	fe 01       	movw	r30, r28
    28e2:	e5 5a       	subi	r30, 0xA5	; 165
    28e4:	ff 4f       	sbci	r31, 0xFF	; 255
    28e6:	60 81       	ld	r22, Z
    28e8:	71 81       	ldd	r23, Z+1	; 0x01
    28ea:	82 81       	ldd	r24, Z+2	; 0x02
    28ec:	93 81       	ldd	r25, Z+3	; 0x03
    28ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f2:	dc 01       	movw	r26, r24
    28f4:	cb 01       	movw	r24, r22
    28f6:	f8 01       	movw	r30, r16
    28f8:	91 83       	std	Z+1, r25	; 0x01
    28fa:	80 83       	st	Z, r24
    28fc:	de 01       	movw	r26, r28
    28fe:	ab 5a       	subi	r26, 0xAB	; 171
    2900:	bf 4f       	sbci	r27, 0xFF	; 255
    2902:	fe 01       	movw	r30, r28
    2904:	e7 5a       	subi	r30, 0xA7	; 167
    2906:	ff 4f       	sbci	r31, 0xFF	; 255
    2908:	80 81       	ld	r24, Z
    290a:	91 81       	ldd	r25, Z+1	; 0x01
    290c:	8d 93       	st	X+, r24
    290e:	9c 93       	st	X, r25
    2910:	fe 01       	movw	r30, r28
    2912:	eb 5a       	subi	r30, 0xAB	; 171
    2914:	ff 4f       	sbci	r31, 0xFF	; 255
    2916:	80 81       	ld	r24, Z
    2918:	91 81       	ldd	r25, Z+1	; 0x01
    291a:	01 97       	sbiw	r24, 0x01	; 1
    291c:	f1 f7       	brne	.-4      	; 0x291a <CLCD_voidHamoksha+0x15d0>
    291e:	fe 01       	movw	r30, r28
    2920:	eb 5a       	subi	r30, 0xAB	; 171
    2922:	ff 4f       	sbci	r31, 0xFF	; 255
    2924:	91 83       	std	Z+1, r25	; 0x01
    2926:	80 83       	st	Z, r24
				_delay_ms(40);
				CLCD_u8SpecialCharacter(0,Local_u8HamokshaPattern42,i,1);
    2928:	9e 01       	movw	r18, r28
    292a:	2e 5e       	subi	r18, 0xEE	; 238
    292c:	3e 4f       	sbci	r19, 0xFE	; 254
    292e:	fe 01       	movw	r30, r28
    2930:	ef 51       	subi	r30, 0x1F	; 31
    2932:	ff 4f       	sbci	r31, 0xFF	; 255
    2934:	80 e0       	ldi	r24, 0x00	; 0
    2936:	b9 01       	movw	r22, r18
    2938:	40 81       	ld	r20, Z
    293a:	21 e0       	ldi	r18, 0x01	; 1
    293c:	0e 94 4f 09 	call	0x129e	; 0x129e <CLCD_u8SpecialCharacter>
    2940:	fe 01       	movw	r30, r28
    2942:	ef 5a       	subi	r30, 0xAF	; 175
    2944:	ff 4f       	sbci	r31, 0xFF	; 255
    2946:	80 e0       	ldi	r24, 0x00	; 0
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	a0 e2       	ldi	r26, 0x20	; 32
    294c:	b2 e4       	ldi	r27, 0x42	; 66
    294e:	80 83       	st	Z, r24
    2950:	91 83       	std	Z+1, r25	; 0x01
    2952:	a2 83       	std	Z+2, r26	; 0x02
    2954:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2956:	8e 01       	movw	r16, r28
    2958:	03 5b       	subi	r16, 0xB3	; 179
    295a:	1f 4f       	sbci	r17, 0xFF	; 255
    295c:	fe 01       	movw	r30, r28
    295e:	ef 5a       	subi	r30, 0xAF	; 175
    2960:	ff 4f       	sbci	r31, 0xFF	; 255
    2962:	60 81       	ld	r22, Z
    2964:	71 81       	ldd	r23, Z+1	; 0x01
    2966:	82 81       	ldd	r24, Z+2	; 0x02
    2968:	93 81       	ldd	r25, Z+3	; 0x03
    296a:	20 e0       	ldi	r18, 0x00	; 0
    296c:	30 e0       	ldi	r19, 0x00	; 0
    296e:	4a e7       	ldi	r20, 0x7A	; 122
    2970:	55 e4       	ldi	r21, 0x45	; 69
    2972:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2976:	dc 01       	movw	r26, r24
    2978:	cb 01       	movw	r24, r22
    297a:	f8 01       	movw	r30, r16
    297c:	80 83       	st	Z, r24
    297e:	91 83       	std	Z+1, r25	; 0x01
    2980:	a2 83       	std	Z+2, r26	; 0x02
    2982:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2984:	fe 01       	movw	r30, r28
    2986:	e3 5b       	subi	r30, 0xB3	; 179
    2988:	ff 4f       	sbci	r31, 0xFF	; 255
    298a:	60 81       	ld	r22, Z
    298c:	71 81       	ldd	r23, Z+1	; 0x01
    298e:	82 81       	ldd	r24, Z+2	; 0x02
    2990:	93 81       	ldd	r25, Z+3	; 0x03
    2992:	20 e0       	ldi	r18, 0x00	; 0
    2994:	30 e0       	ldi	r19, 0x00	; 0
    2996:	40 e8       	ldi	r20, 0x80	; 128
    2998:	5f e3       	ldi	r21, 0x3F	; 63
    299a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    299e:	88 23       	and	r24, r24
    29a0:	44 f4       	brge	.+16     	; 0x29b2 <CLCD_voidHamoksha+0x1668>
		__ticks = 1;
    29a2:	fe 01       	movw	r30, r28
    29a4:	e5 5b       	subi	r30, 0xB5	; 181
    29a6:	ff 4f       	sbci	r31, 0xFF	; 255
    29a8:	81 e0       	ldi	r24, 0x01	; 1
    29aa:	90 e0       	ldi	r25, 0x00	; 0
    29ac:	91 83       	std	Z+1, r25	; 0x01
    29ae:	80 83       	st	Z, r24
    29b0:	64 c0       	rjmp	.+200    	; 0x2a7a <CLCD_voidHamoksha+0x1730>
	else if (__tmp > 65535)
    29b2:	fe 01       	movw	r30, r28
    29b4:	e3 5b       	subi	r30, 0xB3	; 179
    29b6:	ff 4f       	sbci	r31, 0xFF	; 255
    29b8:	60 81       	ld	r22, Z
    29ba:	71 81       	ldd	r23, Z+1	; 0x01
    29bc:	82 81       	ldd	r24, Z+2	; 0x02
    29be:	93 81       	ldd	r25, Z+3	; 0x03
    29c0:	20 e0       	ldi	r18, 0x00	; 0
    29c2:	3f ef       	ldi	r19, 0xFF	; 255
    29c4:	4f e7       	ldi	r20, 0x7F	; 127
    29c6:	57 e4       	ldi	r21, 0x47	; 71
    29c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29cc:	18 16       	cp	r1, r24
    29ce:	0c f0       	brlt	.+2      	; 0x29d2 <CLCD_voidHamoksha+0x1688>
    29d0:	43 c0       	rjmp	.+134    	; 0x2a58 <CLCD_voidHamoksha+0x170e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29d2:	fe 01       	movw	r30, r28
    29d4:	ef 5a       	subi	r30, 0xAF	; 175
    29d6:	ff 4f       	sbci	r31, 0xFF	; 255
    29d8:	60 81       	ld	r22, Z
    29da:	71 81       	ldd	r23, Z+1	; 0x01
    29dc:	82 81       	ldd	r24, Z+2	; 0x02
    29de:	93 81       	ldd	r25, Z+3	; 0x03
    29e0:	20 e0       	ldi	r18, 0x00	; 0
    29e2:	30 e0       	ldi	r19, 0x00	; 0
    29e4:	40 e2       	ldi	r20, 0x20	; 32
    29e6:	51 e4       	ldi	r21, 0x41	; 65
    29e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ec:	dc 01       	movw	r26, r24
    29ee:	cb 01       	movw	r24, r22
    29f0:	8e 01       	movw	r16, r28
    29f2:	05 5b       	subi	r16, 0xB5	; 181
    29f4:	1f 4f       	sbci	r17, 0xFF	; 255
    29f6:	bc 01       	movw	r22, r24
    29f8:	cd 01       	movw	r24, r26
    29fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29fe:	dc 01       	movw	r26, r24
    2a00:	cb 01       	movw	r24, r22
    2a02:	f8 01       	movw	r30, r16
    2a04:	91 83       	std	Z+1, r25	; 0x01
    2a06:	80 83       	st	Z, r24
    2a08:	1f c0       	rjmp	.+62     	; 0x2a48 <CLCD_voidHamoksha+0x16fe>
    2a0a:	fe 01       	movw	r30, r28
    2a0c:	e7 5b       	subi	r30, 0xB7	; 183
    2a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a10:	80 e9       	ldi	r24, 0x90	; 144
    2a12:	91 e0       	ldi	r25, 0x01	; 1
    2a14:	91 83       	std	Z+1, r25	; 0x01
    2a16:	80 83       	st	Z, r24
    2a18:	fe 01       	movw	r30, r28
    2a1a:	e7 5b       	subi	r30, 0xB7	; 183
    2a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1e:	80 81       	ld	r24, Z
    2a20:	91 81       	ldd	r25, Z+1	; 0x01
    2a22:	01 97       	sbiw	r24, 0x01	; 1
    2a24:	f1 f7       	brne	.-4      	; 0x2a22 <CLCD_voidHamoksha+0x16d8>
    2a26:	fe 01       	movw	r30, r28
    2a28:	e7 5b       	subi	r30, 0xB7	; 183
    2a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2c:	91 83       	std	Z+1, r25	; 0x01
    2a2e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a30:	de 01       	movw	r26, r28
    2a32:	a5 5b       	subi	r26, 0xB5	; 181
    2a34:	bf 4f       	sbci	r27, 0xFF	; 255
    2a36:	fe 01       	movw	r30, r28
    2a38:	e5 5b       	subi	r30, 0xB5	; 181
    2a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3c:	80 81       	ld	r24, Z
    2a3e:	91 81       	ldd	r25, Z+1	; 0x01
    2a40:	01 97       	sbiw	r24, 0x01	; 1
    2a42:	11 96       	adiw	r26, 0x01	; 1
    2a44:	9c 93       	st	X, r25
    2a46:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a48:	fe 01       	movw	r30, r28
    2a4a:	e5 5b       	subi	r30, 0xB5	; 181
    2a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4e:	80 81       	ld	r24, Z
    2a50:	91 81       	ldd	r25, Z+1	; 0x01
    2a52:	00 97       	sbiw	r24, 0x00	; 0
    2a54:	d1 f6       	brne	.-76     	; 0x2a0a <CLCD_voidHamoksha+0x16c0>
    2a56:	27 c0       	rjmp	.+78     	; 0x2aa6 <CLCD_voidHamoksha+0x175c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a58:	8e 01       	movw	r16, r28
    2a5a:	05 5b       	subi	r16, 0xB5	; 181
    2a5c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a5e:	fe 01       	movw	r30, r28
    2a60:	e3 5b       	subi	r30, 0xB3	; 179
    2a62:	ff 4f       	sbci	r31, 0xFF	; 255
    2a64:	60 81       	ld	r22, Z
    2a66:	71 81       	ldd	r23, Z+1	; 0x01
    2a68:	82 81       	ldd	r24, Z+2	; 0x02
    2a6a:	93 81       	ldd	r25, Z+3	; 0x03
    2a6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a70:	dc 01       	movw	r26, r24
    2a72:	cb 01       	movw	r24, r22
    2a74:	f8 01       	movw	r30, r16
    2a76:	91 83       	std	Z+1, r25	; 0x01
    2a78:	80 83       	st	Z, r24
    2a7a:	de 01       	movw	r26, r28
    2a7c:	a9 5b       	subi	r26, 0xB9	; 185
    2a7e:	bf 4f       	sbci	r27, 0xFF	; 255
    2a80:	fe 01       	movw	r30, r28
    2a82:	e5 5b       	subi	r30, 0xB5	; 181
    2a84:	ff 4f       	sbci	r31, 0xFF	; 255
    2a86:	80 81       	ld	r24, Z
    2a88:	91 81       	ldd	r25, Z+1	; 0x01
    2a8a:	8d 93       	st	X+, r24
    2a8c:	9c 93       	st	X, r25
    2a8e:	fe 01       	movw	r30, r28
    2a90:	e9 5b       	subi	r30, 0xB9	; 185
    2a92:	ff 4f       	sbci	r31, 0xFF	; 255
    2a94:	80 81       	ld	r24, Z
    2a96:	91 81       	ldd	r25, Z+1	; 0x01
    2a98:	01 97       	sbiw	r24, 0x01	; 1
    2a9a:	f1 f7       	brne	.-4      	; 0x2a98 <CLCD_voidHamoksha+0x174e>
    2a9c:	fe 01       	movw	r30, r28
    2a9e:	e9 5b       	subi	r30, 0xB9	; 185
    2aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa2:	91 83       	std	Z+1, r25	; 0x01
    2aa4:	80 83       	st	Z, r24
				_delay_ms(40);
				        i++;
    2aa6:	de 01       	movw	r26, r28
    2aa8:	af 51       	subi	r26, 0x1F	; 31
    2aaa:	bf 4f       	sbci	r27, 0xFF	; 255
    2aac:	fe 01       	movw	r30, r28
    2aae:	ef 51       	subi	r30, 0x1F	; 31
    2ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab2:	80 81       	ld	r24, Z
    2ab4:	8f 5f       	subi	r24, 0xFF	; 255
    2ab6:	8c 93       	st	X, r24
	CLCD_VoidGoToXY(0,0);
	CLCD_u8SendString(" I play Football");
	_delay_ms(600);
	i=0;
	{
		while(i<16)
    2ab8:	fe 01       	movw	r30, r28
    2aba:	ef 51       	subi	r30, 0x1F	; 31
    2abc:	ff 4f       	sbci	r31, 0xFF	; 255
    2abe:	80 81       	ld	r24, Z
    2ac0:	80 31       	cpi	r24, 0x10	; 16
    2ac2:	08 f4       	brcc	.+2      	; 0x2ac6 <CLCD_voidHamoksha+0x177c>
    2ac4:	66 ce       	rjmp	.-820    	; 0x2792 <CLCD_voidHamoksha+0x1448>

			}

	}

	CLCD_voidClear();
    2ac6:	0e 94 9b 09 	call	0x1336	; 0x1336 <CLCD_voidClear>
	CLCD_VoidGoToXY(0,0);
    2aca:	80 e0       	ldi	r24, 0x00	; 0
    2acc:	60 e0       	ldi	r22, 0x00	; 0
    2ace:	0e 94 2f 09 	call	0x125e	; 0x125e <CLCD_VoidGoToXY>
	CLCD_u8SendString(" DON'T KILL ME");
    2ad2:	88 e9       	ldi	r24, 0x98	; 152
    2ad4:	90 e0       	ldi	r25, 0x00	; 0
    2ad6:	0e 94 70 08 	call	0x10e0	; 0x10e0 <CLCD_u8SendString>
    2ada:	fe 01       	movw	r30, r28
    2adc:	ed 5b       	subi	r30, 0xBD	; 189
    2ade:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae0:	80 e0       	ldi	r24, 0x00	; 0
    2ae2:	90 e0       	ldi	r25, 0x00	; 0
    2ae4:	a6 e1       	ldi	r26, 0x16	; 22
    2ae6:	b4 e4       	ldi	r27, 0x44	; 68
    2ae8:	80 83       	st	Z, r24
    2aea:	91 83       	std	Z+1, r25	; 0x01
    2aec:	a2 83       	std	Z+2, r26	; 0x02
    2aee:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2af0:	8e 01       	movw	r16, r28
    2af2:	01 5c       	subi	r16, 0xC1	; 193
    2af4:	1f 4f       	sbci	r17, 0xFF	; 255
    2af6:	fe 01       	movw	r30, r28
    2af8:	ed 5b       	subi	r30, 0xBD	; 189
    2afa:	ff 4f       	sbci	r31, 0xFF	; 255
    2afc:	60 81       	ld	r22, Z
    2afe:	71 81       	ldd	r23, Z+1	; 0x01
    2b00:	82 81       	ldd	r24, Z+2	; 0x02
    2b02:	93 81       	ldd	r25, Z+3	; 0x03
    2b04:	20 e0       	ldi	r18, 0x00	; 0
    2b06:	30 e0       	ldi	r19, 0x00	; 0
    2b08:	4a e7       	ldi	r20, 0x7A	; 122
    2b0a:	55 e4       	ldi	r21, 0x45	; 69
    2b0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b10:	dc 01       	movw	r26, r24
    2b12:	cb 01       	movw	r24, r22
    2b14:	f8 01       	movw	r30, r16
    2b16:	80 83       	st	Z, r24
    2b18:	91 83       	std	Z+1, r25	; 0x01
    2b1a:	a2 83       	std	Z+2, r26	; 0x02
    2b1c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b1e:	fe 01       	movw	r30, r28
    2b20:	ff 96       	adiw	r30, 0x3f	; 63
    2b22:	60 81       	ld	r22, Z
    2b24:	71 81       	ldd	r23, Z+1	; 0x01
    2b26:	82 81       	ldd	r24, Z+2	; 0x02
    2b28:	93 81       	ldd	r25, Z+3	; 0x03
    2b2a:	20 e0       	ldi	r18, 0x00	; 0
    2b2c:	30 e0       	ldi	r19, 0x00	; 0
    2b2e:	40 e8       	ldi	r20, 0x80	; 128
    2b30:	5f e3       	ldi	r21, 0x3F	; 63
    2b32:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b36:	88 23       	and	r24, r24
    2b38:	2c f4       	brge	.+10     	; 0x2b44 <CLCD_voidHamoksha+0x17fa>
		__ticks = 1;
    2b3a:	81 e0       	ldi	r24, 0x01	; 1
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	9e af       	std	Y+62, r25	; 0x3e
    2b40:	8d af       	std	Y+61, r24	; 0x3d
    2b42:	46 c0       	rjmp	.+140    	; 0x2bd0 <CLCD_voidHamoksha+0x1886>
	else if (__tmp > 65535)
    2b44:	fe 01       	movw	r30, r28
    2b46:	ff 96       	adiw	r30, 0x3f	; 63
    2b48:	60 81       	ld	r22, Z
    2b4a:	71 81       	ldd	r23, Z+1	; 0x01
    2b4c:	82 81       	ldd	r24, Z+2	; 0x02
    2b4e:	93 81       	ldd	r25, Z+3	; 0x03
    2b50:	20 e0       	ldi	r18, 0x00	; 0
    2b52:	3f ef       	ldi	r19, 0xFF	; 255
    2b54:	4f e7       	ldi	r20, 0x7F	; 127
    2b56:	57 e4       	ldi	r21, 0x47	; 71
    2b58:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b5c:	18 16       	cp	r1, r24
    2b5e:	64 f5       	brge	.+88     	; 0x2bb8 <CLCD_voidHamoksha+0x186e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b60:	fe 01       	movw	r30, r28
    2b62:	ed 5b       	subi	r30, 0xBD	; 189
    2b64:	ff 4f       	sbci	r31, 0xFF	; 255
    2b66:	60 81       	ld	r22, Z
    2b68:	71 81       	ldd	r23, Z+1	; 0x01
    2b6a:	82 81       	ldd	r24, Z+2	; 0x02
    2b6c:	93 81       	ldd	r25, Z+3	; 0x03
    2b6e:	20 e0       	ldi	r18, 0x00	; 0
    2b70:	30 e0       	ldi	r19, 0x00	; 0
    2b72:	40 e2       	ldi	r20, 0x20	; 32
    2b74:	51 e4       	ldi	r21, 0x41	; 65
    2b76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b7a:	dc 01       	movw	r26, r24
    2b7c:	cb 01       	movw	r24, r22
    2b7e:	bc 01       	movw	r22, r24
    2b80:	cd 01       	movw	r24, r26
    2b82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b86:	dc 01       	movw	r26, r24
    2b88:	cb 01       	movw	r24, r22
    2b8a:	9e af       	std	Y+62, r25	; 0x3e
    2b8c:	8d af       	std	Y+61, r24	; 0x3d
    2b8e:	0f c0       	rjmp	.+30     	; 0x2bae <CLCD_voidHamoksha+0x1864>
    2b90:	80 e9       	ldi	r24, 0x90	; 144
    2b92:	91 e0       	ldi	r25, 0x01	; 1
    2b94:	9c af       	std	Y+60, r25	; 0x3c
    2b96:	8b af       	std	Y+59, r24	; 0x3b
    2b98:	8b ad       	ldd	r24, Y+59	; 0x3b
    2b9a:	9c ad       	ldd	r25, Y+60	; 0x3c
    2b9c:	01 97       	sbiw	r24, 0x01	; 1
    2b9e:	f1 f7       	brne	.-4      	; 0x2b9c <CLCD_voidHamoksha+0x1852>
    2ba0:	9c af       	std	Y+60, r25	; 0x3c
    2ba2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ba4:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ba6:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ba8:	01 97       	sbiw	r24, 0x01	; 1
    2baa:	9e af       	std	Y+62, r25	; 0x3e
    2bac:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bae:	8d ad       	ldd	r24, Y+61	; 0x3d
    2bb0:	9e ad       	ldd	r25, Y+62	; 0x3e
    2bb2:	00 97       	sbiw	r24, 0x00	; 0
    2bb4:	69 f7       	brne	.-38     	; 0x2b90 <CLCD_voidHamoksha+0x1846>
    2bb6:	16 c0       	rjmp	.+44     	; 0x2be4 <CLCD_voidHamoksha+0x189a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bb8:	fe 01       	movw	r30, r28
    2bba:	ff 96       	adiw	r30, 0x3f	; 63
    2bbc:	60 81       	ld	r22, Z
    2bbe:	71 81       	ldd	r23, Z+1	; 0x01
    2bc0:	82 81       	ldd	r24, Z+2	; 0x02
    2bc2:	93 81       	ldd	r25, Z+3	; 0x03
    2bc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bc8:	dc 01       	movw	r26, r24
    2bca:	cb 01       	movw	r24, r22
    2bcc:	9e af       	std	Y+62, r25	; 0x3e
    2bce:	8d af       	std	Y+61, r24	; 0x3d
    2bd0:	8d ad       	ldd	r24, Y+61	; 0x3d
    2bd2:	9e ad       	ldd	r25, Y+62	; 0x3e
    2bd4:	9a af       	std	Y+58, r25	; 0x3a
    2bd6:	89 af       	std	Y+57, r24	; 0x39
    2bd8:	89 ad       	ldd	r24, Y+57	; 0x39
    2bda:	9a ad       	ldd	r25, Y+58	; 0x3a
    2bdc:	01 97       	sbiw	r24, 0x01	; 1
    2bde:	f1 f7       	brne	.-4      	; 0x2bdc <CLCD_voidHamoksha+0x1892>
    2be0:	9a af       	std	Y+58, r25	; 0x3a
    2be2:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(600);
	CLCD_voidClear();
    2be4:	0e 94 9b 09 	call	0x1336	; 0x1336 <CLCD_voidClear>
		CLCD_u8SpecialCharacter(0,Local_u8HamokshaPattern1,13,1);
    2be8:	9e 01       	movw	r18, r28
    2bea:	26 51       	subi	r18, 0x16	; 22
    2bec:	3f 4f       	sbci	r19, 0xFF	; 255
    2bee:	80 e0       	ldi	r24, 0x00	; 0
    2bf0:	b9 01       	movw	r22, r18
    2bf2:	4d e0       	ldi	r20, 0x0D	; 13
    2bf4:	21 e0       	ldi	r18, 0x01	; 1
    2bf6:	0e 94 4f 09 	call	0x129e	; 0x129e <CLCD_u8SpecialCharacter>


			CLCD_u8SpecialCharacter(1,Local_u8HamokshaPattern6,0,1);
    2bfa:	9e 01       	movw	r18, r28
    2bfc:	26 5e       	subi	r18, 0xE6	; 230
    2bfe:	3e 4f       	sbci	r19, 0xFE	; 254
    2c00:	81 e0       	ldi	r24, 0x01	; 1
    2c02:	b9 01       	movw	r22, r18
    2c04:	40 e0       	ldi	r20, 0x00	; 0
    2c06:	21 e0       	ldi	r18, 0x01	; 1
    2c08:	0e 94 4f 09 	call	0x129e	; 0x129e <CLCD_u8SpecialCharacter>
			CLCD_u8SpecialCharacter(2,Local_u8HamokshaPattern7,1,1);
    2c0c:	9e 01       	movw	r18, r28
    2c0e:	2e 5d       	subi	r18, 0xDE	; 222
    2c10:	3e 4f       	sbci	r19, 0xFE	; 254
    2c12:	82 e0       	ldi	r24, 0x02	; 2
    2c14:	b9 01       	movw	r22, r18
    2c16:	41 e0       	ldi	r20, 0x01	; 1
    2c18:	21 e0       	ldi	r18, 0x01	; 1
    2c1a:	0e 94 4f 09 	call	0x129e	; 0x129e <CLCD_u8SpecialCharacter>
			CLCD_u8SpecialCharacter(3,Local_u8HamokshaPattern7,2,1);
    2c1e:	9e 01       	movw	r18, r28
    2c20:	2e 5d       	subi	r18, 0xDE	; 222
    2c22:	3e 4f       	sbci	r19, 0xFE	; 254
    2c24:	83 e0       	ldi	r24, 0x03	; 3
    2c26:	b9 01       	movw	r22, r18
    2c28:	42 e0       	ldi	r20, 0x02	; 2
    2c2a:	21 e0       	ldi	r18, 0x01	; 1
    2c2c:	0e 94 4f 09 	call	0x129e	; 0x129e <CLCD_u8SpecialCharacter>

			CLCD_u8SpecialCharacter(4,Local_u8HamokshaPattern8,4,1);
    2c30:	9e 01       	movw	r18, r28
    2c32:	26 5d       	subi	r18, 0xD6	; 214
    2c34:	3e 4f       	sbci	r19, 0xFE	; 254
    2c36:	84 e0       	ldi	r24, 0x04	; 4
    2c38:	b9 01       	movw	r22, r18
    2c3a:	44 e0       	ldi	r20, 0x04	; 4
    2c3c:	21 e0       	ldi	r18, 0x01	; 1
    2c3e:	0e 94 4f 09 	call	0x129e	; 0x129e <CLCD_u8SpecialCharacter>
    2c42:	80 e0       	ldi	r24, 0x00	; 0
    2c44:	90 e0       	ldi	r25, 0x00	; 0
    2c46:	a0 ef       	ldi	r26, 0xF0	; 240
    2c48:	b1 e4       	ldi	r27, 0x41	; 65
    2c4a:	8d ab       	std	Y+53, r24	; 0x35
    2c4c:	9e ab       	std	Y+54, r25	; 0x36
    2c4e:	af ab       	std	Y+55, r26	; 0x37
    2c50:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c52:	6d a9       	ldd	r22, Y+53	; 0x35
    2c54:	7e a9       	ldd	r23, Y+54	; 0x36
    2c56:	8f a9       	ldd	r24, Y+55	; 0x37
    2c58:	98 ad       	ldd	r25, Y+56	; 0x38
    2c5a:	20 e0       	ldi	r18, 0x00	; 0
    2c5c:	30 e0       	ldi	r19, 0x00	; 0
    2c5e:	4a e7       	ldi	r20, 0x7A	; 122
    2c60:	55 e4       	ldi	r21, 0x45	; 69
    2c62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c66:	dc 01       	movw	r26, r24
    2c68:	cb 01       	movw	r24, r22
    2c6a:	89 ab       	std	Y+49, r24	; 0x31
    2c6c:	9a ab       	std	Y+50, r25	; 0x32
    2c6e:	ab ab       	std	Y+51, r26	; 0x33
    2c70:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2c72:	69 a9       	ldd	r22, Y+49	; 0x31
    2c74:	7a a9       	ldd	r23, Y+50	; 0x32
    2c76:	8b a9       	ldd	r24, Y+51	; 0x33
    2c78:	9c a9       	ldd	r25, Y+52	; 0x34
    2c7a:	20 e0       	ldi	r18, 0x00	; 0
    2c7c:	30 e0       	ldi	r19, 0x00	; 0
    2c7e:	40 e8       	ldi	r20, 0x80	; 128
    2c80:	5f e3       	ldi	r21, 0x3F	; 63
    2c82:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c86:	88 23       	and	r24, r24
    2c88:	2c f4       	brge	.+10     	; 0x2c94 <CLCD_voidHamoksha+0x194a>
		__ticks = 1;
    2c8a:	81 e0       	ldi	r24, 0x01	; 1
    2c8c:	90 e0       	ldi	r25, 0x00	; 0
    2c8e:	98 ab       	std	Y+48, r25	; 0x30
    2c90:	8f a7       	std	Y+47, r24	; 0x2f
    2c92:	3f c0       	rjmp	.+126    	; 0x2d12 <CLCD_voidHamoksha+0x19c8>
	else if (__tmp > 65535)
    2c94:	69 a9       	ldd	r22, Y+49	; 0x31
    2c96:	7a a9       	ldd	r23, Y+50	; 0x32
    2c98:	8b a9       	ldd	r24, Y+51	; 0x33
    2c9a:	9c a9       	ldd	r25, Y+52	; 0x34
    2c9c:	20 e0       	ldi	r18, 0x00	; 0
    2c9e:	3f ef       	ldi	r19, 0xFF	; 255
    2ca0:	4f e7       	ldi	r20, 0x7F	; 127
    2ca2:	57 e4       	ldi	r21, 0x47	; 71
    2ca4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ca8:	18 16       	cp	r1, r24
    2caa:	4c f5       	brge	.+82     	; 0x2cfe <CLCD_voidHamoksha+0x19b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cac:	6d a9       	ldd	r22, Y+53	; 0x35
    2cae:	7e a9       	ldd	r23, Y+54	; 0x36
    2cb0:	8f a9       	ldd	r24, Y+55	; 0x37
    2cb2:	98 ad       	ldd	r25, Y+56	; 0x38
    2cb4:	20 e0       	ldi	r18, 0x00	; 0
    2cb6:	30 e0       	ldi	r19, 0x00	; 0
    2cb8:	40 e2       	ldi	r20, 0x20	; 32
    2cba:	51 e4       	ldi	r21, 0x41	; 65
    2cbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cc0:	dc 01       	movw	r26, r24
    2cc2:	cb 01       	movw	r24, r22
    2cc4:	bc 01       	movw	r22, r24
    2cc6:	cd 01       	movw	r24, r26
    2cc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ccc:	dc 01       	movw	r26, r24
    2cce:	cb 01       	movw	r24, r22
    2cd0:	98 ab       	std	Y+48, r25	; 0x30
    2cd2:	8f a7       	std	Y+47, r24	; 0x2f
    2cd4:	0f c0       	rjmp	.+30     	; 0x2cf4 <CLCD_voidHamoksha+0x19aa>
    2cd6:	80 e9       	ldi	r24, 0x90	; 144
    2cd8:	91 e0       	ldi	r25, 0x01	; 1
    2cda:	9e a7       	std	Y+46, r25	; 0x2e
    2cdc:	8d a7       	std	Y+45, r24	; 0x2d
    2cde:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ce0:	9e a5       	ldd	r25, Y+46	; 0x2e
    2ce2:	01 97       	sbiw	r24, 0x01	; 1
    2ce4:	f1 f7       	brne	.-4      	; 0x2ce2 <CLCD_voidHamoksha+0x1998>
    2ce6:	9e a7       	std	Y+46, r25	; 0x2e
    2ce8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cea:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cec:	98 a9       	ldd	r25, Y+48	; 0x30
    2cee:	01 97       	sbiw	r24, 0x01	; 1
    2cf0:	98 ab       	std	Y+48, r25	; 0x30
    2cf2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cf4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cf6:	98 a9       	ldd	r25, Y+48	; 0x30
    2cf8:	00 97       	sbiw	r24, 0x00	; 0
    2cfa:	69 f7       	brne	.-38     	; 0x2cd6 <CLCD_voidHamoksha+0x198c>
    2cfc:	14 c0       	rjmp	.+40     	; 0x2d26 <CLCD_voidHamoksha+0x19dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cfe:	69 a9       	ldd	r22, Y+49	; 0x31
    2d00:	7a a9       	ldd	r23, Y+50	; 0x32
    2d02:	8b a9       	ldd	r24, Y+51	; 0x33
    2d04:	9c a9       	ldd	r25, Y+52	; 0x34
    2d06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d0a:	dc 01       	movw	r26, r24
    2d0c:	cb 01       	movw	r24, r22
    2d0e:	98 ab       	std	Y+48, r25	; 0x30
    2d10:	8f a7       	std	Y+47, r24	; 0x2f
    2d12:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d14:	98 a9       	ldd	r25, Y+48	; 0x30
    2d16:	9c a7       	std	Y+44, r25	; 0x2c
    2d18:	8b a7       	std	Y+43, r24	; 0x2b
    2d1a:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d1c:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d1e:	01 97       	sbiw	r24, 0x01	; 1
    2d20:	f1 f7       	brne	.-4      	; 0x2d1e <CLCD_voidHamoksha+0x19d4>
    2d22:	9c a7       	std	Y+44, r25	; 0x2c
    2d24:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(30);
			CLCD_u8SpecialCharacter(5,Local_u8HamokshaPattern8,7,1);
    2d26:	9e 01       	movw	r18, r28
    2d28:	26 5d       	subi	r18, 0xD6	; 214
    2d2a:	3e 4f       	sbci	r19, 0xFE	; 254
    2d2c:	85 e0       	ldi	r24, 0x05	; 5
    2d2e:	b9 01       	movw	r22, r18
    2d30:	47 e0       	ldi	r20, 0x07	; 7
    2d32:	21 e0       	ldi	r18, 0x01	; 1
    2d34:	0e 94 4f 09 	call	0x129e	; 0x129e <CLCD_u8SpecialCharacter>
    2d38:	80 e0       	ldi	r24, 0x00	; 0
    2d3a:	90 e0       	ldi	r25, 0x00	; 0
    2d3c:	a0 ef       	ldi	r26, 0xF0	; 240
    2d3e:	b1 e4       	ldi	r27, 0x41	; 65
    2d40:	8f a3       	std	Y+39, r24	; 0x27
    2d42:	98 a7       	std	Y+40, r25	; 0x28
    2d44:	a9 a7       	std	Y+41, r26	; 0x29
    2d46:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d48:	6f a1       	ldd	r22, Y+39	; 0x27
    2d4a:	78 a5       	ldd	r23, Y+40	; 0x28
    2d4c:	89 a5       	ldd	r24, Y+41	; 0x29
    2d4e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d50:	20 e0       	ldi	r18, 0x00	; 0
    2d52:	30 e0       	ldi	r19, 0x00	; 0
    2d54:	4a e7       	ldi	r20, 0x7A	; 122
    2d56:	55 e4       	ldi	r21, 0x45	; 69
    2d58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d5c:	dc 01       	movw	r26, r24
    2d5e:	cb 01       	movw	r24, r22
    2d60:	8b a3       	std	Y+35, r24	; 0x23
    2d62:	9c a3       	std	Y+36, r25	; 0x24
    2d64:	ad a3       	std	Y+37, r26	; 0x25
    2d66:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2d68:	6b a1       	ldd	r22, Y+35	; 0x23
    2d6a:	7c a1       	ldd	r23, Y+36	; 0x24
    2d6c:	8d a1       	ldd	r24, Y+37	; 0x25
    2d6e:	9e a1       	ldd	r25, Y+38	; 0x26
    2d70:	20 e0       	ldi	r18, 0x00	; 0
    2d72:	30 e0       	ldi	r19, 0x00	; 0
    2d74:	40 e8       	ldi	r20, 0x80	; 128
    2d76:	5f e3       	ldi	r21, 0x3F	; 63
    2d78:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d7c:	88 23       	and	r24, r24
    2d7e:	2c f4       	brge	.+10     	; 0x2d8a <CLCD_voidHamoksha+0x1a40>
		__ticks = 1;
    2d80:	81 e0       	ldi	r24, 0x01	; 1
    2d82:	90 e0       	ldi	r25, 0x00	; 0
    2d84:	9a a3       	std	Y+34, r25	; 0x22
    2d86:	89 a3       	std	Y+33, r24	; 0x21
    2d88:	3f c0       	rjmp	.+126    	; 0x2e08 <CLCD_voidHamoksha+0x1abe>
	else if (__tmp > 65535)
    2d8a:	6b a1       	ldd	r22, Y+35	; 0x23
    2d8c:	7c a1       	ldd	r23, Y+36	; 0x24
    2d8e:	8d a1       	ldd	r24, Y+37	; 0x25
    2d90:	9e a1       	ldd	r25, Y+38	; 0x26
    2d92:	20 e0       	ldi	r18, 0x00	; 0
    2d94:	3f ef       	ldi	r19, 0xFF	; 255
    2d96:	4f e7       	ldi	r20, 0x7F	; 127
    2d98:	57 e4       	ldi	r21, 0x47	; 71
    2d9a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d9e:	18 16       	cp	r1, r24
    2da0:	4c f5       	brge	.+82     	; 0x2df4 <CLCD_voidHamoksha+0x1aaa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2da2:	6f a1       	ldd	r22, Y+39	; 0x27
    2da4:	78 a5       	ldd	r23, Y+40	; 0x28
    2da6:	89 a5       	ldd	r24, Y+41	; 0x29
    2da8:	9a a5       	ldd	r25, Y+42	; 0x2a
    2daa:	20 e0       	ldi	r18, 0x00	; 0
    2dac:	30 e0       	ldi	r19, 0x00	; 0
    2dae:	40 e2       	ldi	r20, 0x20	; 32
    2db0:	51 e4       	ldi	r21, 0x41	; 65
    2db2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2db6:	dc 01       	movw	r26, r24
    2db8:	cb 01       	movw	r24, r22
    2dba:	bc 01       	movw	r22, r24
    2dbc:	cd 01       	movw	r24, r26
    2dbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dc2:	dc 01       	movw	r26, r24
    2dc4:	cb 01       	movw	r24, r22
    2dc6:	9a a3       	std	Y+34, r25	; 0x22
    2dc8:	89 a3       	std	Y+33, r24	; 0x21
    2dca:	0f c0       	rjmp	.+30     	; 0x2dea <CLCD_voidHamoksha+0x1aa0>
    2dcc:	80 e9       	ldi	r24, 0x90	; 144
    2dce:	91 e0       	ldi	r25, 0x01	; 1
    2dd0:	98 a3       	std	Y+32, r25	; 0x20
    2dd2:	8f 8f       	std	Y+31, r24	; 0x1f
    2dd4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2dd6:	98 a1       	ldd	r25, Y+32	; 0x20
    2dd8:	01 97       	sbiw	r24, 0x01	; 1
    2dda:	f1 f7       	brne	.-4      	; 0x2dd8 <CLCD_voidHamoksha+0x1a8e>
    2ddc:	98 a3       	std	Y+32, r25	; 0x20
    2dde:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2de0:	89 a1       	ldd	r24, Y+33	; 0x21
    2de2:	9a a1       	ldd	r25, Y+34	; 0x22
    2de4:	01 97       	sbiw	r24, 0x01	; 1
    2de6:	9a a3       	std	Y+34, r25	; 0x22
    2de8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dea:	89 a1       	ldd	r24, Y+33	; 0x21
    2dec:	9a a1       	ldd	r25, Y+34	; 0x22
    2dee:	00 97       	sbiw	r24, 0x00	; 0
    2df0:	69 f7       	brne	.-38     	; 0x2dcc <CLCD_voidHamoksha+0x1a82>
    2df2:	14 c0       	rjmp	.+40     	; 0x2e1c <CLCD_voidHamoksha+0x1ad2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2df4:	6b a1       	ldd	r22, Y+35	; 0x23
    2df6:	7c a1       	ldd	r23, Y+36	; 0x24
    2df8:	8d a1       	ldd	r24, Y+37	; 0x25
    2dfa:	9e a1       	ldd	r25, Y+38	; 0x26
    2dfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e00:	dc 01       	movw	r26, r24
    2e02:	cb 01       	movw	r24, r22
    2e04:	9a a3       	std	Y+34, r25	; 0x22
    2e06:	89 a3       	std	Y+33, r24	; 0x21
    2e08:	89 a1       	ldd	r24, Y+33	; 0x21
    2e0a:	9a a1       	ldd	r25, Y+34	; 0x22
    2e0c:	9e 8f       	std	Y+30, r25	; 0x1e
    2e0e:	8d 8f       	std	Y+29, r24	; 0x1d
    2e10:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e12:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e14:	01 97       	sbiw	r24, 0x01	; 1
    2e16:	f1 f7       	brne	.-4      	; 0x2e14 <CLCD_voidHamoksha+0x1aca>
    2e18:	9e 8f       	std	Y+30, r25	; 0x1e
    2e1a:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(30);
			CLCD_u8SpecialCharacter(6,Local_u8HamokshaPattern8,9,1);
    2e1c:	9e 01       	movw	r18, r28
    2e1e:	26 5d       	subi	r18, 0xD6	; 214
    2e20:	3e 4f       	sbci	r19, 0xFE	; 254
    2e22:	86 e0       	ldi	r24, 0x06	; 6
    2e24:	b9 01       	movw	r22, r18
    2e26:	49 e0       	ldi	r20, 0x09	; 9
    2e28:	21 e0       	ldi	r18, 0x01	; 1
    2e2a:	0e 94 4f 09 	call	0x129e	; 0x129e <CLCD_u8SpecialCharacter>
    2e2e:	80 e0       	ldi	r24, 0x00	; 0
    2e30:	90 e0       	ldi	r25, 0x00	; 0
    2e32:	a0 ef       	ldi	r26, 0xF0	; 240
    2e34:	b1 e4       	ldi	r27, 0x41	; 65
    2e36:	89 8f       	std	Y+25, r24	; 0x19
    2e38:	9a 8f       	std	Y+26, r25	; 0x1a
    2e3a:	ab 8f       	std	Y+27, r26	; 0x1b
    2e3c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e3e:	69 8d       	ldd	r22, Y+25	; 0x19
    2e40:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e42:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e44:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e46:	20 e0       	ldi	r18, 0x00	; 0
    2e48:	30 e0       	ldi	r19, 0x00	; 0
    2e4a:	4a e7       	ldi	r20, 0x7A	; 122
    2e4c:	55 e4       	ldi	r21, 0x45	; 69
    2e4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e52:	dc 01       	movw	r26, r24
    2e54:	cb 01       	movw	r24, r22
    2e56:	8d 8b       	std	Y+21, r24	; 0x15
    2e58:	9e 8b       	std	Y+22, r25	; 0x16
    2e5a:	af 8b       	std	Y+23, r26	; 0x17
    2e5c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e5e:	6d 89       	ldd	r22, Y+21	; 0x15
    2e60:	7e 89       	ldd	r23, Y+22	; 0x16
    2e62:	8f 89       	ldd	r24, Y+23	; 0x17
    2e64:	98 8d       	ldd	r25, Y+24	; 0x18
    2e66:	20 e0       	ldi	r18, 0x00	; 0
    2e68:	30 e0       	ldi	r19, 0x00	; 0
    2e6a:	40 e8       	ldi	r20, 0x80	; 128
    2e6c:	5f e3       	ldi	r21, 0x3F	; 63
    2e6e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e72:	88 23       	and	r24, r24
    2e74:	2c f4       	brge	.+10     	; 0x2e80 <CLCD_voidHamoksha+0x1b36>
		__ticks = 1;
    2e76:	81 e0       	ldi	r24, 0x01	; 1
    2e78:	90 e0       	ldi	r25, 0x00	; 0
    2e7a:	9c 8b       	std	Y+20, r25	; 0x14
    2e7c:	8b 8b       	std	Y+19, r24	; 0x13
    2e7e:	3f c0       	rjmp	.+126    	; 0x2efe <CLCD_voidHamoksha+0x1bb4>
	else if (__tmp > 65535)
    2e80:	6d 89       	ldd	r22, Y+21	; 0x15
    2e82:	7e 89       	ldd	r23, Y+22	; 0x16
    2e84:	8f 89       	ldd	r24, Y+23	; 0x17
    2e86:	98 8d       	ldd	r25, Y+24	; 0x18
    2e88:	20 e0       	ldi	r18, 0x00	; 0
    2e8a:	3f ef       	ldi	r19, 0xFF	; 255
    2e8c:	4f e7       	ldi	r20, 0x7F	; 127
    2e8e:	57 e4       	ldi	r21, 0x47	; 71
    2e90:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e94:	18 16       	cp	r1, r24
    2e96:	4c f5       	brge	.+82     	; 0x2eea <CLCD_voidHamoksha+0x1ba0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e98:	69 8d       	ldd	r22, Y+25	; 0x19
    2e9a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e9c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e9e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ea0:	20 e0       	ldi	r18, 0x00	; 0
    2ea2:	30 e0       	ldi	r19, 0x00	; 0
    2ea4:	40 e2       	ldi	r20, 0x20	; 32
    2ea6:	51 e4       	ldi	r21, 0x41	; 65
    2ea8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eac:	dc 01       	movw	r26, r24
    2eae:	cb 01       	movw	r24, r22
    2eb0:	bc 01       	movw	r22, r24
    2eb2:	cd 01       	movw	r24, r26
    2eb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eb8:	dc 01       	movw	r26, r24
    2eba:	cb 01       	movw	r24, r22
    2ebc:	9c 8b       	std	Y+20, r25	; 0x14
    2ebe:	8b 8b       	std	Y+19, r24	; 0x13
    2ec0:	0f c0       	rjmp	.+30     	; 0x2ee0 <CLCD_voidHamoksha+0x1b96>
    2ec2:	80 e9       	ldi	r24, 0x90	; 144
    2ec4:	91 e0       	ldi	r25, 0x01	; 1
    2ec6:	9a 8b       	std	Y+18, r25	; 0x12
    2ec8:	89 8b       	std	Y+17, r24	; 0x11
    2eca:	89 89       	ldd	r24, Y+17	; 0x11
    2ecc:	9a 89       	ldd	r25, Y+18	; 0x12
    2ece:	01 97       	sbiw	r24, 0x01	; 1
    2ed0:	f1 f7       	brne	.-4      	; 0x2ece <CLCD_voidHamoksha+0x1b84>
    2ed2:	9a 8b       	std	Y+18, r25	; 0x12
    2ed4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ed6:	8b 89       	ldd	r24, Y+19	; 0x13
    2ed8:	9c 89       	ldd	r25, Y+20	; 0x14
    2eda:	01 97       	sbiw	r24, 0x01	; 1
    2edc:	9c 8b       	std	Y+20, r25	; 0x14
    2ede:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ee0:	8b 89       	ldd	r24, Y+19	; 0x13
    2ee2:	9c 89       	ldd	r25, Y+20	; 0x14
    2ee4:	00 97       	sbiw	r24, 0x00	; 0
    2ee6:	69 f7       	brne	.-38     	; 0x2ec2 <CLCD_voidHamoksha+0x1b78>
    2ee8:	14 c0       	rjmp	.+40     	; 0x2f12 <CLCD_voidHamoksha+0x1bc8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eea:	6d 89       	ldd	r22, Y+21	; 0x15
    2eec:	7e 89       	ldd	r23, Y+22	; 0x16
    2eee:	8f 89       	ldd	r24, Y+23	; 0x17
    2ef0:	98 8d       	ldd	r25, Y+24	; 0x18
    2ef2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ef6:	dc 01       	movw	r26, r24
    2ef8:	cb 01       	movw	r24, r22
    2efa:	9c 8b       	std	Y+20, r25	; 0x14
    2efc:	8b 8b       	std	Y+19, r24	; 0x13
    2efe:	8b 89       	ldd	r24, Y+19	; 0x13
    2f00:	9c 89       	ldd	r25, Y+20	; 0x14
    2f02:	98 8b       	std	Y+16, r25	; 0x10
    2f04:	8f 87       	std	Y+15, r24	; 0x0f
    2f06:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f08:	98 89       	ldd	r25, Y+16	; 0x10
    2f0a:	01 97       	sbiw	r24, 0x01	; 1
    2f0c:	f1 f7       	brne	.-4      	; 0x2f0a <CLCD_voidHamoksha+0x1bc0>
    2f0e:	98 8b       	std	Y+16, r25	; 0x10
    2f10:	8f 87       	std	Y+15, r24	; 0x0f
            _delay_ms(30);

			CLCD_u8SpecialCharacter(0,Local_u8HamokshaPattern0,13,1);
    2f12:	9e 01       	movw	r18, r28
    2f14:	2e 51       	subi	r18, 0x1E	; 30
    2f16:	3f 4f       	sbci	r19, 0xFF	; 255
    2f18:	80 e0       	ldi	r24, 0x00	; 0
    2f1a:	b9 01       	movw	r22, r18
    2f1c:	4d e0       	ldi	r20, 0x0D	; 13
    2f1e:	21 e0       	ldi	r18, 0x01	; 1
    2f20:	0e 94 4f 09 	call	0x129e	; 0x129e <CLCD_u8SpecialCharacter>
    2f24:	80 e0       	ldi	r24, 0x00	; 0
    2f26:	90 e0       	ldi	r25, 0x00	; 0
    2f28:	a6 e9       	ldi	r26, 0x96	; 150
    2f2a:	b3 e4       	ldi	r27, 0x43	; 67
    2f2c:	8b 87       	std	Y+11, r24	; 0x0b
    2f2e:	9c 87       	std	Y+12, r25	; 0x0c
    2f30:	ad 87       	std	Y+13, r26	; 0x0d
    2f32:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f34:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f36:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f38:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f3c:	20 e0       	ldi	r18, 0x00	; 0
    2f3e:	30 e0       	ldi	r19, 0x00	; 0
    2f40:	4a e7       	ldi	r20, 0x7A	; 122
    2f42:	55 e4       	ldi	r21, 0x45	; 69
    2f44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f48:	dc 01       	movw	r26, r24
    2f4a:	cb 01       	movw	r24, r22
    2f4c:	8f 83       	std	Y+7, r24	; 0x07
    2f4e:	98 87       	std	Y+8, r25	; 0x08
    2f50:	a9 87       	std	Y+9, r26	; 0x09
    2f52:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f54:	6f 81       	ldd	r22, Y+7	; 0x07
    2f56:	78 85       	ldd	r23, Y+8	; 0x08
    2f58:	89 85       	ldd	r24, Y+9	; 0x09
    2f5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f5c:	20 e0       	ldi	r18, 0x00	; 0
    2f5e:	30 e0       	ldi	r19, 0x00	; 0
    2f60:	40 e8       	ldi	r20, 0x80	; 128
    2f62:	5f e3       	ldi	r21, 0x3F	; 63
    2f64:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f68:	88 23       	and	r24, r24
    2f6a:	2c f4       	brge	.+10     	; 0x2f76 <CLCD_voidHamoksha+0x1c2c>
		__ticks = 1;
    2f6c:	81 e0       	ldi	r24, 0x01	; 1
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	9e 83       	std	Y+6, r25	; 0x06
    2f72:	8d 83       	std	Y+5, r24	; 0x05
    2f74:	3f c0       	rjmp	.+126    	; 0x2ff4 <CLCD_voidHamoksha+0x1caa>
	else if (__tmp > 65535)
    2f76:	6f 81       	ldd	r22, Y+7	; 0x07
    2f78:	78 85       	ldd	r23, Y+8	; 0x08
    2f7a:	89 85       	ldd	r24, Y+9	; 0x09
    2f7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f7e:	20 e0       	ldi	r18, 0x00	; 0
    2f80:	3f ef       	ldi	r19, 0xFF	; 255
    2f82:	4f e7       	ldi	r20, 0x7F	; 127
    2f84:	57 e4       	ldi	r21, 0x47	; 71
    2f86:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f8a:	18 16       	cp	r1, r24
    2f8c:	4c f5       	brge	.+82     	; 0x2fe0 <CLCD_voidHamoksha+0x1c96>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f90:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f92:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f94:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f96:	20 e0       	ldi	r18, 0x00	; 0
    2f98:	30 e0       	ldi	r19, 0x00	; 0
    2f9a:	40 e2       	ldi	r20, 0x20	; 32
    2f9c:	51 e4       	ldi	r21, 0x41	; 65
    2f9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fa2:	dc 01       	movw	r26, r24
    2fa4:	cb 01       	movw	r24, r22
    2fa6:	bc 01       	movw	r22, r24
    2fa8:	cd 01       	movw	r24, r26
    2faa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fae:	dc 01       	movw	r26, r24
    2fb0:	cb 01       	movw	r24, r22
    2fb2:	9e 83       	std	Y+6, r25	; 0x06
    2fb4:	8d 83       	std	Y+5, r24	; 0x05
    2fb6:	0f c0       	rjmp	.+30     	; 0x2fd6 <CLCD_voidHamoksha+0x1c8c>
    2fb8:	80 e9       	ldi	r24, 0x90	; 144
    2fba:	91 e0       	ldi	r25, 0x01	; 1
    2fbc:	9c 83       	std	Y+4, r25	; 0x04
    2fbe:	8b 83       	std	Y+3, r24	; 0x03
    2fc0:	8b 81       	ldd	r24, Y+3	; 0x03
    2fc2:	9c 81       	ldd	r25, Y+4	; 0x04
    2fc4:	01 97       	sbiw	r24, 0x01	; 1
    2fc6:	f1 f7       	brne	.-4      	; 0x2fc4 <CLCD_voidHamoksha+0x1c7a>
    2fc8:	9c 83       	std	Y+4, r25	; 0x04
    2fca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fcc:	8d 81       	ldd	r24, Y+5	; 0x05
    2fce:	9e 81       	ldd	r25, Y+6	; 0x06
    2fd0:	01 97       	sbiw	r24, 0x01	; 1
    2fd2:	9e 83       	std	Y+6, r25	; 0x06
    2fd4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fd6:	8d 81       	ldd	r24, Y+5	; 0x05
    2fd8:	9e 81       	ldd	r25, Y+6	; 0x06
    2fda:	00 97       	sbiw	r24, 0x00	; 0
    2fdc:	69 f7       	brne	.-38     	; 0x2fb8 <CLCD_voidHamoksha+0x1c6e>
    2fde:	14 c0       	rjmp	.+40     	; 0x3008 <CLCD_voidHamoksha+0x1cbe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fe0:	6f 81       	ldd	r22, Y+7	; 0x07
    2fe2:	78 85       	ldd	r23, Y+8	; 0x08
    2fe4:	89 85       	ldd	r24, Y+9	; 0x09
    2fe6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fe8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fec:	dc 01       	movw	r26, r24
    2fee:	cb 01       	movw	r24, r22
    2ff0:	9e 83       	std	Y+6, r25	; 0x06
    2ff2:	8d 83       	std	Y+5, r24	; 0x05
    2ff4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ff6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ff8:	9a 83       	std	Y+2, r25	; 0x02
    2ffa:	89 83       	std	Y+1, r24	; 0x01
    2ffc:	89 81       	ldd	r24, Y+1	; 0x01
    2ffe:	9a 81       	ldd	r25, Y+2	; 0x02
    3000:	01 97       	sbiw	r24, 0x01	; 1
    3002:	f1 f7       	brne	.-4      	; 0x3000 <CLCD_voidHamoksha+0x1cb6>
    3004:	9a 83       	std	Y+2, r25	; 0x02
    3006:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(300);
		}
    3008:	cd 59       	subi	r28, 0x9D	; 157
    300a:	de 4f       	sbci	r29, 0xFE	; 254
    300c:	0f b6       	in	r0, 0x3f	; 63
    300e:	f8 94       	cli
    3010:	de bf       	out	0x3e, r29	; 62
    3012:	0f be       	out	0x3f, r0	; 63
    3014:	cd bf       	out	0x3d, r28	; 61
    3016:	cf 91       	pop	r28
    3018:	df 91       	pop	r29
    301a:	1f 91       	pop	r17
    301c:	0f 91       	pop	r16
    301e:	08 95       	ret

00003020 <CLCD_voidMyNameSin>:


void CLCD_voidMyNameSin()
{
    3020:	df 93       	push	r29
    3022:	cf 93       	push	r28
    3024:	cd b7       	in	r28, 0x3d	; 61
    3026:	de b7       	in	r29, 0x3e	; 62
    3028:	c1 55       	subi	r28, 0x51	; 81
    302a:	d0 40       	sbci	r29, 0x00	; 0
    302c:	0f b6       	in	r0, 0x3f	; 63
    302e:	f8 94       	cli
    3030:	de bf       	out	0x3e, r29	; 62
    3032:	0f be       	out	0x3f, r0	; 63
    3034:	cd bf       	out	0x3d, r28	; 61
                        0b00000100,
                        0b00011111,
                        0b00000100,
                        0b00000100,
                        0b00000100,
                        0b00000100,0};
    3036:	ce 01       	movw	r24, r28
    3038:	41 96       	adiw	r24, 0x11	; 17
    303a:	9a af       	std	Y+58, r25	; 0x3a
    303c:	89 af       	std	Y+57, r24	; 0x39
    303e:	e0 e5       	ldi	r30, 0x50	; 80
    3040:	f1 e0       	ldi	r31, 0x01	; 1
    3042:	fc af       	std	Y+60, r31	; 0x3c
    3044:	eb af       	std	Y+59, r30	; 0x3b
    3046:	f8 e0       	ldi	r31, 0x08	; 8
    3048:	fd af       	std	Y+61, r31	; 0x3d
    304a:	eb ad       	ldd	r30, Y+59	; 0x3b
    304c:	fc ad       	ldd	r31, Y+60	; 0x3c
    304e:	00 80       	ld	r0, Z
    3050:	8b ad       	ldd	r24, Y+59	; 0x3b
    3052:	9c ad       	ldd	r25, Y+60	; 0x3c
    3054:	01 96       	adiw	r24, 0x01	; 1
    3056:	9c af       	std	Y+60, r25	; 0x3c
    3058:	8b af       	std	Y+59, r24	; 0x3b
    305a:	e9 ad       	ldd	r30, Y+57	; 0x39
    305c:	fa ad       	ldd	r31, Y+58	; 0x3a
    305e:	00 82       	st	Z, r0
    3060:	89 ad       	ldd	r24, Y+57	; 0x39
    3062:	9a ad       	ldd	r25, Y+58	; 0x3a
    3064:	01 96       	adiw	r24, 0x01	; 1
    3066:	9a af       	std	Y+58, r25	; 0x3a
    3068:	89 af       	std	Y+57, r24	; 0x39
    306a:	9d ad       	ldd	r25, Y+61	; 0x3d
    306c:	91 50       	subi	r25, 0x01	; 1
    306e:	9d af       	std	Y+61, r25	; 0x3d
    3070:	ed ad       	ldd	r30, Y+61	; 0x3d
    3072:	ee 23       	and	r30, r30
    3074:	51 f7       	brne	.-44     	; 0x304a <CLCD_voidMyNameSin+0x2a>
                              0b00000000,
                              0b00000111,
                              0b00000101,
                              0b00000111,
                              0b00011111,
                              0b00000000,0};
    3076:	ce 01       	movw	r24, r28
    3078:	49 96       	adiw	r24, 0x19	; 25
    307a:	9f af       	std	Y+63, r25	; 0x3f
    307c:	8e af       	std	Y+62, r24	; 0x3e
    307e:	e8 e4       	ldi	r30, 0x48	; 72
    3080:	f1 e0       	ldi	r31, 0x01	; 1
    3082:	22 96       	adiw	r28, 0x02	; 2
    3084:	ff af       	std	Y+63, r31	; 0x3f
    3086:	ee af       	std	Y+62, r30	; 0x3e
    3088:	22 97       	sbiw	r28, 0x02	; 2
    308a:	f8 e0       	ldi	r31, 0x08	; 8
    308c:	23 96       	adiw	r28, 0x03	; 3
    308e:	ff af       	std	Y+63, r31	; 0x3f
    3090:	23 97       	sbiw	r28, 0x03	; 3
    3092:	22 96       	adiw	r28, 0x02	; 2
    3094:	ee ad       	ldd	r30, Y+62	; 0x3e
    3096:	ff ad       	ldd	r31, Y+63	; 0x3f
    3098:	22 97       	sbiw	r28, 0x02	; 2
    309a:	00 80       	ld	r0, Z
    309c:	22 96       	adiw	r28, 0x02	; 2
    309e:	8e ad       	ldd	r24, Y+62	; 0x3e
    30a0:	9f ad       	ldd	r25, Y+63	; 0x3f
    30a2:	22 97       	sbiw	r28, 0x02	; 2
    30a4:	01 96       	adiw	r24, 0x01	; 1
    30a6:	22 96       	adiw	r28, 0x02	; 2
    30a8:	9f af       	std	Y+63, r25	; 0x3f
    30aa:	8e af       	std	Y+62, r24	; 0x3e
    30ac:	22 97       	sbiw	r28, 0x02	; 2
    30ae:	ee ad       	ldd	r30, Y+62	; 0x3e
    30b0:	ff ad       	ldd	r31, Y+63	; 0x3f
    30b2:	00 82       	st	Z, r0
    30b4:	8e ad       	ldd	r24, Y+62	; 0x3e
    30b6:	9f ad       	ldd	r25, Y+63	; 0x3f
    30b8:	01 96       	adiw	r24, 0x01	; 1
    30ba:	9f af       	std	Y+63, r25	; 0x3f
    30bc:	8e af       	std	Y+62, r24	; 0x3e
    30be:	23 96       	adiw	r28, 0x03	; 3
    30c0:	9f ad       	ldd	r25, Y+63	; 0x3f
    30c2:	23 97       	sbiw	r28, 0x03	; 3
    30c4:	91 50       	subi	r25, 0x01	; 1
    30c6:	23 96       	adiw	r28, 0x03	; 3
    30c8:	9f af       	std	Y+63, r25	; 0x3f
    30ca:	23 97       	sbiw	r28, 0x03	; 3
    30cc:	23 96       	adiw	r28, 0x03	; 3
    30ce:	ef ad       	ldd	r30, Y+63	; 0x3f
    30d0:	23 97       	sbiw	r28, 0x03	; 3
    30d2:	ee 23       	and	r30, r30
    30d4:	f1 f6       	brne	.-68     	; 0x3092 <CLCD_voidMyNameSin+0x72>
                              0b00000000,
                              0b00000000,
                              0b00000101,
                              0b00000001,
                              0b00011111,
                              0b00000000,0};
    30d6:	ce 01       	movw	r24, r28
    30d8:	81 96       	adiw	r24, 0x21	; 33
    30da:	25 96       	adiw	r28, 0x05	; 5
    30dc:	9f af       	std	Y+63, r25	; 0x3f
    30de:	8e af       	std	Y+62, r24	; 0x3e
    30e0:	25 97       	sbiw	r28, 0x05	; 5
    30e2:	e0 e4       	ldi	r30, 0x40	; 64
    30e4:	f1 e0       	ldi	r31, 0x01	; 1
    30e6:	27 96       	adiw	r28, 0x07	; 7
    30e8:	ff af       	std	Y+63, r31	; 0x3f
    30ea:	ee af       	std	Y+62, r30	; 0x3e
    30ec:	27 97       	sbiw	r28, 0x07	; 7
    30ee:	f8 e0       	ldi	r31, 0x08	; 8
    30f0:	28 96       	adiw	r28, 0x08	; 8
    30f2:	ff af       	std	Y+63, r31	; 0x3f
    30f4:	28 97       	sbiw	r28, 0x08	; 8
    30f6:	27 96       	adiw	r28, 0x07	; 7
    30f8:	ee ad       	ldd	r30, Y+62	; 0x3e
    30fa:	ff ad       	ldd	r31, Y+63	; 0x3f
    30fc:	27 97       	sbiw	r28, 0x07	; 7
    30fe:	00 80       	ld	r0, Z
    3100:	27 96       	adiw	r28, 0x07	; 7
    3102:	8e ad       	ldd	r24, Y+62	; 0x3e
    3104:	9f ad       	ldd	r25, Y+63	; 0x3f
    3106:	27 97       	sbiw	r28, 0x07	; 7
    3108:	01 96       	adiw	r24, 0x01	; 1
    310a:	27 96       	adiw	r28, 0x07	; 7
    310c:	9f af       	std	Y+63, r25	; 0x3f
    310e:	8e af       	std	Y+62, r24	; 0x3e
    3110:	27 97       	sbiw	r28, 0x07	; 7
    3112:	25 96       	adiw	r28, 0x05	; 5
    3114:	ee ad       	ldd	r30, Y+62	; 0x3e
    3116:	ff ad       	ldd	r31, Y+63	; 0x3f
    3118:	25 97       	sbiw	r28, 0x05	; 5
    311a:	00 82       	st	Z, r0
    311c:	25 96       	adiw	r28, 0x05	; 5
    311e:	8e ad       	ldd	r24, Y+62	; 0x3e
    3120:	9f ad       	ldd	r25, Y+63	; 0x3f
    3122:	25 97       	sbiw	r28, 0x05	; 5
    3124:	01 96       	adiw	r24, 0x01	; 1
    3126:	25 96       	adiw	r28, 0x05	; 5
    3128:	9f af       	std	Y+63, r25	; 0x3f
    312a:	8e af       	std	Y+62, r24	; 0x3e
    312c:	25 97       	sbiw	r28, 0x05	; 5
    312e:	28 96       	adiw	r28, 0x08	; 8
    3130:	9f ad       	ldd	r25, Y+63	; 0x3f
    3132:	28 97       	sbiw	r28, 0x08	; 8
    3134:	91 50       	subi	r25, 0x01	; 1
    3136:	28 96       	adiw	r28, 0x08	; 8
    3138:	9f af       	std	Y+63, r25	; 0x3f
    313a:	28 97       	sbiw	r28, 0x08	; 8
    313c:	28 96       	adiw	r28, 0x08	; 8
    313e:	ef ad       	ldd	r30, Y+63	; 0x3f
    3140:	28 97       	sbiw	r28, 0x08	; 8
    3142:	ee 23       	and	r30, r30
    3144:	c1 f6       	brne	.-80     	; 0x30f6 <CLCD_voidMyNameSin+0xd6>
                              0b00000000,
                              0b00000001,
                              0b00000001,
                              0b00011111,
                              0b00000000,
                              0b00001010,0};
    3146:	ce 01       	movw	r24, r28
    3148:	89 96       	adiw	r24, 0x29	; 41
    314a:	2a 96       	adiw	r28, 0x0a	; 10
    314c:	9f af       	std	Y+63, r25	; 0x3f
    314e:	8e af       	std	Y+62, r24	; 0x3e
    3150:	2a 97       	sbiw	r28, 0x0a	; 10
    3152:	e8 e3       	ldi	r30, 0x38	; 56
    3154:	f1 e0       	ldi	r31, 0x01	; 1
    3156:	2c 96       	adiw	r28, 0x0c	; 12
    3158:	ff af       	std	Y+63, r31	; 0x3f
    315a:	ee af       	std	Y+62, r30	; 0x3e
    315c:	2c 97       	sbiw	r28, 0x0c	; 12
    315e:	f8 e0       	ldi	r31, 0x08	; 8
    3160:	2d 96       	adiw	r28, 0x0d	; 13
    3162:	ff af       	std	Y+63, r31	; 0x3f
    3164:	2d 97       	sbiw	r28, 0x0d	; 13
    3166:	2c 96       	adiw	r28, 0x0c	; 12
    3168:	ee ad       	ldd	r30, Y+62	; 0x3e
    316a:	ff ad       	ldd	r31, Y+63	; 0x3f
    316c:	2c 97       	sbiw	r28, 0x0c	; 12
    316e:	00 80       	ld	r0, Z
    3170:	2c 96       	adiw	r28, 0x0c	; 12
    3172:	8e ad       	ldd	r24, Y+62	; 0x3e
    3174:	9f ad       	ldd	r25, Y+63	; 0x3f
    3176:	2c 97       	sbiw	r28, 0x0c	; 12
    3178:	01 96       	adiw	r24, 0x01	; 1
    317a:	2c 96       	adiw	r28, 0x0c	; 12
    317c:	9f af       	std	Y+63, r25	; 0x3f
    317e:	8e af       	std	Y+62, r24	; 0x3e
    3180:	2c 97       	sbiw	r28, 0x0c	; 12
    3182:	2a 96       	adiw	r28, 0x0a	; 10
    3184:	ee ad       	ldd	r30, Y+62	; 0x3e
    3186:	ff ad       	ldd	r31, Y+63	; 0x3f
    3188:	2a 97       	sbiw	r28, 0x0a	; 10
    318a:	00 82       	st	Z, r0
    318c:	2a 96       	adiw	r28, 0x0a	; 10
    318e:	8e ad       	ldd	r24, Y+62	; 0x3e
    3190:	9f ad       	ldd	r25, Y+63	; 0x3f
    3192:	2a 97       	sbiw	r28, 0x0a	; 10
    3194:	01 96       	adiw	r24, 0x01	; 1
    3196:	2a 96       	adiw	r28, 0x0a	; 10
    3198:	9f af       	std	Y+63, r25	; 0x3f
    319a:	8e af       	std	Y+62, r24	; 0x3e
    319c:	2a 97       	sbiw	r28, 0x0a	; 10
    319e:	2d 96       	adiw	r28, 0x0d	; 13
    31a0:	9f ad       	ldd	r25, Y+63	; 0x3f
    31a2:	2d 97       	sbiw	r28, 0x0d	; 13
    31a4:	91 50       	subi	r25, 0x01	; 1
    31a6:	2d 96       	adiw	r28, 0x0d	; 13
    31a8:	9f af       	std	Y+63, r25	; 0x3f
    31aa:	2d 97       	sbiw	r28, 0x0d	; 13
    31ac:	2d 96       	adiw	r28, 0x0d	; 13
    31ae:	ef ad       	ldd	r30, Y+63	; 0x3f
    31b0:	2d 97       	sbiw	r28, 0x0d	; 13
    31b2:	ee 23       	and	r30, r30
    31b4:	c1 f6       	brne	.-80     	; 0x3166 <CLCD_voidMyNameSin+0x146>
                              0b00001111,
                              0b00001001,
                              0b00001111,
                              0b00000001,
                              0b00000000,0
                              };
    31b6:	ce 01       	movw	r24, r28
    31b8:	c1 96       	adiw	r24, 0x31	; 49
    31ba:	2f 96       	adiw	r28, 0x0f	; 15
    31bc:	9f af       	std	Y+63, r25	; 0x3f
    31be:	8e af       	std	Y+62, r24	; 0x3e
    31c0:	2f 97       	sbiw	r28, 0x0f	; 15
    31c2:	e0 e3       	ldi	r30, 0x30	; 48
    31c4:	f1 e0       	ldi	r31, 0x01	; 1
    31c6:	61 96       	adiw	r28, 0x11	; 17
    31c8:	ff af       	std	Y+63, r31	; 0x3f
    31ca:	ee af       	std	Y+62, r30	; 0x3e
    31cc:	61 97       	sbiw	r28, 0x11	; 17
    31ce:	f8 e0       	ldi	r31, 0x08	; 8
    31d0:	62 96       	adiw	r28, 0x12	; 18
    31d2:	ff af       	std	Y+63, r31	; 0x3f
    31d4:	62 97       	sbiw	r28, 0x12	; 18
    31d6:	61 96       	adiw	r28, 0x11	; 17
    31d8:	ee ad       	ldd	r30, Y+62	; 0x3e
    31da:	ff ad       	ldd	r31, Y+63	; 0x3f
    31dc:	61 97       	sbiw	r28, 0x11	; 17
    31de:	00 80       	ld	r0, Z
    31e0:	61 96       	adiw	r28, 0x11	; 17
    31e2:	8e ad       	ldd	r24, Y+62	; 0x3e
    31e4:	9f ad       	ldd	r25, Y+63	; 0x3f
    31e6:	61 97       	sbiw	r28, 0x11	; 17
    31e8:	01 96       	adiw	r24, 0x01	; 1
    31ea:	61 96       	adiw	r28, 0x11	; 17
    31ec:	9f af       	std	Y+63, r25	; 0x3f
    31ee:	8e af       	std	Y+62, r24	; 0x3e
    31f0:	61 97       	sbiw	r28, 0x11	; 17
    31f2:	2f 96       	adiw	r28, 0x0f	; 15
    31f4:	ee ad       	ldd	r30, Y+62	; 0x3e
    31f6:	ff ad       	ldd	r31, Y+63	; 0x3f
    31f8:	2f 97       	sbiw	r28, 0x0f	; 15
    31fa:	00 82       	st	Z, r0
    31fc:	2f 96       	adiw	r28, 0x0f	; 15
    31fe:	8e ad       	ldd	r24, Y+62	; 0x3e
    3200:	9f ad       	ldd	r25, Y+63	; 0x3f
    3202:	2f 97       	sbiw	r28, 0x0f	; 15
    3204:	01 96       	adiw	r24, 0x01	; 1
    3206:	2f 96       	adiw	r28, 0x0f	; 15
    3208:	9f af       	std	Y+63, r25	; 0x3f
    320a:	8e af       	std	Y+62, r24	; 0x3e
    320c:	2f 97       	sbiw	r28, 0x0f	; 15
    320e:	62 96       	adiw	r28, 0x12	; 18
    3210:	9f ad       	ldd	r25, Y+63	; 0x3f
    3212:	62 97       	sbiw	r28, 0x12	; 18
    3214:	91 50       	subi	r25, 0x01	; 1
    3216:	62 96       	adiw	r28, 0x12	; 18
    3218:	9f af       	std	Y+63, r25	; 0x3f
    321a:	62 97       	sbiw	r28, 0x12	; 18
    321c:	62 96       	adiw	r28, 0x12	; 18
    321e:	ef ad       	ldd	r30, Y+63	; 0x3f
    3220:	62 97       	sbiw	r28, 0x12	; 18
    3222:	ee 23       	and	r30, r30
    3224:	c1 f6       	brne	.-80     	; 0x31d6 <CLCD_voidMyNameSin+0x1b6>
   // sint8 j;
    for(uint8 i=15,j=0; (i>0 && j<2) ;i--,j++)
    3226:	8f e0       	ldi	r24, 0x0F	; 15
    3228:	88 8b       	std	Y+16, r24	; 0x10
    322a:	1f 86       	std	Y+15, r1	; 0x0f
    322c:	bc c0       	rjmp	.+376    	; 0x33a6 <CLCD_voidMyNameSin+0x386>
    {
	CLCD_u8SpecialCharacter(0,Local_u81letter,i--,j);
    322e:	98 89       	ldd	r25, Y+16	; 0x10
    3230:	88 89       	ldd	r24, Y+16	; 0x10
    3232:	81 50       	subi	r24, 0x01	; 1
    3234:	88 8b       	std	Y+16, r24	; 0x10
    3236:	9e 01       	movw	r18, r28
    3238:	2f 5e       	subi	r18, 0xEF	; 239
    323a:	3f 4f       	sbci	r19, 0xFF	; 255
    323c:	80 e0       	ldi	r24, 0x00	; 0
    323e:	b9 01       	movw	r22, r18
    3240:	49 2f       	mov	r20, r25
    3242:	2f 85       	ldd	r18, Y+15	; 0x0f
    3244:	0e 94 4f 09 	call	0x129e	; 0x129e <CLCD_u8SpecialCharacter>
	CLCD_u8SpecialCharacter(1,Local_u82letter,i--,j);
    3248:	98 89       	ldd	r25, Y+16	; 0x10
    324a:	88 89       	ldd	r24, Y+16	; 0x10
    324c:	81 50       	subi	r24, 0x01	; 1
    324e:	88 8b       	std	Y+16, r24	; 0x10
    3250:	9e 01       	movw	r18, r28
    3252:	27 5e       	subi	r18, 0xE7	; 231
    3254:	3f 4f       	sbci	r19, 0xFF	; 255
    3256:	81 e0       	ldi	r24, 0x01	; 1
    3258:	b9 01       	movw	r22, r18
    325a:	49 2f       	mov	r20, r25
    325c:	2f 85       	ldd	r18, Y+15	; 0x0f
    325e:	0e 94 4f 09 	call	0x129e	; 0x129e <CLCD_u8SpecialCharacter>
	CLCD_u8SpecialCharacter(2,Local_u83letter,i--,j);
    3262:	98 89       	ldd	r25, Y+16	; 0x10
    3264:	88 89       	ldd	r24, Y+16	; 0x10
    3266:	81 50       	subi	r24, 0x01	; 1
    3268:	88 8b       	std	Y+16, r24	; 0x10
    326a:	9e 01       	movw	r18, r28
    326c:	2f 5d       	subi	r18, 0xDF	; 223
    326e:	3f 4f       	sbci	r19, 0xFF	; 255
    3270:	82 e0       	ldi	r24, 0x02	; 2
    3272:	b9 01       	movw	r22, r18
    3274:	49 2f       	mov	r20, r25
    3276:	2f 85       	ldd	r18, Y+15	; 0x0f
    3278:	0e 94 4f 09 	call	0x129e	; 0x129e <CLCD_u8SpecialCharacter>
	CLCD_u8SpecialCharacter(3,Local_u84letter,i--,j);
    327c:	98 89       	ldd	r25, Y+16	; 0x10
    327e:	88 89       	ldd	r24, Y+16	; 0x10
    3280:	81 50       	subi	r24, 0x01	; 1
    3282:	88 8b       	std	Y+16, r24	; 0x10
    3284:	9e 01       	movw	r18, r28
    3286:	27 5d       	subi	r18, 0xD7	; 215
    3288:	3f 4f       	sbci	r19, 0xFF	; 255
    328a:	83 e0       	ldi	r24, 0x03	; 3
    328c:	b9 01       	movw	r22, r18
    328e:	49 2f       	mov	r20, r25
    3290:	2f 85       	ldd	r18, Y+15	; 0x0f
    3292:	0e 94 4f 09 	call	0x129e	; 0x129e <CLCD_u8SpecialCharacter>
	CLCD_u8SpecialCharacter(4,Local_u85letter,i,j);
    3296:	9e 01       	movw	r18, r28
    3298:	2f 5c       	subi	r18, 0xCF	; 207
    329a:	3f 4f       	sbci	r19, 0xFF	; 255
    329c:	84 e0       	ldi	r24, 0x04	; 4
    329e:	b9 01       	movw	r22, r18
    32a0:	48 89       	ldd	r20, Y+16	; 0x10
    32a2:	2f 85       	ldd	r18, Y+15	; 0x0f
    32a4:	0e 94 4f 09 	call	0x129e	; 0x129e <CLCD_u8SpecialCharacter>
    32a8:	80 e0       	ldi	r24, 0x00	; 0
    32aa:	90 e0       	ldi	r25, 0x00	; 0
    32ac:	a0 ea       	ldi	r26, 0xA0	; 160
    32ae:	b2 e4       	ldi	r27, 0x42	; 66
    32b0:	8b 87       	std	Y+11, r24	; 0x0b
    32b2:	9c 87       	std	Y+12, r25	; 0x0c
    32b4:	ad 87       	std	Y+13, r26	; 0x0d
    32b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    32ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    32bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    32be:	9e 85       	ldd	r25, Y+14	; 0x0e
    32c0:	20 e0       	ldi	r18, 0x00	; 0
    32c2:	30 e0       	ldi	r19, 0x00	; 0
    32c4:	4a e7       	ldi	r20, 0x7A	; 122
    32c6:	55 e4       	ldi	r21, 0x45	; 69
    32c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32cc:	dc 01       	movw	r26, r24
    32ce:	cb 01       	movw	r24, r22
    32d0:	8f 83       	std	Y+7, r24	; 0x07
    32d2:	98 87       	std	Y+8, r25	; 0x08
    32d4:	a9 87       	std	Y+9, r26	; 0x09
    32d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32d8:	6f 81       	ldd	r22, Y+7	; 0x07
    32da:	78 85       	ldd	r23, Y+8	; 0x08
    32dc:	89 85       	ldd	r24, Y+9	; 0x09
    32de:	9a 85       	ldd	r25, Y+10	; 0x0a
    32e0:	20 e0       	ldi	r18, 0x00	; 0
    32e2:	30 e0       	ldi	r19, 0x00	; 0
    32e4:	40 e8       	ldi	r20, 0x80	; 128
    32e6:	5f e3       	ldi	r21, 0x3F	; 63
    32e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32ec:	88 23       	and	r24, r24
    32ee:	2c f4       	brge	.+10     	; 0x32fa <CLCD_voidMyNameSin+0x2da>
		__ticks = 1;
    32f0:	81 e0       	ldi	r24, 0x01	; 1
    32f2:	90 e0       	ldi	r25, 0x00	; 0
    32f4:	9e 83       	std	Y+6, r25	; 0x06
    32f6:	8d 83       	std	Y+5, r24	; 0x05
    32f8:	3f c0       	rjmp	.+126    	; 0x3378 <CLCD_voidMyNameSin+0x358>
	else if (__tmp > 65535)
    32fa:	6f 81       	ldd	r22, Y+7	; 0x07
    32fc:	78 85       	ldd	r23, Y+8	; 0x08
    32fe:	89 85       	ldd	r24, Y+9	; 0x09
    3300:	9a 85       	ldd	r25, Y+10	; 0x0a
    3302:	20 e0       	ldi	r18, 0x00	; 0
    3304:	3f ef       	ldi	r19, 0xFF	; 255
    3306:	4f e7       	ldi	r20, 0x7F	; 127
    3308:	57 e4       	ldi	r21, 0x47	; 71
    330a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    330e:	18 16       	cp	r1, r24
    3310:	4c f5       	brge	.+82     	; 0x3364 <CLCD_voidMyNameSin+0x344>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3312:	6b 85       	ldd	r22, Y+11	; 0x0b
    3314:	7c 85       	ldd	r23, Y+12	; 0x0c
    3316:	8d 85       	ldd	r24, Y+13	; 0x0d
    3318:	9e 85       	ldd	r25, Y+14	; 0x0e
    331a:	20 e0       	ldi	r18, 0x00	; 0
    331c:	30 e0       	ldi	r19, 0x00	; 0
    331e:	40 e2       	ldi	r20, 0x20	; 32
    3320:	51 e4       	ldi	r21, 0x41	; 65
    3322:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3326:	dc 01       	movw	r26, r24
    3328:	cb 01       	movw	r24, r22
    332a:	bc 01       	movw	r22, r24
    332c:	cd 01       	movw	r24, r26
    332e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3332:	dc 01       	movw	r26, r24
    3334:	cb 01       	movw	r24, r22
    3336:	9e 83       	std	Y+6, r25	; 0x06
    3338:	8d 83       	std	Y+5, r24	; 0x05
    333a:	0f c0       	rjmp	.+30     	; 0x335a <CLCD_voidMyNameSin+0x33a>
    333c:	80 e9       	ldi	r24, 0x90	; 144
    333e:	91 e0       	ldi	r25, 0x01	; 1
    3340:	9c 83       	std	Y+4, r25	; 0x04
    3342:	8b 83       	std	Y+3, r24	; 0x03
    3344:	8b 81       	ldd	r24, Y+3	; 0x03
    3346:	9c 81       	ldd	r25, Y+4	; 0x04
    3348:	01 97       	sbiw	r24, 0x01	; 1
    334a:	f1 f7       	brne	.-4      	; 0x3348 <CLCD_voidMyNameSin+0x328>
    334c:	9c 83       	std	Y+4, r25	; 0x04
    334e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3350:	8d 81       	ldd	r24, Y+5	; 0x05
    3352:	9e 81       	ldd	r25, Y+6	; 0x06
    3354:	01 97       	sbiw	r24, 0x01	; 1
    3356:	9e 83       	std	Y+6, r25	; 0x06
    3358:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    335a:	8d 81       	ldd	r24, Y+5	; 0x05
    335c:	9e 81       	ldd	r25, Y+6	; 0x06
    335e:	00 97       	sbiw	r24, 0x00	; 0
    3360:	69 f7       	brne	.-38     	; 0x333c <CLCD_voidMyNameSin+0x31c>
    3362:	14 c0       	rjmp	.+40     	; 0x338c <CLCD_voidMyNameSin+0x36c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3364:	6f 81       	ldd	r22, Y+7	; 0x07
    3366:	78 85       	ldd	r23, Y+8	; 0x08
    3368:	89 85       	ldd	r24, Y+9	; 0x09
    336a:	9a 85       	ldd	r25, Y+10	; 0x0a
    336c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3370:	dc 01       	movw	r26, r24
    3372:	cb 01       	movw	r24, r22
    3374:	9e 83       	std	Y+6, r25	; 0x06
    3376:	8d 83       	std	Y+5, r24	; 0x05
    3378:	8d 81       	ldd	r24, Y+5	; 0x05
    337a:	9e 81       	ldd	r25, Y+6	; 0x06
    337c:	9a 83       	std	Y+2, r25	; 0x02
    337e:	89 83       	std	Y+1, r24	; 0x01
    3380:	89 81       	ldd	r24, Y+1	; 0x01
    3382:	9a 81       	ldd	r25, Y+2	; 0x02
    3384:	01 97       	sbiw	r24, 0x01	; 1
    3386:	f1 f7       	brne	.-4      	; 0x3384 <CLCD_voidMyNameSin+0x364>
    3388:	9a 83       	std	Y+2, r25	; 0x02
    338a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(80);
	CLCD_voidClear();
    338c:	0e 94 9b 09 	call	0x1336	; 0x1336 <CLCD_voidClear>
	if(j==1)
    3390:	8f 85       	ldd	r24, Y+15	; 0x0f
    3392:	81 30       	cpi	r24, 0x01	; 1
    3394:	11 f4       	brne	.+4      	; 0x339a <CLCD_voidMyNameSin+0x37a>
	{
		j=-1;
    3396:	8f ef       	ldi	r24, 0xFF	; 255
    3398:	8f 87       	std	Y+15, r24	; 0x0f
                              0b00001111,
                              0b00000001,
                              0b00000000,0
                              };
   // sint8 j;
    for(uint8 i=15,j=0; (i>0 && j<2) ;i--,j++)
    339a:	88 89       	ldd	r24, Y+16	; 0x10
    339c:	81 50       	subi	r24, 0x01	; 1
    339e:	88 8b       	std	Y+16, r24	; 0x10
    33a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    33a2:	8f 5f       	subi	r24, 0xFF	; 255
    33a4:	8f 87       	std	Y+15, r24	; 0x0f
    33a6:	88 89       	ldd	r24, Y+16	; 0x10
    33a8:	88 23       	and	r24, r24
    33aa:	21 f0       	breq	.+8      	; 0x33b4 <CLCD_voidMyNameSin+0x394>
    33ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    33ae:	82 30       	cpi	r24, 0x02	; 2
    33b0:	08 f4       	brcc	.+2      	; 0x33b4 <CLCD_voidMyNameSin+0x394>
    33b2:	3d cf       	rjmp	.-390    	; 0x322e <CLCD_voidMyNameSin+0x20e>
	}
    }



}
    33b4:	cf 5a       	subi	r28, 0xAF	; 175
    33b6:	df 4f       	sbci	r29, 0xFF	; 255
    33b8:	0f b6       	in	r0, 0x3f	; 63
    33ba:	f8 94       	cli
    33bc:	de bf       	out	0x3e, r29	; 62
    33be:	0f be       	out	0x3f, r0	; 63
    33c0:	cd bf       	out	0x3d, r28	; 61
    33c2:	cf 91       	pop	r28
    33c4:	df 91       	pop	r29
    33c6:	08 95       	ret

000033c8 <DIO_u8SetPinDirection>:
#include "DIO_prv.h"
#include "DIO_cfg.h"
#include "DIO_reg.h"

uint8 DIO_u8SetPinDirection(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Direction )
{
    33c8:	df 93       	push	r29
    33ca:	cf 93       	push	r28
    33cc:	cd b7       	in	r28, 0x3d	; 61
    33ce:	de b7       	in	r29, 0x3e	; 62
    33d0:	28 97       	sbiw	r28, 0x08	; 8
    33d2:	0f b6       	in	r0, 0x3f	; 63
    33d4:	f8 94       	cli
    33d6:	de bf       	out	0x3e, r29	; 62
    33d8:	0f be       	out	0x3f, r0	; 63
    33da:	cd bf       	out	0x3d, r28	; 61
    33dc:	8a 83       	std	Y+2, r24	; 0x02
    33de:	6b 83       	std	Y+3, r22	; 0x03
    33e0:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
    33e2:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <=DIO_u8PIN7)
    33e4:	8b 81       	ldd	r24, Y+3	; 0x03
    33e6:	88 30       	cpi	r24, 0x08	; 8
    33e8:	08 f0       	brcs	.+2      	; 0x33ec <DIO_u8SetPinDirection+0x24>
    33ea:	f4 c0       	rjmp	.+488    	; 0x35d4 <DIO_u8SetPinDirection+0x20c>
	{

		if(Copy_u8Direction == DIO_u8PIN_INPUT)
    33ec:	8c 81       	ldd	r24, Y+4	; 0x04
    33ee:	88 23       	and	r24, r24
    33f0:	09 f0       	breq	.+2      	; 0x33f4 <DIO_u8SetPinDirection+0x2c>
    33f2:	77 c0       	rjmp	.+238    	; 0x34e2 <DIO_u8SetPinDirection+0x11a>
		{
			switch(Copy_u8Port)
    33f4:	8a 81       	ldd	r24, Y+2	; 0x02
    33f6:	28 2f       	mov	r18, r24
    33f8:	30 e0       	ldi	r19, 0x00	; 0
    33fa:	38 87       	std	Y+8, r19	; 0x08
    33fc:	2f 83       	std	Y+7, r18	; 0x07
    33fe:	8f 81       	ldd	r24, Y+7	; 0x07
    3400:	98 85       	ldd	r25, Y+8	; 0x08
    3402:	81 30       	cpi	r24, 0x01	; 1
    3404:	91 05       	cpc	r25, r1
    3406:	59 f1       	breq	.+86     	; 0x345e <DIO_u8SetPinDirection+0x96>
    3408:	2f 81       	ldd	r18, Y+7	; 0x07
    340a:	38 85       	ldd	r19, Y+8	; 0x08
    340c:	22 30       	cpi	r18, 0x02	; 2
    340e:	31 05       	cpc	r19, r1
    3410:	2c f4       	brge	.+10     	; 0x341c <DIO_u8SetPinDirection+0x54>
    3412:	8f 81       	ldd	r24, Y+7	; 0x07
    3414:	98 85       	ldd	r25, Y+8	; 0x08
    3416:	00 97       	sbiw	r24, 0x00	; 0
    3418:	69 f0       	breq	.+26     	; 0x3434 <DIO_u8SetPinDirection+0x6c>
    341a:	60 c0       	rjmp	.+192    	; 0x34dc <DIO_u8SetPinDirection+0x114>
    341c:	2f 81       	ldd	r18, Y+7	; 0x07
    341e:	38 85       	ldd	r19, Y+8	; 0x08
    3420:	22 30       	cpi	r18, 0x02	; 2
    3422:	31 05       	cpc	r19, r1
    3424:	89 f1       	breq	.+98     	; 0x3488 <DIO_u8SetPinDirection+0xc0>
    3426:	8f 81       	ldd	r24, Y+7	; 0x07
    3428:	98 85       	ldd	r25, Y+8	; 0x08
    342a:	83 30       	cpi	r24, 0x03	; 3
    342c:	91 05       	cpc	r25, r1
    342e:	09 f4       	brne	.+2      	; 0x3432 <DIO_u8SetPinDirection+0x6a>
    3430:	40 c0       	rjmp	.+128    	; 0x34b2 <DIO_u8SetPinDirection+0xea>
    3432:	54 c0       	rjmp	.+168    	; 0x34dc <DIO_u8SetPinDirection+0x114>
			{
			case DIO_u8PORTA : CLR_BIT(DDRA,Copy_u8Pin); break;
    3434:	aa e3       	ldi	r26, 0x3A	; 58
    3436:	b0 e0       	ldi	r27, 0x00	; 0
    3438:	ea e3       	ldi	r30, 0x3A	; 58
    343a:	f0 e0       	ldi	r31, 0x00	; 0
    343c:	80 81       	ld	r24, Z
    343e:	48 2f       	mov	r20, r24
    3440:	8b 81       	ldd	r24, Y+3	; 0x03
    3442:	28 2f       	mov	r18, r24
    3444:	30 e0       	ldi	r19, 0x00	; 0
    3446:	81 e0       	ldi	r24, 0x01	; 1
    3448:	90 e0       	ldi	r25, 0x00	; 0
    344a:	02 2e       	mov	r0, r18
    344c:	02 c0       	rjmp	.+4      	; 0x3452 <DIO_u8SetPinDirection+0x8a>
    344e:	88 0f       	add	r24, r24
    3450:	99 1f       	adc	r25, r25
    3452:	0a 94       	dec	r0
    3454:	e2 f7       	brpl	.-8      	; 0x344e <DIO_u8SetPinDirection+0x86>
    3456:	80 95       	com	r24
    3458:	84 23       	and	r24, r20
    345a:	8c 93       	st	X, r24
    345c:	bd c0       	rjmp	.+378    	; 0x35d8 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB : CLR_BIT(DDRB,Copy_u8Pin); break;
    345e:	a7 e3       	ldi	r26, 0x37	; 55
    3460:	b0 e0       	ldi	r27, 0x00	; 0
    3462:	e7 e3       	ldi	r30, 0x37	; 55
    3464:	f0 e0       	ldi	r31, 0x00	; 0
    3466:	80 81       	ld	r24, Z
    3468:	48 2f       	mov	r20, r24
    346a:	8b 81       	ldd	r24, Y+3	; 0x03
    346c:	28 2f       	mov	r18, r24
    346e:	30 e0       	ldi	r19, 0x00	; 0
    3470:	81 e0       	ldi	r24, 0x01	; 1
    3472:	90 e0       	ldi	r25, 0x00	; 0
    3474:	02 2e       	mov	r0, r18
    3476:	02 c0       	rjmp	.+4      	; 0x347c <DIO_u8SetPinDirection+0xb4>
    3478:	88 0f       	add	r24, r24
    347a:	99 1f       	adc	r25, r25
    347c:	0a 94       	dec	r0
    347e:	e2 f7       	brpl	.-8      	; 0x3478 <DIO_u8SetPinDirection+0xb0>
    3480:	80 95       	com	r24
    3482:	84 23       	and	r24, r20
    3484:	8c 93       	st	X, r24
    3486:	a8 c0       	rjmp	.+336    	; 0x35d8 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC : CLR_BIT(DDRC,Copy_u8Pin); break;
    3488:	a4 e3       	ldi	r26, 0x34	; 52
    348a:	b0 e0       	ldi	r27, 0x00	; 0
    348c:	e4 e3       	ldi	r30, 0x34	; 52
    348e:	f0 e0       	ldi	r31, 0x00	; 0
    3490:	80 81       	ld	r24, Z
    3492:	48 2f       	mov	r20, r24
    3494:	8b 81       	ldd	r24, Y+3	; 0x03
    3496:	28 2f       	mov	r18, r24
    3498:	30 e0       	ldi	r19, 0x00	; 0
    349a:	81 e0       	ldi	r24, 0x01	; 1
    349c:	90 e0       	ldi	r25, 0x00	; 0
    349e:	02 2e       	mov	r0, r18
    34a0:	02 c0       	rjmp	.+4      	; 0x34a6 <DIO_u8SetPinDirection+0xde>
    34a2:	88 0f       	add	r24, r24
    34a4:	99 1f       	adc	r25, r25
    34a6:	0a 94       	dec	r0
    34a8:	e2 f7       	brpl	.-8      	; 0x34a2 <DIO_u8SetPinDirection+0xda>
    34aa:	80 95       	com	r24
    34ac:	84 23       	and	r24, r20
    34ae:	8c 93       	st	X, r24
    34b0:	93 c0       	rjmp	.+294    	; 0x35d8 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD : CLR_BIT(DDRD,Copy_u8Pin); break;
    34b2:	a1 e3       	ldi	r26, 0x31	; 49
    34b4:	b0 e0       	ldi	r27, 0x00	; 0
    34b6:	e1 e3       	ldi	r30, 0x31	; 49
    34b8:	f0 e0       	ldi	r31, 0x00	; 0
    34ba:	80 81       	ld	r24, Z
    34bc:	48 2f       	mov	r20, r24
    34be:	8b 81       	ldd	r24, Y+3	; 0x03
    34c0:	28 2f       	mov	r18, r24
    34c2:	30 e0       	ldi	r19, 0x00	; 0
    34c4:	81 e0       	ldi	r24, 0x01	; 1
    34c6:	90 e0       	ldi	r25, 0x00	; 0
    34c8:	02 2e       	mov	r0, r18
    34ca:	02 c0       	rjmp	.+4      	; 0x34d0 <DIO_u8SetPinDirection+0x108>
    34cc:	88 0f       	add	r24, r24
    34ce:	99 1f       	adc	r25, r25
    34d0:	0a 94       	dec	r0
    34d2:	e2 f7       	brpl	.-8      	; 0x34cc <DIO_u8SetPinDirection+0x104>
    34d4:	80 95       	com	r24
    34d6:	84 23       	and	r24, r20
    34d8:	8c 93       	st	X, r24
    34da:	7e c0       	rjmp	.+252    	; 0x35d8 <DIO_u8SetPinDirection+0x210>
			default : Local_u8ErrorState = NOK; 		 break;
    34dc:	81 e0       	ldi	r24, 0x01	; 1
    34de:	89 83       	std	Y+1, r24	; 0x01
    34e0:	7b c0       	rjmp	.+246    	; 0x35d8 <DIO_u8SetPinDirection+0x210>
			}
		}
		else if(Copy_u8Direction == DIO_u8PIN_OUTPUT)
    34e2:	8c 81       	ldd	r24, Y+4	; 0x04
    34e4:	81 30       	cpi	r24, 0x01	; 1
    34e6:	09 f0       	breq	.+2      	; 0x34ea <DIO_u8SetPinDirection+0x122>
    34e8:	72 c0       	rjmp	.+228    	; 0x35ce <DIO_u8SetPinDirection+0x206>
		{
			switch(Copy_u8Port)
    34ea:	8a 81       	ldd	r24, Y+2	; 0x02
    34ec:	28 2f       	mov	r18, r24
    34ee:	30 e0       	ldi	r19, 0x00	; 0
    34f0:	3e 83       	std	Y+6, r19	; 0x06
    34f2:	2d 83       	std	Y+5, r18	; 0x05
    34f4:	8d 81       	ldd	r24, Y+5	; 0x05
    34f6:	9e 81       	ldd	r25, Y+6	; 0x06
    34f8:	81 30       	cpi	r24, 0x01	; 1
    34fa:	91 05       	cpc	r25, r1
    34fc:	49 f1       	breq	.+82     	; 0x3550 <DIO_u8SetPinDirection+0x188>
    34fe:	2d 81       	ldd	r18, Y+5	; 0x05
    3500:	3e 81       	ldd	r19, Y+6	; 0x06
    3502:	22 30       	cpi	r18, 0x02	; 2
    3504:	31 05       	cpc	r19, r1
    3506:	2c f4       	brge	.+10     	; 0x3512 <DIO_u8SetPinDirection+0x14a>
    3508:	8d 81       	ldd	r24, Y+5	; 0x05
    350a:	9e 81       	ldd	r25, Y+6	; 0x06
    350c:	00 97       	sbiw	r24, 0x00	; 0
    350e:	61 f0       	breq	.+24     	; 0x3528 <DIO_u8SetPinDirection+0x160>
    3510:	5b c0       	rjmp	.+182    	; 0x35c8 <DIO_u8SetPinDirection+0x200>
    3512:	2d 81       	ldd	r18, Y+5	; 0x05
    3514:	3e 81       	ldd	r19, Y+6	; 0x06
    3516:	22 30       	cpi	r18, 0x02	; 2
    3518:	31 05       	cpc	r19, r1
    351a:	71 f1       	breq	.+92     	; 0x3578 <DIO_u8SetPinDirection+0x1b0>
    351c:	8d 81       	ldd	r24, Y+5	; 0x05
    351e:	9e 81       	ldd	r25, Y+6	; 0x06
    3520:	83 30       	cpi	r24, 0x03	; 3
    3522:	91 05       	cpc	r25, r1
    3524:	e9 f1       	breq	.+122    	; 0x35a0 <DIO_u8SetPinDirection+0x1d8>
    3526:	50 c0       	rjmp	.+160    	; 0x35c8 <DIO_u8SetPinDirection+0x200>
			{
			case DIO_u8PORTA : SET_BIT(DDRA,Copy_u8Pin); break;
    3528:	aa e3       	ldi	r26, 0x3A	; 58
    352a:	b0 e0       	ldi	r27, 0x00	; 0
    352c:	ea e3       	ldi	r30, 0x3A	; 58
    352e:	f0 e0       	ldi	r31, 0x00	; 0
    3530:	80 81       	ld	r24, Z
    3532:	48 2f       	mov	r20, r24
    3534:	8b 81       	ldd	r24, Y+3	; 0x03
    3536:	28 2f       	mov	r18, r24
    3538:	30 e0       	ldi	r19, 0x00	; 0
    353a:	81 e0       	ldi	r24, 0x01	; 1
    353c:	90 e0       	ldi	r25, 0x00	; 0
    353e:	02 2e       	mov	r0, r18
    3540:	02 c0       	rjmp	.+4      	; 0x3546 <DIO_u8SetPinDirection+0x17e>
    3542:	88 0f       	add	r24, r24
    3544:	99 1f       	adc	r25, r25
    3546:	0a 94       	dec	r0
    3548:	e2 f7       	brpl	.-8      	; 0x3542 <DIO_u8SetPinDirection+0x17a>
    354a:	84 2b       	or	r24, r20
    354c:	8c 93       	st	X, r24
    354e:	44 c0       	rjmp	.+136    	; 0x35d8 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB : SET_BIT(DDRB,Copy_u8Pin); break;
    3550:	a7 e3       	ldi	r26, 0x37	; 55
    3552:	b0 e0       	ldi	r27, 0x00	; 0
    3554:	e7 e3       	ldi	r30, 0x37	; 55
    3556:	f0 e0       	ldi	r31, 0x00	; 0
    3558:	80 81       	ld	r24, Z
    355a:	48 2f       	mov	r20, r24
    355c:	8b 81       	ldd	r24, Y+3	; 0x03
    355e:	28 2f       	mov	r18, r24
    3560:	30 e0       	ldi	r19, 0x00	; 0
    3562:	81 e0       	ldi	r24, 0x01	; 1
    3564:	90 e0       	ldi	r25, 0x00	; 0
    3566:	02 2e       	mov	r0, r18
    3568:	02 c0       	rjmp	.+4      	; 0x356e <DIO_u8SetPinDirection+0x1a6>
    356a:	88 0f       	add	r24, r24
    356c:	99 1f       	adc	r25, r25
    356e:	0a 94       	dec	r0
    3570:	e2 f7       	brpl	.-8      	; 0x356a <DIO_u8SetPinDirection+0x1a2>
    3572:	84 2b       	or	r24, r20
    3574:	8c 93       	st	X, r24
    3576:	30 c0       	rjmp	.+96     	; 0x35d8 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC : SET_BIT(DDRC,Copy_u8Pin); break;
    3578:	a4 e3       	ldi	r26, 0x34	; 52
    357a:	b0 e0       	ldi	r27, 0x00	; 0
    357c:	e4 e3       	ldi	r30, 0x34	; 52
    357e:	f0 e0       	ldi	r31, 0x00	; 0
    3580:	80 81       	ld	r24, Z
    3582:	48 2f       	mov	r20, r24
    3584:	8b 81       	ldd	r24, Y+3	; 0x03
    3586:	28 2f       	mov	r18, r24
    3588:	30 e0       	ldi	r19, 0x00	; 0
    358a:	81 e0       	ldi	r24, 0x01	; 1
    358c:	90 e0       	ldi	r25, 0x00	; 0
    358e:	02 2e       	mov	r0, r18
    3590:	02 c0       	rjmp	.+4      	; 0x3596 <DIO_u8SetPinDirection+0x1ce>
    3592:	88 0f       	add	r24, r24
    3594:	99 1f       	adc	r25, r25
    3596:	0a 94       	dec	r0
    3598:	e2 f7       	brpl	.-8      	; 0x3592 <DIO_u8SetPinDirection+0x1ca>
    359a:	84 2b       	or	r24, r20
    359c:	8c 93       	st	X, r24
    359e:	1c c0       	rjmp	.+56     	; 0x35d8 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD : SET_BIT(DDRD,Copy_u8Pin); break;
    35a0:	a1 e3       	ldi	r26, 0x31	; 49
    35a2:	b0 e0       	ldi	r27, 0x00	; 0
    35a4:	e1 e3       	ldi	r30, 0x31	; 49
    35a6:	f0 e0       	ldi	r31, 0x00	; 0
    35a8:	80 81       	ld	r24, Z
    35aa:	48 2f       	mov	r20, r24
    35ac:	8b 81       	ldd	r24, Y+3	; 0x03
    35ae:	28 2f       	mov	r18, r24
    35b0:	30 e0       	ldi	r19, 0x00	; 0
    35b2:	81 e0       	ldi	r24, 0x01	; 1
    35b4:	90 e0       	ldi	r25, 0x00	; 0
    35b6:	02 2e       	mov	r0, r18
    35b8:	02 c0       	rjmp	.+4      	; 0x35be <DIO_u8SetPinDirection+0x1f6>
    35ba:	88 0f       	add	r24, r24
    35bc:	99 1f       	adc	r25, r25
    35be:	0a 94       	dec	r0
    35c0:	e2 f7       	brpl	.-8      	; 0x35ba <DIO_u8SetPinDirection+0x1f2>
    35c2:	84 2b       	or	r24, r20
    35c4:	8c 93       	st	X, r24
    35c6:	08 c0       	rjmp	.+16     	; 0x35d8 <DIO_u8SetPinDirection+0x210>
			default : Local_u8ErrorState = NOK; 		 break;
    35c8:	81 e0       	ldi	r24, 0x01	; 1
    35ca:	89 83       	std	Y+1, r24	; 0x01
    35cc:	05 c0       	rjmp	.+10     	; 0x35d8 <DIO_u8SetPinDirection+0x210>
			}
		}

		else
		{
			Local_u8ErrorState = NOK;
    35ce:	81 e0       	ldi	r24, 0x01	; 1
    35d0:	89 83       	std	Y+1, r24	; 0x01
    35d2:	02 c0       	rjmp	.+4      	; 0x35d8 <DIO_u8SetPinDirection+0x210>
		}
	}
	else
	{
		/*Pin number is invalid*/
		Local_u8ErrorState = NOK;
    35d4:	81 e0       	ldi	r24, 0x01	; 1
    35d6:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    35d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    35da:	28 96       	adiw	r28, 0x08	; 8
    35dc:	0f b6       	in	r0, 0x3f	; 63
    35de:	f8 94       	cli
    35e0:	de bf       	out	0x3e, r29	; 62
    35e2:	0f be       	out	0x3f, r0	; 63
    35e4:	cd bf       	out	0x3d, r28	; 61
    35e6:	cf 91       	pop	r28
    35e8:	df 91       	pop	r29
    35ea:	08 95       	ret

000035ec <DIO_u8SetPinValue>:
uint8 DIO_u8SetPinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Value )
{
    35ec:	df 93       	push	r29
    35ee:	cf 93       	push	r28
    35f0:	cd b7       	in	r28, 0x3d	; 61
    35f2:	de b7       	in	r29, 0x3e	; 62
    35f4:	28 97       	sbiw	r28, 0x08	; 8
    35f6:	0f b6       	in	r0, 0x3f	; 63
    35f8:	f8 94       	cli
    35fa:	de bf       	out	0x3e, r29	; 62
    35fc:	0f be       	out	0x3f, r0	; 63
    35fe:	cd bf       	out	0x3d, r28	; 61
    3600:	8a 83       	std	Y+2, r24	; 0x02
    3602:	6b 83       	std	Y+3, r22	; 0x03
    3604:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
    3606:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <=DIO_u8PIN7)
    3608:	8b 81       	ldd	r24, Y+3	; 0x03
    360a:	88 30       	cpi	r24, 0x08	; 8
    360c:	08 f0       	brcs	.+2      	; 0x3610 <DIO_u8SetPinValue+0x24>
    360e:	f4 c0       	rjmp	.+488    	; 0x37f8 <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value == DIO_u8PIN_LOW)
    3610:	8c 81       	ldd	r24, Y+4	; 0x04
    3612:	88 23       	and	r24, r24
    3614:	09 f0       	breq	.+2      	; 0x3618 <DIO_u8SetPinValue+0x2c>
    3616:	77 c0       	rjmp	.+238    	; 0x3706 <DIO_u8SetPinValue+0x11a>
		{
			switch(Copy_u8Port)
    3618:	8a 81       	ldd	r24, Y+2	; 0x02
    361a:	28 2f       	mov	r18, r24
    361c:	30 e0       	ldi	r19, 0x00	; 0
    361e:	38 87       	std	Y+8, r19	; 0x08
    3620:	2f 83       	std	Y+7, r18	; 0x07
    3622:	8f 81       	ldd	r24, Y+7	; 0x07
    3624:	98 85       	ldd	r25, Y+8	; 0x08
    3626:	81 30       	cpi	r24, 0x01	; 1
    3628:	91 05       	cpc	r25, r1
    362a:	59 f1       	breq	.+86     	; 0x3682 <DIO_u8SetPinValue+0x96>
    362c:	2f 81       	ldd	r18, Y+7	; 0x07
    362e:	38 85       	ldd	r19, Y+8	; 0x08
    3630:	22 30       	cpi	r18, 0x02	; 2
    3632:	31 05       	cpc	r19, r1
    3634:	2c f4       	brge	.+10     	; 0x3640 <DIO_u8SetPinValue+0x54>
    3636:	8f 81       	ldd	r24, Y+7	; 0x07
    3638:	98 85       	ldd	r25, Y+8	; 0x08
    363a:	00 97       	sbiw	r24, 0x00	; 0
    363c:	69 f0       	breq	.+26     	; 0x3658 <DIO_u8SetPinValue+0x6c>
    363e:	60 c0       	rjmp	.+192    	; 0x3700 <DIO_u8SetPinValue+0x114>
    3640:	2f 81       	ldd	r18, Y+7	; 0x07
    3642:	38 85       	ldd	r19, Y+8	; 0x08
    3644:	22 30       	cpi	r18, 0x02	; 2
    3646:	31 05       	cpc	r19, r1
    3648:	89 f1       	breq	.+98     	; 0x36ac <DIO_u8SetPinValue+0xc0>
    364a:	8f 81       	ldd	r24, Y+7	; 0x07
    364c:	98 85       	ldd	r25, Y+8	; 0x08
    364e:	83 30       	cpi	r24, 0x03	; 3
    3650:	91 05       	cpc	r25, r1
    3652:	09 f4       	brne	.+2      	; 0x3656 <DIO_u8SetPinValue+0x6a>
    3654:	40 c0       	rjmp	.+128    	; 0x36d6 <DIO_u8SetPinValue+0xea>
    3656:	54 c0       	rjmp	.+168    	; 0x3700 <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA : CLR_BIT(PORTA,Copy_u8Pin); break;
    3658:	ab e3       	ldi	r26, 0x3B	; 59
    365a:	b0 e0       	ldi	r27, 0x00	; 0
    365c:	eb e3       	ldi	r30, 0x3B	; 59
    365e:	f0 e0       	ldi	r31, 0x00	; 0
    3660:	80 81       	ld	r24, Z
    3662:	48 2f       	mov	r20, r24
    3664:	8b 81       	ldd	r24, Y+3	; 0x03
    3666:	28 2f       	mov	r18, r24
    3668:	30 e0       	ldi	r19, 0x00	; 0
    366a:	81 e0       	ldi	r24, 0x01	; 1
    366c:	90 e0       	ldi	r25, 0x00	; 0
    366e:	02 2e       	mov	r0, r18
    3670:	02 c0       	rjmp	.+4      	; 0x3676 <DIO_u8SetPinValue+0x8a>
    3672:	88 0f       	add	r24, r24
    3674:	99 1f       	adc	r25, r25
    3676:	0a 94       	dec	r0
    3678:	e2 f7       	brpl	.-8      	; 0x3672 <DIO_u8SetPinValue+0x86>
    367a:	80 95       	com	r24
    367c:	84 23       	and	r24, r20
    367e:	8c 93       	st	X, r24
    3680:	bd c0       	rjmp	.+378    	; 0x37fc <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB : CLR_BIT(PORTB,Copy_u8Pin); break;
    3682:	a8 e3       	ldi	r26, 0x38	; 56
    3684:	b0 e0       	ldi	r27, 0x00	; 0
    3686:	e8 e3       	ldi	r30, 0x38	; 56
    3688:	f0 e0       	ldi	r31, 0x00	; 0
    368a:	80 81       	ld	r24, Z
    368c:	48 2f       	mov	r20, r24
    368e:	8b 81       	ldd	r24, Y+3	; 0x03
    3690:	28 2f       	mov	r18, r24
    3692:	30 e0       	ldi	r19, 0x00	; 0
    3694:	81 e0       	ldi	r24, 0x01	; 1
    3696:	90 e0       	ldi	r25, 0x00	; 0
    3698:	02 2e       	mov	r0, r18
    369a:	02 c0       	rjmp	.+4      	; 0x36a0 <DIO_u8SetPinValue+0xb4>
    369c:	88 0f       	add	r24, r24
    369e:	99 1f       	adc	r25, r25
    36a0:	0a 94       	dec	r0
    36a2:	e2 f7       	brpl	.-8      	; 0x369c <DIO_u8SetPinValue+0xb0>
    36a4:	80 95       	com	r24
    36a6:	84 23       	and	r24, r20
    36a8:	8c 93       	st	X, r24
    36aa:	a8 c0       	rjmp	.+336    	; 0x37fc <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC : CLR_BIT(PORTC,Copy_u8Pin); break;
    36ac:	a5 e3       	ldi	r26, 0x35	; 53
    36ae:	b0 e0       	ldi	r27, 0x00	; 0
    36b0:	e5 e3       	ldi	r30, 0x35	; 53
    36b2:	f0 e0       	ldi	r31, 0x00	; 0
    36b4:	80 81       	ld	r24, Z
    36b6:	48 2f       	mov	r20, r24
    36b8:	8b 81       	ldd	r24, Y+3	; 0x03
    36ba:	28 2f       	mov	r18, r24
    36bc:	30 e0       	ldi	r19, 0x00	; 0
    36be:	81 e0       	ldi	r24, 0x01	; 1
    36c0:	90 e0       	ldi	r25, 0x00	; 0
    36c2:	02 2e       	mov	r0, r18
    36c4:	02 c0       	rjmp	.+4      	; 0x36ca <DIO_u8SetPinValue+0xde>
    36c6:	88 0f       	add	r24, r24
    36c8:	99 1f       	adc	r25, r25
    36ca:	0a 94       	dec	r0
    36cc:	e2 f7       	brpl	.-8      	; 0x36c6 <DIO_u8SetPinValue+0xda>
    36ce:	80 95       	com	r24
    36d0:	84 23       	and	r24, r20
    36d2:	8c 93       	st	X, r24
    36d4:	93 c0       	rjmp	.+294    	; 0x37fc <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD : CLR_BIT(PORTD,Copy_u8Pin); break;
    36d6:	a2 e3       	ldi	r26, 0x32	; 50
    36d8:	b0 e0       	ldi	r27, 0x00	; 0
    36da:	e2 e3       	ldi	r30, 0x32	; 50
    36dc:	f0 e0       	ldi	r31, 0x00	; 0
    36de:	80 81       	ld	r24, Z
    36e0:	48 2f       	mov	r20, r24
    36e2:	8b 81       	ldd	r24, Y+3	; 0x03
    36e4:	28 2f       	mov	r18, r24
    36e6:	30 e0       	ldi	r19, 0x00	; 0
    36e8:	81 e0       	ldi	r24, 0x01	; 1
    36ea:	90 e0       	ldi	r25, 0x00	; 0
    36ec:	02 2e       	mov	r0, r18
    36ee:	02 c0       	rjmp	.+4      	; 0x36f4 <DIO_u8SetPinValue+0x108>
    36f0:	88 0f       	add	r24, r24
    36f2:	99 1f       	adc	r25, r25
    36f4:	0a 94       	dec	r0
    36f6:	e2 f7       	brpl	.-8      	; 0x36f0 <DIO_u8SetPinValue+0x104>
    36f8:	80 95       	com	r24
    36fa:	84 23       	and	r24, r20
    36fc:	8c 93       	st	X, r24
    36fe:	7e c0       	rjmp	.+252    	; 0x37fc <DIO_u8SetPinValue+0x210>
			default : Local_u8ErrorState = NOK; 		 break;
    3700:	81 e0       	ldi	r24, 0x01	; 1
    3702:	89 83       	std	Y+1, r24	; 0x01
    3704:	7b c0       	rjmp	.+246    	; 0x37fc <DIO_u8SetPinValue+0x210>
			}
		}
		else if(Copy_u8Value == DIO_u8PIN_HIGH)
    3706:	8c 81       	ldd	r24, Y+4	; 0x04
    3708:	81 30       	cpi	r24, 0x01	; 1
    370a:	09 f0       	breq	.+2      	; 0x370e <DIO_u8SetPinValue+0x122>
    370c:	72 c0       	rjmp	.+228    	; 0x37f2 <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
    370e:	8a 81       	ldd	r24, Y+2	; 0x02
    3710:	28 2f       	mov	r18, r24
    3712:	30 e0       	ldi	r19, 0x00	; 0
    3714:	3e 83       	std	Y+6, r19	; 0x06
    3716:	2d 83       	std	Y+5, r18	; 0x05
    3718:	8d 81       	ldd	r24, Y+5	; 0x05
    371a:	9e 81       	ldd	r25, Y+6	; 0x06
    371c:	81 30       	cpi	r24, 0x01	; 1
    371e:	91 05       	cpc	r25, r1
    3720:	49 f1       	breq	.+82     	; 0x3774 <DIO_u8SetPinValue+0x188>
    3722:	2d 81       	ldd	r18, Y+5	; 0x05
    3724:	3e 81       	ldd	r19, Y+6	; 0x06
    3726:	22 30       	cpi	r18, 0x02	; 2
    3728:	31 05       	cpc	r19, r1
    372a:	2c f4       	brge	.+10     	; 0x3736 <DIO_u8SetPinValue+0x14a>
    372c:	8d 81       	ldd	r24, Y+5	; 0x05
    372e:	9e 81       	ldd	r25, Y+6	; 0x06
    3730:	00 97       	sbiw	r24, 0x00	; 0
    3732:	61 f0       	breq	.+24     	; 0x374c <DIO_u8SetPinValue+0x160>
    3734:	5b c0       	rjmp	.+182    	; 0x37ec <DIO_u8SetPinValue+0x200>
    3736:	2d 81       	ldd	r18, Y+5	; 0x05
    3738:	3e 81       	ldd	r19, Y+6	; 0x06
    373a:	22 30       	cpi	r18, 0x02	; 2
    373c:	31 05       	cpc	r19, r1
    373e:	71 f1       	breq	.+92     	; 0x379c <DIO_u8SetPinValue+0x1b0>
    3740:	8d 81       	ldd	r24, Y+5	; 0x05
    3742:	9e 81       	ldd	r25, Y+6	; 0x06
    3744:	83 30       	cpi	r24, 0x03	; 3
    3746:	91 05       	cpc	r25, r1
    3748:	e9 f1       	breq	.+122    	; 0x37c4 <DIO_u8SetPinValue+0x1d8>
    374a:	50 c0       	rjmp	.+160    	; 0x37ec <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA : SET_BIT(PORTA,Copy_u8Pin); break;
    374c:	ab e3       	ldi	r26, 0x3B	; 59
    374e:	b0 e0       	ldi	r27, 0x00	; 0
    3750:	eb e3       	ldi	r30, 0x3B	; 59
    3752:	f0 e0       	ldi	r31, 0x00	; 0
    3754:	80 81       	ld	r24, Z
    3756:	48 2f       	mov	r20, r24
    3758:	8b 81       	ldd	r24, Y+3	; 0x03
    375a:	28 2f       	mov	r18, r24
    375c:	30 e0       	ldi	r19, 0x00	; 0
    375e:	81 e0       	ldi	r24, 0x01	; 1
    3760:	90 e0       	ldi	r25, 0x00	; 0
    3762:	02 2e       	mov	r0, r18
    3764:	02 c0       	rjmp	.+4      	; 0x376a <DIO_u8SetPinValue+0x17e>
    3766:	88 0f       	add	r24, r24
    3768:	99 1f       	adc	r25, r25
    376a:	0a 94       	dec	r0
    376c:	e2 f7       	brpl	.-8      	; 0x3766 <DIO_u8SetPinValue+0x17a>
    376e:	84 2b       	or	r24, r20
    3770:	8c 93       	st	X, r24
    3772:	44 c0       	rjmp	.+136    	; 0x37fc <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB : SET_BIT(PORTB,Copy_u8Pin); break;
    3774:	a8 e3       	ldi	r26, 0x38	; 56
    3776:	b0 e0       	ldi	r27, 0x00	; 0
    3778:	e8 e3       	ldi	r30, 0x38	; 56
    377a:	f0 e0       	ldi	r31, 0x00	; 0
    377c:	80 81       	ld	r24, Z
    377e:	48 2f       	mov	r20, r24
    3780:	8b 81       	ldd	r24, Y+3	; 0x03
    3782:	28 2f       	mov	r18, r24
    3784:	30 e0       	ldi	r19, 0x00	; 0
    3786:	81 e0       	ldi	r24, 0x01	; 1
    3788:	90 e0       	ldi	r25, 0x00	; 0
    378a:	02 2e       	mov	r0, r18
    378c:	02 c0       	rjmp	.+4      	; 0x3792 <DIO_u8SetPinValue+0x1a6>
    378e:	88 0f       	add	r24, r24
    3790:	99 1f       	adc	r25, r25
    3792:	0a 94       	dec	r0
    3794:	e2 f7       	brpl	.-8      	; 0x378e <DIO_u8SetPinValue+0x1a2>
    3796:	84 2b       	or	r24, r20
    3798:	8c 93       	st	X, r24
    379a:	30 c0       	rjmp	.+96     	; 0x37fc <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC : SET_BIT(PORTC,Copy_u8Pin); break;
    379c:	a5 e3       	ldi	r26, 0x35	; 53
    379e:	b0 e0       	ldi	r27, 0x00	; 0
    37a0:	e5 e3       	ldi	r30, 0x35	; 53
    37a2:	f0 e0       	ldi	r31, 0x00	; 0
    37a4:	80 81       	ld	r24, Z
    37a6:	48 2f       	mov	r20, r24
    37a8:	8b 81       	ldd	r24, Y+3	; 0x03
    37aa:	28 2f       	mov	r18, r24
    37ac:	30 e0       	ldi	r19, 0x00	; 0
    37ae:	81 e0       	ldi	r24, 0x01	; 1
    37b0:	90 e0       	ldi	r25, 0x00	; 0
    37b2:	02 2e       	mov	r0, r18
    37b4:	02 c0       	rjmp	.+4      	; 0x37ba <DIO_u8SetPinValue+0x1ce>
    37b6:	88 0f       	add	r24, r24
    37b8:	99 1f       	adc	r25, r25
    37ba:	0a 94       	dec	r0
    37bc:	e2 f7       	brpl	.-8      	; 0x37b6 <DIO_u8SetPinValue+0x1ca>
    37be:	84 2b       	or	r24, r20
    37c0:	8c 93       	st	X, r24
    37c2:	1c c0       	rjmp	.+56     	; 0x37fc <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD : SET_BIT(PORTD,Copy_u8Pin); break;
    37c4:	a2 e3       	ldi	r26, 0x32	; 50
    37c6:	b0 e0       	ldi	r27, 0x00	; 0
    37c8:	e2 e3       	ldi	r30, 0x32	; 50
    37ca:	f0 e0       	ldi	r31, 0x00	; 0
    37cc:	80 81       	ld	r24, Z
    37ce:	48 2f       	mov	r20, r24
    37d0:	8b 81       	ldd	r24, Y+3	; 0x03
    37d2:	28 2f       	mov	r18, r24
    37d4:	30 e0       	ldi	r19, 0x00	; 0
    37d6:	81 e0       	ldi	r24, 0x01	; 1
    37d8:	90 e0       	ldi	r25, 0x00	; 0
    37da:	02 2e       	mov	r0, r18
    37dc:	02 c0       	rjmp	.+4      	; 0x37e2 <DIO_u8SetPinValue+0x1f6>
    37de:	88 0f       	add	r24, r24
    37e0:	99 1f       	adc	r25, r25
    37e2:	0a 94       	dec	r0
    37e4:	e2 f7       	brpl	.-8      	; 0x37de <DIO_u8SetPinValue+0x1f2>
    37e6:	84 2b       	or	r24, r20
    37e8:	8c 93       	st	X, r24
    37ea:	08 c0       	rjmp	.+16     	; 0x37fc <DIO_u8SetPinValue+0x210>
			default : Local_u8ErrorState = NOK; 		 break;
    37ec:	81 e0       	ldi	r24, 0x01	; 1
    37ee:	89 83       	std	Y+1, r24	; 0x01
    37f0:	05 c0       	rjmp	.+10     	; 0x37fc <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState = NOK;
    37f2:	81 e0       	ldi	r24, 0x01	; 1
    37f4:	89 83       	std	Y+1, r24	; 0x01
    37f6:	02 c0       	rjmp	.+4      	; 0x37fc <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		/*Pin number is invalid*/
		Local_u8ErrorState = NOK;
    37f8:	81 e0       	ldi	r24, 0x01	; 1
    37fa:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    37fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    37fe:	28 96       	adiw	r28, 0x08	; 8
    3800:	0f b6       	in	r0, 0x3f	; 63
    3802:	f8 94       	cli
    3804:	de bf       	out	0x3e, r29	; 62
    3806:	0f be       	out	0x3f, r0	; 63
    3808:	cd bf       	out	0x3d, r28	; 61
    380a:	cf 91       	pop	r28
    380c:	df 91       	pop	r29
    380e:	08 95       	ret

00003810 <DIO_u8ReadPinValue>:
uint8 DIO_u8ReadPinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8* Copy_pu8Value)
{
    3810:	df 93       	push	r29
    3812:	cf 93       	push	r28
    3814:	cd b7       	in	r28, 0x3d	; 61
    3816:	de b7       	in	r29, 0x3e	; 62
    3818:	27 97       	sbiw	r28, 0x07	; 7
    381a:	0f b6       	in	r0, 0x3f	; 63
    381c:	f8 94       	cli
    381e:	de bf       	out	0x3e, r29	; 62
    3820:	0f be       	out	0x3f, r0	; 63
    3822:	cd bf       	out	0x3d, r28	; 61
    3824:	8a 83       	std	Y+2, r24	; 0x02
    3826:	6b 83       	std	Y+3, r22	; 0x03
    3828:	5d 83       	std	Y+5, r21	; 0x05
    382a:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
    382c:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pu8Value != NULL)
    382e:	8c 81       	ldd	r24, Y+4	; 0x04
    3830:	9d 81       	ldd	r25, Y+5	; 0x05
    3832:	00 97       	sbiw	r24, 0x00	; 0
    3834:	09 f4       	brne	.+2      	; 0x3838 <DIO_u8ReadPinValue+0x28>
    3836:	7b c0       	rjmp	.+246    	; 0x392e <DIO_u8ReadPinValue+0x11e>
	{
		if(Copy_u8Pin <=DIO_u8PIN7)
    3838:	8b 81       	ldd	r24, Y+3	; 0x03
    383a:	88 30       	cpi	r24, 0x08	; 8
    383c:	08 f0       	brcs	.+2      	; 0x3840 <DIO_u8ReadPinValue+0x30>
    383e:	74 c0       	rjmp	.+232    	; 0x3928 <DIO_u8ReadPinValue+0x118>
		{
			switch(Copy_u8Port)
    3840:	8a 81       	ldd	r24, Y+2	; 0x02
    3842:	28 2f       	mov	r18, r24
    3844:	30 e0       	ldi	r19, 0x00	; 0
    3846:	3f 83       	std	Y+7, r19	; 0x07
    3848:	2e 83       	std	Y+6, r18	; 0x06
    384a:	4e 81       	ldd	r20, Y+6	; 0x06
    384c:	5f 81       	ldd	r21, Y+7	; 0x07
    384e:	41 30       	cpi	r20, 0x01	; 1
    3850:	51 05       	cpc	r21, r1
    3852:	59 f1       	breq	.+86     	; 0x38aa <DIO_u8ReadPinValue+0x9a>
    3854:	8e 81       	ldd	r24, Y+6	; 0x06
    3856:	9f 81       	ldd	r25, Y+7	; 0x07
    3858:	82 30       	cpi	r24, 0x02	; 2
    385a:	91 05       	cpc	r25, r1
    385c:	34 f4       	brge	.+12     	; 0x386a <DIO_u8ReadPinValue+0x5a>
    385e:	2e 81       	ldd	r18, Y+6	; 0x06
    3860:	3f 81       	ldd	r19, Y+7	; 0x07
    3862:	21 15       	cp	r18, r1
    3864:	31 05       	cpc	r19, r1
    3866:	69 f0       	breq	.+26     	; 0x3882 <DIO_u8ReadPinValue+0x72>
    3868:	5c c0       	rjmp	.+184    	; 0x3922 <DIO_u8ReadPinValue+0x112>
    386a:	4e 81       	ldd	r20, Y+6	; 0x06
    386c:	5f 81       	ldd	r21, Y+7	; 0x07
    386e:	42 30       	cpi	r20, 0x02	; 2
    3870:	51 05       	cpc	r21, r1
    3872:	79 f1       	breq	.+94     	; 0x38d2 <DIO_u8ReadPinValue+0xc2>
    3874:	8e 81       	ldd	r24, Y+6	; 0x06
    3876:	9f 81       	ldd	r25, Y+7	; 0x07
    3878:	83 30       	cpi	r24, 0x03	; 3
    387a:	91 05       	cpc	r25, r1
    387c:	09 f4       	brne	.+2      	; 0x3880 <DIO_u8ReadPinValue+0x70>
    387e:	3d c0       	rjmp	.+122    	; 0x38fa <DIO_u8ReadPinValue+0xea>
    3880:	50 c0       	rjmp	.+160    	; 0x3922 <DIO_u8ReadPinValue+0x112>
			{
			case DIO_u8PORTA :*Copy_pu8Value = GET_BIT(PINA,Copy_u8Pin); break;
    3882:	e9 e3       	ldi	r30, 0x39	; 57
    3884:	f0 e0       	ldi	r31, 0x00	; 0
    3886:	80 81       	ld	r24, Z
    3888:	28 2f       	mov	r18, r24
    388a:	30 e0       	ldi	r19, 0x00	; 0
    388c:	8b 81       	ldd	r24, Y+3	; 0x03
    388e:	88 2f       	mov	r24, r24
    3890:	90 e0       	ldi	r25, 0x00	; 0
    3892:	a9 01       	movw	r20, r18
    3894:	02 c0       	rjmp	.+4      	; 0x389a <DIO_u8ReadPinValue+0x8a>
    3896:	55 95       	asr	r21
    3898:	47 95       	ror	r20
    389a:	8a 95       	dec	r24
    389c:	e2 f7       	brpl	.-8      	; 0x3896 <DIO_u8ReadPinValue+0x86>
    389e:	ca 01       	movw	r24, r20
    38a0:	81 70       	andi	r24, 0x01	; 1
    38a2:	ec 81       	ldd	r30, Y+4	; 0x04
    38a4:	fd 81       	ldd	r31, Y+5	; 0x05
    38a6:	80 83       	st	Z, r24
    38a8:	44 c0       	rjmp	.+136    	; 0x3932 <DIO_u8ReadPinValue+0x122>
			case DIO_u8PORTB :*Copy_pu8Value = GET_BIT(PINB,Copy_u8Pin); break;
    38aa:	e6 e3       	ldi	r30, 0x36	; 54
    38ac:	f0 e0       	ldi	r31, 0x00	; 0
    38ae:	80 81       	ld	r24, Z
    38b0:	28 2f       	mov	r18, r24
    38b2:	30 e0       	ldi	r19, 0x00	; 0
    38b4:	8b 81       	ldd	r24, Y+3	; 0x03
    38b6:	88 2f       	mov	r24, r24
    38b8:	90 e0       	ldi	r25, 0x00	; 0
    38ba:	a9 01       	movw	r20, r18
    38bc:	02 c0       	rjmp	.+4      	; 0x38c2 <DIO_u8ReadPinValue+0xb2>
    38be:	55 95       	asr	r21
    38c0:	47 95       	ror	r20
    38c2:	8a 95       	dec	r24
    38c4:	e2 f7       	brpl	.-8      	; 0x38be <DIO_u8ReadPinValue+0xae>
    38c6:	ca 01       	movw	r24, r20
    38c8:	81 70       	andi	r24, 0x01	; 1
    38ca:	ec 81       	ldd	r30, Y+4	; 0x04
    38cc:	fd 81       	ldd	r31, Y+5	; 0x05
    38ce:	80 83       	st	Z, r24
    38d0:	30 c0       	rjmp	.+96     	; 0x3932 <DIO_u8ReadPinValue+0x122>
			case DIO_u8PORTC :*Copy_pu8Value = GET_BIT(PINC,Copy_u8Pin); break;
    38d2:	e3 e3       	ldi	r30, 0x33	; 51
    38d4:	f0 e0       	ldi	r31, 0x00	; 0
    38d6:	80 81       	ld	r24, Z
    38d8:	28 2f       	mov	r18, r24
    38da:	30 e0       	ldi	r19, 0x00	; 0
    38dc:	8b 81       	ldd	r24, Y+3	; 0x03
    38de:	88 2f       	mov	r24, r24
    38e0:	90 e0       	ldi	r25, 0x00	; 0
    38e2:	a9 01       	movw	r20, r18
    38e4:	02 c0       	rjmp	.+4      	; 0x38ea <DIO_u8ReadPinValue+0xda>
    38e6:	55 95       	asr	r21
    38e8:	47 95       	ror	r20
    38ea:	8a 95       	dec	r24
    38ec:	e2 f7       	brpl	.-8      	; 0x38e6 <DIO_u8ReadPinValue+0xd6>
    38ee:	ca 01       	movw	r24, r20
    38f0:	81 70       	andi	r24, 0x01	; 1
    38f2:	ec 81       	ldd	r30, Y+4	; 0x04
    38f4:	fd 81       	ldd	r31, Y+5	; 0x05
    38f6:	80 83       	st	Z, r24
    38f8:	1c c0       	rjmp	.+56     	; 0x3932 <DIO_u8ReadPinValue+0x122>
			case DIO_u8PORTD :*Copy_pu8Value = GET_BIT(PIND,Copy_u8Pin); break;
    38fa:	e0 e3       	ldi	r30, 0x30	; 48
    38fc:	f0 e0       	ldi	r31, 0x00	; 0
    38fe:	80 81       	ld	r24, Z
    3900:	28 2f       	mov	r18, r24
    3902:	30 e0       	ldi	r19, 0x00	; 0
    3904:	8b 81       	ldd	r24, Y+3	; 0x03
    3906:	88 2f       	mov	r24, r24
    3908:	90 e0       	ldi	r25, 0x00	; 0
    390a:	a9 01       	movw	r20, r18
    390c:	02 c0       	rjmp	.+4      	; 0x3912 <DIO_u8ReadPinValue+0x102>
    390e:	55 95       	asr	r21
    3910:	47 95       	ror	r20
    3912:	8a 95       	dec	r24
    3914:	e2 f7       	brpl	.-8      	; 0x390e <DIO_u8ReadPinValue+0xfe>
    3916:	ca 01       	movw	r24, r20
    3918:	81 70       	andi	r24, 0x01	; 1
    391a:	ec 81       	ldd	r30, Y+4	; 0x04
    391c:	fd 81       	ldd	r31, Y+5	; 0x05
    391e:	80 83       	st	Z, r24
    3920:	08 c0       	rjmp	.+16     	; 0x3932 <DIO_u8ReadPinValue+0x122>
			default : Local_u8ErrorState = NOK; 		 break;
    3922:	81 e0       	ldi	r24, 0x01	; 1
    3924:	89 83       	std	Y+1, r24	; 0x01
    3926:	05 c0       	rjmp	.+10     	; 0x3932 <DIO_u8ReadPinValue+0x122>
			}
		}
		else
		{
			/*Pin number is invalid*/
			Local_u8ErrorState = NOK;
    3928:	81 e0       	ldi	r24, 0x01	; 1
    392a:	89 83       	std	Y+1, r24	; 0x01
    392c:	02 c0       	rjmp	.+4      	; 0x3932 <DIO_u8ReadPinValue+0x122>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    392e:	82 e0       	ldi	r24, 0x02	; 2
    3930:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    3932:	89 81       	ldd	r24, Y+1	; 0x01
}
    3934:	27 96       	adiw	r28, 0x07	; 7
    3936:	0f b6       	in	r0, 0x3f	; 63
    3938:	f8 94       	cli
    393a:	de bf       	out	0x3e, r29	; 62
    393c:	0f be       	out	0x3f, r0	; 63
    393e:	cd bf       	out	0x3d, r28	; 61
    3940:	cf 91       	pop	r28
    3942:	df 91       	pop	r29
    3944:	08 95       	ret

00003946 <DIO_u8SetPortDirection>:


uint8 DIO_u8SetPortDirection(uint8 Copy_u8Port, uint8 Copy_u8Direction )
{
    3946:	df 93       	push	r29
    3948:	cf 93       	push	r28
    394a:	00 d0       	rcall	.+0      	; 0x394c <DIO_u8SetPortDirection+0x6>
    394c:	00 d0       	rcall	.+0      	; 0x394e <DIO_u8SetPortDirection+0x8>
    394e:	0f 92       	push	r0
    3950:	cd b7       	in	r28, 0x3d	; 61
    3952:	de b7       	in	r29, 0x3e	; 62
    3954:	8a 83       	std	Y+2, r24	; 0x02
    3956:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    3958:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
    395a:	8a 81       	ldd	r24, Y+2	; 0x02
    395c:	28 2f       	mov	r18, r24
    395e:	30 e0       	ldi	r19, 0x00	; 0
    3960:	3d 83       	std	Y+5, r19	; 0x05
    3962:	2c 83       	std	Y+4, r18	; 0x04
    3964:	8c 81       	ldd	r24, Y+4	; 0x04
    3966:	9d 81       	ldd	r25, Y+5	; 0x05
    3968:	81 30       	cpi	r24, 0x01	; 1
    396a:	91 05       	cpc	r25, r1
    396c:	d1 f0       	breq	.+52     	; 0x39a2 <DIO_u8SetPortDirection+0x5c>
    396e:	2c 81       	ldd	r18, Y+4	; 0x04
    3970:	3d 81       	ldd	r19, Y+5	; 0x05
    3972:	22 30       	cpi	r18, 0x02	; 2
    3974:	31 05       	cpc	r19, r1
    3976:	2c f4       	brge	.+10     	; 0x3982 <DIO_u8SetPortDirection+0x3c>
    3978:	8c 81       	ldd	r24, Y+4	; 0x04
    397a:	9d 81       	ldd	r25, Y+5	; 0x05
    397c:	00 97       	sbiw	r24, 0x00	; 0
    397e:	61 f0       	breq	.+24     	; 0x3998 <DIO_u8SetPortDirection+0x52>
    3980:	1f c0       	rjmp	.+62     	; 0x39c0 <DIO_u8SetPortDirection+0x7a>
    3982:	2c 81       	ldd	r18, Y+4	; 0x04
    3984:	3d 81       	ldd	r19, Y+5	; 0x05
    3986:	22 30       	cpi	r18, 0x02	; 2
    3988:	31 05       	cpc	r19, r1
    398a:	81 f0       	breq	.+32     	; 0x39ac <DIO_u8SetPortDirection+0x66>
    398c:	8c 81       	ldd	r24, Y+4	; 0x04
    398e:	9d 81       	ldd	r25, Y+5	; 0x05
    3990:	83 30       	cpi	r24, 0x03	; 3
    3992:	91 05       	cpc	r25, r1
    3994:	81 f0       	breq	.+32     	; 0x39b6 <DIO_u8SetPortDirection+0x70>
    3996:	14 c0       	rjmp	.+40     	; 0x39c0 <DIO_u8SetPortDirection+0x7a>
	{
	case DIO_u8PORTA : DDRA = Copy_u8Direction; break;
    3998:	ea e3       	ldi	r30, 0x3A	; 58
    399a:	f0 e0       	ldi	r31, 0x00	; 0
    399c:	8b 81       	ldd	r24, Y+3	; 0x03
    399e:	80 83       	st	Z, r24
    39a0:	11 c0       	rjmp	.+34     	; 0x39c4 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTB : DDRB = Copy_u8Direction; break;
    39a2:	e7 e3       	ldi	r30, 0x37	; 55
    39a4:	f0 e0       	ldi	r31, 0x00	; 0
    39a6:	8b 81       	ldd	r24, Y+3	; 0x03
    39a8:	80 83       	st	Z, r24
    39aa:	0c c0       	rjmp	.+24     	; 0x39c4 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTC : DDRC = Copy_u8Direction; break;
    39ac:	e4 e3       	ldi	r30, 0x34	; 52
    39ae:	f0 e0       	ldi	r31, 0x00	; 0
    39b0:	8b 81       	ldd	r24, Y+3	; 0x03
    39b2:	80 83       	st	Z, r24
    39b4:	07 c0       	rjmp	.+14     	; 0x39c4 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTD : DDRD = Copy_u8Direction; break;
    39b6:	e1 e3       	ldi	r30, 0x31	; 49
    39b8:	f0 e0       	ldi	r31, 0x00	; 0
    39ba:	8b 81       	ldd	r24, Y+3	; 0x03
    39bc:	80 83       	st	Z, r24
    39be:	02 c0       	rjmp	.+4      	; 0x39c4 <DIO_u8SetPortDirection+0x7e>
	default : Local_u8ErrorState = NOK; 		break;
    39c0:	81 e0       	ldi	r24, 0x01	; 1
    39c2:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    39c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    39c6:	0f 90       	pop	r0
    39c8:	0f 90       	pop	r0
    39ca:	0f 90       	pop	r0
    39cc:	0f 90       	pop	r0
    39ce:	0f 90       	pop	r0
    39d0:	cf 91       	pop	r28
    39d2:	df 91       	pop	r29
    39d4:	08 95       	ret

000039d6 <DIO_u8SetPortValue>:

uint8 DIO_u8SetPortValue(uint8 Copy_u8Port, uint8 Copy_u8Value )
{
    39d6:	df 93       	push	r29
    39d8:	cf 93       	push	r28
    39da:	00 d0       	rcall	.+0      	; 0x39dc <DIO_u8SetPortValue+0x6>
    39dc:	00 d0       	rcall	.+0      	; 0x39de <DIO_u8SetPortValue+0x8>
    39de:	0f 92       	push	r0
    39e0:	cd b7       	in	r28, 0x3d	; 61
    39e2:	de b7       	in	r29, 0x3e	; 62
    39e4:	8a 83       	std	Y+2, r24	; 0x02
    39e6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    39e8:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    39ea:	8a 81       	ldd	r24, Y+2	; 0x02
    39ec:	28 2f       	mov	r18, r24
    39ee:	30 e0       	ldi	r19, 0x00	; 0
    39f0:	3d 83       	std	Y+5, r19	; 0x05
    39f2:	2c 83       	std	Y+4, r18	; 0x04
    39f4:	8c 81       	ldd	r24, Y+4	; 0x04
    39f6:	9d 81       	ldd	r25, Y+5	; 0x05
    39f8:	81 30       	cpi	r24, 0x01	; 1
    39fa:	91 05       	cpc	r25, r1
    39fc:	d1 f0       	breq	.+52     	; 0x3a32 <DIO_u8SetPortValue+0x5c>
    39fe:	2c 81       	ldd	r18, Y+4	; 0x04
    3a00:	3d 81       	ldd	r19, Y+5	; 0x05
    3a02:	22 30       	cpi	r18, 0x02	; 2
    3a04:	31 05       	cpc	r19, r1
    3a06:	2c f4       	brge	.+10     	; 0x3a12 <DIO_u8SetPortValue+0x3c>
    3a08:	8c 81       	ldd	r24, Y+4	; 0x04
    3a0a:	9d 81       	ldd	r25, Y+5	; 0x05
    3a0c:	00 97       	sbiw	r24, 0x00	; 0
    3a0e:	61 f0       	breq	.+24     	; 0x3a28 <DIO_u8SetPortValue+0x52>
    3a10:	1f c0       	rjmp	.+62     	; 0x3a50 <DIO_u8SetPortValue+0x7a>
    3a12:	2c 81       	ldd	r18, Y+4	; 0x04
    3a14:	3d 81       	ldd	r19, Y+5	; 0x05
    3a16:	22 30       	cpi	r18, 0x02	; 2
    3a18:	31 05       	cpc	r19, r1
    3a1a:	81 f0       	breq	.+32     	; 0x3a3c <DIO_u8SetPortValue+0x66>
    3a1c:	8c 81       	ldd	r24, Y+4	; 0x04
    3a1e:	9d 81       	ldd	r25, Y+5	; 0x05
    3a20:	83 30       	cpi	r24, 0x03	; 3
    3a22:	91 05       	cpc	r25, r1
    3a24:	81 f0       	breq	.+32     	; 0x3a46 <DIO_u8SetPortValue+0x70>
    3a26:	14 c0       	rjmp	.+40     	; 0x3a50 <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA : PORTA = Copy_u8Value; break;
    3a28:	eb e3       	ldi	r30, 0x3B	; 59
    3a2a:	f0 e0       	ldi	r31, 0x00	; 0
    3a2c:	8b 81       	ldd	r24, Y+3	; 0x03
    3a2e:	80 83       	st	Z, r24
    3a30:	11 c0       	rjmp	.+34     	; 0x3a54 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB : PORTB = Copy_u8Value; break;
    3a32:	e8 e3       	ldi	r30, 0x38	; 56
    3a34:	f0 e0       	ldi	r31, 0x00	; 0
    3a36:	8b 81       	ldd	r24, Y+3	; 0x03
    3a38:	80 83       	st	Z, r24
    3a3a:	0c c0       	rjmp	.+24     	; 0x3a54 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC : PORTC = Copy_u8Value; break;
    3a3c:	e5 e3       	ldi	r30, 0x35	; 53
    3a3e:	f0 e0       	ldi	r31, 0x00	; 0
    3a40:	8b 81       	ldd	r24, Y+3	; 0x03
    3a42:	80 83       	st	Z, r24
    3a44:	07 c0       	rjmp	.+14     	; 0x3a54 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD : PORTD = Copy_u8Value; break;
    3a46:	e2 e3       	ldi	r30, 0x32	; 50
    3a48:	f0 e0       	ldi	r31, 0x00	; 0
    3a4a:	8b 81       	ldd	r24, Y+3	; 0x03
    3a4c:	80 83       	st	Z, r24
    3a4e:	02 c0       	rjmp	.+4      	; 0x3a54 <DIO_u8SetPortValue+0x7e>
	default : Local_u8ErrorState = NOK; 	 break;
    3a50:	81 e0       	ldi	r24, 0x01	; 1
    3a52:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    3a54:	89 81       	ldd	r24, Y+1	; 0x01
}
    3a56:	0f 90       	pop	r0
    3a58:	0f 90       	pop	r0
    3a5a:	0f 90       	pop	r0
    3a5c:	0f 90       	pop	r0
    3a5e:	0f 90       	pop	r0
    3a60:	cf 91       	pop	r28
    3a62:	df 91       	pop	r29
    3a64:	08 95       	ret

00003a66 <DIO_u8TogglePinValue>:

uint8 DIO_u8TogglePinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin)
{
    3a66:	df 93       	push	r29
    3a68:	cf 93       	push	r28
    3a6a:	00 d0       	rcall	.+0      	; 0x3a6c <DIO_u8TogglePinValue+0x6>
    3a6c:	00 d0       	rcall	.+0      	; 0x3a6e <DIO_u8TogglePinValue+0x8>
    3a6e:	0f 92       	push	r0
    3a70:	cd b7       	in	r28, 0x3d	; 61
    3a72:	de b7       	in	r29, 0x3e	; 62
    3a74:	8a 83       	std	Y+2, r24	; 0x02
    3a76:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    3a78:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <=DIO_u8PIN7)
    3a7a:	8b 81       	ldd	r24, Y+3	; 0x03
    3a7c:	88 30       	cpi	r24, 0x08	; 8
    3a7e:	08 f0       	brcs	.+2      	; 0x3a82 <DIO_u8TogglePinValue+0x1c>
    3a80:	72 c0       	rjmp	.+228    	; 0x3b66 <DIO_u8TogglePinValue+0x100>
	{
		switch(Copy_u8Port)
    3a82:	8a 81       	ldd	r24, Y+2	; 0x02
    3a84:	28 2f       	mov	r18, r24
    3a86:	30 e0       	ldi	r19, 0x00	; 0
    3a88:	3d 83       	std	Y+5, r19	; 0x05
    3a8a:	2c 83       	std	Y+4, r18	; 0x04
    3a8c:	8c 81       	ldd	r24, Y+4	; 0x04
    3a8e:	9d 81       	ldd	r25, Y+5	; 0x05
    3a90:	81 30       	cpi	r24, 0x01	; 1
    3a92:	91 05       	cpc	r25, r1
    3a94:	49 f1       	breq	.+82     	; 0x3ae8 <DIO_u8TogglePinValue+0x82>
    3a96:	2c 81       	ldd	r18, Y+4	; 0x04
    3a98:	3d 81       	ldd	r19, Y+5	; 0x05
    3a9a:	22 30       	cpi	r18, 0x02	; 2
    3a9c:	31 05       	cpc	r19, r1
    3a9e:	2c f4       	brge	.+10     	; 0x3aaa <DIO_u8TogglePinValue+0x44>
    3aa0:	8c 81       	ldd	r24, Y+4	; 0x04
    3aa2:	9d 81       	ldd	r25, Y+5	; 0x05
    3aa4:	00 97       	sbiw	r24, 0x00	; 0
    3aa6:	61 f0       	breq	.+24     	; 0x3ac0 <DIO_u8TogglePinValue+0x5a>
    3aa8:	5b c0       	rjmp	.+182    	; 0x3b60 <DIO_u8TogglePinValue+0xfa>
    3aaa:	2c 81       	ldd	r18, Y+4	; 0x04
    3aac:	3d 81       	ldd	r19, Y+5	; 0x05
    3aae:	22 30       	cpi	r18, 0x02	; 2
    3ab0:	31 05       	cpc	r19, r1
    3ab2:	71 f1       	breq	.+92     	; 0x3b10 <DIO_u8TogglePinValue+0xaa>
    3ab4:	8c 81       	ldd	r24, Y+4	; 0x04
    3ab6:	9d 81       	ldd	r25, Y+5	; 0x05
    3ab8:	83 30       	cpi	r24, 0x03	; 3
    3aba:	91 05       	cpc	r25, r1
    3abc:	e9 f1       	breq	.+122    	; 0x3b38 <DIO_u8TogglePinValue+0xd2>
    3abe:	50 c0       	rjmp	.+160    	; 0x3b60 <DIO_u8TogglePinValue+0xfa>
		{
		case DIO_u8PORTA : TOG_BIT(PORTA,Copy_u8Pin); break;
    3ac0:	ab e3       	ldi	r26, 0x3B	; 59
    3ac2:	b0 e0       	ldi	r27, 0x00	; 0
    3ac4:	eb e3       	ldi	r30, 0x3B	; 59
    3ac6:	f0 e0       	ldi	r31, 0x00	; 0
    3ac8:	80 81       	ld	r24, Z
    3aca:	48 2f       	mov	r20, r24
    3acc:	8b 81       	ldd	r24, Y+3	; 0x03
    3ace:	28 2f       	mov	r18, r24
    3ad0:	30 e0       	ldi	r19, 0x00	; 0
    3ad2:	81 e0       	ldi	r24, 0x01	; 1
    3ad4:	90 e0       	ldi	r25, 0x00	; 0
    3ad6:	02 2e       	mov	r0, r18
    3ad8:	02 c0       	rjmp	.+4      	; 0x3ade <DIO_u8TogglePinValue+0x78>
    3ada:	88 0f       	add	r24, r24
    3adc:	99 1f       	adc	r25, r25
    3ade:	0a 94       	dec	r0
    3ae0:	e2 f7       	brpl	.-8      	; 0x3ada <DIO_u8TogglePinValue+0x74>
    3ae2:	84 27       	eor	r24, r20
    3ae4:	8c 93       	st	X, r24
    3ae6:	41 c0       	rjmp	.+130    	; 0x3b6a <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTB : TOG_BIT(PORTB,Copy_u8Pin); break;
    3ae8:	a8 e3       	ldi	r26, 0x38	; 56
    3aea:	b0 e0       	ldi	r27, 0x00	; 0
    3aec:	e8 e3       	ldi	r30, 0x38	; 56
    3aee:	f0 e0       	ldi	r31, 0x00	; 0
    3af0:	80 81       	ld	r24, Z
    3af2:	48 2f       	mov	r20, r24
    3af4:	8b 81       	ldd	r24, Y+3	; 0x03
    3af6:	28 2f       	mov	r18, r24
    3af8:	30 e0       	ldi	r19, 0x00	; 0
    3afa:	81 e0       	ldi	r24, 0x01	; 1
    3afc:	90 e0       	ldi	r25, 0x00	; 0
    3afe:	02 2e       	mov	r0, r18
    3b00:	02 c0       	rjmp	.+4      	; 0x3b06 <DIO_u8TogglePinValue+0xa0>
    3b02:	88 0f       	add	r24, r24
    3b04:	99 1f       	adc	r25, r25
    3b06:	0a 94       	dec	r0
    3b08:	e2 f7       	brpl	.-8      	; 0x3b02 <DIO_u8TogglePinValue+0x9c>
    3b0a:	84 27       	eor	r24, r20
    3b0c:	8c 93       	st	X, r24
    3b0e:	2d c0       	rjmp	.+90     	; 0x3b6a <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTC : TOG_BIT(PORTC,Copy_u8Pin); break;
    3b10:	a5 e3       	ldi	r26, 0x35	; 53
    3b12:	b0 e0       	ldi	r27, 0x00	; 0
    3b14:	e5 e3       	ldi	r30, 0x35	; 53
    3b16:	f0 e0       	ldi	r31, 0x00	; 0
    3b18:	80 81       	ld	r24, Z
    3b1a:	48 2f       	mov	r20, r24
    3b1c:	8b 81       	ldd	r24, Y+3	; 0x03
    3b1e:	28 2f       	mov	r18, r24
    3b20:	30 e0       	ldi	r19, 0x00	; 0
    3b22:	81 e0       	ldi	r24, 0x01	; 1
    3b24:	90 e0       	ldi	r25, 0x00	; 0
    3b26:	02 2e       	mov	r0, r18
    3b28:	02 c0       	rjmp	.+4      	; 0x3b2e <DIO_u8TogglePinValue+0xc8>
    3b2a:	88 0f       	add	r24, r24
    3b2c:	99 1f       	adc	r25, r25
    3b2e:	0a 94       	dec	r0
    3b30:	e2 f7       	brpl	.-8      	; 0x3b2a <DIO_u8TogglePinValue+0xc4>
    3b32:	84 27       	eor	r24, r20
    3b34:	8c 93       	st	X, r24
    3b36:	19 c0       	rjmp	.+50     	; 0x3b6a <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTD : TOG_BIT(PORTD,Copy_u8Pin); break;
    3b38:	a2 e3       	ldi	r26, 0x32	; 50
    3b3a:	b0 e0       	ldi	r27, 0x00	; 0
    3b3c:	e2 e3       	ldi	r30, 0x32	; 50
    3b3e:	f0 e0       	ldi	r31, 0x00	; 0
    3b40:	80 81       	ld	r24, Z
    3b42:	48 2f       	mov	r20, r24
    3b44:	8b 81       	ldd	r24, Y+3	; 0x03
    3b46:	28 2f       	mov	r18, r24
    3b48:	30 e0       	ldi	r19, 0x00	; 0
    3b4a:	81 e0       	ldi	r24, 0x01	; 1
    3b4c:	90 e0       	ldi	r25, 0x00	; 0
    3b4e:	02 2e       	mov	r0, r18
    3b50:	02 c0       	rjmp	.+4      	; 0x3b56 <DIO_u8TogglePinValue+0xf0>
    3b52:	88 0f       	add	r24, r24
    3b54:	99 1f       	adc	r25, r25
    3b56:	0a 94       	dec	r0
    3b58:	e2 f7       	brpl	.-8      	; 0x3b52 <DIO_u8TogglePinValue+0xec>
    3b5a:	84 27       	eor	r24, r20
    3b5c:	8c 93       	st	X, r24
    3b5e:	05 c0       	rjmp	.+10     	; 0x3b6a <DIO_u8TogglePinValue+0x104>
		default : Local_u8ErrorState = NOK; 		 break;
    3b60:	81 e0       	ldi	r24, 0x01	; 1
    3b62:	89 83       	std	Y+1, r24	; 0x01
    3b64:	02 c0       	rjmp	.+4      	; 0x3b6a <DIO_u8TogglePinValue+0x104>
		}
	}
	else
	{
		/*Pin number is invalid*/
		Local_u8ErrorState = NOK;
    3b66:	81 e0       	ldi	r24, 0x01	; 1
    3b68:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
    3b6a:	89 81       	ldd	r24, Y+1	; 0x01
}
    3b6c:	0f 90       	pop	r0
    3b6e:	0f 90       	pop	r0
    3b70:	0f 90       	pop	r0
    3b72:	0f 90       	pop	r0
    3b74:	0f 90       	pop	r0
    3b76:	cf 91       	pop	r28
    3b78:	df 91       	pop	r29
    3b7a:	08 95       	ret

00003b7c <LED_u8SetON>:
#include "ErrType.h"



uint8 LED_u8SetON (const LED_Cfg_t* Copy_pConfig)
{
    3b7c:	df 93       	push	r29
    3b7e:	cf 93       	push	r28
    3b80:	00 d0       	rcall	.+0      	; 0x3b82 <LED_u8SetON+0x6>
    3b82:	0f 92       	push	r0
    3b84:	cd b7       	in	r28, 0x3d	; 61
    3b86:	de b7       	in	r29, 0x3e	; 62
    3b88:	9b 83       	std	Y+3, r25	; 0x03
    3b8a:	8a 83       	std	Y+2, r24	; 0x02
	 uint8 Local_u8Err_State =OK;
    3b8c:	19 82       	std	Y+1, r1	; 0x01
	 if (Copy_pConfig != NULL)
    3b8e:	8a 81       	ldd	r24, Y+2	; 0x02
    3b90:	9b 81       	ldd	r25, Y+3	; 0x03
    3b92:	00 97       	sbiw	r24, 0x00	; 0
    3b94:	19 f1       	breq	.+70     	; 0x3bdc <LED_u8SetON+0x60>
	 {
		if(Copy_pConfig ->LED_u8ACTIVE_TYPE ==Active_High)
    3b96:	ea 81       	ldd	r30, Y+2	; 0x02
    3b98:	fb 81       	ldd	r31, Y+3	; 0x03
    3b9a:	82 81       	ldd	r24, Z+2	; 0x02
    3b9c:	81 30       	cpi	r24, 0x01	; 1
    3b9e:	59 f4       	brne	.+22     	; 0x3bb6 <LED_u8SetON+0x3a>
		{
			DIO_u8SetPinValue(Copy_pConfig->LED_u8PORT,Copy_pConfig->LED_u8PIN,DIO_u8PIN_HIGH);
    3ba0:	ea 81       	ldd	r30, Y+2	; 0x02
    3ba2:	fb 81       	ldd	r31, Y+3	; 0x03
    3ba4:	80 81       	ld	r24, Z
    3ba6:	ea 81       	ldd	r30, Y+2	; 0x02
    3ba8:	fb 81       	ldd	r31, Y+3	; 0x03
    3baa:	91 81       	ldd	r25, Z+1	; 0x01
    3bac:	69 2f       	mov	r22, r25
    3bae:	41 e0       	ldi	r20, 0x01	; 1
    3bb0:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <DIO_u8SetPinValue>
    3bb4:	15 c0       	rjmp	.+42     	; 0x3be0 <LED_u8SetON+0x64>

		}
		else if (Copy_pConfig->LED_u8ACTIVE_TYPE==Active_Low)
    3bb6:	ea 81       	ldd	r30, Y+2	; 0x02
    3bb8:	fb 81       	ldd	r31, Y+3	; 0x03
    3bba:	82 81       	ldd	r24, Z+2	; 0x02
    3bbc:	88 23       	and	r24, r24
    3bbe:	59 f4       	brne	.+22     	; 0x3bd6 <LED_u8SetON+0x5a>
		{
			DIO_u8SetPinValue(Copy_pConfig->LED_u8PORT,Copy_pConfig->LED_u8PIN,DIO_u8PIN_LOW);
    3bc0:	ea 81       	ldd	r30, Y+2	; 0x02
    3bc2:	fb 81       	ldd	r31, Y+3	; 0x03
    3bc4:	80 81       	ld	r24, Z
    3bc6:	ea 81       	ldd	r30, Y+2	; 0x02
    3bc8:	fb 81       	ldd	r31, Y+3	; 0x03
    3bca:	91 81       	ldd	r25, Z+1	; 0x01
    3bcc:	69 2f       	mov	r22, r25
    3bce:	40 e0       	ldi	r20, 0x00	; 0
    3bd0:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <DIO_u8SetPinValue>
    3bd4:	05 c0       	rjmp	.+10     	; 0x3be0 <LED_u8SetON+0x64>
		}
		else
		{
			Local_u8Err_State=NOK;
    3bd6:	81 e0       	ldi	r24, 0x01	; 1
    3bd8:	89 83       	std	Y+1, r24	; 0x01
    3bda:	02 c0       	rjmp	.+4      	; 0x3be0 <LED_u8SetON+0x64>
		}
	 }
		else
    {
		Local_u8Err_State=NULL_PTR_ERR;
    3bdc:	82 e0       	ldi	r24, 0x02	; 2
    3bde:	89 83       	std	Y+1, r24	; 0x01

	}


		 return Local_u8Err_State;
    3be0:	89 81       	ldd	r24, Y+1	; 0x01

	 }
    3be2:	0f 90       	pop	r0
    3be4:	0f 90       	pop	r0
    3be6:	0f 90       	pop	r0
    3be8:	cf 91       	pop	r28
    3bea:	df 91       	pop	r29
    3bec:	08 95       	ret

00003bee <LED_u8SetOFF>:




uint8 LED_u8SetOFF (const LED_Cfg_t* Copy_pConfig)
{
    3bee:	df 93       	push	r29
    3bf0:	cf 93       	push	r28
    3bf2:	00 d0       	rcall	.+0      	; 0x3bf4 <LED_u8SetOFF+0x6>
    3bf4:	0f 92       	push	r0
    3bf6:	cd b7       	in	r28, 0x3d	; 61
    3bf8:	de b7       	in	r29, 0x3e	; 62
    3bfa:	9b 83       	std	Y+3, r25	; 0x03
    3bfc:	8a 83       	std	Y+2, r24	; 0x02


		 uint8 Local_u8Err_State =OK;
    3bfe:	19 82       	std	Y+1, r1	; 0x01
		 if (Copy_pConfig != NULL)
    3c00:	8a 81       	ldd	r24, Y+2	; 0x02
    3c02:	9b 81       	ldd	r25, Y+3	; 0x03
    3c04:	00 97       	sbiw	r24, 0x00	; 0
    3c06:	19 f1       	breq	.+70     	; 0x3c4e <LED_u8SetOFF+0x60>
		 {
			if(Copy_pConfig ->LED_u8ACTIVE_TYPE ==Active_High)
    3c08:	ea 81       	ldd	r30, Y+2	; 0x02
    3c0a:	fb 81       	ldd	r31, Y+3	; 0x03
    3c0c:	82 81       	ldd	r24, Z+2	; 0x02
    3c0e:	81 30       	cpi	r24, 0x01	; 1
    3c10:	59 f4       	brne	.+22     	; 0x3c28 <LED_u8SetOFF+0x3a>
			{
				DIO_u8SetPinValue(Copy_pConfig->LED_u8PORT,Copy_pConfig->LED_u8PIN,DIO_u8PIN_LOW);
    3c12:	ea 81       	ldd	r30, Y+2	; 0x02
    3c14:	fb 81       	ldd	r31, Y+3	; 0x03
    3c16:	80 81       	ld	r24, Z
    3c18:	ea 81       	ldd	r30, Y+2	; 0x02
    3c1a:	fb 81       	ldd	r31, Y+3	; 0x03
    3c1c:	91 81       	ldd	r25, Z+1	; 0x01
    3c1e:	69 2f       	mov	r22, r25
    3c20:	40 e0       	ldi	r20, 0x00	; 0
    3c22:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <DIO_u8SetPinValue>
    3c26:	15 c0       	rjmp	.+42     	; 0x3c52 <LED_u8SetOFF+0x64>

			}
			else if (Copy_pConfig->LED_u8ACTIVE_TYPE==Active_Low)
    3c28:	ea 81       	ldd	r30, Y+2	; 0x02
    3c2a:	fb 81       	ldd	r31, Y+3	; 0x03
    3c2c:	82 81       	ldd	r24, Z+2	; 0x02
    3c2e:	88 23       	and	r24, r24
    3c30:	59 f4       	brne	.+22     	; 0x3c48 <LED_u8SetOFF+0x5a>
			{
				DIO_u8SetPinValue(Copy_pConfig->LED_u8PORT,Copy_pConfig->LED_u8PIN,DIO_u8PIN_HIGH);
    3c32:	ea 81       	ldd	r30, Y+2	; 0x02
    3c34:	fb 81       	ldd	r31, Y+3	; 0x03
    3c36:	80 81       	ld	r24, Z
    3c38:	ea 81       	ldd	r30, Y+2	; 0x02
    3c3a:	fb 81       	ldd	r31, Y+3	; 0x03
    3c3c:	91 81       	ldd	r25, Z+1	; 0x01
    3c3e:	69 2f       	mov	r22, r25
    3c40:	41 e0       	ldi	r20, 0x01	; 1
    3c42:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <DIO_u8SetPinValue>
    3c46:	05 c0       	rjmp	.+10     	; 0x3c52 <LED_u8SetOFF+0x64>
			}
			else
			{
				Local_u8Err_State=NOK;
    3c48:	81 e0       	ldi	r24, 0x01	; 1
    3c4a:	89 83       	std	Y+1, r24	; 0x01
    3c4c:	02 c0       	rjmp	.+4      	; 0x3c52 <LED_u8SetOFF+0x64>
			}
		 }
			else
	    {
			Local_u8Err_State=NULL_PTR_ERR;
    3c4e:	82 e0       	ldi	r24, 0x02	; 2
    3c50:	89 83       	std	Y+1, r24	; 0x01

		}


			 return Local_u8Err_State;
    3c52:	89 81       	ldd	r24, Y+1	; 0x01


}
    3c54:	0f 90       	pop	r0
    3c56:	0f 90       	pop	r0
    3c58:	0f 90       	pop	r0
    3c5a:	cf 91       	pop	r28
    3c5c:	df 91       	pop	r29
    3c5e:	08 95       	ret

00003c60 <LED_u8Toggle>:
uint8 LED_u8Toggle (const LED_Cfg_t* Copy_pConfig)
{
    3c60:	df 93       	push	r29
    3c62:	cf 93       	push	r28
    3c64:	00 d0       	rcall	.+0      	; 0x3c66 <LED_u8Toggle+0x6>
    3c66:	0f 92       	push	r0
    3c68:	cd b7       	in	r28, 0x3d	; 61
    3c6a:	de b7       	in	r29, 0x3e	; 62
    3c6c:	9b 83       	std	Y+3, r25	; 0x03
    3c6e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 LED_Local_u8Err_State=OK;
    3c70:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pConfig !=NULL)
    3c72:	8a 81       	ldd	r24, Y+2	; 0x02
    3c74:	9b 81       	ldd	r25, Y+3	; 0x03
    3c76:	00 97       	sbiw	r24, 0x00	; 0
    3c78:	51 f0       	breq	.+20     	; 0x3c8e <LED_u8Toggle+0x2e>
	{
		DIO_u8TogglePinValue(Copy_pConfig->LED_u8PORT,Copy_pConfig->LED_u8PIN);
    3c7a:	ea 81       	ldd	r30, Y+2	; 0x02
    3c7c:	fb 81       	ldd	r31, Y+3	; 0x03
    3c7e:	80 81       	ld	r24, Z
    3c80:	ea 81       	ldd	r30, Y+2	; 0x02
    3c82:	fb 81       	ldd	r31, Y+3	; 0x03
    3c84:	91 81       	ldd	r25, Z+1	; 0x01
    3c86:	69 2f       	mov	r22, r25
    3c88:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <DIO_u8TogglePinValue>
    3c8c:	02 c0       	rjmp	.+4      	; 0x3c92 <LED_u8Toggle+0x32>
	}
	else
	{
		LED_Local_u8Err_State=NULL_PTR_ERR;
    3c8e:	82 e0       	ldi	r24, 0x02	; 2
    3c90:	89 83       	std	Y+1, r24	; 0x01
	}
	return LED_Local_u8Err_State;
    3c92:	89 81       	ldd	r24, Y+1	; 0x01
}
    3c94:	0f 90       	pop	r0
    3c96:	0f 90       	pop	r0
    3c98:	0f 90       	pop	r0
    3c9a:	cf 91       	pop	r28
    3c9c:	df 91       	pop	r29
    3c9e:	08 95       	ret

00003ca0 <PORT_voidInit>:
#include "PORT_cfg.h"
#include "PORT_interface.h"
#include "PORT_reg.h"

void PORT_voidInit(void)
{
    3ca0:	df 93       	push	r29
    3ca2:	cf 93       	push	r28
    3ca4:	cd b7       	in	r28, 0x3d	; 61
    3ca6:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR;
    3ca8:	ea e3       	ldi	r30, 0x3A	; 58
    3caa:	f0 e0       	ldi	r31, 0x00	; 0
    3cac:	8f ef       	ldi	r24, 0xFF	; 255
    3cae:	80 83       	st	Z, r24
	DDRB = PORTB_DIR;
    3cb0:	e7 e3       	ldi	r30, 0x37	; 55
    3cb2:	f0 e0       	ldi	r31, 0x00	; 0
    3cb4:	88 e2       	ldi	r24, 0x28	; 40
    3cb6:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
    3cb8:	e4 e3       	ldi	r30, 0x34	; 52
    3cba:	f0 e0       	ldi	r31, 0x00	; 0
    3cbc:	8f e3       	ldi	r24, 0x3F	; 63
    3cbe:	80 83       	st	Z, r24
	DDRD = PORTD_DIR;
    3cc0:	e1 e3       	ldi	r30, 0x31	; 49
    3cc2:	f0 e0       	ldi	r31, 0x00	; 0
    3cc4:	80 e2       	ldi	r24, 0x20	; 32
    3cc6:	80 83       	st	Z, r24

	PORTA = PORTA_INIT_VAL;
    3cc8:	eb e3       	ldi	r30, 0x3B	; 59
    3cca:	f0 e0       	ldi	r31, 0x00	; 0
    3ccc:	10 82       	st	Z, r1
	PORTB = PORTB_INIT_VAL;
    3cce:	e8 e3       	ldi	r30, 0x38	; 56
    3cd0:	f0 e0       	ldi	r31, 0x00	; 0
    3cd2:	80 ef       	ldi	r24, 0xF0	; 240
    3cd4:	80 83       	st	Z, r24
	PORTC = PORTC_INIT_VAL;
    3cd6:	e5 e3       	ldi	r30, 0x35	; 53
    3cd8:	f0 e0       	ldi	r31, 0x00	; 0
    3cda:	88 ef       	ldi	r24, 0xF8	; 248
    3cdc:	80 83       	st	Z, r24
	PORTD = PORTD_INIT_VAL;
    3cde:	e2 e3       	ldi	r30, 0x32	; 50
    3ce0:	f0 e0       	ldi	r31, 0x00	; 0
    3ce2:	8c e3       	ldi	r24, 0x3C	; 60
    3ce4:	80 83       	st	Z, r24
}
    3ce6:	cf 91       	pop	r28
    3ce8:	df 91       	pop	r29
    3cea:	08 95       	ret

00003cec <Timer_voidInterruptEnable>:

static void (* Timer_pvCallBackFunc [8])(void)={NULL};

/*General Functions*/
void Timer_voidInterruptEnable(Timer_INT_SOURCE_t Copy_enuInterruptSource)
{
    3cec:	df 93       	push	r29
    3cee:	cf 93       	push	r28
    3cf0:	00 d0       	rcall	.+0      	; 0x3cf2 <Timer_voidInterruptEnable+0x6>
    3cf2:	0f 92       	push	r0
    3cf4:	cd b7       	in	r28, 0x3d	; 61
    3cf6:	de b7       	in	r29, 0x3e	; 62
    3cf8:	89 83       	std	Y+1, r24	; 0x01



	switch(Copy_enuInterruptSource)
    3cfa:	89 81       	ldd	r24, Y+1	; 0x01
    3cfc:	28 2f       	mov	r18, r24
    3cfe:	30 e0       	ldi	r19, 0x00	; 0
    3d00:	3b 83       	std	Y+3, r19	; 0x03
    3d02:	2a 83       	std	Y+2, r18	; 0x02
    3d04:	8a 81       	ldd	r24, Y+2	; 0x02
    3d06:	9b 81       	ldd	r25, Y+3	; 0x03
    3d08:	83 30       	cpi	r24, 0x03	; 3
    3d0a:	91 05       	cpc	r25, r1
    3d0c:	09 f4       	brne	.+2      	; 0x3d10 <Timer_voidInterruptEnable+0x24>
    3d0e:	4a c0       	rjmp	.+148    	; 0x3da4 <Timer_voidInterruptEnable+0xb8>
    3d10:	2a 81       	ldd	r18, Y+2	; 0x02
    3d12:	3b 81       	ldd	r19, Y+3	; 0x03
    3d14:	24 30       	cpi	r18, 0x04	; 4
    3d16:	31 05       	cpc	r19, r1
    3d18:	84 f4       	brge	.+32     	; 0x3d3a <Timer_voidInterruptEnable+0x4e>
    3d1a:	8a 81       	ldd	r24, Y+2	; 0x02
    3d1c:	9b 81       	ldd	r25, Y+3	; 0x03
    3d1e:	81 30       	cpi	r24, 0x01	; 1
    3d20:	91 05       	cpc	r25, r1
    3d22:	09 f1       	breq	.+66     	; 0x3d66 <Timer_voidInterruptEnable+0x7a>
    3d24:	2a 81       	ldd	r18, Y+2	; 0x02
    3d26:	3b 81       	ldd	r19, Y+3	; 0x03
    3d28:	22 30       	cpi	r18, 0x02	; 2
    3d2a:	31 05       	cpc	r19, r1
    3d2c:	0c f0       	brlt	.+2      	; 0x3d30 <Timer_voidInterruptEnable+0x44>
    3d2e:	4a c0       	rjmp	.+148    	; 0x3dc4 <Timer_voidInterruptEnable+0xd8>
    3d30:	8a 81       	ldd	r24, Y+2	; 0x02
    3d32:	9b 81       	ldd	r25, Y+3	; 0x03
    3d34:	00 97       	sbiw	r24, 0x00	; 0
    3d36:	f9 f0       	breq	.+62     	; 0x3d76 <Timer_voidInterruptEnable+0x8a>
    3d38:	5c c0       	rjmp	.+184    	; 0x3df2 <Timer_voidInterruptEnable+0x106>
    3d3a:	2a 81       	ldd	r18, Y+2	; 0x02
    3d3c:	3b 81       	ldd	r19, Y+3	; 0x03
    3d3e:	25 30       	cpi	r18, 0x05	; 5
    3d40:	31 05       	cpc	r19, r1
    3d42:	09 f1       	breq	.+66     	; 0x3d86 <Timer_voidInterruptEnable+0x9a>
    3d44:	8a 81       	ldd	r24, Y+2	; 0x02
    3d46:	9b 81       	ldd	r25, Y+3	; 0x03
    3d48:	85 30       	cpi	r24, 0x05	; 5
    3d4a:	91 05       	cpc	r25, r1
    3d4c:	9c f1       	brlt	.+102    	; 0x3db4 <Timer_voidInterruptEnable+0xc8>
    3d4e:	2a 81       	ldd	r18, Y+2	; 0x02
    3d50:	3b 81       	ldd	r19, Y+3	; 0x03
    3d52:	26 30       	cpi	r18, 0x06	; 6
    3d54:	31 05       	cpc	r19, r1
    3d56:	09 f4       	brne	.+2      	; 0x3d5a <Timer_voidInterruptEnable+0x6e>
    3d58:	45 c0       	rjmp	.+138    	; 0x3de4 <Timer_voidInterruptEnable+0xf8>
    3d5a:	8a 81       	ldd	r24, Y+2	; 0x02
    3d5c:	9b 81       	ldd	r25, Y+3	; 0x03
    3d5e:	87 30       	cpi	r24, 0x07	; 7
    3d60:	91 05       	cpc	r25, r1
    3d62:	c1 f1       	breq	.+112    	; 0x3dd4 <Timer_voidInterruptEnable+0xe8>
    3d64:	46 c0       	rjmp	.+140    	; 0x3df2 <Timer_voidInterruptEnable+0x106>
    {
	case INT_T0_OC:  SET_BIT(TIMSK,OCIE0);  break;
    3d66:	a9 e5       	ldi	r26, 0x59	; 89
    3d68:	b0 e0       	ldi	r27, 0x00	; 0
    3d6a:	e9 e5       	ldi	r30, 0x59	; 89
    3d6c:	f0 e0       	ldi	r31, 0x00	; 0
    3d6e:	80 81       	ld	r24, Z
    3d70:	82 60       	ori	r24, 0x02	; 2
    3d72:	8c 93       	st	X, r24
    3d74:	3e c0       	rjmp	.+124    	; 0x3df2 <Timer_voidInterruptEnable+0x106>
	case INT_T0_OVF: SET_BIT(TIMSK,TOIE0);  break;
    3d76:	a9 e5       	ldi	r26, 0x59	; 89
    3d78:	b0 e0       	ldi	r27, 0x00	; 0
    3d7a:	e9 e5       	ldi	r30, 0x59	; 89
    3d7c:	f0 e0       	ldi	r31, 0x00	; 0
    3d7e:	80 81       	ld	r24, Z
    3d80:	81 60       	ori	r24, 0x01	; 1
    3d82:	8c 93       	st	X, r24
    3d84:	36 c0       	rjmp	.+108    	; 0x3df2 <Timer_voidInterruptEnable+0x106>
	case INT_T1_IC:  SET_BIT(TIMSK,TICIE1);  /*input capture Interrupt*/SET_BIT(TCCR1B,ICNC1); /*INPUT CAPTURE noise cancler*/ break;
    3d86:	a9 e5       	ldi	r26, 0x59	; 89
    3d88:	b0 e0       	ldi	r27, 0x00	; 0
    3d8a:	e9 e5       	ldi	r30, 0x59	; 89
    3d8c:	f0 e0       	ldi	r31, 0x00	; 0
    3d8e:	80 81       	ld	r24, Z
    3d90:	80 62       	ori	r24, 0x20	; 32
    3d92:	8c 93       	st	X, r24
    3d94:	ae e4       	ldi	r26, 0x4E	; 78
    3d96:	b0 e0       	ldi	r27, 0x00	; 0
    3d98:	ee e4       	ldi	r30, 0x4E	; 78
    3d9a:	f0 e0       	ldi	r31, 0x00	; 0
    3d9c:	80 81       	ld	r24, Z
    3d9e:	80 68       	ori	r24, 0x80	; 128
    3da0:	8c 93       	st	X, r24
    3da2:	27 c0       	rjmp	.+78     	; 0x3df2 <Timer_voidInterruptEnable+0x106>
	case INT_T1_OCA: SET_BIT(TIMSK,OCIE1A); break;
    3da4:	a9 e5       	ldi	r26, 0x59	; 89
    3da6:	b0 e0       	ldi	r27, 0x00	; 0
    3da8:	e9 e5       	ldi	r30, 0x59	; 89
    3daa:	f0 e0       	ldi	r31, 0x00	; 0
    3dac:	80 81       	ld	r24, Z
    3dae:	80 61       	ori	r24, 0x10	; 16
    3db0:	8c 93       	st	X, r24
    3db2:	1f c0       	rjmp	.+62     	; 0x3df2 <Timer_voidInterruptEnable+0x106>
	case INT_T1_OCB: SET_BIT(TIMSK,OCIE1B); break;
    3db4:	a9 e5       	ldi	r26, 0x59	; 89
    3db6:	b0 e0       	ldi	r27, 0x00	; 0
    3db8:	e9 e5       	ldi	r30, 0x59	; 89
    3dba:	f0 e0       	ldi	r31, 0x00	; 0
    3dbc:	80 81       	ld	r24, Z
    3dbe:	88 60       	ori	r24, 0x08	; 8
    3dc0:	8c 93       	st	X, r24
    3dc2:	17 c0       	rjmp	.+46     	; 0x3df2 <Timer_voidInterruptEnable+0x106>
	case INT_T1_OVF: SET_BIT(TIMSK,TOIE1);  break;
    3dc4:	a9 e5       	ldi	r26, 0x59	; 89
    3dc6:	b0 e0       	ldi	r27, 0x00	; 0
    3dc8:	e9 e5       	ldi	r30, 0x59	; 89
    3dca:	f0 e0       	ldi	r31, 0x00	; 0
    3dcc:	80 81       	ld	r24, Z
    3dce:	84 60       	ori	r24, 0x04	; 4
    3dd0:	8c 93       	st	X, r24
    3dd2:	0f c0       	rjmp	.+30     	; 0x3df2 <Timer_voidInterruptEnable+0x106>
	case INT_T2_OC:  SET_BIT(TIMSK,OCIE2);            break;
    3dd4:	a9 e5       	ldi	r26, 0x59	; 89
    3dd6:	b0 e0       	ldi	r27, 0x00	; 0
    3dd8:	e9 e5       	ldi	r30, 0x59	; 89
    3dda:	f0 e0       	ldi	r31, 0x00	; 0
    3ddc:	80 81       	ld	r24, Z
    3dde:	80 68       	ori	r24, 0x80	; 128
    3de0:	8c 93       	st	X, r24
    3de2:	07 c0       	rjmp	.+14     	; 0x3df2 <Timer_voidInterruptEnable+0x106>
	case INT_T2_OVF:  SET_BIT(TIMSK,TOIE2);            break;
    3de4:	a9 e5       	ldi	r26, 0x59	; 89
    3de6:	b0 e0       	ldi	r27, 0x00	; 0
    3de8:	e9 e5       	ldi	r30, 0x59	; 89
    3dea:	f0 e0       	ldi	r31, 0x00	; 0
    3dec:	80 81       	ld	r24, Z
    3dee:	80 64       	ori	r24, 0x40	; 64
    3df0:	8c 93       	st	X, r24




    }
}
    3df2:	0f 90       	pop	r0
    3df4:	0f 90       	pop	r0
    3df6:	0f 90       	pop	r0
    3df8:	cf 91       	pop	r28
    3dfa:	df 91       	pop	r29
    3dfc:	08 95       	ret

00003dfe <Timer_voidInterruptDisable>:
void Timer_voidInterruptDisable(Timer_INT_SOURCE_t Copy_enuInterruptSource)
{
    3dfe:	df 93       	push	r29
    3e00:	cf 93       	push	r28
    3e02:	00 d0       	rcall	.+0      	; 0x3e04 <Timer_voidInterruptDisable+0x6>
    3e04:	0f 92       	push	r0
    3e06:	cd b7       	in	r28, 0x3d	; 61
    3e08:	de b7       	in	r29, 0x3e	; 62
    3e0a:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_enuInterruptSource)
    3e0c:	89 81       	ldd	r24, Y+1	; 0x01
    3e0e:	28 2f       	mov	r18, r24
    3e10:	30 e0       	ldi	r19, 0x00	; 0
    3e12:	3b 83       	std	Y+3, r19	; 0x03
    3e14:	2a 83       	std	Y+2, r18	; 0x02
    3e16:	8a 81       	ldd	r24, Y+2	; 0x02
    3e18:	9b 81       	ldd	r25, Y+3	; 0x03
    3e1a:	83 30       	cpi	r24, 0x03	; 3
    3e1c:	91 05       	cpc	r25, r1
    3e1e:	09 f4       	brne	.+2      	; 0x3e22 <Timer_voidInterruptDisable+0x24>
    3e20:	4a c0       	rjmp	.+148    	; 0x3eb6 <Timer_voidInterruptDisable+0xb8>
    3e22:	2a 81       	ldd	r18, Y+2	; 0x02
    3e24:	3b 81       	ldd	r19, Y+3	; 0x03
    3e26:	24 30       	cpi	r18, 0x04	; 4
    3e28:	31 05       	cpc	r19, r1
    3e2a:	84 f4       	brge	.+32     	; 0x3e4c <Timer_voidInterruptDisable+0x4e>
    3e2c:	8a 81       	ldd	r24, Y+2	; 0x02
    3e2e:	9b 81       	ldd	r25, Y+3	; 0x03
    3e30:	81 30       	cpi	r24, 0x01	; 1
    3e32:	91 05       	cpc	r25, r1
    3e34:	09 f1       	breq	.+66     	; 0x3e78 <Timer_voidInterruptDisable+0x7a>
    3e36:	2a 81       	ldd	r18, Y+2	; 0x02
    3e38:	3b 81       	ldd	r19, Y+3	; 0x03
    3e3a:	22 30       	cpi	r18, 0x02	; 2
    3e3c:	31 05       	cpc	r19, r1
    3e3e:	0c f0       	brlt	.+2      	; 0x3e42 <Timer_voidInterruptDisable+0x44>
    3e40:	4a c0       	rjmp	.+148    	; 0x3ed6 <Timer_voidInterruptDisable+0xd8>
    3e42:	8a 81       	ldd	r24, Y+2	; 0x02
    3e44:	9b 81       	ldd	r25, Y+3	; 0x03
    3e46:	00 97       	sbiw	r24, 0x00	; 0
    3e48:	f9 f0       	breq	.+62     	; 0x3e88 <Timer_voidInterruptDisable+0x8a>
    3e4a:	5c c0       	rjmp	.+184    	; 0x3f04 <Timer_voidInterruptDisable+0x106>
    3e4c:	2a 81       	ldd	r18, Y+2	; 0x02
    3e4e:	3b 81       	ldd	r19, Y+3	; 0x03
    3e50:	25 30       	cpi	r18, 0x05	; 5
    3e52:	31 05       	cpc	r19, r1
    3e54:	09 f1       	breq	.+66     	; 0x3e98 <Timer_voidInterruptDisable+0x9a>
    3e56:	8a 81       	ldd	r24, Y+2	; 0x02
    3e58:	9b 81       	ldd	r25, Y+3	; 0x03
    3e5a:	85 30       	cpi	r24, 0x05	; 5
    3e5c:	91 05       	cpc	r25, r1
    3e5e:	9c f1       	brlt	.+102    	; 0x3ec6 <Timer_voidInterruptDisable+0xc8>
    3e60:	2a 81       	ldd	r18, Y+2	; 0x02
    3e62:	3b 81       	ldd	r19, Y+3	; 0x03
    3e64:	26 30       	cpi	r18, 0x06	; 6
    3e66:	31 05       	cpc	r19, r1
    3e68:	09 f4       	brne	.+2      	; 0x3e6c <Timer_voidInterruptDisable+0x6e>
    3e6a:	45 c0       	rjmp	.+138    	; 0x3ef6 <Timer_voidInterruptDisable+0xf8>
    3e6c:	8a 81       	ldd	r24, Y+2	; 0x02
    3e6e:	9b 81       	ldd	r25, Y+3	; 0x03
    3e70:	87 30       	cpi	r24, 0x07	; 7
    3e72:	91 05       	cpc	r25, r1
    3e74:	c1 f1       	breq	.+112    	; 0x3ee6 <Timer_voidInterruptDisable+0xe8>
    3e76:	46 c0       	rjmp	.+140    	; 0x3f04 <Timer_voidInterruptDisable+0x106>
	{

	case INT_T0_OC:  CLR_BIT(TIMSK,OCIE0);  break;
    3e78:	a9 e5       	ldi	r26, 0x59	; 89
    3e7a:	b0 e0       	ldi	r27, 0x00	; 0
    3e7c:	e9 e5       	ldi	r30, 0x59	; 89
    3e7e:	f0 e0       	ldi	r31, 0x00	; 0
    3e80:	80 81       	ld	r24, Z
    3e82:	8d 7f       	andi	r24, 0xFD	; 253
    3e84:	8c 93       	st	X, r24
    3e86:	3e c0       	rjmp	.+124    	; 0x3f04 <Timer_voidInterruptDisable+0x106>
		case INT_T0_OVF: CLR_BIT(TIMSK,TOIE0);  break;
    3e88:	a9 e5       	ldi	r26, 0x59	; 89
    3e8a:	b0 e0       	ldi	r27, 0x00	; 0
    3e8c:	e9 e5       	ldi	r30, 0x59	; 89
    3e8e:	f0 e0       	ldi	r31, 0x00	; 0
    3e90:	80 81       	ld	r24, Z
    3e92:	8e 7f       	andi	r24, 0xFE	; 254
    3e94:	8c 93       	st	X, r24
    3e96:	36 c0       	rjmp	.+108    	; 0x3f04 <Timer_voidInterruptDisable+0x106>
		case INT_T1_IC:  CLR_BIT(TIMSK,TICIE1);  /*input capture Interrupt*/CLR_BIT(TCCR1B,ICNC1); /*INPUT CAPTURE noise cancler*/ break;
    3e98:	a9 e5       	ldi	r26, 0x59	; 89
    3e9a:	b0 e0       	ldi	r27, 0x00	; 0
    3e9c:	e9 e5       	ldi	r30, 0x59	; 89
    3e9e:	f0 e0       	ldi	r31, 0x00	; 0
    3ea0:	80 81       	ld	r24, Z
    3ea2:	8f 7d       	andi	r24, 0xDF	; 223
    3ea4:	8c 93       	st	X, r24
    3ea6:	ae e4       	ldi	r26, 0x4E	; 78
    3ea8:	b0 e0       	ldi	r27, 0x00	; 0
    3eaa:	ee e4       	ldi	r30, 0x4E	; 78
    3eac:	f0 e0       	ldi	r31, 0x00	; 0
    3eae:	80 81       	ld	r24, Z
    3eb0:	8f 77       	andi	r24, 0x7F	; 127
    3eb2:	8c 93       	st	X, r24
    3eb4:	27 c0       	rjmp	.+78     	; 0x3f04 <Timer_voidInterruptDisable+0x106>
		case INT_T1_OCA: CLR_BIT(TIMSK,OCIE1A); break;
    3eb6:	a9 e5       	ldi	r26, 0x59	; 89
    3eb8:	b0 e0       	ldi	r27, 0x00	; 0
    3eba:	e9 e5       	ldi	r30, 0x59	; 89
    3ebc:	f0 e0       	ldi	r31, 0x00	; 0
    3ebe:	80 81       	ld	r24, Z
    3ec0:	8f 7e       	andi	r24, 0xEF	; 239
    3ec2:	8c 93       	st	X, r24
    3ec4:	1f c0       	rjmp	.+62     	; 0x3f04 <Timer_voidInterruptDisable+0x106>
		case INT_T1_OCB: CLR_BIT(TIMSK,OCIE1B); break;
    3ec6:	a9 e5       	ldi	r26, 0x59	; 89
    3ec8:	b0 e0       	ldi	r27, 0x00	; 0
    3eca:	e9 e5       	ldi	r30, 0x59	; 89
    3ecc:	f0 e0       	ldi	r31, 0x00	; 0
    3ece:	80 81       	ld	r24, Z
    3ed0:	87 7f       	andi	r24, 0xF7	; 247
    3ed2:	8c 93       	st	X, r24
    3ed4:	17 c0       	rjmp	.+46     	; 0x3f04 <Timer_voidInterruptDisable+0x106>
		case INT_T1_OVF: CLR_BIT(TIMSK,TOIE1);  break;
    3ed6:	a9 e5       	ldi	r26, 0x59	; 89
    3ed8:	b0 e0       	ldi	r27, 0x00	; 0
    3eda:	e9 e5       	ldi	r30, 0x59	; 89
    3edc:	f0 e0       	ldi	r31, 0x00	; 0
    3ede:	80 81       	ld	r24, Z
    3ee0:	8b 7f       	andi	r24, 0xFB	; 251
    3ee2:	8c 93       	st	X, r24
    3ee4:	0f c0       	rjmp	.+30     	; 0x3f04 <Timer_voidInterruptDisable+0x106>
		case INT_T2_OC:  CLR_BIT(TIMSK,OCIE2);            break;
    3ee6:	a9 e5       	ldi	r26, 0x59	; 89
    3ee8:	b0 e0       	ldi	r27, 0x00	; 0
    3eea:	e9 e5       	ldi	r30, 0x59	; 89
    3eec:	f0 e0       	ldi	r31, 0x00	; 0
    3eee:	80 81       	ld	r24, Z
    3ef0:	8f 77       	andi	r24, 0x7F	; 127
    3ef2:	8c 93       	st	X, r24
    3ef4:	07 c0       	rjmp	.+14     	; 0x3f04 <Timer_voidInterruptDisable+0x106>
		case INT_T2_OVF:  CLR_BIT(TIMSK,TOIE2);            break;
    3ef6:	a9 e5       	ldi	r26, 0x59	; 89
    3ef8:	b0 e0       	ldi	r27, 0x00	; 0
    3efa:	e9 e5       	ldi	r30, 0x59	; 89
    3efc:	f0 e0       	ldi	r31, 0x00	; 0
    3efe:	80 81       	ld	r24, Z
    3f00:	8f 7b       	andi	r24, 0xBF	; 191
    3f02:	8c 93       	st	X, r24


	}

}
    3f04:	0f 90       	pop	r0
    3f06:	0f 90       	pop	r0
    3f08:	0f 90       	pop	r0
    3f0a:	cf 91       	pop	r28
    3f0c:	df 91       	pop	r29
    3f0e:	08 95       	ret

00003f10 <Timer_u8SetCallBackFunction>:
uint8 Timer_u8SetCallBackFunction(Timer_INT_SOURCE_t Copy_enuInterruptSource, void(*CallBackFunc)(void))
{
    3f10:	df 93       	push	r29
    3f12:	cf 93       	push	r28
    3f14:	00 d0       	rcall	.+0      	; 0x3f16 <Timer_u8SetCallBackFunction+0x6>
    3f16:	00 d0       	rcall	.+0      	; 0x3f18 <Timer_u8SetCallBackFunction+0x8>
    3f18:	cd b7       	in	r28, 0x3d	; 61
    3f1a:	de b7       	in	r29, 0x3e	; 62
    3f1c:	8a 83       	std	Y+2, r24	; 0x02
    3f1e:	7c 83       	std	Y+4, r23	; 0x04
    3f20:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState =OK;
    3f22:	19 82       	std	Y+1, r1	; 0x01
	if(CallBackFunc !=NULL)
    3f24:	8b 81       	ldd	r24, Y+3	; 0x03
    3f26:	9c 81       	ldd	r25, Y+4	; 0x04
    3f28:	00 97       	sbiw	r24, 0x00	; 0
    3f2a:	69 f0       	breq	.+26     	; 0x3f46 <Timer_u8SetCallBackFunction+0x36>
	{
		Timer_pvCallBackFunc[Copy_enuInterruptSource]=CallBackFunc;
    3f2c:	8a 81       	ldd	r24, Y+2	; 0x02
    3f2e:	88 2f       	mov	r24, r24
    3f30:	90 e0       	ldi	r25, 0x00	; 0
    3f32:	88 0f       	add	r24, r24
    3f34:	99 1f       	adc	r25, r25
    3f36:	fc 01       	movw	r30, r24
    3f38:	e8 59       	subi	r30, 0x98	; 152
    3f3a:	fe 4f       	sbci	r31, 0xFE	; 254
    3f3c:	8b 81       	ldd	r24, Y+3	; 0x03
    3f3e:	9c 81       	ldd	r25, Y+4	; 0x04
    3f40:	91 83       	std	Z+1, r25	; 0x01
    3f42:	80 83       	st	Z, r24
    3f44:	02 c0       	rjmp	.+4      	; 0x3f4a <Timer_u8SetCallBackFunction+0x3a>

	}
	else

	{
		Local_u8ErrorState= NULL_PTR_ERR;
    3f46:	82 e0       	ldi	r24, 0x02	; 2
    3f48:	89 83       	std	Y+1, r24	; 0x01

	}

 return Local_u8ErrorState;
    3f4a:	89 81       	ldd	r24, Y+1	; 0x01

}
    3f4c:	0f 90       	pop	r0
    3f4e:	0f 90       	pop	r0
    3f50:	0f 90       	pop	r0
    3f52:	0f 90       	pop	r0
    3f54:	cf 91       	pop	r28
    3f56:	df 91       	pop	r29
    3f58:	08 95       	ret

00003f5a <Timer0_voidInit>:

/*Timer 0*/

uint8 Timer0_voidInit(Timer0_Config_t * Copy_pstTimerconfig)
{
    3f5a:	df 93       	push	r29
    3f5c:	cf 93       	push	r28
    3f5e:	00 d0       	rcall	.+0      	; 0x3f60 <Timer0_voidInit+0x6>
    3f60:	0f 92       	push	r0
    3f62:	cd b7       	in	r28, 0x3d	; 61
    3f64:	de b7       	in	r29, 0x3e	; 62
    3f66:	9b 83       	std	Y+3, r25	; 0x03
    3f68:	8a 83       	std	Y+2, r24	; 0x02

	uint8 Local_u8ErrorState =OK;
    3f6a:	19 82       	std	Y+1, r1	; 0x01
		if(Copy_pstTimerconfig !=NULL)
    3f6c:	8a 81       	ldd	r24, Y+2	; 0x02
    3f6e:	9b 81       	ldd	r25, Y+3	; 0x03
    3f70:	00 97       	sbiw	r24, 0x00	; 0
    3f72:	a1 f1       	breq	.+104    	; 0x3fdc <Timer0_voidInit+0x82>
		{
			/*set waveform generation mode */
			TCCR0 &= T0_2_WGM_MASK; //clear bits before put value
    3f74:	a3 e5       	ldi	r26, 0x53	; 83
    3f76:	b0 e0       	ldi	r27, 0x00	; 0
    3f78:	e3 e5       	ldi	r30, 0x53	; 83
    3f7a:	f0 e0       	ldi	r31, 0x00	; 0
    3f7c:	80 81       	ld	r24, Z
    3f7e:	87 7b       	andi	r24, 0xB7	; 183
    3f80:	8c 93       	st	X, r24
			TCCR0 |=Copy_pstTimerconfig->WGM;
    3f82:	a3 e5       	ldi	r26, 0x53	; 83
    3f84:	b0 e0       	ldi	r27, 0x00	; 0
    3f86:	e3 e5       	ldi	r30, 0x53	; 83
    3f88:	f0 e0       	ldi	r31, 0x00	; 0
    3f8a:	90 81       	ld	r25, Z
    3f8c:	ea 81       	ldd	r30, Y+2	; 0x02
    3f8e:	fb 81       	ldd	r31, Y+3	; 0x03
    3f90:	80 81       	ld	r24, Z
    3f92:	89 2b       	or	r24, r25
    3f94:	8c 93       	st	X, r24

			/*Set output compare mode */
			TCCR0 &= T0_2_OCM_MASK;
    3f96:	a3 e5       	ldi	r26, 0x53	; 83
    3f98:	b0 e0       	ldi	r27, 0x00	; 0
    3f9a:	e3 e5       	ldi	r30, 0x53	; 83
    3f9c:	f0 e0       	ldi	r31, 0x00	; 0
    3f9e:	80 81       	ld	r24, Z
    3fa0:	8f 7c       	andi	r24, 0xCF	; 207
    3fa2:	8c 93       	st	X, r24
			TCCR0 |=Copy_pstTimerconfig->OC_Mode;
    3fa4:	a3 e5       	ldi	r26, 0x53	; 83
    3fa6:	b0 e0       	ldi	r27, 0x00	; 0
    3fa8:	e3 e5       	ldi	r30, 0x53	; 83
    3faa:	f0 e0       	ldi	r31, 0x00	; 0
    3fac:	90 81       	ld	r25, Z
    3fae:	ea 81       	ldd	r30, Y+2	; 0x02
    3fb0:	fb 81       	ldd	r31, Y+3	; 0x03
    3fb2:	82 81       	ldd	r24, Z+2	; 0x02
    3fb4:	89 2b       	or	r24, r25
    3fb6:	8c 93       	st	X, r24

			/*Set prescaler*/
			TCCR0 &=CLK_MASK;
    3fb8:	a3 e5       	ldi	r26, 0x53	; 83
    3fba:	b0 e0       	ldi	r27, 0x00	; 0
    3fbc:	e3 e5       	ldi	r30, 0x53	; 83
    3fbe:	f0 e0       	ldi	r31, 0x00	; 0
    3fc0:	80 81       	ld	r24, Z
    3fc2:	88 7f       	andi	r24, 0xF8	; 248
    3fc4:	8c 93       	st	X, r24
			TCCR0 |= Copy_pstTimerconfig->CLK;
    3fc6:	a3 e5       	ldi	r26, 0x53	; 83
    3fc8:	b0 e0       	ldi	r27, 0x00	; 0
    3fca:	e3 e5       	ldi	r30, 0x53	; 83
    3fcc:	f0 e0       	ldi	r31, 0x00	; 0
    3fce:	90 81       	ld	r25, Z
    3fd0:	ea 81       	ldd	r30, Y+2	; 0x02
    3fd2:	fb 81       	ldd	r31, Y+3	; 0x03
    3fd4:	81 81       	ldd	r24, Z+1	; 0x01
    3fd6:	89 2b       	or	r24, r25
    3fd8:	8c 93       	st	X, r24
    3fda:	02 c0       	rjmp	.+4      	; 0x3fe0 <Timer0_voidInit+0x86>
		}
		else

		{
			Local_u8ErrorState=NULL_PTR_ERR;
    3fdc:	82 e0       	ldi	r24, 0x02	; 2
    3fde:	89 83       	std	Y+1, r24	; 0x01

		}

	 return Local_u8ErrorState;
    3fe0:	89 81       	ldd	r24, Y+1	; 0x01


}
    3fe2:	0f 90       	pop	r0
    3fe4:	0f 90       	pop	r0
    3fe6:	0f 90       	pop	r0
    3fe8:	cf 91       	pop	r28
    3fea:	df 91       	pop	r29
    3fec:	08 95       	ret

00003fee <Timer0_voidSetPreloadValue>:
void Timer0_voidSetPreloadValue(uint8 Copy_u8PreloadVal)
{
    3fee:	df 93       	push	r29
    3ff0:	cf 93       	push	r28
    3ff2:	0f 92       	push	r0
    3ff4:	cd b7       	in	r28, 0x3d	; 61
    3ff6:	de b7       	in	r29, 0x3e	; 62
    3ff8:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=Copy_u8PreloadVal;
    3ffa:	e2 e5       	ldi	r30, 0x52	; 82
    3ffc:	f0 e0       	ldi	r31, 0x00	; 0
    3ffe:	89 81       	ldd	r24, Y+1	; 0x01
    4000:	80 83       	st	Z, r24
}
    4002:	0f 90       	pop	r0
    4004:	cf 91       	pop	r28
    4006:	df 91       	pop	r29
    4008:	08 95       	ret

0000400a <Timer0_voidSetCompareMatchValue>:
void Timer0_voidSetCompareMatchValue(uint8 Copy_u8CompareMatchVal)
{
    400a:	df 93       	push	r29
    400c:	cf 93       	push	r28
    400e:	0f 92       	push	r0
    4010:	cd b7       	in	r28, 0x3d	; 61
    4012:	de b7       	in	r29, 0x3e	; 62
    4014:	89 83       	std	Y+1, r24	; 0x01
	OCR0=Copy_u8CompareMatchVal;
    4016:	ec e5       	ldi	r30, 0x5C	; 92
    4018:	f0 e0       	ldi	r31, 0x00	; 0
    401a:	89 81       	ldd	r24, Y+1	; 0x01
    401c:	80 83       	st	Z, r24


}
    401e:	0f 90       	pop	r0
    4020:	cf 91       	pop	r28
    4022:	df 91       	pop	r29
    4024:	08 95       	ret

00004026 <Timer0_GetCompareMatch>:
uint8 Timer0_GetCompareMatch()
{
    4026:	df 93       	push	r29
    4028:	cf 93       	push	r28
    402a:	cd b7       	in	r28, 0x3d	; 61
    402c:	de b7       	in	r29, 0x3e	; 62

    return TCCR0;
    402e:	e3 e5       	ldi	r30, 0x53	; 83
    4030:	f0 e0       	ldi	r31, 0x00	; 0
    4032:	80 81       	ld	r24, Z


}
    4034:	cf 91       	pop	r28
    4036:	df 91       	pop	r29
    4038:	08 95       	ret

0000403a <Timer0_voidSetPrescaler>:
void Timer0_voidSetPrescaler(Timer0_1_prescaler_t Copy_enPrescaler)
{
    403a:	df 93       	push	r29
    403c:	cf 93       	push	r28
    403e:	0f 92       	push	r0
    4040:	cd b7       	in	r28, 0x3d	; 61
    4042:	de b7       	in	r29, 0x3e	; 62
    4044:	89 83       	std	Y+1, r24	; 0x01
	TCCR0 &=CLK_MASK;
    4046:	a3 e5       	ldi	r26, 0x53	; 83
    4048:	b0 e0       	ldi	r27, 0x00	; 0
    404a:	e3 e5       	ldi	r30, 0x53	; 83
    404c:	f0 e0       	ldi	r31, 0x00	; 0
    404e:	80 81       	ld	r24, Z
    4050:	88 7f       	andi	r24, 0xF8	; 248
    4052:	8c 93       	st	X, r24
	TCCR0 |= Copy_enPrescaler;
    4054:	a3 e5       	ldi	r26, 0x53	; 83
    4056:	b0 e0       	ldi	r27, 0x00	; 0
    4058:	e3 e5       	ldi	r30, 0x53	; 83
    405a:	f0 e0       	ldi	r31, 0x00	; 0
    405c:	90 81       	ld	r25, Z
    405e:	89 81       	ldd	r24, Y+1	; 0x01
    4060:	89 2b       	or	r24, r25
    4062:	8c 93       	st	X, r24

}
    4064:	0f 90       	pop	r0
    4066:	cf 91       	pop	r28
    4068:	df 91       	pop	r29
    406a:	08 95       	ret

0000406c <Timer0_voidSetWaveGenerationMode>:
void Timer0_voidSetWaveGenerationMode(TIMER_WGM_t Copy_enuWGM)
{
    406c:	df 93       	push	r29
    406e:	cf 93       	push	r28
    4070:	0f 92       	push	r0
    4072:	cd b7       	in	r28, 0x3d	; 61
    4074:	de b7       	in	r29, 0x3e	; 62
    4076:	89 83       	std	Y+1, r24	; 0x01




	TCCR0 &=T0_2_WGM_MASK;
    4078:	a3 e5       	ldi	r26, 0x53	; 83
    407a:	b0 e0       	ldi	r27, 0x00	; 0
    407c:	e3 e5       	ldi	r30, 0x53	; 83
    407e:	f0 e0       	ldi	r31, 0x00	; 0
    4080:	80 81       	ld	r24, Z
    4082:	87 7b       	andi	r24, 0xB7	; 183
    4084:	8c 93       	st	X, r24
	TCCR0 |= Copy_enuWGM;
    4086:	a3 e5       	ldi	r26, 0x53	; 83
    4088:	b0 e0       	ldi	r27, 0x00	; 0
    408a:	e3 e5       	ldi	r30, 0x53	; 83
    408c:	f0 e0       	ldi	r31, 0x00	; 0
    408e:	90 81       	ld	r25, Z
    4090:	89 81       	ldd	r24, Y+1	; 0x01
    4092:	89 2b       	or	r24, r25
    4094:	8c 93       	st	X, r24



}
    4096:	0f 90       	pop	r0
    4098:	cf 91       	pop	r28
    409a:	df 91       	pop	r29
    409c:	08 95       	ret

0000409e <Timer0_voidSetOutputCompareMode>:
void Timer0_voidSetOutputCompareMode(Timer_OC_Mode_t Copy_enuOCM)
{
    409e:	df 93       	push	r29
    40a0:	cf 93       	push	r28
    40a2:	0f 92       	push	r0
    40a4:	cd b7       	in	r28, 0x3d	; 61
    40a6:	de b7       	in	r29, 0x3e	; 62
    40a8:	89 83       	std	Y+1, r24	; 0x01

    TCCR0 &=T0_2_OCM_MASK;
    40aa:	a3 e5       	ldi	r26, 0x53	; 83
    40ac:	b0 e0       	ldi	r27, 0x00	; 0
    40ae:	e3 e5       	ldi	r30, 0x53	; 83
    40b0:	f0 e0       	ldi	r31, 0x00	; 0
    40b2:	80 81       	ld	r24, Z
    40b4:	8f 7c       	andi	r24, 0xCF	; 207
    40b6:	8c 93       	st	X, r24
    TCCR0 |= Copy_enuOCM;
    40b8:	a3 e5       	ldi	r26, 0x53	; 83
    40ba:	b0 e0       	ldi	r27, 0x00	; 0
    40bc:	e3 e5       	ldi	r30, 0x53	; 83
    40be:	f0 e0       	ldi	r31, 0x00	; 0
    40c0:	90 81       	ld	r25, Z
    40c2:	89 81       	ldd	r24, Y+1	; 0x01
    40c4:	89 2b       	or	r24, r25
    40c6:	8c 93       	st	X, r24


}
    40c8:	0f 90       	pop	r0
    40ca:	cf 91       	pop	r28
    40cc:	df 91       	pop	r29
    40ce:	08 95       	ret

000040d0 <Timer1_voidInit>:

/*Timer 1*/
uint8 Timer1_voidInit(Timer1_Config_t * Copy_pstTimerconfig)
{
    40d0:	df 93       	push	r29
    40d2:	cf 93       	push	r28
    40d4:	00 d0       	rcall	.+0      	; 0x40d6 <Timer1_voidInit+0x6>
    40d6:	00 d0       	rcall	.+0      	; 0x40d8 <Timer1_voidInit+0x8>
    40d8:	0f 92       	push	r0
    40da:	cd b7       	in	r28, 0x3d	; 61
    40dc:	de b7       	in	r29, 0x3e	; 62
    40de:	9b 83       	std	Y+3, r25	; 0x03
    40e0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8ErrorState =OK;
    40e2:	19 82       	std	Y+1, r1	; 0x01
		if(Copy_pstTimerconfig !=NULL)
    40e4:	8a 81       	ldd	r24, Y+2	; 0x02
    40e6:	9b 81       	ldd	r25, Y+3	; 0x03
    40e8:	00 97       	sbiw	r24, 0x00	; 0
    40ea:	09 f4       	brne	.+2      	; 0x40ee <Timer1_voidInit+0x1e>
    40ec:	ce c0       	rjmp	.+412    	; 0x428a <Timer1_voidInit+0x1ba>
		{
			/*set waveform generation mode */
			TCCR1A &= T1_WGMA_MASK; //clear bits before put value
    40ee:	af e4       	ldi	r26, 0x4F	; 79
    40f0:	b0 e0       	ldi	r27, 0x00	; 0
    40f2:	ef e4       	ldi	r30, 0x4F	; 79
    40f4:	f0 e0       	ldi	r31, 0x00	; 0
    40f6:	80 81       	ld	r24, Z
    40f8:	8c 7f       	andi	r24, 0xFC	; 252
    40fa:	8c 93       	st	X, r24
			TCCR1A |=(Copy_pstTimerconfig->WGM&T1_WGM_VALUE_MASK_A) ;
    40fc:	af e4       	ldi	r26, 0x4F	; 79
    40fe:	b0 e0       	ldi	r27, 0x00	; 0
    4100:	ef e4       	ldi	r30, 0x4F	; 79
    4102:	f0 e0       	ldi	r31, 0x00	; 0
    4104:	80 81       	ld	r24, Z
    4106:	98 2f       	mov	r25, r24
    4108:	ea 81       	ldd	r30, Y+2	; 0x02
    410a:	fb 81       	ldd	r31, Y+3	; 0x03
    410c:	80 81       	ld	r24, Z
    410e:	83 70       	andi	r24, 0x03	; 3
    4110:	89 2b       	or	r24, r25
    4112:	8c 93       	st	X, r24

			TCCR1B &= T1_WGMB_MASK;
    4114:	ae e4       	ldi	r26, 0x4E	; 78
    4116:	b0 e0       	ldi	r27, 0x00	; 0
    4118:	ee e4       	ldi	r30, 0x4E	; 78
    411a:	f0 e0       	ldi	r31, 0x00	; 0
    411c:	80 81       	ld	r24, Z
    411e:	87 7e       	andi	r24, 0xE7	; 231
    4120:	8c 93       	st	X, r24
			TCCR1B |= (Copy_pstTimerconfig->WGM & T1_WGM_VALUE_MASK_B);
    4122:	ae e4       	ldi	r26, 0x4E	; 78
    4124:	b0 e0       	ldi	r27, 0x00	; 0
    4126:	ee e4       	ldi	r30, 0x4E	; 78
    4128:	f0 e0       	ldi	r31, 0x00	; 0
    412a:	80 81       	ld	r24, Z
    412c:	98 2f       	mov	r25, r24
    412e:	ea 81       	ldd	r30, Y+2	; 0x02
    4130:	fb 81       	ldd	r31, Y+3	; 0x03
    4132:	80 81       	ld	r24, Z
    4134:	88 71       	andi	r24, 0x18	; 24
    4136:	89 2b       	or	r24, r25
    4138:	8c 93       	st	X, r24
			/*Set output compare mode */
			switch(Copy_pstTimerconfig->OC_Mode)
    413a:	ea 81       	ldd	r30, Y+2	; 0x02
    413c:	fb 81       	ldd	r31, Y+3	; 0x03
    413e:	82 81       	ldd	r24, Z+2	; 0x02
    4140:	28 2f       	mov	r18, r24
    4142:	30 e0       	ldi	r19, 0x00	; 0
    4144:	3d 83       	std	Y+5, r19	; 0x05
    4146:	2c 83       	std	Y+4, r18	; 0x04
    4148:	8c 81       	ldd	r24, Y+4	; 0x04
    414a:	9d 81       	ldd	r25, Y+5	; 0x05
    414c:	80 31       	cpi	r24, 0x10	; 16
    414e:	91 05       	cpc	r25, r1
    4150:	a1 f1       	breq	.+104    	; 0x41ba <Timer1_voidInit+0xea>
    4152:	2c 81       	ldd	r18, Y+4	; 0x04
    4154:	3d 81       	ldd	r19, Y+5	; 0x05
    4156:	21 31       	cpi	r18, 0x11	; 17
    4158:	31 05       	cpc	r19, r1
    415a:	2c f4       	brge	.+10     	; 0x4166 <Timer1_voidInit+0x96>
    415c:	8c 81       	ldd	r24, Y+4	; 0x04
    415e:	9d 81       	ldd	r25, Y+5	; 0x05
    4160:	00 97       	sbiw	r24, 0x00	; 0
    4162:	71 f0       	breq	.+28     	; 0x4180 <Timer1_voidInit+0xb0>
    4164:	80 c0       	rjmp	.+256    	; 0x4266 <Timer1_voidInit+0x196>
    4166:	2c 81       	ldd	r18, Y+4	; 0x04
    4168:	3d 81       	ldd	r19, Y+5	; 0x05
    416a:	20 32       	cpi	r18, 0x20	; 32
    416c:	31 05       	cpc	r19, r1
    416e:	09 f4       	brne	.+2      	; 0x4172 <Timer1_voidInit+0xa2>
    4170:	41 c0       	rjmp	.+130    	; 0x41f4 <Timer1_voidInit+0x124>
    4172:	8c 81       	ldd	r24, Y+4	; 0x04
    4174:	9d 81       	ldd	r25, Y+5	; 0x05
    4176:	80 33       	cpi	r24, 0x30	; 48
    4178:	91 05       	cpc	r25, r1
    417a:	09 f4       	brne	.+2      	; 0x417e <Timer1_voidInit+0xae>
    417c:	58 c0       	rjmp	.+176    	; 0x422e <Timer1_voidInit+0x15e>
    417e:	73 c0       	rjmp	.+230    	; 0x4266 <Timer1_voidInit+0x196>
			{
			case OC_Disconnect: CLR_BIT(TCCR1A,COM1A0);CLR_BIT(TCCR1A,COM1A1);CLR_BIT(TCCR1A,COM1B0);CLR_BIT(TCCR1A,COM1B1); break;
    4180:	af e4       	ldi	r26, 0x4F	; 79
    4182:	b0 e0       	ldi	r27, 0x00	; 0
    4184:	ef e4       	ldi	r30, 0x4F	; 79
    4186:	f0 e0       	ldi	r31, 0x00	; 0
    4188:	80 81       	ld	r24, Z
    418a:	8f 7b       	andi	r24, 0xBF	; 191
    418c:	8c 93       	st	X, r24
    418e:	af e4       	ldi	r26, 0x4F	; 79
    4190:	b0 e0       	ldi	r27, 0x00	; 0
    4192:	ef e4       	ldi	r30, 0x4F	; 79
    4194:	f0 e0       	ldi	r31, 0x00	; 0
    4196:	80 81       	ld	r24, Z
    4198:	8f 77       	andi	r24, 0x7F	; 127
    419a:	8c 93       	st	X, r24
    419c:	af e4       	ldi	r26, 0x4F	; 79
    419e:	b0 e0       	ldi	r27, 0x00	; 0
    41a0:	ef e4       	ldi	r30, 0x4F	; 79
    41a2:	f0 e0       	ldi	r31, 0x00	; 0
    41a4:	80 81       	ld	r24, Z
    41a6:	8f 7e       	andi	r24, 0xEF	; 239
    41a8:	8c 93       	st	X, r24
    41aa:	af e4       	ldi	r26, 0x4F	; 79
    41ac:	b0 e0       	ldi	r27, 0x00	; 0
    41ae:	ef e4       	ldi	r30, 0x4F	; 79
    41b0:	f0 e0       	ldi	r31, 0x00	; 0
    41b2:	80 81       	ld	r24, Z
    41b4:	8f 7d       	andi	r24, 0xDF	; 223
    41b6:	8c 93       	st	X, r24
    41b8:	56 c0       	rjmp	.+172    	; 0x4266 <Timer1_voidInit+0x196>
			case OC_toggle:  SET_BIT(TCCR1A,COM1A0);CLR_BIT(TCCR1A,COM1A1);SET_BIT(TCCR1A,COM1B0);CLR_BIT(TCCR1A,COM1B1); break;
    41ba:	af e4       	ldi	r26, 0x4F	; 79
    41bc:	b0 e0       	ldi	r27, 0x00	; 0
    41be:	ef e4       	ldi	r30, 0x4F	; 79
    41c0:	f0 e0       	ldi	r31, 0x00	; 0
    41c2:	80 81       	ld	r24, Z
    41c4:	80 64       	ori	r24, 0x40	; 64
    41c6:	8c 93       	st	X, r24
    41c8:	af e4       	ldi	r26, 0x4F	; 79
    41ca:	b0 e0       	ldi	r27, 0x00	; 0
    41cc:	ef e4       	ldi	r30, 0x4F	; 79
    41ce:	f0 e0       	ldi	r31, 0x00	; 0
    41d0:	80 81       	ld	r24, Z
    41d2:	8f 77       	andi	r24, 0x7F	; 127
    41d4:	8c 93       	st	X, r24
    41d6:	af e4       	ldi	r26, 0x4F	; 79
    41d8:	b0 e0       	ldi	r27, 0x00	; 0
    41da:	ef e4       	ldi	r30, 0x4F	; 79
    41dc:	f0 e0       	ldi	r31, 0x00	; 0
    41de:	80 81       	ld	r24, Z
    41e0:	80 61       	ori	r24, 0x10	; 16
    41e2:	8c 93       	st	X, r24
    41e4:	af e4       	ldi	r26, 0x4F	; 79
    41e6:	b0 e0       	ldi	r27, 0x00	; 0
    41e8:	ef e4       	ldi	r30, 0x4F	; 79
    41ea:	f0 e0       	ldi	r31, 0x00	; 0
    41ec:	80 81       	ld	r24, Z
    41ee:	8f 7d       	andi	r24, 0xDF	; 223
    41f0:	8c 93       	st	X, r24
    41f2:	39 c0       	rjmp	.+114    	; 0x4266 <Timer1_voidInit+0x196>
			case OC_clr: CLR_BIT(TCCR1A,COM1A0);SET_BIT(TCCR1A,COM1A1);CLR_BIT(TCCR1A,COM1B0);SET_BIT(TCCR1A,COM1B1); break;
    41f4:	af e4       	ldi	r26, 0x4F	; 79
    41f6:	b0 e0       	ldi	r27, 0x00	; 0
    41f8:	ef e4       	ldi	r30, 0x4F	; 79
    41fa:	f0 e0       	ldi	r31, 0x00	; 0
    41fc:	80 81       	ld	r24, Z
    41fe:	8f 7b       	andi	r24, 0xBF	; 191
    4200:	8c 93       	st	X, r24
    4202:	af e4       	ldi	r26, 0x4F	; 79
    4204:	b0 e0       	ldi	r27, 0x00	; 0
    4206:	ef e4       	ldi	r30, 0x4F	; 79
    4208:	f0 e0       	ldi	r31, 0x00	; 0
    420a:	80 81       	ld	r24, Z
    420c:	80 68       	ori	r24, 0x80	; 128
    420e:	8c 93       	st	X, r24
    4210:	af e4       	ldi	r26, 0x4F	; 79
    4212:	b0 e0       	ldi	r27, 0x00	; 0
    4214:	ef e4       	ldi	r30, 0x4F	; 79
    4216:	f0 e0       	ldi	r31, 0x00	; 0
    4218:	80 81       	ld	r24, Z
    421a:	8f 7e       	andi	r24, 0xEF	; 239
    421c:	8c 93       	st	X, r24
    421e:	af e4       	ldi	r26, 0x4F	; 79
    4220:	b0 e0       	ldi	r27, 0x00	; 0
    4222:	ef e4       	ldi	r30, 0x4F	; 79
    4224:	f0 e0       	ldi	r31, 0x00	; 0
    4226:	80 81       	ld	r24, Z
    4228:	80 62       	ori	r24, 0x20	; 32
    422a:	8c 93       	st	X, r24
    422c:	1c c0       	rjmp	.+56     	; 0x4266 <Timer1_voidInit+0x196>
			case OC_set: SET_BIT(TCCR1A,COM1A0);SET_BIT(TCCR1A,COM1A1);SET_BIT(TCCR1A,COM1B0);SET_BIT(TCCR1A,COM1B1); break;
    422e:	af e4       	ldi	r26, 0x4F	; 79
    4230:	b0 e0       	ldi	r27, 0x00	; 0
    4232:	ef e4       	ldi	r30, 0x4F	; 79
    4234:	f0 e0       	ldi	r31, 0x00	; 0
    4236:	80 81       	ld	r24, Z
    4238:	80 64       	ori	r24, 0x40	; 64
    423a:	8c 93       	st	X, r24
    423c:	af e4       	ldi	r26, 0x4F	; 79
    423e:	b0 e0       	ldi	r27, 0x00	; 0
    4240:	ef e4       	ldi	r30, 0x4F	; 79
    4242:	f0 e0       	ldi	r31, 0x00	; 0
    4244:	80 81       	ld	r24, Z
    4246:	80 68       	ori	r24, 0x80	; 128
    4248:	8c 93       	st	X, r24
    424a:	af e4       	ldi	r26, 0x4F	; 79
    424c:	b0 e0       	ldi	r27, 0x00	; 0
    424e:	ef e4       	ldi	r30, 0x4F	; 79
    4250:	f0 e0       	ldi	r31, 0x00	; 0
    4252:	80 81       	ld	r24, Z
    4254:	80 61       	ori	r24, 0x10	; 16
    4256:	8c 93       	st	X, r24
    4258:	af e4       	ldi	r26, 0x4F	; 79
    425a:	b0 e0       	ldi	r27, 0x00	; 0
    425c:	ef e4       	ldi	r30, 0x4F	; 79
    425e:	f0 e0       	ldi	r31, 0x00	; 0
    4260:	80 81       	ld	r24, Z
    4262:	80 62       	ori	r24, 0x20	; 32
    4264:	8c 93       	st	X, r24


			}

			/*Set prescaler*/
			TCCR1B &=CLK_MASK;
    4266:	ae e4       	ldi	r26, 0x4E	; 78
    4268:	b0 e0       	ldi	r27, 0x00	; 0
    426a:	ee e4       	ldi	r30, 0x4E	; 78
    426c:	f0 e0       	ldi	r31, 0x00	; 0
    426e:	80 81       	ld	r24, Z
    4270:	88 7f       	andi	r24, 0xF8	; 248
    4272:	8c 93       	st	X, r24
			TCCR1B|= Copy_pstTimerconfig->CLK;
    4274:	ae e4       	ldi	r26, 0x4E	; 78
    4276:	b0 e0       	ldi	r27, 0x00	; 0
    4278:	ee e4       	ldi	r30, 0x4E	; 78
    427a:	f0 e0       	ldi	r31, 0x00	; 0
    427c:	90 81       	ld	r25, Z
    427e:	ea 81       	ldd	r30, Y+2	; 0x02
    4280:	fb 81       	ldd	r31, Y+3	; 0x03
    4282:	81 81       	ldd	r24, Z+1	; 0x01
    4284:	89 2b       	or	r24, r25
    4286:	8c 93       	st	X, r24
    4288:	02 c0       	rjmp	.+4      	; 0x428e <Timer1_voidInit+0x1be>
		}
		else

		{
			Local_u8ErrorState=NULL_PTR_ERR;
    428a:	82 e0       	ldi	r24, 0x02	; 2
    428c:	89 83       	std	Y+1, r24	; 0x01

		}

	 return Local_u8ErrorState;
    428e:	89 81       	ldd	r24, Y+1	; 0x01


}
    4290:	0f 90       	pop	r0
    4292:	0f 90       	pop	r0
    4294:	0f 90       	pop	r0
    4296:	0f 90       	pop	r0
    4298:	0f 90       	pop	r0
    429a:	cf 91       	pop	r28
    429c:	df 91       	pop	r29
    429e:	08 95       	ret

000042a0 <Timer1_voidSetPreloadValue>:
void Timer1_voidSetPreloadValue(uint16 Copy_u16PreloadVal)
{
    42a0:	df 93       	push	r29
    42a2:	cf 93       	push	r28
    42a4:	00 d0       	rcall	.+0      	; 0x42a6 <Timer1_voidSetPreloadValue+0x6>
    42a6:	cd b7       	in	r28, 0x3d	; 61
    42a8:	de b7       	in	r29, 0x3e	; 62
    42aa:	9a 83       	std	Y+2, r25	; 0x02
    42ac:	89 83       	std	Y+1, r24	; 0x01
	TCNT1=Copy_u16PreloadVal;
    42ae:	ec e4       	ldi	r30, 0x4C	; 76
    42b0:	f0 e0       	ldi	r31, 0x00	; 0
    42b2:	89 81       	ldd	r24, Y+1	; 0x01
    42b4:	9a 81       	ldd	r25, Y+2	; 0x02
    42b6:	91 83       	std	Z+1, r25	; 0x01
    42b8:	80 83       	st	Z, r24
}
    42ba:	0f 90       	pop	r0
    42bc:	0f 90       	pop	r0
    42be:	cf 91       	pop	r28
    42c0:	df 91       	pop	r29
    42c2:	08 95       	ret

000042c4 <Timer1_u8SetCompareMatchValue>:
uint8 Timer1_u8SetCompareMatchValue(Timer1_comp_Reg_t Copy_enuRegister , uint16 Copy_u16CompareMatchValue)
{
    42c4:	df 93       	push	r29
    42c6:	cf 93       	push	r28
    42c8:	00 d0       	rcall	.+0      	; 0x42ca <Timer1_u8SetCompareMatchValue+0x6>
    42ca:	00 d0       	rcall	.+0      	; 0x42cc <Timer1_u8SetCompareMatchValue+0x8>
    42cc:	00 d0       	rcall	.+0      	; 0x42ce <Timer1_u8SetCompareMatchValue+0xa>
    42ce:	cd b7       	in	r28, 0x3d	; 61
    42d0:	de b7       	in	r29, 0x3e	; 62
    42d2:	8a 83       	std	Y+2, r24	; 0x02
    42d4:	7c 83       	std	Y+4, r23	; 0x04
    42d6:	6b 83       	std	Y+3, r22	; 0x03
   uint8 Local_ErrorState= OK;
    42d8:	19 82       	std	Y+1, r1	; 0x01
   switch(Copy_enuRegister)
    42da:	8a 81       	ldd	r24, Y+2	; 0x02
    42dc:	28 2f       	mov	r18, r24
    42de:	30 e0       	ldi	r19, 0x00	; 0
    42e0:	3e 83       	std	Y+6, r19	; 0x06
    42e2:	2d 83       	std	Y+5, r18	; 0x05
    42e4:	8d 81       	ldd	r24, Y+5	; 0x05
    42e6:	9e 81       	ldd	r25, Y+6	; 0x06
    42e8:	00 97       	sbiw	r24, 0x00	; 0
    42ea:	31 f0       	breq	.+12     	; 0x42f8 <Timer1_u8SetCompareMatchValue+0x34>
    42ec:	2d 81       	ldd	r18, Y+5	; 0x05
    42ee:	3e 81       	ldd	r19, Y+6	; 0x06
    42f0:	21 30       	cpi	r18, 0x01	; 1
    42f2:	31 05       	cpc	r19, r1
    42f4:	41 f0       	breq	.+16     	; 0x4306 <Timer1_u8SetCompareMatchValue+0x42>
    42f6:	0e c0       	rjmp	.+28     	; 0x4314 <Timer1_u8SetCompareMatchValue+0x50>
   {
   case OCR1A_REG:OCR1A=Copy_u16CompareMatchValue; break;
    42f8:	ea e4       	ldi	r30, 0x4A	; 74
    42fa:	f0 e0       	ldi	r31, 0x00	; 0
    42fc:	8b 81       	ldd	r24, Y+3	; 0x03
    42fe:	9c 81       	ldd	r25, Y+4	; 0x04
    4300:	91 83       	std	Z+1, r25	; 0x01
    4302:	80 83       	st	Z, r24
    4304:	09 c0       	rjmp	.+18     	; 0x4318 <Timer1_u8SetCompareMatchValue+0x54>
   case OCR1B_REG: OCR1B=Copy_u16CompareMatchValue; break;
    4306:	e8 e4       	ldi	r30, 0x48	; 72
    4308:	f0 e0       	ldi	r31, 0x00	; 0
    430a:	8b 81       	ldd	r24, Y+3	; 0x03
    430c:	9c 81       	ldd	r25, Y+4	; 0x04
    430e:	91 83       	std	Z+1, r25	; 0x01
    4310:	80 83       	st	Z, r24
    4312:	02 c0       	rjmp	.+4      	; 0x4318 <Timer1_u8SetCompareMatchValue+0x54>
   default : Local_ErrorState=NOK ; break;
    4314:	81 e0       	ldi	r24, 0x01	; 1
    4316:	89 83       	std	Y+1, r24	; 0x01

   }
   return Local_ErrorState;
    4318:	89 81       	ldd	r24, Y+1	; 0x01
}
    431a:	26 96       	adiw	r28, 0x06	; 6
    431c:	0f b6       	in	r0, 0x3f	; 63
    431e:	f8 94       	cli
    4320:	de bf       	out	0x3e, r29	; 62
    4322:	0f be       	out	0x3f, r0	; 63
    4324:	cd bf       	out	0x3d, r28	; 61
    4326:	cf 91       	pop	r28
    4328:	df 91       	pop	r29
    432a:	08 95       	ret

0000432c <Timer1_GetCompareMatch>:
uint8 Timer1_GetCompareMatch()
{
    432c:	df 93       	push	r29
    432e:	cf 93       	push	r28
    4330:	cd b7       	in	r28, 0x3d	; 61
    4332:	de b7       	in	r29, 0x3e	; 62

 return TCNT1;
    4334:	ec e4       	ldi	r30, 0x4C	; 76
    4336:	f0 e0       	ldi	r31, 0x00	; 0
    4338:	80 81       	ld	r24, Z
    433a:	91 81       	ldd	r25, Z+1	; 0x01
}
    433c:	cf 91       	pop	r28
    433e:	df 91       	pop	r29
    4340:	08 95       	ret

00004342 <Timer1_voidSetPrescaler>:
void Timer1_voidSetPrescaler(Timer0_1_prescaler_t Copy_enPrescaler)
{
    4342:	df 93       	push	r29
    4344:	cf 93       	push	r28
    4346:	0f 92       	push	r0
    4348:	cd b7       	in	r28, 0x3d	; 61
    434a:	de b7       	in	r29, 0x3e	; 62
    434c:	89 83       	std	Y+1, r24	; 0x01

	TCCR1B &=CLK_MASK;
    434e:	ae e4       	ldi	r26, 0x4E	; 78
    4350:	b0 e0       	ldi	r27, 0x00	; 0
    4352:	ee e4       	ldi	r30, 0x4E	; 78
    4354:	f0 e0       	ldi	r31, 0x00	; 0
    4356:	80 81       	ld	r24, Z
    4358:	88 7f       	andi	r24, 0xF8	; 248
    435a:	8c 93       	st	X, r24
	TCCR1B|=Copy_enPrescaler ;
    435c:	ae e4       	ldi	r26, 0x4E	; 78
    435e:	b0 e0       	ldi	r27, 0x00	; 0
    4360:	ee e4       	ldi	r30, 0x4E	; 78
    4362:	f0 e0       	ldi	r31, 0x00	; 0
    4364:	90 81       	ld	r25, Z
    4366:	89 81       	ldd	r24, Y+1	; 0x01
    4368:	89 2b       	or	r24, r25
    436a:	8c 93       	st	X, r24


}
    436c:	0f 90       	pop	r0
    436e:	cf 91       	pop	r28
    4370:	df 91       	pop	r29
    4372:	08 95       	ret

00004374 <Timer1_voidSetWaveGenerationMode>:
void Timer1_voidSetWaveGenerationMode(TIMER_WGM_t Copy_enuWGM)
{  TCCR1A &= T1_WGMA_MASK;
    4374:	df 93       	push	r29
    4376:	cf 93       	push	r28
    4378:	0f 92       	push	r0
    437a:	cd b7       	in	r28, 0x3d	; 61
    437c:	de b7       	in	r29, 0x3e	; 62
    437e:	89 83       	std	Y+1, r24	; 0x01
    4380:	af e4       	ldi	r26, 0x4F	; 79
    4382:	b0 e0       	ldi	r27, 0x00	; 0
    4384:	ef e4       	ldi	r30, 0x4F	; 79
    4386:	f0 e0       	ldi	r31, 0x00	; 0
    4388:	80 81       	ld	r24, Z
    438a:	8c 7f       	andi	r24, 0xFC	; 252
    438c:	8c 93       	st	X, r24
   TCCR1A|= (Copy_enuWGM & T1_WGM_VALUE_MASK_A);
    438e:	af e4       	ldi	r26, 0x4F	; 79
    4390:	b0 e0       	ldi	r27, 0x00	; 0
    4392:	ef e4       	ldi	r30, 0x4F	; 79
    4394:	f0 e0       	ldi	r31, 0x00	; 0
    4396:	80 81       	ld	r24, Z
    4398:	98 2f       	mov	r25, r24
    439a:	89 81       	ldd	r24, Y+1	; 0x01
    439c:	83 70       	andi	r24, 0x03	; 3
    439e:	89 2b       	or	r24, r25
    43a0:	8c 93       	st	X, r24

   TCCR1B &= T1_WGMB_MASK;
    43a2:	ae e4       	ldi	r26, 0x4E	; 78
    43a4:	b0 e0       	ldi	r27, 0x00	; 0
    43a6:	ee e4       	ldi	r30, 0x4E	; 78
    43a8:	f0 e0       	ldi	r31, 0x00	; 0
    43aa:	80 81       	ld	r24, Z
    43ac:	87 7e       	andi	r24, 0xE7	; 231
    43ae:	8c 93       	st	X, r24
      TCCR1B|= (Copy_enuWGM & T1_WGM_VALUE_MASK_B);
    43b0:	ae e4       	ldi	r26, 0x4E	; 78
    43b2:	b0 e0       	ldi	r27, 0x00	; 0
    43b4:	ee e4       	ldi	r30, 0x4E	; 78
    43b6:	f0 e0       	ldi	r31, 0x00	; 0
    43b8:	80 81       	ld	r24, Z
    43ba:	98 2f       	mov	r25, r24
    43bc:	89 81       	ldd	r24, Y+1	; 0x01
    43be:	88 71       	andi	r24, 0x18	; 24
    43c0:	89 2b       	or	r24, r25
    43c2:	8c 93       	st	X, r24


}
    43c4:	0f 90       	pop	r0
    43c6:	cf 91       	pop	r28
    43c8:	df 91       	pop	r29
    43ca:	08 95       	ret

000043cc <Timer1_voidSetOutputCompareMode>:
void Timer1_voidSetOutputCompareMode(Timer_OC_Mode_t Copy_enuOCM)
{
    43cc:	df 93       	push	r29
    43ce:	cf 93       	push	r28
    43d0:	00 d0       	rcall	.+0      	; 0x43d2 <Timer1_voidSetOutputCompareMode+0x6>
    43d2:	0f 92       	push	r0
    43d4:	cd b7       	in	r28, 0x3d	; 61
    43d6:	de b7       	in	r29, 0x3e	; 62
    43d8:	89 83       	std	Y+1, r24	; 0x01
	 switch(Copy_enuOCM){
    43da:	89 81       	ldd	r24, Y+1	; 0x01
    43dc:	28 2f       	mov	r18, r24
    43de:	30 e0       	ldi	r19, 0x00	; 0
    43e0:	3b 83       	std	Y+3, r19	; 0x03
    43e2:	2a 83       	std	Y+2, r18	; 0x02
    43e4:	8a 81       	ldd	r24, Y+2	; 0x02
    43e6:	9b 81       	ldd	r25, Y+3	; 0x03
    43e8:	80 31       	cpi	r24, 0x10	; 16
    43ea:	91 05       	cpc	r25, r1
    43ec:	a1 f1       	breq	.+104    	; 0x4456 <Timer1_voidSetOutputCompareMode+0x8a>
    43ee:	2a 81       	ldd	r18, Y+2	; 0x02
    43f0:	3b 81       	ldd	r19, Y+3	; 0x03
    43f2:	21 31       	cpi	r18, 0x11	; 17
    43f4:	31 05       	cpc	r19, r1
    43f6:	2c f4       	brge	.+10     	; 0x4402 <Timer1_voidSetOutputCompareMode+0x36>
    43f8:	8a 81       	ldd	r24, Y+2	; 0x02
    43fa:	9b 81       	ldd	r25, Y+3	; 0x03
    43fc:	00 97       	sbiw	r24, 0x00	; 0
    43fe:	71 f0       	breq	.+28     	; 0x441c <Timer1_voidSetOutputCompareMode+0x50>
    4400:	80 c0       	rjmp	.+256    	; 0x4502 <Timer1_voidSetOutputCompareMode+0x136>
    4402:	2a 81       	ldd	r18, Y+2	; 0x02
    4404:	3b 81       	ldd	r19, Y+3	; 0x03
    4406:	20 32       	cpi	r18, 0x20	; 32
    4408:	31 05       	cpc	r19, r1
    440a:	09 f4       	brne	.+2      	; 0x440e <Timer1_voidSetOutputCompareMode+0x42>
    440c:	41 c0       	rjmp	.+130    	; 0x4490 <Timer1_voidSetOutputCompareMode+0xc4>
    440e:	8a 81       	ldd	r24, Y+2	; 0x02
    4410:	9b 81       	ldd	r25, Y+3	; 0x03
    4412:	80 33       	cpi	r24, 0x30	; 48
    4414:	91 05       	cpc	r25, r1
    4416:	09 f4       	brne	.+2      	; 0x441a <Timer1_voidSetOutputCompareMode+0x4e>
    4418:	58 c0       	rjmp	.+176    	; 0x44ca <Timer1_voidSetOutputCompareMode+0xfe>
    441a:	73 c0       	rjmp	.+230    	; 0x4502 <Timer1_voidSetOutputCompareMode+0x136>
	case OC_Disconnect: CLR_BIT(TCCR1A,COM1A0);CLR_BIT(TCCR1A,COM1A1);CLR_BIT(TCCR1A,COM1B0);CLR_BIT(TCCR1A,COM1B1); break;
    441c:	af e4       	ldi	r26, 0x4F	; 79
    441e:	b0 e0       	ldi	r27, 0x00	; 0
    4420:	ef e4       	ldi	r30, 0x4F	; 79
    4422:	f0 e0       	ldi	r31, 0x00	; 0
    4424:	80 81       	ld	r24, Z
    4426:	8f 7b       	andi	r24, 0xBF	; 191
    4428:	8c 93       	st	X, r24
    442a:	af e4       	ldi	r26, 0x4F	; 79
    442c:	b0 e0       	ldi	r27, 0x00	; 0
    442e:	ef e4       	ldi	r30, 0x4F	; 79
    4430:	f0 e0       	ldi	r31, 0x00	; 0
    4432:	80 81       	ld	r24, Z
    4434:	8f 77       	andi	r24, 0x7F	; 127
    4436:	8c 93       	st	X, r24
    4438:	af e4       	ldi	r26, 0x4F	; 79
    443a:	b0 e0       	ldi	r27, 0x00	; 0
    443c:	ef e4       	ldi	r30, 0x4F	; 79
    443e:	f0 e0       	ldi	r31, 0x00	; 0
    4440:	80 81       	ld	r24, Z
    4442:	8f 7e       	andi	r24, 0xEF	; 239
    4444:	8c 93       	st	X, r24
    4446:	af e4       	ldi	r26, 0x4F	; 79
    4448:	b0 e0       	ldi	r27, 0x00	; 0
    444a:	ef e4       	ldi	r30, 0x4F	; 79
    444c:	f0 e0       	ldi	r31, 0x00	; 0
    444e:	80 81       	ld	r24, Z
    4450:	8f 7d       	andi	r24, 0xDF	; 223
    4452:	8c 93       	st	X, r24
    4454:	56 c0       	rjmp	.+172    	; 0x4502 <Timer1_voidSetOutputCompareMode+0x136>
	case OC_toggle:  SET_BIT(TCCR1A,COM1A0);CLR_BIT(TCCR1A,COM1A1);SET_BIT(TCCR1A,COM1B0);CLR_BIT(TCCR1A,COM1B1); break;
    4456:	af e4       	ldi	r26, 0x4F	; 79
    4458:	b0 e0       	ldi	r27, 0x00	; 0
    445a:	ef e4       	ldi	r30, 0x4F	; 79
    445c:	f0 e0       	ldi	r31, 0x00	; 0
    445e:	80 81       	ld	r24, Z
    4460:	80 64       	ori	r24, 0x40	; 64
    4462:	8c 93       	st	X, r24
    4464:	af e4       	ldi	r26, 0x4F	; 79
    4466:	b0 e0       	ldi	r27, 0x00	; 0
    4468:	ef e4       	ldi	r30, 0x4F	; 79
    446a:	f0 e0       	ldi	r31, 0x00	; 0
    446c:	80 81       	ld	r24, Z
    446e:	8f 77       	andi	r24, 0x7F	; 127
    4470:	8c 93       	st	X, r24
    4472:	af e4       	ldi	r26, 0x4F	; 79
    4474:	b0 e0       	ldi	r27, 0x00	; 0
    4476:	ef e4       	ldi	r30, 0x4F	; 79
    4478:	f0 e0       	ldi	r31, 0x00	; 0
    447a:	80 81       	ld	r24, Z
    447c:	80 61       	ori	r24, 0x10	; 16
    447e:	8c 93       	st	X, r24
    4480:	af e4       	ldi	r26, 0x4F	; 79
    4482:	b0 e0       	ldi	r27, 0x00	; 0
    4484:	ef e4       	ldi	r30, 0x4F	; 79
    4486:	f0 e0       	ldi	r31, 0x00	; 0
    4488:	80 81       	ld	r24, Z
    448a:	8f 7d       	andi	r24, 0xDF	; 223
    448c:	8c 93       	st	X, r24
    448e:	39 c0       	rjmp	.+114    	; 0x4502 <Timer1_voidSetOutputCompareMode+0x136>
	case OC_clr: CLR_BIT(TCCR1A,COM1A0);SET_BIT(TCCR1A,COM1A1);CLR_BIT(TCCR1A,COM1B0);SET_BIT(TCCR1A,COM1B1); break;
    4490:	af e4       	ldi	r26, 0x4F	; 79
    4492:	b0 e0       	ldi	r27, 0x00	; 0
    4494:	ef e4       	ldi	r30, 0x4F	; 79
    4496:	f0 e0       	ldi	r31, 0x00	; 0
    4498:	80 81       	ld	r24, Z
    449a:	8f 7b       	andi	r24, 0xBF	; 191
    449c:	8c 93       	st	X, r24
    449e:	af e4       	ldi	r26, 0x4F	; 79
    44a0:	b0 e0       	ldi	r27, 0x00	; 0
    44a2:	ef e4       	ldi	r30, 0x4F	; 79
    44a4:	f0 e0       	ldi	r31, 0x00	; 0
    44a6:	80 81       	ld	r24, Z
    44a8:	80 68       	ori	r24, 0x80	; 128
    44aa:	8c 93       	st	X, r24
    44ac:	af e4       	ldi	r26, 0x4F	; 79
    44ae:	b0 e0       	ldi	r27, 0x00	; 0
    44b0:	ef e4       	ldi	r30, 0x4F	; 79
    44b2:	f0 e0       	ldi	r31, 0x00	; 0
    44b4:	80 81       	ld	r24, Z
    44b6:	8f 7e       	andi	r24, 0xEF	; 239
    44b8:	8c 93       	st	X, r24
    44ba:	af e4       	ldi	r26, 0x4F	; 79
    44bc:	b0 e0       	ldi	r27, 0x00	; 0
    44be:	ef e4       	ldi	r30, 0x4F	; 79
    44c0:	f0 e0       	ldi	r31, 0x00	; 0
    44c2:	80 81       	ld	r24, Z
    44c4:	80 62       	ori	r24, 0x20	; 32
    44c6:	8c 93       	st	X, r24
    44c8:	1c c0       	rjmp	.+56     	; 0x4502 <Timer1_voidSetOutputCompareMode+0x136>
	case OC_set: SET_BIT(TCCR1A,COM1A0);SET_BIT(TCCR1A,COM1A1);SET_BIT(TCCR1A,COM1B0);SET_BIT(TCCR1A,COM1B1); break;
    44ca:	af e4       	ldi	r26, 0x4F	; 79
    44cc:	b0 e0       	ldi	r27, 0x00	; 0
    44ce:	ef e4       	ldi	r30, 0x4F	; 79
    44d0:	f0 e0       	ldi	r31, 0x00	; 0
    44d2:	80 81       	ld	r24, Z
    44d4:	80 64       	ori	r24, 0x40	; 64
    44d6:	8c 93       	st	X, r24
    44d8:	af e4       	ldi	r26, 0x4F	; 79
    44da:	b0 e0       	ldi	r27, 0x00	; 0
    44dc:	ef e4       	ldi	r30, 0x4F	; 79
    44de:	f0 e0       	ldi	r31, 0x00	; 0
    44e0:	80 81       	ld	r24, Z
    44e2:	80 68       	ori	r24, 0x80	; 128
    44e4:	8c 93       	st	X, r24
    44e6:	af e4       	ldi	r26, 0x4F	; 79
    44e8:	b0 e0       	ldi	r27, 0x00	; 0
    44ea:	ef e4       	ldi	r30, 0x4F	; 79
    44ec:	f0 e0       	ldi	r31, 0x00	; 0
    44ee:	80 81       	ld	r24, Z
    44f0:	80 61       	ori	r24, 0x10	; 16
    44f2:	8c 93       	st	X, r24
    44f4:	af e4       	ldi	r26, 0x4F	; 79
    44f6:	b0 e0       	ldi	r27, 0x00	; 0
    44f8:	ef e4       	ldi	r30, 0x4F	; 79
    44fa:	f0 e0       	ldi	r31, 0x00	; 0
    44fc:	80 81       	ld	r24, Z
    44fe:	80 62       	ori	r24, 0x20	; 32
    4500:	8c 93       	st	X, r24
	 }
}
    4502:	0f 90       	pop	r0
    4504:	0f 90       	pop	r0
    4506:	0f 90       	pop	r0
    4508:	cf 91       	pop	r28
    450a:	df 91       	pop	r29
    450c:	08 95       	ret

0000450e <ICU_voidSetTriggerEvent>:

/*Input captrue unit function*/
void ICU_voidSetTriggerEvent(ICU_TRIGGER_t Copy_enuTriggerEvent)
{
    450e:	df 93       	push	r29
    4510:	cf 93       	push	r28
    4512:	00 d0       	rcall	.+0      	; 0x4514 <ICU_voidSetTriggerEvent+0x6>
    4514:	0f 92       	push	r0
    4516:	cd b7       	in	r28, 0x3d	; 61
    4518:	de b7       	in	r29, 0x3e	; 62
    451a:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_enuTriggerEvent)
    451c:	89 81       	ldd	r24, Y+1	; 0x01
    451e:	28 2f       	mov	r18, r24
    4520:	30 e0       	ldi	r19, 0x00	; 0
    4522:	3b 83       	std	Y+3, r19	; 0x03
    4524:	2a 83       	std	Y+2, r18	; 0x02
    4526:	8a 81       	ldd	r24, Y+2	; 0x02
    4528:	9b 81       	ldd	r25, Y+3	; 0x03
    452a:	00 97       	sbiw	r24, 0x00	; 0
    452c:	31 f0       	breq	.+12     	; 0x453a <ICU_voidSetTriggerEvent+0x2c>
    452e:	2a 81       	ldd	r18, Y+2	; 0x02
    4530:	3b 81       	ldd	r19, Y+3	; 0x03
    4532:	21 30       	cpi	r18, 0x01	; 1
    4534:	31 05       	cpc	r19, r1
    4536:	49 f0       	breq	.+18     	; 0x454a <ICU_voidSetTriggerEvent+0x3c>
    4538:	0f c0       	rjmp	.+30     	; 0x4558 <ICU_voidSetTriggerEvent+0x4a>
	{
	case 	ICU_RISING_EDGE: SET_BIT(TCCR1B,ICES1); break;
    453a:	ae e4       	ldi	r26, 0x4E	; 78
    453c:	b0 e0       	ldi	r27, 0x00	; 0
    453e:	ee e4       	ldi	r30, 0x4E	; 78
    4540:	f0 e0       	ldi	r31, 0x00	; 0
    4542:	80 81       	ld	r24, Z
    4544:	80 64       	ori	r24, 0x40	; 64
    4546:	8c 93       	st	X, r24
    4548:	07 c0       	rjmp	.+14     	; 0x4558 <ICU_voidSetTriggerEvent+0x4a>
	case ICU_FALLING_EDGE: CLR_BIT(TCCR1B, ICES1); break;
    454a:	ae e4       	ldi	r26, 0x4E	; 78
    454c:	b0 e0       	ldi	r27, 0x00	; 0
    454e:	ee e4       	ldi	r30, 0x4E	; 78
    4550:	f0 e0       	ldi	r31, 0x00	; 0
    4552:	80 81       	ld	r24, Z
    4554:	8f 7b       	andi	r24, 0xBF	; 191
    4556:	8c 93       	st	X, r24
	}

}
    4558:	0f 90       	pop	r0
    455a:	0f 90       	pop	r0
    455c:	0f 90       	pop	r0
    455e:	cf 91       	pop	r28
    4560:	df 91       	pop	r29
    4562:	08 95       	ret

00004564 <ICU_u16GetReading>:
uint16 ICU_u16GetReading()
{
    4564:	df 93       	push	r29
    4566:	cf 93       	push	r28
    4568:	cd b7       	in	r28, 0x3d	; 61
    456a:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    456c:	e6 e4       	ldi	r30, 0x46	; 70
    456e:	f0 e0       	ldi	r31, 0x00	; 0
    4570:	80 81       	ld	r24, Z
    4572:	91 81       	ldd	r25, Z+1	; 0x01
}
    4574:	cf 91       	pop	r28
    4576:	df 91       	pop	r29
    4578:	08 95       	ret

0000457a <Timer2_voidInit>:

/*Timer 2 */
uint8 Timer2_voidInit(Timer1_Config_t * Copy_pstTimerconfig)
{
    457a:	df 93       	push	r29
    457c:	cf 93       	push	r28
    457e:	00 d0       	rcall	.+0      	; 0x4580 <Timer2_voidInit+0x6>
    4580:	0f 92       	push	r0
    4582:	cd b7       	in	r28, 0x3d	; 61
    4584:	de b7       	in	r29, 0x3e	; 62
    4586:	9b 83       	std	Y+3, r25	; 0x03
    4588:	8a 83       	std	Y+2, r24	; 0x02

	uint8 Local_u8ErrorState = OK;
    458a:	19 82       	std	Y+1, r1	; 0x01

		if(Copy_pstTimerconfig!= NULL)
    458c:	8a 81       	ldd	r24, Y+2	; 0x02
    458e:	9b 81       	ldd	r25, Y+3	; 0x03
    4590:	00 97       	sbiw	r24, 0x00	; 0
    4592:	a1 f1       	breq	.+104    	; 0x45fc <Timer2_voidInit+0x82>
		{
			/*Set Waveform generation mode*/
			TCCR2 &= T0_2_WGM_MASK;
    4594:	a5 e4       	ldi	r26, 0x45	; 69
    4596:	b0 e0       	ldi	r27, 0x00	; 0
    4598:	e5 e4       	ldi	r30, 0x45	; 69
    459a:	f0 e0       	ldi	r31, 0x00	; 0
    459c:	80 81       	ld	r24, Z
    459e:	87 7b       	andi	r24, 0xB7	; 183
    45a0:	8c 93       	st	X, r24
			TCCR2 |= Copy_pstTimerconfig->WGM;
    45a2:	a5 e4       	ldi	r26, 0x45	; 69
    45a4:	b0 e0       	ldi	r27, 0x00	; 0
    45a6:	e5 e4       	ldi	r30, 0x45	; 69
    45a8:	f0 e0       	ldi	r31, 0x00	; 0
    45aa:	90 81       	ld	r25, Z
    45ac:	ea 81       	ldd	r30, Y+2	; 0x02
    45ae:	fb 81       	ldd	r31, Y+3	; 0x03
    45b0:	80 81       	ld	r24, Z
    45b2:	89 2b       	or	r24, r25
    45b4:	8c 93       	st	X, r24

			/*Set Output Compare Mode*/
			TCCR2 &= T0_2_OCM_MASK;
    45b6:	a5 e4       	ldi	r26, 0x45	; 69
    45b8:	b0 e0       	ldi	r27, 0x00	; 0
    45ba:	e5 e4       	ldi	r30, 0x45	; 69
    45bc:	f0 e0       	ldi	r31, 0x00	; 0
    45be:	80 81       	ld	r24, Z
    45c0:	8f 7c       	andi	r24, 0xCF	; 207
    45c2:	8c 93       	st	X, r24
			TCCR2 |= Copy_pstTimerconfig->OC_Mode;
    45c4:	a5 e4       	ldi	r26, 0x45	; 69
    45c6:	b0 e0       	ldi	r27, 0x00	; 0
    45c8:	e5 e4       	ldi	r30, 0x45	; 69
    45ca:	f0 e0       	ldi	r31, 0x00	; 0
    45cc:	90 81       	ld	r25, Z
    45ce:	ea 81       	ldd	r30, Y+2	; 0x02
    45d0:	fb 81       	ldd	r31, Y+3	; 0x03
    45d2:	82 81       	ldd	r24, Z+2	; 0x02
    45d4:	89 2b       	or	r24, r25
    45d6:	8c 93       	st	X, r24

			/*Set prescaler*/
			TCCR2 &= CLK_MASK;
    45d8:	a5 e4       	ldi	r26, 0x45	; 69
    45da:	b0 e0       	ldi	r27, 0x00	; 0
    45dc:	e5 e4       	ldi	r30, 0x45	; 69
    45de:	f0 e0       	ldi	r31, 0x00	; 0
    45e0:	80 81       	ld	r24, Z
    45e2:	88 7f       	andi	r24, 0xF8	; 248
    45e4:	8c 93       	st	X, r24
			TCCR2 |= Copy_pstTimerconfig->CLK;
    45e6:	a5 e4       	ldi	r26, 0x45	; 69
    45e8:	b0 e0       	ldi	r27, 0x00	; 0
    45ea:	e5 e4       	ldi	r30, 0x45	; 69
    45ec:	f0 e0       	ldi	r31, 0x00	; 0
    45ee:	90 81       	ld	r25, Z
    45f0:	ea 81       	ldd	r30, Y+2	; 0x02
    45f2:	fb 81       	ldd	r31, Y+3	; 0x03
    45f4:	81 81       	ldd	r24, Z+1	; 0x01
    45f6:	89 2b       	or	r24, r25
    45f8:	8c 93       	st	X, r24
    45fa:	02 c0       	rjmp	.+4      	; 0x4600 <Timer2_voidInit+0x86>
		}
		else
		{
			Local_u8ErrorState = NULL_PTR_ERR;
    45fc:	82 e0       	ldi	r24, 0x02	; 2
    45fe:	89 83       	std	Y+1, r24	; 0x01
		}

		return Local_u8ErrorState;
    4600:	89 81       	ldd	r24, Y+1	; 0x01
}
    4602:	0f 90       	pop	r0
    4604:	0f 90       	pop	r0
    4606:	0f 90       	pop	r0
    4608:	cf 91       	pop	r28
    460a:	df 91       	pop	r29
    460c:	08 95       	ret

0000460e <Timer2_voidSetPreloadValue>:
void Timer2_voidSetPreloadValue(uint8 Copy_u8PreloadVal)
{
    460e:	df 93       	push	r29
    4610:	cf 93       	push	r28
    4612:	0f 92       	push	r0
    4614:	cd b7       	in	r28, 0x3d	; 61
    4616:	de b7       	in	r29, 0x3e	; 62
    4618:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 = Copy_u8PreloadVal;
    461a:	e4 e4       	ldi	r30, 0x44	; 68
    461c:	f0 e0       	ldi	r31, 0x00	; 0
    461e:	89 81       	ldd	r24, Y+1	; 0x01
    4620:	80 83       	st	Z, r24
}
    4622:	0f 90       	pop	r0
    4624:	cf 91       	pop	r28
    4626:	df 91       	pop	r29
    4628:	08 95       	ret

0000462a <Timer2_voidSetCompareMatchValue>:
void Timer2_voidSetCompareMatchValue( uint8 Copy_u8CompaareMatchValue)
{
    462a:	df 93       	push	r29
    462c:	cf 93       	push	r28
    462e:	0f 92       	push	r0
    4630:	cd b7       	in	r28, 0x3d	; 61
    4632:	de b7       	in	r29, 0x3e	; 62
    4634:	89 83       	std	Y+1, r24	; 0x01

	OCR2 = Copy_u8CompaareMatchValue;
    4636:	e3 e4       	ldi	r30, 0x43	; 67
    4638:	f0 e0       	ldi	r31, 0x00	; 0
    463a:	89 81       	ldd	r24, Y+1	; 0x01
    463c:	80 83       	st	Z, r24

}
    463e:	0f 90       	pop	r0
    4640:	cf 91       	pop	r28
    4642:	df 91       	pop	r29
    4644:	08 95       	ret

00004646 <Timer2_GetCompareMatch>:

uint8 Timer2_GetCompareMatch()//get timer value
{
    4646:	df 93       	push	r29
    4648:	cf 93       	push	r28
    464a:	cd b7       	in	r28, 0x3d	; 61
    464c:	de b7       	in	r29, 0x3e	; 62
	return TCNT2;
    464e:	e4 e4       	ldi	r30, 0x44	; 68
    4650:	f0 e0       	ldi	r31, 0x00	; 0
    4652:	80 81       	ld	r24, Z

}
    4654:	cf 91       	pop	r28
    4656:	df 91       	pop	r29
    4658:	08 95       	ret

0000465a <Timer2_voidSetPrescaler>:
void Timer2_voidSetPrescaler(Timer2_prescaler_t Copy_enPrescaler)
{
    465a:	df 93       	push	r29
    465c:	cf 93       	push	r28
    465e:	0f 92       	push	r0
    4660:	cd b7       	in	r28, 0x3d	; 61
    4662:	de b7       	in	r29, 0x3e	; 62
    4664:	89 83       	std	Y+1, r24	; 0x01

	TCCR2 &= CLK_MASK;
    4666:	a5 e4       	ldi	r26, 0x45	; 69
    4668:	b0 e0       	ldi	r27, 0x00	; 0
    466a:	e5 e4       	ldi	r30, 0x45	; 69
    466c:	f0 e0       	ldi	r31, 0x00	; 0
    466e:	80 81       	ld	r24, Z
    4670:	88 7f       	andi	r24, 0xF8	; 248
    4672:	8c 93       	st	X, r24
		TCCR2 |= Copy_enPrescaler;
    4674:	a5 e4       	ldi	r26, 0x45	; 69
    4676:	b0 e0       	ldi	r27, 0x00	; 0
    4678:	e5 e4       	ldi	r30, 0x45	; 69
    467a:	f0 e0       	ldi	r31, 0x00	; 0
    467c:	90 81       	ld	r25, Z
    467e:	89 81       	ldd	r24, Y+1	; 0x01
    4680:	89 2b       	or	r24, r25
    4682:	8c 93       	st	X, r24
}
    4684:	0f 90       	pop	r0
    4686:	cf 91       	pop	r28
    4688:	df 91       	pop	r29
    468a:	08 95       	ret

0000468c <Time2_voidSetWaveGenerationMode>:
void Time2_voidSetWaveGenerationMode(TIMER_WGM_t Copy_enuWGM)
{
    468c:	df 93       	push	r29
    468e:	cf 93       	push	r28
    4690:	0f 92       	push	r0
    4692:	cd b7       	in	r28, 0x3d	; 61
    4694:	de b7       	in	r29, 0x3e	; 62
    4696:	89 83       	std	Y+1, r24	; 0x01
	TCCR2 &= T0_2_WGM_MASK;
    4698:	a5 e4       	ldi	r26, 0x45	; 69
    469a:	b0 e0       	ldi	r27, 0x00	; 0
    469c:	e5 e4       	ldi	r30, 0x45	; 69
    469e:	f0 e0       	ldi	r31, 0x00	; 0
    46a0:	80 81       	ld	r24, Z
    46a2:	87 7b       	andi	r24, 0xB7	; 183
    46a4:	8c 93       	st	X, r24
		TCCR2 |= Copy_enuWGM;
    46a6:	a5 e4       	ldi	r26, 0x45	; 69
    46a8:	b0 e0       	ldi	r27, 0x00	; 0
    46aa:	e5 e4       	ldi	r30, 0x45	; 69
    46ac:	f0 e0       	ldi	r31, 0x00	; 0
    46ae:	90 81       	ld	r25, Z
    46b0:	89 81       	ldd	r24, Y+1	; 0x01
    46b2:	89 2b       	or	r24, r25
    46b4:	8c 93       	st	X, r24

}
    46b6:	0f 90       	pop	r0
    46b8:	cf 91       	pop	r28
    46ba:	df 91       	pop	r29
    46bc:	08 95       	ret

000046be <Timer2_voidSetOutputCompareMode>:
void Timer2_voidSetOutputCompareMode(Timer_OC_Mode_t Copy_enuOCM)
{
    46be:	df 93       	push	r29
    46c0:	cf 93       	push	r28
    46c2:	0f 92       	push	r0
    46c4:	cd b7       	in	r28, 0x3d	; 61
    46c6:	de b7       	in	r29, 0x3e	; 62
    46c8:	89 83       	std	Y+1, r24	; 0x01

	TCCR2 &= T0_2_OCM_MASK;
    46ca:	a5 e4       	ldi	r26, 0x45	; 69
    46cc:	b0 e0       	ldi	r27, 0x00	; 0
    46ce:	e5 e4       	ldi	r30, 0x45	; 69
    46d0:	f0 e0       	ldi	r31, 0x00	; 0
    46d2:	80 81       	ld	r24, Z
    46d4:	8f 7c       	andi	r24, 0xCF	; 207
    46d6:	8c 93       	st	X, r24
	TCCR2 |= Copy_enuOCM;
    46d8:	a5 e4       	ldi	r26, 0x45	; 69
    46da:	b0 e0       	ldi	r27, 0x00	; 0
    46dc:	e5 e4       	ldi	r30, 0x45	; 69
    46de:	f0 e0       	ldi	r31, 0x00	; 0
    46e0:	90 81       	ld	r25, Z
    46e2:	89 81       	ldd	r24, Y+1	; 0x01
    46e4:	89 2b       	or	r24, r25
    46e6:	8c 93       	st	X, r24

}
    46e8:	0f 90       	pop	r0
    46ea:	cf 91       	pop	r28
    46ec:	df 91       	pop	r29
    46ee:	08 95       	ret

000046f0 <__vector_11>:

/*TIMER0 Overflow Interrupt ISR*/
__attribute__((signal)) void __vector_11(void);
void __vector_11(void)
{
    46f0:	1f 92       	push	r1
    46f2:	0f 92       	push	r0
    46f4:	0f b6       	in	r0, 0x3f	; 63
    46f6:	0f 92       	push	r0
    46f8:	11 24       	eor	r1, r1
    46fa:	2f 93       	push	r18
    46fc:	3f 93       	push	r19
    46fe:	4f 93       	push	r20
    4700:	5f 93       	push	r21
    4702:	6f 93       	push	r22
    4704:	7f 93       	push	r23
    4706:	8f 93       	push	r24
    4708:	9f 93       	push	r25
    470a:	af 93       	push	r26
    470c:	bf 93       	push	r27
    470e:	ef 93       	push	r30
    4710:	ff 93       	push	r31
    4712:	df 93       	push	r29
    4714:	cf 93       	push	r28
    4716:	cd b7       	in	r28, 0x3d	; 61
    4718:	de b7       	in	r29, 0x3e	; 62
	if(Timer_pvCallBackFunc != NULL)
	{
		Timer_pvCallBackFunc[INT_T0_OVF]();
    471a:	e0 91 68 01 	lds	r30, 0x0168
    471e:	f0 91 69 01 	lds	r31, 0x0169
    4722:	09 95       	icall
	}
}
    4724:	cf 91       	pop	r28
    4726:	df 91       	pop	r29
    4728:	ff 91       	pop	r31
    472a:	ef 91       	pop	r30
    472c:	bf 91       	pop	r27
    472e:	af 91       	pop	r26
    4730:	9f 91       	pop	r25
    4732:	8f 91       	pop	r24
    4734:	7f 91       	pop	r23
    4736:	6f 91       	pop	r22
    4738:	5f 91       	pop	r21
    473a:	4f 91       	pop	r20
    473c:	3f 91       	pop	r19
    473e:	2f 91       	pop	r18
    4740:	0f 90       	pop	r0
    4742:	0f be       	out	0x3f, r0	; 63
    4744:	0f 90       	pop	r0
    4746:	1f 90       	pop	r1
    4748:	18 95       	reti

0000474a <__vector_10>:
/*TIMER0 Output Compare Interrupt ISR*/
__attribute__((signal)) void __vector_10(void);
void __vector_10(void)
{
    474a:	1f 92       	push	r1
    474c:	0f 92       	push	r0
    474e:	0f b6       	in	r0, 0x3f	; 63
    4750:	0f 92       	push	r0
    4752:	11 24       	eor	r1, r1
    4754:	2f 93       	push	r18
    4756:	3f 93       	push	r19
    4758:	4f 93       	push	r20
    475a:	5f 93       	push	r21
    475c:	6f 93       	push	r22
    475e:	7f 93       	push	r23
    4760:	8f 93       	push	r24
    4762:	9f 93       	push	r25
    4764:	af 93       	push	r26
    4766:	bf 93       	push	r27
    4768:	ef 93       	push	r30
    476a:	ff 93       	push	r31
    476c:	df 93       	push	r29
    476e:	cf 93       	push	r28
    4770:	cd b7       	in	r28, 0x3d	; 61
    4772:	de b7       	in	r29, 0x3e	; 62
	if(Timer_pvCallBackFunc != NULL)
	{
		Timer_pvCallBackFunc[INT_T0_OC]();
    4774:	e0 91 6a 01 	lds	r30, 0x016A
    4778:	f0 91 6b 01 	lds	r31, 0x016B
    477c:	09 95       	icall
	}
}
    477e:	cf 91       	pop	r28
    4780:	df 91       	pop	r29
    4782:	ff 91       	pop	r31
    4784:	ef 91       	pop	r30
    4786:	bf 91       	pop	r27
    4788:	af 91       	pop	r26
    478a:	9f 91       	pop	r25
    478c:	8f 91       	pop	r24
    478e:	7f 91       	pop	r23
    4790:	6f 91       	pop	r22
    4792:	5f 91       	pop	r21
    4794:	4f 91       	pop	r20
    4796:	3f 91       	pop	r19
    4798:	2f 91       	pop	r18
    479a:	0f 90       	pop	r0
    479c:	0f be       	out	0x3f, r0	; 63
    479e:	0f 90       	pop	r0
    47a0:	1f 90       	pop	r1
    47a2:	18 95       	reti

000047a4 <__vector_9>:

/*TIMER1 Overflow Interrupt ISR*/
__attribute__((signal)) void __vector_9(void);
void __vector_9(void)
{
    47a4:	1f 92       	push	r1
    47a6:	0f 92       	push	r0
    47a8:	0f b6       	in	r0, 0x3f	; 63
    47aa:	0f 92       	push	r0
    47ac:	11 24       	eor	r1, r1
    47ae:	2f 93       	push	r18
    47b0:	3f 93       	push	r19
    47b2:	4f 93       	push	r20
    47b4:	5f 93       	push	r21
    47b6:	6f 93       	push	r22
    47b8:	7f 93       	push	r23
    47ba:	8f 93       	push	r24
    47bc:	9f 93       	push	r25
    47be:	af 93       	push	r26
    47c0:	bf 93       	push	r27
    47c2:	ef 93       	push	r30
    47c4:	ff 93       	push	r31
    47c6:	df 93       	push	r29
    47c8:	cf 93       	push	r28
    47ca:	cd b7       	in	r28, 0x3d	; 61
    47cc:	de b7       	in	r29, 0x3e	; 62
	if(Timer_pvCallBackFunc != NULL)
	{
		Timer_pvCallBackFunc[INT_T1_OVF]();
    47ce:	e0 91 6c 01 	lds	r30, 0x016C
    47d2:	f0 91 6d 01 	lds	r31, 0x016D
    47d6:	09 95       	icall
	}
}
    47d8:	cf 91       	pop	r28
    47da:	df 91       	pop	r29
    47dc:	ff 91       	pop	r31
    47de:	ef 91       	pop	r30
    47e0:	bf 91       	pop	r27
    47e2:	af 91       	pop	r26
    47e4:	9f 91       	pop	r25
    47e6:	8f 91       	pop	r24
    47e8:	7f 91       	pop	r23
    47ea:	6f 91       	pop	r22
    47ec:	5f 91       	pop	r21
    47ee:	4f 91       	pop	r20
    47f0:	3f 91       	pop	r19
    47f2:	2f 91       	pop	r18
    47f4:	0f 90       	pop	r0
    47f6:	0f be       	out	0x3f, r0	; 63
    47f8:	0f 90       	pop	r0
    47fa:	1f 90       	pop	r1
    47fc:	18 95       	reti

000047fe <__vector_8>:

/*TIMER1 Output Compare B Interrupt ISR*/
__attribute__((signal)) void __vector_8(void);
void __vector_8(void)
{
    47fe:	1f 92       	push	r1
    4800:	0f 92       	push	r0
    4802:	0f b6       	in	r0, 0x3f	; 63
    4804:	0f 92       	push	r0
    4806:	11 24       	eor	r1, r1
    4808:	2f 93       	push	r18
    480a:	3f 93       	push	r19
    480c:	4f 93       	push	r20
    480e:	5f 93       	push	r21
    4810:	6f 93       	push	r22
    4812:	7f 93       	push	r23
    4814:	8f 93       	push	r24
    4816:	9f 93       	push	r25
    4818:	af 93       	push	r26
    481a:	bf 93       	push	r27
    481c:	ef 93       	push	r30
    481e:	ff 93       	push	r31
    4820:	df 93       	push	r29
    4822:	cf 93       	push	r28
    4824:	cd b7       	in	r28, 0x3d	; 61
    4826:	de b7       	in	r29, 0x3e	; 62
	if(Timer_pvCallBackFunc != NULL)
	{
		Timer_pvCallBackFunc[INT_T1_OCB]();
    4828:	e0 91 70 01 	lds	r30, 0x0170
    482c:	f0 91 71 01 	lds	r31, 0x0171
    4830:	09 95       	icall
	}
}
    4832:	cf 91       	pop	r28
    4834:	df 91       	pop	r29
    4836:	ff 91       	pop	r31
    4838:	ef 91       	pop	r30
    483a:	bf 91       	pop	r27
    483c:	af 91       	pop	r26
    483e:	9f 91       	pop	r25
    4840:	8f 91       	pop	r24
    4842:	7f 91       	pop	r23
    4844:	6f 91       	pop	r22
    4846:	5f 91       	pop	r21
    4848:	4f 91       	pop	r20
    484a:	3f 91       	pop	r19
    484c:	2f 91       	pop	r18
    484e:	0f 90       	pop	r0
    4850:	0f be       	out	0x3f, r0	; 63
    4852:	0f 90       	pop	r0
    4854:	1f 90       	pop	r1
    4856:	18 95       	reti

00004858 <__vector_7>:

/*TIMER1 Output Compare A Interrupt ISR*/
__attribute__((signal)) void __vector_7(void);
void __vector_7(void)
{
    4858:	1f 92       	push	r1
    485a:	0f 92       	push	r0
    485c:	0f b6       	in	r0, 0x3f	; 63
    485e:	0f 92       	push	r0
    4860:	11 24       	eor	r1, r1
    4862:	2f 93       	push	r18
    4864:	3f 93       	push	r19
    4866:	4f 93       	push	r20
    4868:	5f 93       	push	r21
    486a:	6f 93       	push	r22
    486c:	7f 93       	push	r23
    486e:	8f 93       	push	r24
    4870:	9f 93       	push	r25
    4872:	af 93       	push	r26
    4874:	bf 93       	push	r27
    4876:	ef 93       	push	r30
    4878:	ff 93       	push	r31
    487a:	df 93       	push	r29
    487c:	cf 93       	push	r28
    487e:	cd b7       	in	r28, 0x3d	; 61
    4880:	de b7       	in	r29, 0x3e	; 62
	if(Timer_pvCallBackFunc != NULL)
	{
		Timer_pvCallBackFunc[INT_T1_OCA]();
    4882:	e0 91 6e 01 	lds	r30, 0x016E
    4886:	f0 91 6f 01 	lds	r31, 0x016F
    488a:	09 95       	icall
	}
}
    488c:	cf 91       	pop	r28
    488e:	df 91       	pop	r29
    4890:	ff 91       	pop	r31
    4892:	ef 91       	pop	r30
    4894:	bf 91       	pop	r27
    4896:	af 91       	pop	r26
    4898:	9f 91       	pop	r25
    489a:	8f 91       	pop	r24
    489c:	7f 91       	pop	r23
    489e:	6f 91       	pop	r22
    48a0:	5f 91       	pop	r21
    48a2:	4f 91       	pop	r20
    48a4:	3f 91       	pop	r19
    48a6:	2f 91       	pop	r18
    48a8:	0f 90       	pop	r0
    48aa:	0f be       	out	0x3f, r0	; 63
    48ac:	0f 90       	pop	r0
    48ae:	1f 90       	pop	r1
    48b0:	18 95       	reti

000048b2 <__vector_6>:

/*TIMER1 Input Capture Interrupt ISR*/
__attribute__((signal)) void __vector_6(void);
void __vector_6(void)
{
    48b2:	1f 92       	push	r1
    48b4:	0f 92       	push	r0
    48b6:	0f b6       	in	r0, 0x3f	; 63
    48b8:	0f 92       	push	r0
    48ba:	11 24       	eor	r1, r1
    48bc:	2f 93       	push	r18
    48be:	3f 93       	push	r19
    48c0:	4f 93       	push	r20
    48c2:	5f 93       	push	r21
    48c4:	6f 93       	push	r22
    48c6:	7f 93       	push	r23
    48c8:	8f 93       	push	r24
    48ca:	9f 93       	push	r25
    48cc:	af 93       	push	r26
    48ce:	bf 93       	push	r27
    48d0:	ef 93       	push	r30
    48d2:	ff 93       	push	r31
    48d4:	df 93       	push	r29
    48d6:	cf 93       	push	r28
    48d8:	cd b7       	in	r28, 0x3d	; 61
    48da:	de b7       	in	r29, 0x3e	; 62
	if(Timer_pvCallBackFunc != NULL)
	{
		Timer_pvCallBackFunc[INT_T1_IC]();
    48dc:	e0 91 72 01 	lds	r30, 0x0172
    48e0:	f0 91 73 01 	lds	r31, 0x0173
    48e4:	09 95       	icall
	}
}
    48e6:	cf 91       	pop	r28
    48e8:	df 91       	pop	r29
    48ea:	ff 91       	pop	r31
    48ec:	ef 91       	pop	r30
    48ee:	bf 91       	pop	r27
    48f0:	af 91       	pop	r26
    48f2:	9f 91       	pop	r25
    48f4:	8f 91       	pop	r24
    48f6:	7f 91       	pop	r23
    48f8:	6f 91       	pop	r22
    48fa:	5f 91       	pop	r21
    48fc:	4f 91       	pop	r20
    48fe:	3f 91       	pop	r19
    4900:	2f 91       	pop	r18
    4902:	0f 90       	pop	r0
    4904:	0f be       	out	0x3f, r0	; 63
    4906:	0f 90       	pop	r0
    4908:	1f 90       	pop	r1
    490a:	18 95       	reti

0000490c <__vector_5>:

/*TIMER2 Overflow Interrupt ISR*/
__attribute__((signal)) void __vector_5(void);
void __vector_5(void)
{
    490c:	1f 92       	push	r1
    490e:	0f 92       	push	r0
    4910:	0f b6       	in	r0, 0x3f	; 63
    4912:	0f 92       	push	r0
    4914:	11 24       	eor	r1, r1
    4916:	2f 93       	push	r18
    4918:	3f 93       	push	r19
    491a:	4f 93       	push	r20
    491c:	5f 93       	push	r21
    491e:	6f 93       	push	r22
    4920:	7f 93       	push	r23
    4922:	8f 93       	push	r24
    4924:	9f 93       	push	r25
    4926:	af 93       	push	r26
    4928:	bf 93       	push	r27
    492a:	ef 93       	push	r30
    492c:	ff 93       	push	r31
    492e:	df 93       	push	r29
    4930:	cf 93       	push	r28
    4932:	cd b7       	in	r28, 0x3d	; 61
    4934:	de b7       	in	r29, 0x3e	; 62
	if(Timer_pvCallBackFunc != NULL)
	{
		Timer_pvCallBackFunc[INT_T2_OVF]();
    4936:	e0 91 74 01 	lds	r30, 0x0174
    493a:	f0 91 75 01 	lds	r31, 0x0175
    493e:	09 95       	icall
	}
}
    4940:	cf 91       	pop	r28
    4942:	df 91       	pop	r29
    4944:	ff 91       	pop	r31
    4946:	ef 91       	pop	r30
    4948:	bf 91       	pop	r27
    494a:	af 91       	pop	r26
    494c:	9f 91       	pop	r25
    494e:	8f 91       	pop	r24
    4950:	7f 91       	pop	r23
    4952:	6f 91       	pop	r22
    4954:	5f 91       	pop	r21
    4956:	4f 91       	pop	r20
    4958:	3f 91       	pop	r19
    495a:	2f 91       	pop	r18
    495c:	0f 90       	pop	r0
    495e:	0f be       	out	0x3f, r0	; 63
    4960:	0f 90       	pop	r0
    4962:	1f 90       	pop	r1
    4964:	18 95       	reti

00004966 <__vector_4>:

/*TIMER2 output compare Interrupt ISR*/
__attribute__((signal)) void __vector_4(void);
void __vector_4(void)
{
    4966:	1f 92       	push	r1
    4968:	0f 92       	push	r0
    496a:	0f b6       	in	r0, 0x3f	; 63
    496c:	0f 92       	push	r0
    496e:	11 24       	eor	r1, r1
    4970:	2f 93       	push	r18
    4972:	3f 93       	push	r19
    4974:	4f 93       	push	r20
    4976:	5f 93       	push	r21
    4978:	6f 93       	push	r22
    497a:	7f 93       	push	r23
    497c:	8f 93       	push	r24
    497e:	9f 93       	push	r25
    4980:	af 93       	push	r26
    4982:	bf 93       	push	r27
    4984:	ef 93       	push	r30
    4986:	ff 93       	push	r31
    4988:	df 93       	push	r29
    498a:	cf 93       	push	r28
    498c:	cd b7       	in	r28, 0x3d	; 61
    498e:	de b7       	in	r29, 0x3e	; 62
	if(Timer_pvCallBackFunc != NULL)
	{
		Timer_pvCallBackFunc[INT_T2_OC]();
    4990:	e0 91 76 01 	lds	r30, 0x0176
    4994:	f0 91 77 01 	lds	r31, 0x0177
    4998:	09 95       	icall
	}
}
    499a:	cf 91       	pop	r28
    499c:	df 91       	pop	r29
    499e:	ff 91       	pop	r31
    49a0:	ef 91       	pop	r30
    49a2:	bf 91       	pop	r27
    49a4:	af 91       	pop	r26
    49a6:	9f 91       	pop	r25
    49a8:	8f 91       	pop	r24
    49aa:	7f 91       	pop	r23
    49ac:	6f 91       	pop	r22
    49ae:	5f 91       	pop	r21
    49b0:	4f 91       	pop	r20
    49b2:	3f 91       	pop	r19
    49b4:	2f 91       	pop	r18
    49b6:	0f 90       	pop	r0
    49b8:	0f be       	out	0x3f, r0	; 63
    49ba:	0f 90       	pop	r0
    49bc:	1f 90       	pop	r1
    49be:	18 95       	reti

000049c0 <Ultrasonic_u8GetDistance>:
#include "Timer_reg.h"
#include "ultrasonic.h"
#include<util/delay.h>

uint8 Ultrasonic_u8GetDistance(PORT port, PIN pin)
{
    49c0:	df 93       	push	r29
    49c2:	cf 93       	push	r28
    49c4:	cd b7       	in	r28, 0x3d	; 61
    49c6:	de b7       	in	r29, 0x3e	; 62
    49c8:	a9 97       	sbiw	r28, 0x29	; 41
    49ca:	0f b6       	in	r0, 0x3f	; 63
    49cc:	f8 94       	cli
    49ce:	de bf       	out	0x3e, r29	; 62
    49d0:	0f be       	out	0x3f, r0	; 63
    49d2:	cd bf       	out	0x3d, r28	; 61
    49d4:	8b a3       	std	Y+35, r24	; 0x23
    49d6:	6c a3       	std	Y+36, r22	; 0x24
    Timer1_Config_t Timer1 ={

    	.WGM=WGM_NORMAL,
		.OC_Mode=OC_Disconnect,
		.CLK=No_Prescaler
    };
    49d8:	ae 01       	movw	r20, r28
    49da:	40 5e       	subi	r20, 0xE0	; 224
    49dc:	5f 4f       	sbci	r21, 0xFF	; 255
    49de:	5e a3       	std	Y+38, r21	; 0x26
    49e0:	4d a3       	std	Y+37, r20	; 0x25
    49e2:	88 e5       	ldi	r24, 0x58	; 88
    49e4:	91 e0       	ldi	r25, 0x01	; 1
    49e6:	98 a7       	std	Y+40, r25	; 0x28
    49e8:	8f a3       	std	Y+39, r24	; 0x27
    49ea:	93 e0       	ldi	r25, 0x03	; 3
    49ec:	99 a7       	std	Y+41, r25	; 0x29
    49ee:	ef a1       	ldd	r30, Y+39	; 0x27
    49f0:	f8 a5       	ldd	r31, Y+40	; 0x28
    49f2:	00 80       	ld	r0, Z
    49f4:	4f a1       	ldd	r20, Y+39	; 0x27
    49f6:	58 a5       	ldd	r21, Y+40	; 0x28
    49f8:	4f 5f       	subi	r20, 0xFF	; 255
    49fa:	5f 4f       	sbci	r21, 0xFF	; 255
    49fc:	58 a7       	std	Y+40, r21	; 0x28
    49fe:	4f a3       	std	Y+39, r20	; 0x27
    4a00:	ed a1       	ldd	r30, Y+37	; 0x25
    4a02:	fe a1       	ldd	r31, Y+38	; 0x26
    4a04:	00 82       	st	Z, r0
    4a06:	4d a1       	ldd	r20, Y+37	; 0x25
    4a08:	5e a1       	ldd	r21, Y+38	; 0x26
    4a0a:	4f 5f       	subi	r20, 0xFF	; 255
    4a0c:	5f 4f       	sbci	r21, 0xFF	; 255
    4a0e:	5e a3       	std	Y+38, r21	; 0x26
    4a10:	4d a3       	std	Y+37, r20	; 0x25
    4a12:	59 a5       	ldd	r21, Y+41	; 0x29
    4a14:	51 50       	subi	r21, 0x01	; 1
    4a16:	59 a7       	std	Y+41, r21	; 0x29
    4a18:	89 a5       	ldd	r24, Y+41	; 0x29
    4a1a:	88 23       	and	r24, r24
    4a1c:	41 f7       	brne	.-48     	; 0x49ee <Ultrasonic_u8GetDistance+0x2e>

Timer1_voidInit(&Timer1);
    4a1e:	ce 01       	movw	r24, r28
    4a20:	80 96       	adiw	r24, 0x20	; 32
    4a22:	0e 94 68 20 	call	0x40d0	; 0x40d0 <Timer1_voidInit>
SET_BIT(TIFR,ICF1);//clear the flag by logical 1
    4a26:	a8 e5       	ldi	r26, 0x58	; 88
    4a28:	b0 e0       	ldi	r27, 0x00	; 0
    4a2a:	e8 e5       	ldi	r30, 0x58	; 88
    4a2c:	f0 e0       	ldi	r31, 0x00	; 0
    4a2e:	80 81       	ld	r24, Z
    4a30:	80 62       	ori	r24, 0x20	; 32
    4a32:	8c 93       	st	X, r24
/*trigger pulse*/

	DIO_u8SetPinValue(port,pin,DIO_u8PIN_HIGH);
    4a34:	8b a1       	ldd	r24, Y+35	; 0x23
    4a36:	6c a1       	ldd	r22, Y+36	; 0x24
    4a38:	41 e0       	ldi	r20, 0x01	; 1
    4a3a:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <DIO_u8SetPinValue>
    4a3e:	80 e0       	ldi	r24, 0x00	; 0
    4a40:	90 e0       	ldi	r25, 0x00	; 0
    4a42:	a0 ea       	ldi	r26, 0xA0	; 160
    4a44:	b1 e4       	ldi	r27, 0x41	; 65
    4a46:	8d 8b       	std	Y+21, r24	; 0x15
    4a48:	9e 8b       	std	Y+22, r25	; 0x16
    4a4a:	af 8b       	std	Y+23, r26	; 0x17
    4a4c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4a4e:	6d 89       	ldd	r22, Y+21	; 0x15
    4a50:	7e 89       	ldd	r23, Y+22	; 0x16
    4a52:	8f 89       	ldd	r24, Y+23	; 0x17
    4a54:	98 8d       	ldd	r25, Y+24	; 0x18
    4a56:	2b ea       	ldi	r18, 0xAB	; 171
    4a58:	3a ea       	ldi	r19, 0xAA	; 170
    4a5a:	4a ea       	ldi	r20, 0xAA	; 170
    4a5c:	50 e4       	ldi	r21, 0x40	; 64
    4a5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a62:	dc 01       	movw	r26, r24
    4a64:	cb 01       	movw	r24, r22
    4a66:	89 8b       	std	Y+17, r24	; 0x11
    4a68:	9a 8b       	std	Y+18, r25	; 0x12
    4a6a:	ab 8b       	std	Y+19, r26	; 0x13
    4a6c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    4a6e:	69 89       	ldd	r22, Y+17	; 0x11
    4a70:	7a 89       	ldd	r23, Y+18	; 0x12
    4a72:	8b 89       	ldd	r24, Y+19	; 0x13
    4a74:	9c 89       	ldd	r25, Y+20	; 0x14
    4a76:	20 e0       	ldi	r18, 0x00	; 0
    4a78:	30 e0       	ldi	r19, 0x00	; 0
    4a7a:	40 e8       	ldi	r20, 0x80	; 128
    4a7c:	5f e3       	ldi	r21, 0x3F	; 63
    4a7e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4a82:	88 23       	and	r24, r24
    4a84:	1c f4       	brge	.+6      	; 0x4a8c <Ultrasonic_u8GetDistance+0xcc>
		__ticks = 1;
    4a86:	81 e0       	ldi	r24, 0x01	; 1
    4a88:	88 8b       	std	Y+16, r24	; 0x10
    4a8a:	91 c0       	rjmp	.+290    	; 0x4bae <Ultrasonic_u8GetDistance+0x1ee>
	else if (__tmp > 255)
    4a8c:	69 89       	ldd	r22, Y+17	; 0x11
    4a8e:	7a 89       	ldd	r23, Y+18	; 0x12
    4a90:	8b 89       	ldd	r24, Y+19	; 0x13
    4a92:	9c 89       	ldd	r25, Y+20	; 0x14
    4a94:	20 e0       	ldi	r18, 0x00	; 0
    4a96:	30 e0       	ldi	r19, 0x00	; 0
    4a98:	4f e7       	ldi	r20, 0x7F	; 127
    4a9a:	53 e4       	ldi	r21, 0x43	; 67
    4a9c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4aa0:	18 16       	cp	r1, r24
    4aa2:	0c f0       	brlt	.+2      	; 0x4aa6 <Ultrasonic_u8GetDistance+0xe6>
    4aa4:	7b c0       	rjmp	.+246    	; 0x4b9c <Ultrasonic_u8GetDistance+0x1dc>
	{
		_delay_ms(__us / 1000.0);
    4aa6:	6d 89       	ldd	r22, Y+21	; 0x15
    4aa8:	7e 89       	ldd	r23, Y+22	; 0x16
    4aaa:	8f 89       	ldd	r24, Y+23	; 0x17
    4aac:	98 8d       	ldd	r25, Y+24	; 0x18
    4aae:	20 e0       	ldi	r18, 0x00	; 0
    4ab0:	30 e0       	ldi	r19, 0x00	; 0
    4ab2:	4a e7       	ldi	r20, 0x7A	; 122
    4ab4:	54 e4       	ldi	r21, 0x44	; 68
    4ab6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4aba:	dc 01       	movw	r26, r24
    4abc:	cb 01       	movw	r24, r22
    4abe:	8c 87       	std	Y+12, r24	; 0x0c
    4ac0:	9d 87       	std	Y+13, r25	; 0x0d
    4ac2:	ae 87       	std	Y+14, r26	; 0x0e
    4ac4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ac6:	6c 85       	ldd	r22, Y+12	; 0x0c
    4ac8:	7d 85       	ldd	r23, Y+13	; 0x0d
    4aca:	8e 85       	ldd	r24, Y+14	; 0x0e
    4acc:	9f 85       	ldd	r25, Y+15	; 0x0f
    4ace:	20 e0       	ldi	r18, 0x00	; 0
    4ad0:	30 e0       	ldi	r19, 0x00	; 0
    4ad2:	4a e7       	ldi	r20, 0x7A	; 122
    4ad4:	55 e4       	ldi	r21, 0x45	; 69
    4ad6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ada:	dc 01       	movw	r26, r24
    4adc:	cb 01       	movw	r24, r22
    4ade:	88 87       	std	Y+8, r24	; 0x08
    4ae0:	99 87       	std	Y+9, r25	; 0x09
    4ae2:	aa 87       	std	Y+10, r26	; 0x0a
    4ae4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    4ae6:	68 85       	ldd	r22, Y+8	; 0x08
    4ae8:	79 85       	ldd	r23, Y+9	; 0x09
    4aea:	8a 85       	ldd	r24, Y+10	; 0x0a
    4aec:	9b 85       	ldd	r25, Y+11	; 0x0b
    4aee:	20 e0       	ldi	r18, 0x00	; 0
    4af0:	30 e0       	ldi	r19, 0x00	; 0
    4af2:	40 e8       	ldi	r20, 0x80	; 128
    4af4:	5f e3       	ldi	r21, 0x3F	; 63
    4af6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4afa:	88 23       	and	r24, r24
    4afc:	2c f4       	brge	.+10     	; 0x4b08 <Ultrasonic_u8GetDistance+0x148>
		__ticks = 1;
    4afe:	81 e0       	ldi	r24, 0x01	; 1
    4b00:	90 e0       	ldi	r25, 0x00	; 0
    4b02:	9f 83       	std	Y+7, r25	; 0x07
    4b04:	8e 83       	std	Y+6, r24	; 0x06
    4b06:	3f c0       	rjmp	.+126    	; 0x4b86 <Ultrasonic_u8GetDistance+0x1c6>
	else if (__tmp > 65535)
    4b08:	68 85       	ldd	r22, Y+8	; 0x08
    4b0a:	79 85       	ldd	r23, Y+9	; 0x09
    4b0c:	8a 85       	ldd	r24, Y+10	; 0x0a
    4b0e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4b10:	20 e0       	ldi	r18, 0x00	; 0
    4b12:	3f ef       	ldi	r19, 0xFF	; 255
    4b14:	4f e7       	ldi	r20, 0x7F	; 127
    4b16:	57 e4       	ldi	r21, 0x47	; 71
    4b18:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4b1c:	18 16       	cp	r1, r24
    4b1e:	4c f5       	brge	.+82     	; 0x4b72 <Ultrasonic_u8GetDistance+0x1b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b20:	6c 85       	ldd	r22, Y+12	; 0x0c
    4b22:	7d 85       	ldd	r23, Y+13	; 0x0d
    4b24:	8e 85       	ldd	r24, Y+14	; 0x0e
    4b26:	9f 85       	ldd	r25, Y+15	; 0x0f
    4b28:	20 e0       	ldi	r18, 0x00	; 0
    4b2a:	30 e0       	ldi	r19, 0x00	; 0
    4b2c:	40 e2       	ldi	r20, 0x20	; 32
    4b2e:	51 e4       	ldi	r21, 0x41	; 65
    4b30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b34:	dc 01       	movw	r26, r24
    4b36:	cb 01       	movw	r24, r22
    4b38:	bc 01       	movw	r22, r24
    4b3a:	cd 01       	movw	r24, r26
    4b3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b40:	dc 01       	movw	r26, r24
    4b42:	cb 01       	movw	r24, r22
    4b44:	9f 83       	std	Y+7, r25	; 0x07
    4b46:	8e 83       	std	Y+6, r24	; 0x06
    4b48:	0f c0       	rjmp	.+30     	; 0x4b68 <Ultrasonic_u8GetDistance+0x1a8>
    4b4a:	80 e9       	ldi	r24, 0x90	; 144
    4b4c:	91 e0       	ldi	r25, 0x01	; 1
    4b4e:	9d 83       	std	Y+5, r25	; 0x05
    4b50:	8c 83       	std	Y+4, r24	; 0x04
    4b52:	8c 81       	ldd	r24, Y+4	; 0x04
    4b54:	9d 81       	ldd	r25, Y+5	; 0x05
    4b56:	01 97       	sbiw	r24, 0x01	; 1
    4b58:	f1 f7       	brne	.-4      	; 0x4b56 <Ultrasonic_u8GetDistance+0x196>
    4b5a:	9d 83       	std	Y+5, r25	; 0x05
    4b5c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b5e:	8e 81       	ldd	r24, Y+6	; 0x06
    4b60:	9f 81       	ldd	r25, Y+7	; 0x07
    4b62:	01 97       	sbiw	r24, 0x01	; 1
    4b64:	9f 83       	std	Y+7, r25	; 0x07
    4b66:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b68:	8e 81       	ldd	r24, Y+6	; 0x06
    4b6a:	9f 81       	ldd	r25, Y+7	; 0x07
    4b6c:	00 97       	sbiw	r24, 0x00	; 0
    4b6e:	69 f7       	brne	.-38     	; 0x4b4a <Ultrasonic_u8GetDistance+0x18a>
    4b70:	24 c0       	rjmp	.+72     	; 0x4bba <Ultrasonic_u8GetDistance+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b72:	68 85       	ldd	r22, Y+8	; 0x08
    4b74:	79 85       	ldd	r23, Y+9	; 0x09
    4b76:	8a 85       	ldd	r24, Y+10	; 0x0a
    4b78:	9b 85       	ldd	r25, Y+11	; 0x0b
    4b7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b7e:	dc 01       	movw	r26, r24
    4b80:	cb 01       	movw	r24, r22
    4b82:	9f 83       	std	Y+7, r25	; 0x07
    4b84:	8e 83       	std	Y+6, r24	; 0x06
    4b86:	8e 81       	ldd	r24, Y+6	; 0x06
    4b88:	9f 81       	ldd	r25, Y+7	; 0x07
    4b8a:	9b 83       	std	Y+3, r25	; 0x03
    4b8c:	8a 83       	std	Y+2, r24	; 0x02
    4b8e:	8a 81       	ldd	r24, Y+2	; 0x02
    4b90:	9b 81       	ldd	r25, Y+3	; 0x03
    4b92:	01 97       	sbiw	r24, 0x01	; 1
    4b94:	f1 f7       	brne	.-4      	; 0x4b92 <Ultrasonic_u8GetDistance+0x1d2>
    4b96:	9b 83       	std	Y+3, r25	; 0x03
    4b98:	8a 83       	std	Y+2, r24	; 0x02
    4b9a:	0f c0       	rjmp	.+30     	; 0x4bba <Ultrasonic_u8GetDistance+0x1fa>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4b9c:	69 89       	ldd	r22, Y+17	; 0x11
    4b9e:	7a 89       	ldd	r23, Y+18	; 0x12
    4ba0:	8b 89       	ldd	r24, Y+19	; 0x13
    4ba2:	9c 89       	ldd	r25, Y+20	; 0x14
    4ba4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ba8:	dc 01       	movw	r26, r24
    4baa:	cb 01       	movw	r24, r22
    4bac:	88 8b       	std	Y+16, r24	; 0x10
    4bae:	88 89       	ldd	r24, Y+16	; 0x10
    4bb0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4bb2:	89 81       	ldd	r24, Y+1	; 0x01
    4bb4:	8a 95       	dec	r24
    4bb6:	f1 f7       	brne	.-4      	; 0x4bb4 <Ultrasonic_u8GetDistance+0x1f4>
    4bb8:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(20);
	DIO_u8SetPinValue(port,pin,DIO_u8PIN_LOW);
    4bba:	8b a1       	ldd	r24, Y+35	; 0x23
    4bbc:	6c a1       	ldd	r22, Y+36	; 0x24
    4bbe:	40 e0       	ldi	r20, 0x00	; 0
    4bc0:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <DIO_u8SetPinValue>
	/*First Rising edge*/
   SET_BIT(TCCR1B,ICES1); //Input Capture Edge Select, trigger on rising
    4bc4:	ae e4       	ldi	r26, 0x4E	; 78
    4bc6:	b0 e0       	ldi	r27, 0x00	; 0
    4bc8:	ee e4       	ldi	r30, 0x4E	; 78
    4bca:	f0 e0       	ldi	r31, 0x00	; 0
    4bcc:	80 81       	ld	r24, Z
    4bce:	80 64       	ori	r24, 0x40	; 64
    4bd0:	8c 93       	st	X, r24
   while(GET_BIT(TIFR,ICF1)==0);//pooling on flag until it's got triggerd
    4bd2:	e8 e5       	ldi	r30, 0x58	; 88
    4bd4:	f0 e0       	ldi	r31, 0x00	; 0
    4bd6:	80 81       	ld	r24, Z
    4bd8:	82 95       	swap	r24
    4bda:	86 95       	lsr	r24
    4bdc:	87 70       	andi	r24, 0x07	; 7
    4bde:	88 2f       	mov	r24, r24
    4be0:	90 e0       	ldi	r25, 0x00	; 0
    4be2:	81 70       	andi	r24, 0x01	; 1
    4be4:	90 70       	andi	r25, 0x00	; 0
    4be6:	00 97       	sbiw	r24, 0x00	; 0
    4be8:	a1 f3       	breq	.-24     	; 0x4bd2 <Ultrasonic_u8GetDistance+0x212>

   Local_u16Reading1=ICR1; //value from start to first
    4bea:	e6 e4       	ldi	r30, 0x46	; 70
    4bec:	f0 e0       	ldi	r31, 0x00	; 0
    4bee:	80 81       	ld	r24, Z
    4bf0:	91 81       	ldd	r25, Z+1	; 0x01
    4bf2:	9f 8f       	std	Y+31, r25	; 0x1f
    4bf4:	8e 8f       	std	Y+30, r24	; 0x1e
   SET_BIT(TIFR,ICF1);//clear the flag by logical 1
    4bf6:	a8 e5       	ldi	r26, 0x58	; 88
    4bf8:	b0 e0       	ldi	r27, 0x00	; 0
    4bfa:	e8 e5       	ldi	r30, 0x58	; 88
    4bfc:	f0 e0       	ldi	r31, 0x00	; 0
    4bfe:	80 81       	ld	r24, Z
    4c00:	80 62       	ori	r24, 0x20	; 32
    4c02:	8c 93       	st	X, r24

/*First falling edge*/
   CLR_BIT(TCCR1B,ICES1); //.Trigger on Falling edge
    4c04:	ae e4       	ldi	r26, 0x4E	; 78
    4c06:	b0 e0       	ldi	r27, 0x00	; 0
    4c08:	ee e4       	ldi	r30, 0x4E	; 78
    4c0a:	f0 e0       	ldi	r31, 0x00	; 0
    4c0c:	80 81       	ld	r24, Z
    4c0e:	8f 7b       	andi	r24, 0xBF	; 191
    4c10:	8c 93       	st	X, r24
   while(GET_BIT(TIFR,ICF1)==0);
    4c12:	e8 e5       	ldi	r30, 0x58	; 88
    4c14:	f0 e0       	ldi	r31, 0x00	; 0
    4c16:	80 81       	ld	r24, Z
    4c18:	82 95       	swap	r24
    4c1a:	86 95       	lsr	r24
    4c1c:	87 70       	andi	r24, 0x07	; 7
    4c1e:	88 2f       	mov	r24, r24
    4c20:	90 e0       	ldi	r25, 0x00	; 0
    4c22:	81 70       	andi	r24, 0x01	; 1
    4c24:	90 70       	andi	r25, 0x00	; 0
    4c26:	00 97       	sbiw	r24, 0x00	; 0
    4c28:	a1 f3       	breq	.-24     	; 0x4c12 <Ultrasonic_u8GetDistance+0x252>
   Local_u16Reading2=ICR1;
    4c2a:	e6 e4       	ldi	r30, 0x46	; 70
    4c2c:	f0 e0       	ldi	r31, 0x00	; 0
    4c2e:	80 81       	ld	r24, Z
    4c30:	91 81       	ldd	r25, Z+1	; 0x01
    4c32:	9d 8f       	std	Y+29, r25	; 0x1d
    4c34:	8c 8f       	std	Y+28, r24	; 0x1c
   SET_BIT(TIFR,ICF1);
    4c36:	a8 e5       	ldi	r26, 0x58	; 88
    4c38:	b0 e0       	ldi	r27, 0x00	; 0
    4c3a:	e8 e5       	ldi	r30, 0x58	; 88
    4c3c:	f0 e0       	ldi	r31, 0x00	; 0
    4c3e:	80 81       	ld	r24, Z
    4c40:	80 62       	ori	r24, 0x20	; 32
    4c42:	8c 93       	st	X, r24

   TCNT1=0;			/*important to reset counter */
    4c44:	ec e4       	ldi	r30, 0x4C	; 76
    4c46:	f0 e0       	ldi	r31, 0x00	; 0
    4c48:	11 82       	std	Z+1, r1	; 0x01
    4c4a:	10 82       	st	Z, r1
   TCCR1B = 0;  		/* Stop the timer */
    4c4c:	ee e4       	ldi	r30, 0x4E	; 78
    4c4e:	f0 e0       	ldi	r31, 0x00	; 0
    4c50:	10 82       	st	Z, r1

   	Local_u16Period  = (Local_u16Reading2-Local_u16Reading1);
    4c52:	2c 8d       	ldd	r18, Y+28	; 0x1c
    4c54:	3d 8d       	ldd	r19, Y+29	; 0x1d
    4c56:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4c58:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4c5a:	f9 01       	movw	r30, r18
    4c5c:	e8 1b       	sub	r30, r24
    4c5e:	f9 0b       	sbc	r31, r25
    4c60:	cf 01       	movw	r24, r30
    4c62:	9b 8f       	std	Y+27, r25	; 0x1b
    4c64:	8a 8f       	std	Y+26, r24	; 0x1a
   	Local_u8Distance=(uint8)((Local_u16Period*34600)/(16000000*2));//multiplying the timer period by the speed of sound, converting timer ticks to seconds using a system-specific clock factor, and then halving the result to account for the round trip,
    4c66:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4c68:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4c6a:	cc 01       	movw	r24, r24
    4c6c:	a0 e0       	ldi	r26, 0x00	; 0
    4c6e:	b0 e0       	ldi	r27, 0x00	; 0
    4c70:	28 e2       	ldi	r18, 0x28	; 40
    4c72:	37 e8       	ldi	r19, 0x87	; 135
    4c74:	40 e0       	ldi	r20, 0x00	; 0
    4c76:	50 e0       	ldi	r21, 0x00	; 0
    4c78:	bc 01       	movw	r22, r24
    4c7a:	cd 01       	movw	r24, r26
    4c7c:	0e 94 25 28 	call	0x504a	; 0x504a <__mulsi3>
    4c80:	dc 01       	movw	r26, r24
    4c82:	cb 01       	movw	r24, r22
    4c84:	20 e0       	ldi	r18, 0x00	; 0
    4c86:	38 e4       	ldi	r19, 0x48	; 72
    4c88:	48 ee       	ldi	r20, 0xE8	; 232
    4c8a:	51 e0       	ldi	r21, 0x01	; 1
    4c8c:	bc 01       	movw	r22, r24
    4c8e:	cd 01       	movw	r24, r26
    4c90:	0e 94 66 28 	call	0x50cc	; 0x50cc <__divmodsi4>
    4c94:	da 01       	movw	r26, r20
    4c96:	c9 01       	movw	r24, r18
    4c98:	89 8f       	std	Y+25, r24	; 0x19

   	return Local_u8Distance;
    4c9a:	89 8d       	ldd	r24, Y+25	; 0x19

}
    4c9c:	a9 96       	adiw	r28, 0x29	; 41
    4c9e:	0f b6       	in	r0, 0x3f	; 63
    4ca0:	f8 94       	cli
    4ca2:	de bf       	out	0x3e, r29	; 62
    4ca4:	0f be       	out	0x3f, r0	; 63
    4ca6:	cd bf       	out	0x3d, r28	; 61
    4ca8:	cf 91       	pop	r28
    4caa:	df 91       	pop	r29
    4cac:	08 95       	ret

00004cae <main>:
#include <util/delay.h>



void main (void)
{
    4cae:	df 93       	push	r29
    4cb0:	cf 93       	push	r28
    4cb2:	cd b7       	in	r28, 0x3d	; 61
    4cb4:	de b7       	in	r29, 0x3e	; 62
    4cb6:	ed 97       	sbiw	r28, 0x3d	; 61
    4cb8:	0f b6       	in	r0, 0x3f	; 63
    4cba:	f8 94       	cli
    4cbc:	de bf       	out	0x3e, r29	; 62
    4cbe:	0f be       	out	0x3f, r0	; 63
    4cc0:	cd bf       	out	0x3d, r28	; 61


   uint8 Local_u8Distance;
   PORT_voidInit();
    4cc2:	0e 94 50 1e 	call	0x3ca0	; 0x3ca0 <PORT_voidInit>
   CLCD_VoidInit();
    4cc6:	0e 94 d6 07 	call	0xfac	; 0xfac <CLCD_VoidInit>
   LED_Cfg_t Local_stRedLED=
	{
			.LED_u8ACTIVE_TYPE = Active_High,
			.LED_u8PORT = DIO_u8PORTC,
			.LED_u8PIN = DIO_u8PIN0
	};
    4cca:	ce 01       	movw	r24, r28
    4ccc:	4e 96       	adiw	r24, 0x1e	; 30
    4cce:	9b a7       	std	Y+43, r25	; 0x2b
    4cd0:	8a a7       	std	Y+42, r24	; 0x2a
    4cd2:	e4 e6       	ldi	r30, 0x64	; 100
    4cd4:	f1 e0       	ldi	r31, 0x01	; 1
    4cd6:	fd a7       	std	Y+45, r31	; 0x2d
    4cd8:	ec a7       	std	Y+44, r30	; 0x2c
    4cda:	f3 e0       	ldi	r31, 0x03	; 3
    4cdc:	fe a7       	std	Y+46, r31	; 0x2e
    4cde:	ec a5       	ldd	r30, Y+44	; 0x2c
    4ce0:	fd a5       	ldd	r31, Y+45	; 0x2d
    4ce2:	00 80       	ld	r0, Z
    4ce4:	8c a5       	ldd	r24, Y+44	; 0x2c
    4ce6:	9d a5       	ldd	r25, Y+45	; 0x2d
    4ce8:	01 96       	adiw	r24, 0x01	; 1
    4cea:	9d a7       	std	Y+45, r25	; 0x2d
    4cec:	8c a7       	std	Y+44, r24	; 0x2c
    4cee:	ea a5       	ldd	r30, Y+42	; 0x2a
    4cf0:	fb a5       	ldd	r31, Y+43	; 0x2b
    4cf2:	00 82       	st	Z, r0
    4cf4:	8a a5       	ldd	r24, Y+42	; 0x2a
    4cf6:	9b a5       	ldd	r25, Y+43	; 0x2b
    4cf8:	01 96       	adiw	r24, 0x01	; 1
    4cfa:	9b a7       	std	Y+43, r25	; 0x2b
    4cfc:	8a a7       	std	Y+42, r24	; 0x2a
    4cfe:	9e a5       	ldd	r25, Y+46	; 0x2e
    4d00:	91 50       	subi	r25, 0x01	; 1
    4d02:	9e a7       	std	Y+46, r25	; 0x2e
    4d04:	ee a5       	ldd	r30, Y+46	; 0x2e
    4d06:	ee 23       	and	r30, r30
    4d08:	51 f7       	brne	.-44     	; 0x4cde <main+0x30>
	LED_Cfg_t Local_stBlueLED=
	{
			.LED_u8ACTIVE_TYPE = Active_High,
			.LED_u8PORT = DIO_u8PORTC,
			.LED_u8PIN = DIO_u8PIN2
	};
    4d0a:	ce 01       	movw	r24, r28
    4d0c:	81 96       	adiw	r24, 0x21	; 33
    4d0e:	98 ab       	std	Y+48, r25	; 0x30
    4d10:	8f a7       	std	Y+47, r24	; 0x2f
    4d12:	e1 e6       	ldi	r30, 0x61	; 97
    4d14:	f1 e0       	ldi	r31, 0x01	; 1
    4d16:	fa ab       	std	Y+50, r31	; 0x32
    4d18:	e9 ab       	std	Y+49, r30	; 0x31
    4d1a:	f3 e0       	ldi	r31, 0x03	; 3
    4d1c:	fb ab       	std	Y+51, r31	; 0x33
    4d1e:	e9 a9       	ldd	r30, Y+49	; 0x31
    4d20:	fa a9       	ldd	r31, Y+50	; 0x32
    4d22:	00 80       	ld	r0, Z
    4d24:	89 a9       	ldd	r24, Y+49	; 0x31
    4d26:	9a a9       	ldd	r25, Y+50	; 0x32
    4d28:	01 96       	adiw	r24, 0x01	; 1
    4d2a:	9a ab       	std	Y+50, r25	; 0x32
    4d2c:	89 ab       	std	Y+49, r24	; 0x31
    4d2e:	ef a5       	ldd	r30, Y+47	; 0x2f
    4d30:	f8 a9       	ldd	r31, Y+48	; 0x30
    4d32:	00 82       	st	Z, r0
    4d34:	8f a5       	ldd	r24, Y+47	; 0x2f
    4d36:	98 a9       	ldd	r25, Y+48	; 0x30
    4d38:	01 96       	adiw	r24, 0x01	; 1
    4d3a:	98 ab       	std	Y+48, r25	; 0x30
    4d3c:	8f a7       	std	Y+47, r24	; 0x2f
    4d3e:	9b a9       	ldd	r25, Y+51	; 0x33
    4d40:	91 50       	subi	r25, 0x01	; 1
    4d42:	9b ab       	std	Y+51, r25	; 0x33
    4d44:	eb a9       	ldd	r30, Y+51	; 0x33
    4d46:	ee 23       	and	r30, r30
    4d48:	51 f7       	brne	.-44     	; 0x4d1e <main+0x70>
	{
			.LED_u8ACTIVE_TYPE = Active_High,
			.LED_u8PORT = DIO_u8PORTC,
			.LED_u8PIN = DIO_u8PIN1

	};
    4d4a:	ce 01       	movw	r24, r28
    4d4c:	84 96       	adiw	r24, 0x24	; 36
    4d4e:	9d ab       	std	Y+53, r25	; 0x35
    4d50:	8c ab       	std	Y+52, r24	; 0x34
    4d52:	ee e5       	ldi	r30, 0x5E	; 94
    4d54:	f1 e0       	ldi	r31, 0x01	; 1
    4d56:	ff ab       	std	Y+55, r31	; 0x37
    4d58:	ee ab       	std	Y+54, r30	; 0x36
    4d5a:	f3 e0       	ldi	r31, 0x03	; 3
    4d5c:	f8 af       	std	Y+56, r31	; 0x38
    4d5e:	ee a9       	ldd	r30, Y+54	; 0x36
    4d60:	ff a9       	ldd	r31, Y+55	; 0x37
    4d62:	00 80       	ld	r0, Z
    4d64:	8e a9       	ldd	r24, Y+54	; 0x36
    4d66:	9f a9       	ldd	r25, Y+55	; 0x37
    4d68:	01 96       	adiw	r24, 0x01	; 1
    4d6a:	9f ab       	std	Y+55, r25	; 0x37
    4d6c:	8e ab       	std	Y+54, r24	; 0x36
    4d6e:	ec a9       	ldd	r30, Y+52	; 0x34
    4d70:	fd a9       	ldd	r31, Y+53	; 0x35
    4d72:	00 82       	st	Z, r0
    4d74:	8c a9       	ldd	r24, Y+52	; 0x34
    4d76:	9d a9       	ldd	r25, Y+53	; 0x35
    4d78:	01 96       	adiw	r24, 0x01	; 1
    4d7a:	9d ab       	std	Y+53, r25	; 0x35
    4d7c:	8c ab       	std	Y+52, r24	; 0x34
    4d7e:	98 ad       	ldd	r25, Y+56	; 0x38
    4d80:	91 50       	subi	r25, 0x01	; 1
    4d82:	98 af       	std	Y+56, r25	; 0x38
    4d84:	e8 ad       	ldd	r30, Y+56	; 0x38
    4d86:	ee 23       	and	r30, r30
    4d88:	51 f7       	brne	.-44     	; 0x4d5e <main+0xb0>
	Buzz_config_t Local_stBuzzer=
	{
			.u8ActiveType = Buzz_Active_high,
			.u8Port = DIO_u8PORTC,
			.u8Pin = DIO_u8PIN5
	};
    4d8a:	ce 01       	movw	r24, r28
    4d8c:	87 96       	adiw	r24, 0x27	; 39
    4d8e:	9a af       	std	Y+58, r25	; 0x3a
    4d90:	89 af       	std	Y+57, r24	; 0x39
    4d92:	eb e5       	ldi	r30, 0x5B	; 91
    4d94:	f1 e0       	ldi	r31, 0x01	; 1
    4d96:	fc af       	std	Y+60, r31	; 0x3c
    4d98:	eb af       	std	Y+59, r30	; 0x3b
    4d9a:	f3 e0       	ldi	r31, 0x03	; 3
    4d9c:	fd af       	std	Y+61, r31	; 0x3d
    4d9e:	eb ad       	ldd	r30, Y+59	; 0x3b
    4da0:	fc ad       	ldd	r31, Y+60	; 0x3c
    4da2:	00 80       	ld	r0, Z
    4da4:	8b ad       	ldd	r24, Y+59	; 0x3b
    4da6:	9c ad       	ldd	r25, Y+60	; 0x3c
    4da8:	01 96       	adiw	r24, 0x01	; 1
    4daa:	9c af       	std	Y+60, r25	; 0x3c
    4dac:	8b af       	std	Y+59, r24	; 0x3b
    4dae:	e9 ad       	ldd	r30, Y+57	; 0x39
    4db0:	fa ad       	ldd	r31, Y+58	; 0x3a
    4db2:	00 82       	st	Z, r0
    4db4:	89 ad       	ldd	r24, Y+57	; 0x39
    4db6:	9a ad       	ldd	r25, Y+58	; 0x3a
    4db8:	01 96       	adiw	r24, 0x01	; 1
    4dba:	9a af       	std	Y+58, r25	; 0x3a
    4dbc:	89 af       	std	Y+57, r24	; 0x39
    4dbe:	9d ad       	ldd	r25, Y+61	; 0x3d
    4dc0:	91 50       	subi	r25, 0x01	; 1
    4dc2:	9d af       	std	Y+61, r25	; 0x3d
    4dc4:	ed ad       	ldd	r30, Y+61	; 0x3d
    4dc6:	ee 23       	and	r30, r30
    4dc8:	51 f7       	brne	.-44     	; 0x4d9e <main+0xf0>

	while(1)
	 {
 Local_u8Distance=Ultrasonic_u8GetDistance(DIO_u8PORTC,DIO_u8PIN4
    4dca:	82 e0       	ldi	r24, 0x02	; 2
    4dcc:	64 e0       	ldi	r22, 0x04	; 4
    4dce:	0e 94 e0 24 	call	0x49c0	; 0x49c0 <Ultrasonic_u8GetDistance>
    4dd2:	8d 8f       	std	Y+29, r24	; 0x1d
  CLCD_u8SendString("cm ");*/




 if(Local_u8Distance < 10)
    4dd4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4dd6:	8a 30       	cpi	r24, 0x0A	; 10
    4dd8:	08 f0       	brcs	.+2      	; 0x4ddc <main+0x12e>
    4dda:	8b c0       	rjmp	.+278    	; 0x4ef2 <main+0x244>
 		{
	        /*Set Green and Blue LED off*/
	  			LED_u8SetOFF(&Local_stBlueLED);
    4ddc:	ce 01       	movw	r24, r28
    4dde:	81 96       	adiw	r24, 0x21	; 33
    4de0:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <LED_u8SetOFF>
	  			LED_u8SetOFF(&Local_stGreenLED);
    4de4:	ce 01       	movw	r24, r28
    4de6:	84 96       	adiw	r24, 0x24	; 36
    4de8:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <LED_u8SetOFF>
 			/*Toggle Red LED and Buzzer*/
	        LED_u8Toggle(&Local_stRedLED);
    4dec:	ce 01       	movw	r24, r28
    4dee:	4e 96       	adiw	r24, 0x1e	; 30
    4df0:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <LED_u8Toggle>
 			Buzz_u8Toggle(&Local_stBuzzer);
    4df4:	ce 01       	movw	r24, r28
    4df6:	87 96       	adiw	r24, 0x27	; 39
    4df8:	0e 94 c1 06 	call	0xd82	; 0xd82 <Buzz_u8Toggle>


 			CLCD_VoidGoToXY(0,0);
    4dfc:	80 e0       	ldi	r24, 0x00	; 0
    4dfe:	60 e0       	ldi	r22, 0x00	; 0
    4e00:	0e 94 2f 09 	call	0x125e	; 0x125e <CLCD_VoidGoToXY>
 			CLCD_u8SendString("  HIGH RISK :'( !");
    4e04:	87 ea       	ldi	r24, 0xA7	; 167
    4e06:	90 e0       	ldi	r25, 0x00	; 0
    4e08:	0e 94 70 08 	call	0x10e0	; 0x10e0 <CLCD_u8SendString>
    4e0c:	80 e0       	ldi	r24, 0x00	; 0
    4e0e:	90 e0       	ldi	r25, 0x00	; 0
    4e10:	a8 ec       	ldi	r26, 0xC8	; 200
    4e12:	b2 e4       	ldi	r27, 0x42	; 66
    4e14:	89 8f       	std	Y+25, r24	; 0x19
    4e16:	9a 8f       	std	Y+26, r25	; 0x1a
    4e18:	ab 8f       	std	Y+27, r26	; 0x1b
    4e1a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e1c:	69 8d       	ldd	r22, Y+25	; 0x19
    4e1e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4e20:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4e22:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4e24:	20 e0       	ldi	r18, 0x00	; 0
    4e26:	30 e0       	ldi	r19, 0x00	; 0
    4e28:	4a e7       	ldi	r20, 0x7A	; 122
    4e2a:	55 e4       	ldi	r21, 0x45	; 69
    4e2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e30:	dc 01       	movw	r26, r24
    4e32:	cb 01       	movw	r24, r22
    4e34:	8d 8b       	std	Y+21, r24	; 0x15
    4e36:	9e 8b       	std	Y+22, r25	; 0x16
    4e38:	af 8b       	std	Y+23, r26	; 0x17
    4e3a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4e3c:	6d 89       	ldd	r22, Y+21	; 0x15
    4e3e:	7e 89       	ldd	r23, Y+22	; 0x16
    4e40:	8f 89       	ldd	r24, Y+23	; 0x17
    4e42:	98 8d       	ldd	r25, Y+24	; 0x18
    4e44:	20 e0       	ldi	r18, 0x00	; 0
    4e46:	30 e0       	ldi	r19, 0x00	; 0
    4e48:	40 e8       	ldi	r20, 0x80	; 128
    4e4a:	5f e3       	ldi	r21, 0x3F	; 63
    4e4c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4e50:	88 23       	and	r24, r24
    4e52:	2c f4       	brge	.+10     	; 0x4e5e <main+0x1b0>
		__ticks = 1;
    4e54:	81 e0       	ldi	r24, 0x01	; 1
    4e56:	90 e0       	ldi	r25, 0x00	; 0
    4e58:	9c 8b       	std	Y+20, r25	; 0x14
    4e5a:	8b 8b       	std	Y+19, r24	; 0x13
    4e5c:	3f c0       	rjmp	.+126    	; 0x4edc <main+0x22e>
	else if (__tmp > 65535)
    4e5e:	6d 89       	ldd	r22, Y+21	; 0x15
    4e60:	7e 89       	ldd	r23, Y+22	; 0x16
    4e62:	8f 89       	ldd	r24, Y+23	; 0x17
    4e64:	98 8d       	ldd	r25, Y+24	; 0x18
    4e66:	20 e0       	ldi	r18, 0x00	; 0
    4e68:	3f ef       	ldi	r19, 0xFF	; 255
    4e6a:	4f e7       	ldi	r20, 0x7F	; 127
    4e6c:	57 e4       	ldi	r21, 0x47	; 71
    4e6e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4e72:	18 16       	cp	r1, r24
    4e74:	4c f5       	brge	.+82     	; 0x4ec8 <main+0x21a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e76:	69 8d       	ldd	r22, Y+25	; 0x19
    4e78:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4e7a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4e7c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4e7e:	20 e0       	ldi	r18, 0x00	; 0
    4e80:	30 e0       	ldi	r19, 0x00	; 0
    4e82:	40 e2       	ldi	r20, 0x20	; 32
    4e84:	51 e4       	ldi	r21, 0x41	; 65
    4e86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e8a:	dc 01       	movw	r26, r24
    4e8c:	cb 01       	movw	r24, r22
    4e8e:	bc 01       	movw	r22, r24
    4e90:	cd 01       	movw	r24, r26
    4e92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e96:	dc 01       	movw	r26, r24
    4e98:	cb 01       	movw	r24, r22
    4e9a:	9c 8b       	std	Y+20, r25	; 0x14
    4e9c:	8b 8b       	std	Y+19, r24	; 0x13
    4e9e:	0f c0       	rjmp	.+30     	; 0x4ebe <main+0x210>
    4ea0:	80 e9       	ldi	r24, 0x90	; 144
    4ea2:	91 e0       	ldi	r25, 0x01	; 1
    4ea4:	9a 8b       	std	Y+18, r25	; 0x12
    4ea6:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4ea8:	89 89       	ldd	r24, Y+17	; 0x11
    4eaa:	9a 89       	ldd	r25, Y+18	; 0x12
    4eac:	01 97       	sbiw	r24, 0x01	; 1
    4eae:	f1 f7       	brne	.-4      	; 0x4eac <main+0x1fe>
    4eb0:	9a 8b       	std	Y+18, r25	; 0x12
    4eb2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4eb4:	8b 89       	ldd	r24, Y+19	; 0x13
    4eb6:	9c 89       	ldd	r25, Y+20	; 0x14
    4eb8:	01 97       	sbiw	r24, 0x01	; 1
    4eba:	9c 8b       	std	Y+20, r25	; 0x14
    4ebc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ebe:	8b 89       	ldd	r24, Y+19	; 0x13
    4ec0:	9c 89       	ldd	r25, Y+20	; 0x14
    4ec2:	00 97       	sbiw	r24, 0x00	; 0
    4ec4:	69 f7       	brne	.-38     	; 0x4ea0 <main+0x1f2>
    4ec6:	81 cf       	rjmp	.-254    	; 0x4dca <main+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ec8:	6d 89       	ldd	r22, Y+21	; 0x15
    4eca:	7e 89       	ldd	r23, Y+22	; 0x16
    4ecc:	8f 89       	ldd	r24, Y+23	; 0x17
    4ece:	98 8d       	ldd	r25, Y+24	; 0x18
    4ed0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ed4:	dc 01       	movw	r26, r24
    4ed6:	cb 01       	movw	r24, r22
    4ed8:	9c 8b       	std	Y+20, r25	; 0x14
    4eda:	8b 8b       	std	Y+19, r24	; 0x13
    4edc:	8b 89       	ldd	r24, Y+19	; 0x13
    4ede:	9c 89       	ldd	r25, Y+20	; 0x14
    4ee0:	98 8b       	std	Y+16, r25	; 0x10
    4ee2:	8f 87       	std	Y+15, r24	; 0x0f
    4ee4:	8f 85       	ldd	r24, Y+15	; 0x0f
    4ee6:	98 89       	ldd	r25, Y+16	; 0x10
    4ee8:	01 97       	sbiw	r24, 0x01	; 1
    4eea:	f1 f7       	brne	.-4      	; 0x4ee8 <main+0x23a>
    4eec:	98 8b       	std	Y+16, r25	; 0x10
    4eee:	8f 87       	std	Y+15, r24	; 0x0f
    4ef0:	6c cf       	rjmp	.-296    	; 0x4dca <main+0x11c>

 			/* toggling speed*/
 			_delay_ms(100);
 		}

 else if((Local_u8Distance>10)&&(Local_u8Distance<25))
    4ef2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4ef4:	8b 30       	cpi	r24, 0x0B	; 11
    4ef6:	08 f4       	brcc	.+2      	; 0x4efa <main+0x24c>
    4ef8:	8f c0       	rjmp	.+286    	; 0x5018 <main+0x36a>
    4efa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4efc:	89 31       	cpi	r24, 0x19	; 25
    4efe:	08 f0       	brcs	.+2      	; 0x4f02 <main+0x254>
    4f00:	8b c0       	rjmp	.+278    	; 0x5018 <main+0x36a>
 {
	 /*Set RED and Blue LED off*/
		   LED_u8SetOFF(&Local_stBlueLED);
    4f02:	ce 01       	movw	r24, r28
    4f04:	81 96       	adiw	r24, 0x21	; 33
    4f06:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <LED_u8SetOFF>
		   LED_u8SetOFF(&Local_stRedLED);
    4f0a:	ce 01       	movw	r24, r28
    4f0c:	4e 96       	adiw	r24, 0x1e	; 30
    4f0e:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <LED_u8SetOFF>

	 /*Toggle Green led*/
	   LED_u8Toggle(&Local_stGreenLED);
    4f12:	ce 01       	movw	r24, r28
    4f14:	84 96       	adiw	r24, 0x24	; 36
    4f16:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <LED_u8Toggle>
	   Buzz_u8Toggle(&Local_stBuzzer);
    4f1a:	ce 01       	movw	r24, r28
    4f1c:	87 96       	adiw	r24, 0x27	; 39
    4f1e:	0e 94 c1 06 	call	0xd82	; 0xd82 <Buzz_u8Toggle>



	  	CLCD_VoidGoToXY(0,0);
    4f22:	80 e0       	ldi	r24, 0x00	; 0
    4f24:	60 e0       	ldi	r22, 0x00	; 0
    4f26:	0e 94 2f 09 	call	0x125e	; 0x125e <CLCD_VoidGoToXY>
	  	CLCD_u8SendString(" BE CAREFUL :( ");
    4f2a:	89 eb       	ldi	r24, 0xB9	; 185
    4f2c:	90 e0       	ldi	r25, 0x00	; 0
    4f2e:	0e 94 70 08 	call	0x10e0	; 0x10e0 <CLCD_u8SendString>
    4f32:	80 e0       	ldi	r24, 0x00	; 0
    4f34:	90 e0       	ldi	r25, 0x00	; 0
    4f36:	a6 e9       	ldi	r26, 0x96	; 150
    4f38:	b3 e4       	ldi	r27, 0x43	; 67
    4f3a:	8b 87       	std	Y+11, r24	; 0x0b
    4f3c:	9c 87       	std	Y+12, r25	; 0x0c
    4f3e:	ad 87       	std	Y+13, r26	; 0x0d
    4f40:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f42:	6b 85       	ldd	r22, Y+11	; 0x0b
    4f44:	7c 85       	ldd	r23, Y+12	; 0x0c
    4f46:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f48:	9e 85       	ldd	r25, Y+14	; 0x0e
    4f4a:	20 e0       	ldi	r18, 0x00	; 0
    4f4c:	30 e0       	ldi	r19, 0x00	; 0
    4f4e:	4a e7       	ldi	r20, 0x7A	; 122
    4f50:	55 e4       	ldi	r21, 0x45	; 69
    4f52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f56:	dc 01       	movw	r26, r24
    4f58:	cb 01       	movw	r24, r22
    4f5a:	8f 83       	std	Y+7, r24	; 0x07
    4f5c:	98 87       	std	Y+8, r25	; 0x08
    4f5e:	a9 87       	std	Y+9, r26	; 0x09
    4f60:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4f62:	6f 81       	ldd	r22, Y+7	; 0x07
    4f64:	78 85       	ldd	r23, Y+8	; 0x08
    4f66:	89 85       	ldd	r24, Y+9	; 0x09
    4f68:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f6a:	20 e0       	ldi	r18, 0x00	; 0
    4f6c:	30 e0       	ldi	r19, 0x00	; 0
    4f6e:	40 e8       	ldi	r20, 0x80	; 128
    4f70:	5f e3       	ldi	r21, 0x3F	; 63
    4f72:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4f76:	88 23       	and	r24, r24
    4f78:	2c f4       	brge	.+10     	; 0x4f84 <main+0x2d6>
		__ticks = 1;
    4f7a:	81 e0       	ldi	r24, 0x01	; 1
    4f7c:	90 e0       	ldi	r25, 0x00	; 0
    4f7e:	9e 83       	std	Y+6, r25	; 0x06
    4f80:	8d 83       	std	Y+5, r24	; 0x05
    4f82:	3f c0       	rjmp	.+126    	; 0x5002 <main+0x354>
	else if (__tmp > 65535)
    4f84:	6f 81       	ldd	r22, Y+7	; 0x07
    4f86:	78 85       	ldd	r23, Y+8	; 0x08
    4f88:	89 85       	ldd	r24, Y+9	; 0x09
    4f8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f8c:	20 e0       	ldi	r18, 0x00	; 0
    4f8e:	3f ef       	ldi	r19, 0xFF	; 255
    4f90:	4f e7       	ldi	r20, 0x7F	; 127
    4f92:	57 e4       	ldi	r21, 0x47	; 71
    4f94:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4f98:	18 16       	cp	r1, r24
    4f9a:	4c f5       	brge	.+82     	; 0x4fee <main+0x340>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f9c:	6b 85       	ldd	r22, Y+11	; 0x0b
    4f9e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4fa0:	8d 85       	ldd	r24, Y+13	; 0x0d
    4fa2:	9e 85       	ldd	r25, Y+14	; 0x0e
    4fa4:	20 e0       	ldi	r18, 0x00	; 0
    4fa6:	30 e0       	ldi	r19, 0x00	; 0
    4fa8:	40 e2       	ldi	r20, 0x20	; 32
    4faa:	51 e4       	ldi	r21, 0x41	; 65
    4fac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fb0:	dc 01       	movw	r26, r24
    4fb2:	cb 01       	movw	r24, r22
    4fb4:	bc 01       	movw	r22, r24
    4fb6:	cd 01       	movw	r24, r26
    4fb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fbc:	dc 01       	movw	r26, r24
    4fbe:	cb 01       	movw	r24, r22
    4fc0:	9e 83       	std	Y+6, r25	; 0x06
    4fc2:	8d 83       	std	Y+5, r24	; 0x05
    4fc4:	0f c0       	rjmp	.+30     	; 0x4fe4 <main+0x336>
    4fc6:	80 e9       	ldi	r24, 0x90	; 144
    4fc8:	91 e0       	ldi	r25, 0x01	; 1
    4fca:	9c 83       	std	Y+4, r25	; 0x04
    4fcc:	8b 83       	std	Y+3, r24	; 0x03
    4fce:	8b 81       	ldd	r24, Y+3	; 0x03
    4fd0:	9c 81       	ldd	r25, Y+4	; 0x04
    4fd2:	01 97       	sbiw	r24, 0x01	; 1
    4fd4:	f1 f7       	brne	.-4      	; 0x4fd2 <main+0x324>
    4fd6:	9c 83       	std	Y+4, r25	; 0x04
    4fd8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4fda:	8d 81       	ldd	r24, Y+5	; 0x05
    4fdc:	9e 81       	ldd	r25, Y+6	; 0x06
    4fde:	01 97       	sbiw	r24, 0x01	; 1
    4fe0:	9e 83       	std	Y+6, r25	; 0x06
    4fe2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4fe4:	8d 81       	ldd	r24, Y+5	; 0x05
    4fe6:	9e 81       	ldd	r25, Y+6	; 0x06
    4fe8:	00 97       	sbiw	r24, 0x00	; 0
    4fea:	69 f7       	brne	.-38     	; 0x4fc6 <main+0x318>
    4fec:	ee ce       	rjmp	.-548    	; 0x4dca <main+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4fee:	6f 81       	ldd	r22, Y+7	; 0x07
    4ff0:	78 85       	ldd	r23, Y+8	; 0x08
    4ff2:	89 85       	ldd	r24, Y+9	; 0x09
    4ff4:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ff6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ffa:	dc 01       	movw	r26, r24
    4ffc:	cb 01       	movw	r24, r22
    4ffe:	9e 83       	std	Y+6, r25	; 0x06
    5000:	8d 83       	std	Y+5, r24	; 0x05
    5002:	8d 81       	ldd	r24, Y+5	; 0x05
    5004:	9e 81       	ldd	r25, Y+6	; 0x06
    5006:	9a 83       	std	Y+2, r25	; 0x02
    5008:	89 83       	std	Y+1, r24	; 0x01
    500a:	89 81       	ldd	r24, Y+1	; 0x01
    500c:	9a 81       	ldd	r25, Y+2	; 0x02
    500e:	01 97       	sbiw	r24, 0x01	; 1
    5010:	f1 f7       	brne	.-4      	; 0x500e <main+0x360>
    5012:	9a 83       	std	Y+2, r25	; 0x02
    5014:	89 83       	std	Y+1, r24	; 0x01
    5016:	d9 ce       	rjmp	.-590    	; 0x4dca <main+0x11c>
	  	_delay_ms(300);
 }
 else
 {
	 /*Set RED and Blue LED off*/
		    LED_u8SetOFF(&Local_stGreenLED);
    5018:	ce 01       	movw	r24, r28
    501a:	84 96       	adiw	r24, 0x24	; 36
    501c:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <LED_u8SetOFF>
			LED_u8SetOFF(&Local_stRedLED);
    5020:	ce 01       	movw	r24, r28
    5022:	4e 96       	adiw	r24, 0x1e	; 30
    5024:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <LED_u8SetOFF>

	     LED_u8Toggle(&Local_stBlueLED);
    5028:	ce 01       	movw	r24, r28
    502a:	81 96       	adiw	r24, 0x21	; 33
    502c:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <LED_u8Toggle>
	     Buzz_u8Off(&Local_stBuzzer);
    5030:	ce 01       	movw	r24, r28
    5032:	87 96       	adiw	r24, 0x27	; 39
    5034:	0e 94 88 06 	call	0xd10	; 0xd10 <Buzz_u8Off>


		//CLCD_voidClear();
		  CLCD_VoidGoToXY(0,0);
    5038:	80 e0       	ldi	r24, 0x00	; 0
    503a:	60 e0       	ldi	r22, 0x00	; 0
    503c:	0e 94 2f 09 	call	0x125e	; 0x125e <CLCD_VoidGoToXY>
		  CLCD_u8SendString("  NO RISK :)  " );
    5040:	89 ec       	ldi	r24, 0xC9	; 201
    5042:	90 e0       	ldi	r25, 0x00	; 0
    5044:	0e 94 70 08 	call	0x10e0	; 0x10e0 <CLCD_u8SendString>
    5048:	c0 ce       	rjmp	.-640    	; 0x4dca <main+0x11c>

0000504a <__mulsi3>:
    504a:	62 9f       	mul	r22, r18
    504c:	d0 01       	movw	r26, r0
    504e:	73 9f       	mul	r23, r19
    5050:	f0 01       	movw	r30, r0
    5052:	82 9f       	mul	r24, r18
    5054:	e0 0d       	add	r30, r0
    5056:	f1 1d       	adc	r31, r1
    5058:	64 9f       	mul	r22, r20
    505a:	e0 0d       	add	r30, r0
    505c:	f1 1d       	adc	r31, r1
    505e:	92 9f       	mul	r25, r18
    5060:	f0 0d       	add	r31, r0
    5062:	83 9f       	mul	r24, r19
    5064:	f0 0d       	add	r31, r0
    5066:	74 9f       	mul	r23, r20
    5068:	f0 0d       	add	r31, r0
    506a:	65 9f       	mul	r22, r21
    506c:	f0 0d       	add	r31, r0
    506e:	99 27       	eor	r25, r25
    5070:	72 9f       	mul	r23, r18
    5072:	b0 0d       	add	r27, r0
    5074:	e1 1d       	adc	r30, r1
    5076:	f9 1f       	adc	r31, r25
    5078:	63 9f       	mul	r22, r19
    507a:	b0 0d       	add	r27, r0
    507c:	e1 1d       	adc	r30, r1
    507e:	f9 1f       	adc	r31, r25
    5080:	bd 01       	movw	r22, r26
    5082:	cf 01       	movw	r24, r30
    5084:	11 24       	eor	r1, r1
    5086:	08 95       	ret

00005088 <__udivmodsi4>:
    5088:	a1 e2       	ldi	r26, 0x21	; 33
    508a:	1a 2e       	mov	r1, r26
    508c:	aa 1b       	sub	r26, r26
    508e:	bb 1b       	sub	r27, r27
    5090:	fd 01       	movw	r30, r26
    5092:	0d c0       	rjmp	.+26     	; 0x50ae <__udivmodsi4_ep>

00005094 <__udivmodsi4_loop>:
    5094:	aa 1f       	adc	r26, r26
    5096:	bb 1f       	adc	r27, r27
    5098:	ee 1f       	adc	r30, r30
    509a:	ff 1f       	adc	r31, r31
    509c:	a2 17       	cp	r26, r18
    509e:	b3 07       	cpc	r27, r19
    50a0:	e4 07       	cpc	r30, r20
    50a2:	f5 07       	cpc	r31, r21
    50a4:	20 f0       	brcs	.+8      	; 0x50ae <__udivmodsi4_ep>
    50a6:	a2 1b       	sub	r26, r18
    50a8:	b3 0b       	sbc	r27, r19
    50aa:	e4 0b       	sbc	r30, r20
    50ac:	f5 0b       	sbc	r31, r21

000050ae <__udivmodsi4_ep>:
    50ae:	66 1f       	adc	r22, r22
    50b0:	77 1f       	adc	r23, r23
    50b2:	88 1f       	adc	r24, r24
    50b4:	99 1f       	adc	r25, r25
    50b6:	1a 94       	dec	r1
    50b8:	69 f7       	brne	.-38     	; 0x5094 <__udivmodsi4_loop>
    50ba:	60 95       	com	r22
    50bc:	70 95       	com	r23
    50be:	80 95       	com	r24
    50c0:	90 95       	com	r25
    50c2:	9b 01       	movw	r18, r22
    50c4:	ac 01       	movw	r20, r24
    50c6:	bd 01       	movw	r22, r26
    50c8:	cf 01       	movw	r24, r30
    50ca:	08 95       	ret

000050cc <__divmodsi4>:
    50cc:	97 fb       	bst	r25, 7
    50ce:	09 2e       	mov	r0, r25
    50d0:	05 26       	eor	r0, r21
    50d2:	0e d0       	rcall	.+28     	; 0x50f0 <__divmodsi4_neg1>
    50d4:	57 fd       	sbrc	r21, 7
    50d6:	04 d0       	rcall	.+8      	; 0x50e0 <__divmodsi4_neg2>
    50d8:	d7 df       	rcall	.-82     	; 0x5088 <__udivmodsi4>
    50da:	0a d0       	rcall	.+20     	; 0x50f0 <__divmodsi4_neg1>
    50dc:	00 1c       	adc	r0, r0
    50de:	38 f4       	brcc	.+14     	; 0x50ee <__divmodsi4_exit>

000050e0 <__divmodsi4_neg2>:
    50e0:	50 95       	com	r21
    50e2:	40 95       	com	r20
    50e4:	30 95       	com	r19
    50e6:	21 95       	neg	r18
    50e8:	3f 4f       	sbci	r19, 0xFF	; 255
    50ea:	4f 4f       	sbci	r20, 0xFF	; 255
    50ec:	5f 4f       	sbci	r21, 0xFF	; 255

000050ee <__divmodsi4_exit>:
    50ee:	08 95       	ret

000050f0 <__divmodsi4_neg1>:
    50f0:	f6 f7       	brtc	.-4      	; 0x50ee <__divmodsi4_exit>
    50f2:	90 95       	com	r25
    50f4:	80 95       	com	r24
    50f6:	70 95       	com	r23
    50f8:	61 95       	neg	r22
    50fa:	7f 4f       	sbci	r23, 0xFF	; 255
    50fc:	8f 4f       	sbci	r24, 0xFF	; 255
    50fe:	9f 4f       	sbci	r25, 0xFF	; 255
    5100:	08 95       	ret

00005102 <__prologue_saves__>:
    5102:	2f 92       	push	r2
    5104:	3f 92       	push	r3
    5106:	4f 92       	push	r4
    5108:	5f 92       	push	r5
    510a:	6f 92       	push	r6
    510c:	7f 92       	push	r7
    510e:	8f 92       	push	r8
    5110:	9f 92       	push	r9
    5112:	af 92       	push	r10
    5114:	bf 92       	push	r11
    5116:	cf 92       	push	r12
    5118:	df 92       	push	r13
    511a:	ef 92       	push	r14
    511c:	ff 92       	push	r15
    511e:	0f 93       	push	r16
    5120:	1f 93       	push	r17
    5122:	cf 93       	push	r28
    5124:	df 93       	push	r29
    5126:	cd b7       	in	r28, 0x3d	; 61
    5128:	de b7       	in	r29, 0x3e	; 62
    512a:	ca 1b       	sub	r28, r26
    512c:	db 0b       	sbc	r29, r27
    512e:	0f b6       	in	r0, 0x3f	; 63
    5130:	f8 94       	cli
    5132:	de bf       	out	0x3e, r29	; 62
    5134:	0f be       	out	0x3f, r0	; 63
    5136:	cd bf       	out	0x3d, r28	; 61
    5138:	09 94       	ijmp

0000513a <__epilogue_restores__>:
    513a:	2a 88       	ldd	r2, Y+18	; 0x12
    513c:	39 88       	ldd	r3, Y+17	; 0x11
    513e:	48 88       	ldd	r4, Y+16	; 0x10
    5140:	5f 84       	ldd	r5, Y+15	; 0x0f
    5142:	6e 84       	ldd	r6, Y+14	; 0x0e
    5144:	7d 84       	ldd	r7, Y+13	; 0x0d
    5146:	8c 84       	ldd	r8, Y+12	; 0x0c
    5148:	9b 84       	ldd	r9, Y+11	; 0x0b
    514a:	aa 84       	ldd	r10, Y+10	; 0x0a
    514c:	b9 84       	ldd	r11, Y+9	; 0x09
    514e:	c8 84       	ldd	r12, Y+8	; 0x08
    5150:	df 80       	ldd	r13, Y+7	; 0x07
    5152:	ee 80       	ldd	r14, Y+6	; 0x06
    5154:	fd 80       	ldd	r15, Y+5	; 0x05
    5156:	0c 81       	ldd	r16, Y+4	; 0x04
    5158:	1b 81       	ldd	r17, Y+3	; 0x03
    515a:	aa 81       	ldd	r26, Y+2	; 0x02
    515c:	b9 81       	ldd	r27, Y+1	; 0x01
    515e:	ce 0f       	add	r28, r30
    5160:	d1 1d       	adc	r29, r1
    5162:	0f b6       	in	r0, 0x3f	; 63
    5164:	f8 94       	cli
    5166:	de bf       	out	0x3e, r29	; 62
    5168:	0f be       	out	0x3f, r0	; 63
    516a:	cd bf       	out	0x3d, r28	; 61
    516c:	ed 01       	movw	r28, r26
    516e:	08 95       	ret

00005170 <_exit>:
    5170:	f8 94       	cli

00005172 <__stop_program>:
    5172:	ff cf       	rjmp	.-2      	; 0x5172 <__stop_program>
