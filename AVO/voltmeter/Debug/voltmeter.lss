
voltmeter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003ffc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d4  00800060  00003ffc  00004090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800134  00800134  00004164  2**0
                  ALLOC
  3 .stab         00002c28  00000000  00000000  00004164  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000101a  00000000  00000000  00006d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007da6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007ee6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008056  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009c9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000ab8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b938  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ba98  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000bd25  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c4f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ef       	ldi	r30, 0xFC	; 252
      68:	ff e3       	ldi	r31, 0x3F	; 63
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 33       	cpi	r26, 0x34	; 52
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e3       	ldi	r26, 0x34	; 52
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 33       	cpi	r26, 0x3D	; 61
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <main>
      8a:	0c 94 fc 1f 	jmp	0x3ff8	; 0x3ff8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c5 1f 	jmp	0x3f8a	; 0x3f8a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 eb       	ldi	r26, 0xB4	; 180
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e1 1f 	jmp	0x3fc2	; 0x3fc2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d1 1f 	jmp	0x3fa2	; 0x3fa2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ed 1f 	jmp	0x3fda	; 0x3fda <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d1 1f 	jmp	0x3fa2	; 0x3fa2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ed 1f 	jmp	0x3fda	; 0x3fda <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c5 1f 	jmp	0x3f8a	; 0x3f8a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	84 eb       	ldi	r24, 0xB4	; 180
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e1 1f 	jmp	0x3fc2	; 0x3fc2 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d1 1f 	jmp	0x3fa2	; 0x3fa2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ed 1f 	jmp	0x3fda	; 0x3fda <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 d1 1f 	jmp	0x3fa2	; 0x3fa2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ed 1f 	jmp	0x3fda	; 0x3fda <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 d1 1f 	jmp	0x3fa2	; 0x3fa2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ed 1f 	jmp	0x3fda	; 0x3fda <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 d5 1f 	jmp	0x3faa	; 0x3faa <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 f1 1f 	jmp	0x3fe2	; 0x3fe2 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_voidInit>:
static ADC_Chain_t* ADC_pChainData = NULL;

static uint8 ADC_u8ISRSource;

void ADC_voidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62

/*Set AVCC as Refrence Voltage*/
SET_BIT(ADMUX,ADMUX_REFS0 );
     b4e:	a7 e2       	ldi	r26, 0x27	; 39
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e7 e2       	ldi	r30, 0x27	; 39
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 64       	ori	r24, 0x40	; 64
     b5a:	8c 93       	st	X, r24
CLR_BIT(ADMUX,ADMUX_REFS1);
     b5c:	a7 e2       	ldi	r26, 0x27	; 39
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e7 e2       	ldi	r30, 0x27	; 39
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	8f 77       	andi	r24, 0x7F	; 127
     b68:	8c 93       	st	X, r24

/* select left or right adjust According to Resolution Configuration */
#if  ADC_u8Resolution ==EIGHT_BITS
SET_BIT(ADMUX,ADMUX_ADLAR);
     b6a:	a7 e2       	ldi	r26, 0x27	; 39
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e7 e2       	ldi	r30, 0x27	; 39
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	80 62       	ori	r24, 0x20	; 32
     b76:	8c 93       	st	X, r24
CLR_BIT(ADMUX,ADMUX_ADLAR);
#else
#error wrong ADC_u8Resolution Configuration Option
#endif
/*DISABLE AUTO Trigger Mode */
CLR_BIT(ADCSRA,ADCSRA_ADATE);
     b78:	a6 e2       	ldi	r26, 0x26	; 38
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e6 e2       	ldi	r30, 0x26	; 38
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	8f 7d       	andi	r24, 0xDF	; 223
     b84:	8c 93       	st	X, r24

/*DISABLE Interrupt Enable  */
CLR_BIT(ADCSRA,ADCSRA_ADIE);
     b86:	a6 e2       	ldi	r26, 0x26	; 38
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e6 e2       	ldi	r30, 0x26	; 38
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	87 7f       	andi	r24, 0xF7	; 247
     b92:	8c 93       	st	X, r24

/*ENABLE ADC*/
SET_BIT(ADCSRA,ADCSRA_ADEN);
     b94:	a6 e2       	ldi	r26, 0x26	; 38
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e6 e2       	ldi	r30, 0x26	; 38
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	80 68       	ori	r24, 0x80	; 128
     ba0:	8c 93       	st	X, r24

/*configure the prescaler division */

/*Clear prescaler*/
ADCSRA &= PRESCALER_BIT_MASK;
     ba2:	a6 e2       	ldi	r26, 0x26	; 38
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e6 e2       	ldi	r30, 0x26	; 38
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	88 7f       	andi	r24, 0xF8	; 248
     bae:	8c 93       	st	X, r24
ADCSRA |= ADC_u8PRESCALER_DIVISION_FACTOR << PRESCALER_BIT_POS ;
     bb0:	a6 e2       	ldi	r26, 0x26	; 38
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	e6 e2       	ldi	r30, 0x26	; 38
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	87 60       	ori	r24, 0x07	; 7
     bbc:	8c 93       	st	X, r24

}
     bbe:	cf 91       	pop	r28
     bc0:	df 91       	pop	r29
     bc2:	08 95       	ret

00000bc4 <ADC_u8StartSingleConversionSync>:
uint8 ADC_u8StartSingleConversionSync (uint8 Copy_u8Channel,uint16 * Copy_pu16Result)
 {
     bc4:	df 93       	push	r29
     bc6:	cf 93       	push	r28
     bc8:	cd b7       	in	r28, 0x3d	; 61
     bca:	de b7       	in	r29, 0x3e	; 62
     bcc:	28 97       	sbiw	r28, 0x08	; 8
     bce:	0f b6       	in	r0, 0x3f	; 63
     bd0:	f8 94       	cli
     bd2:	de bf       	out	0x3e, r29	; 62
     bd4:	0f be       	out	0x3f, r0	; 63
     bd6:	cd bf       	out	0x3d, r28	; 61
     bd8:	8e 83       	std	Y+6, r24	; 0x06
     bda:	78 87       	std	Y+8, r23	; 0x08
     bdc:	6f 83       	std	Y+7, r22	; 0x07
	uint32 Local_u32Counter =0u;
     bde:	1a 82       	std	Y+2, r1	; 0x02
     be0:	1b 82       	std	Y+3, r1	; 0x03
     be2:	1c 82       	std	Y+4, r1	; 0x04
     be4:	1d 82       	std	Y+5, r1	; 0x05

	uint8 Local_u8ErrorState= OK;
     be6:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_pu16Result != NULL)
     be8:	8f 81       	ldd	r24, Y+7	; 0x07
     bea:	98 85       	ldd	r25, Y+8	; 0x08
     bec:	00 97       	sbiw	r24, 0x00	; 0
     bee:	09 f4       	brne	.+2      	; 0xbf2 <ADC_u8StartSingleConversionSync+0x2e>
     bf0:	68 c0       	rjmp	.+208    	; 0xcc2 <ADC_u8StartSingleConversionSync+0xfe>
	{


            /*Check if ADC is IDLE*/
		   if(ADC_u8BusyFlag==IDLE)
     bf2:	80 91 38 01 	lds	r24, 0x0138
     bf6:	88 23       	and	r24, r24
     bf8:	09 f0       	breq	.+2      	; 0xbfc <ADC_u8StartSingleConversionSync+0x38>
     bfa:	5e c0       	rjmp	.+188    	; 0xcb8 <ADC_u8StartSingleConversionSync+0xf4>
		  {


			/*ADC is now Busy*/
			ADC_u8BusyFlag=BUSY;
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	80 93 38 01 	sts	0x0138, r24

		   /*Set the input channel*/
			ADMUX &= CHANNEL_BIT_MASK;   /*clear the channel selection bits*/
     c02:	a7 e2       	ldi	r26, 0x27	; 39
     c04:	b0 e0       	ldi	r27, 0x00	; 0
     c06:	e7 e2       	ldi	r30, 0x27	; 39
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	80 81       	ld	r24, Z
     c0c:	80 7e       	andi	r24, 0xE0	; 224
     c0e:	8c 93       	st	X, r24
			ADMUX |= Copy_u8Channel;
     c10:	a7 e2       	ldi	r26, 0x27	; 39
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	e7 e2       	ldi	r30, 0x27	; 39
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	90 81       	ld	r25, Z
     c1a:	8e 81       	ldd	r24, Y+6	; 0x06
     c1c:	89 2b       	or	r24, r25
     c1e:	8c 93       	st	X, r24
		    /*Start Conversion*/
		   SET_BIT(ADCSRA,ADCSRA_ADSC);
     c20:	a6 e2       	ldi	r26, 0x26	; 38
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	e6 e2       	ldi	r30, 0x26	; 38
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	80 81       	ld	r24, Z
     c2a:	80 64       	ori	r24, 0x40	; 64
     c2c:	8c 93       	st	X, r24
     c2e:	0b c0       	rjmp	.+22     	; 0xc46 <ADC_u8StartSingleConversionSync+0x82>
		   /*Polling (WITH BLOCKING) on the conversion complete on condition that Time out is not passed yet*/
		   while((GET_BIT(ADCSRA,ADCSRA_ADIF)==0u )&& (Local_u32Counter< ADC_u32TIMEOUT))    //(!GET_BIT(ADCSRA,ADCSRA_ADIF))
		   {
			   Local_u32Counter++;
     c30:	8a 81       	ldd	r24, Y+2	; 0x02
     c32:	9b 81       	ldd	r25, Y+3	; 0x03
     c34:	ac 81       	ldd	r26, Y+4	; 0x04
     c36:	bd 81       	ldd	r27, Y+5	; 0x05
     c38:	01 96       	adiw	r24, 0x01	; 1
     c3a:	a1 1d       	adc	r26, r1
     c3c:	b1 1d       	adc	r27, r1
     c3e:	8a 83       	std	Y+2, r24	; 0x02
     c40:	9b 83       	std	Y+3, r25	; 0x03
     c42:	ac 83       	std	Y+4, r26	; 0x04
     c44:	bd 83       	std	Y+5, r27	; 0x05
			ADMUX &= CHANNEL_BIT_MASK;   /*clear the channel selection bits*/
			ADMUX |= Copy_u8Channel;
		    /*Start Conversion*/
		   SET_BIT(ADCSRA,ADCSRA_ADSC);
		   /*Polling (WITH BLOCKING) on the conversion complete on condition that Time out is not passed yet*/
		   while((GET_BIT(ADCSRA,ADCSRA_ADIF)==0u )&& (Local_u32Counter< ADC_u32TIMEOUT))    //(!GET_BIT(ADCSRA,ADCSRA_ADIF))
     c46:	e6 e2       	ldi	r30, 0x26	; 38
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	80 81       	ld	r24, Z
     c4c:	82 95       	swap	r24
     c4e:	8f 70       	andi	r24, 0x0F	; 15
     c50:	88 2f       	mov	r24, r24
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	81 70       	andi	r24, 0x01	; 1
     c56:	90 70       	andi	r25, 0x00	; 0
     c58:	00 97       	sbiw	r24, 0x00	; 0
     c5a:	61 f4       	brne	.+24     	; 0xc74 <ADC_u8StartSingleConversionSync+0xb0>
     c5c:	8a 81       	ldd	r24, Y+2	; 0x02
     c5e:	9b 81       	ldd	r25, Y+3	; 0x03
     c60:	ac 81       	ldd	r26, Y+4	; 0x04
     c62:	bd 81       	ldd	r27, Y+5	; 0x05
     c64:	80 35       	cpi	r24, 0x50	; 80
     c66:	23 ec       	ldi	r18, 0xC3	; 195
     c68:	92 07       	cpc	r25, r18
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	a2 07       	cpc	r26, r18
     c6e:	20 e0       	ldi	r18, 0x00	; 0
     c70:	b2 07       	cpc	r27, r18
     c72:	f0 f2       	brcs	.-68     	; 0xc30 <ADC_u8StartSingleConversionSync+0x6c>
		   {
			   Local_u32Counter++;
		   }
		   if(Local_u32Counter==ADC_u32TIMEOUT)
     c74:	8a 81       	ldd	r24, Y+2	; 0x02
     c76:	9b 81       	ldd	r25, Y+3	; 0x03
     c78:	ac 81       	ldd	r26, Y+4	; 0x04
     c7a:	bd 81       	ldd	r27, Y+5	; 0x05
     c7c:	80 35       	cpi	r24, 0x50	; 80
     c7e:	23 ec       	ldi	r18, 0xC3	; 195
     c80:	92 07       	cpc	r25, r18
     c82:	20 e0       	ldi	r18, 0x00	; 0
     c84:	a2 07       	cpc	r26, r18
     c86:	20 e0       	ldi	r18, 0x00	; 0
     c88:	b2 07       	cpc	r27, r18
     c8a:	19 f4       	brne	.+6      	; 0xc92 <ADC_u8StartSingleConversionSync+0xce>
		   {
              /*Time out is passed Without the flag being raised*/
			   Local_u8ErrorState=TIMEOUT_ERR ;
     c8c:	83 e0       	ldi	r24, 0x03	; 3
     c8e:	89 83       	std	Y+1, r24	; 0x01
     c90:	10 c0       	rjmp	.+32     	; 0xcb2 <ADC_u8StartSingleConversionSync+0xee>
		   }
		     else
		      {   /*flag is raised before Timeout */
			       /*Clear Conversion complete*/
			 		    SET_BIT(ADCSRA,ADCSRA_ADIF);
     c92:	a6 e2       	ldi	r26, 0x26	; 38
     c94:	b0 e0       	ldi	r27, 0x00	; 0
     c96:	e6 e2       	ldi	r30, 0x26	; 38
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	80 81       	ld	r24, Z
     c9c:	80 61       	ori	r24, 0x10	; 16
     c9e:	8c 93       	st	X, r24

			 		   /*get conversion result*/
			 		#if  ADC_u8Resolution ==EIGHT_BITS
			 		   *Copy_pu16Result= ADCH;
     ca0:	e5 e2       	ldi	r30, 0x25	; 37
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	80 81       	ld	r24, Z
     ca6:	88 2f       	mov	r24, r24
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	ef 81       	ldd	r30, Y+7	; 0x07
     cac:	f8 85       	ldd	r31, Y+8	; 0x08
     cae:	91 83       	std	Z+1, r25	; 0x01
     cb0:	80 83       	st	Z, r24
			 		  *Copy_pu16Result= ADC;
			 		#endif

		       }
		                   /*ADC is now IDLE*/
		 		   			ADC_u8BusyFlag=IDLE;
     cb2:	10 92 38 01 	sts	0x0138, r1
     cb6:	02 c0       	rjmp	.+4      	; 0xcbc <ADC_u8StartSingleConversionSync+0xf8>
		  }
		   else {

			   /*ADC is busy,update error state*/
			   Local_u8ErrorState=BUSY_ERR;
     cb8:	84 e0       	ldi	r24, 0x04	; 4
     cba:	89 83       	std	Y+1, r24	; 0x01

		   }
		   /*ADC is now IDLE*/
		   			ADC_u8BusyFlag=IDLE;
     cbc:	10 92 38 01 	sts	0x0138, r1
     cc0:	02 c0       	rjmp	.+4      	; 0xcc6 <ADC_u8StartSingleConversionSync+0x102>
	{




		Local_u8ErrorState=NULL_PTR_ERR;
     cc2:	82 e0       	ldi	r24, 0x02	; 2
     cc4:	89 83       	std	Y+1, r24	; 0x01
	}

    return Local_u8ErrorState;
     cc6:	89 81       	ldd	r24, Y+1	; 0x01

 }
     cc8:	28 96       	adiw	r28, 0x08	; 8
     cca:	0f b6       	in	r0, 0x3f	; 63
     ccc:	f8 94       	cli
     cce:	de bf       	out	0x3e, r29	; 62
     cd0:	0f be       	out	0x3f, r0	; 63
     cd2:	cd bf       	out	0x3d, r28	; 61
     cd4:	cf 91       	pop	r28
     cd6:	df 91       	pop	r29
     cd8:	08 95       	ret

00000cda <ADC_u8StartSingleConversionAsync>:
uint8 ADC_u8StartSingleConversionAsync (uint8 Copy_u8Channel,uint16 * Copy_pu16Result, void(*Copy_pvNotificationFunc)(void))
{
     cda:	df 93       	push	r29
     cdc:	cf 93       	push	r28
     cde:	00 d0       	rcall	.+0      	; 0xce0 <ADC_u8StartSingleConversionAsync+0x6>
     ce0:	00 d0       	rcall	.+0      	; 0xce2 <ADC_u8StartSingleConversionAsync+0x8>
     ce2:	00 d0       	rcall	.+0      	; 0xce4 <ADC_u8StartSingleConversionAsync+0xa>
     ce4:	cd b7       	in	r28, 0x3d	; 61
     ce6:	de b7       	in	r29, 0x3e	; 62
     ce8:	8a 83       	std	Y+2, r24	; 0x02
     cea:	7c 83       	std	Y+4, r23	; 0x04
     cec:	6b 83       	std	Y+3, r22	; 0x03
     cee:	5e 83       	std	Y+6, r21	; 0x06
     cf0:	4d 83       	std	Y+5, r20	; 0x05

 uint8 Local_u8ErrState=OK;
     cf2:	19 82       	std	Y+1, r1	; 0x01

  if((Copy_pu16Result !=NULL) && (Copy_pvNotificationFunc!=NULL))
     cf4:	8b 81       	ldd	r24, Y+3	; 0x03
     cf6:	9c 81       	ldd	r25, Y+4	; 0x04
     cf8:	00 97       	sbiw	r24, 0x00	; 0
     cfa:	d1 f1       	breq	.+116    	; 0xd70 <ADC_u8StartSingleConversionAsync+0x96>
     cfc:	8d 81       	ldd	r24, Y+5	; 0x05
     cfe:	9e 81       	ldd	r25, Y+6	; 0x06
     d00:	00 97       	sbiw	r24, 0x00	; 0
     d02:	b1 f1       	breq	.+108    	; 0xd70 <ADC_u8StartSingleConversionAsync+0x96>

   {

	   if(ADC_u8BusyFlag==IDLE)
     d04:	80 91 38 01 	lds	r24, 0x0138
     d08:	88 23       	and	r24, r24
     d0a:	79 f5       	brne	.+94     	; 0xd6a <ADC_u8StartSingleConversionAsync+0x90>
		{
           /*ADC IS BUSY IS NOW*/
		   ADC_u8BusyFlag=BUSY;
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	80 93 38 01 	sts	0x0138, r24

          /*Convert the local ADC result into global */
          ADC_pu16Result=Copy_pu16Result;
     d12:	8b 81       	ldd	r24, Y+3	; 0x03
     d14:	9c 81       	ldd	r25, Y+4	; 0x04
     d16:	90 93 35 01 	sts	0x0135, r25
     d1a:	80 93 34 01 	sts	0x0134, r24
          /*Convert the local ADC Call back into global */
          ADC_pvCallBAckNotificationFunc=Copy_pvNotificationFunc;
     d1e:	8d 81       	ldd	r24, Y+5	; 0x05
     d20:	9e 81       	ldd	r25, Y+6	; 0x06
     d22:	90 93 37 01 	sts	0x0137, r25
     d26:	80 93 36 01 	sts	0x0136, r24


       /*Set the input channel*/
   	   ADMUX &= CHANNEL_BIT_MASK;   /*clear the channel selection bits*/
     d2a:	a7 e2       	ldi	r26, 0x27	; 39
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	e7 e2       	ldi	r30, 0x27	; 39
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	80 7e       	andi	r24, 0xE0	; 224
     d36:	8c 93       	st	X, r24
   	   ADMUX |= Copy_u8Channel;
     d38:	a7 e2       	ldi	r26, 0x27	; 39
     d3a:	b0 e0       	ldi	r27, 0x00	; 0
     d3c:	e7 e2       	ldi	r30, 0x27	; 39
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	90 81       	ld	r25, Z
     d42:	8a 81       	ldd	r24, Y+2	; 0x02
     d44:	89 2b       	or	r24, r25
     d46:	8c 93       	st	X, r24
       /*Start Conversion*/
       SET_BIT(ADCSRA,ADCSRA_ADSC);
     d48:	a6 e2       	ldi	r26, 0x26	; 38
     d4a:	b0 e0       	ldi	r27, 0x00	; 0
     d4c:	e6 e2       	ldi	r30, 0x26	; 38
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	80 81       	ld	r24, Z
     d52:	80 64       	ori	r24, 0x40	; 64
     d54:	8c 93       	st	X, r24


       /*Enable ADC Conversion complete interrupt*/
       SET_BIT(ADCSRA,ADCSRA_ADIE);
     d56:	a6 e2       	ldi	r26, 0x26	; 38
     d58:	b0 e0       	ldi	r27, 0x00	; 0
     d5a:	e6 e2       	ldi	r30, 0x26	; 38
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 81       	ld	r24, Z
     d60:	88 60       	ori	r24, 0x08	; 8
     d62:	8c 93       	st	X, r24
       /*ISR Source is Single Conversion Asynch*/
        ADC_u8ISRSource = SINGLE_ASYNCH;
     d64:	10 92 3c 01 	sts	0x013C, r1
     d68:	05 c0       	rjmp	.+10     	; 0xd74 <ADC_u8StartSingleConversionAsync+0x9a>
        }
	   else
	     {

	      Local_u8ErrState=BUSY_ERR;
     d6a:	84 e0       	ldi	r24, 0x04	; 4
     d6c:	89 83       	std	Y+1, r24	; 0x01
     d6e:	02 c0       	rjmp	.+4      	; 0xd74 <ADC_u8StartSingleConversionAsync+0x9a>
	}

    else
    {

    Local_u8ErrState=NULL_PTR_ERR;
     d70:	82 e0       	ldi	r24, 0x02	; 2
     d72:	89 83       	std	Y+1, r24	; 0x01

    }



 return Local_u8ErrState;
     d74:	89 81       	ldd	r24, Y+1	; 0x01
}
     d76:	26 96       	adiw	r28, 0x06	; 6
     d78:	0f b6       	in	r0, 0x3f	; 63
     d7a:	f8 94       	cli
     d7c:	de bf       	out	0x3e, r29	; 62
     d7e:	0f be       	out	0x3f, r0	; 63
     d80:	cd bf       	out	0x3d, r28	; 61
     d82:	cf 91       	pop	r28
     d84:	df 91       	pop	r29
     d86:	08 95       	ret

00000d88 <__vector__16>:
__attribute__ ((signal)) void __vector__16(void);
void __vector__16(void)
{
     d88:	1f 92       	push	r1
     d8a:	0f 92       	push	r0
     d8c:	0f b6       	in	r0, 0x3f	; 63
     d8e:	0f 92       	push	r0
     d90:	11 24       	eor	r1, r1
     d92:	2f 93       	push	r18
     d94:	3f 93       	push	r19
     d96:	4f 93       	push	r20
     d98:	5f 93       	push	r21
     d9a:	6f 93       	push	r22
     d9c:	7f 93       	push	r23
     d9e:	8f 93       	push	r24
     da0:	9f 93       	push	r25
     da2:	af 93       	push	r26
     da4:	bf 93       	push	r27
     da6:	ef 93       	push	r30
     da8:	ff 93       	push	r31
     daa:	df 93       	push	r29
     dac:	cf 93       	push	r28
     dae:	cd b7       	in	r28, 0x3d	; 61
     db0:	de b7       	in	r29, 0x3e	; 62
    if(ADC_u8ISRSource==SINGLE_ASYNCH)
     db2:	80 91 3c 01 	lds	r24, 0x013C
     db6:	88 23       	and	r24, r24
     db8:	09 f5       	brne	.+66     	; 0xdfc <__vector__16+0x74>
    {/* ISR COMES TO COMPLETE  THE WORK OF SINGLE ASYNCH FUNC*/
   /*Read the result*/
    #if ADC_u8Resolution ==EIGHT_BITS
	  *ADC_pu16Result= ADCH;
     dba:	a0 91 34 01 	lds	r26, 0x0134
     dbe:	b0 91 35 01 	lds	r27, 0x0135
     dc2:	e5 e2       	ldi	r30, 0x25	; 37
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	80 81       	ld	r24, Z
     dc8:	88 2f       	mov	r24, r24
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	8d 93       	st	X+, r24
     dce:	9c 93       	st	X, r25
	#elif ADC_u8Resolution ==TEN_BITS
	  *ADC_pu16Result= ADC;
	#endif
   /*Disable conversion complete interrupt*/
   CLR_BIT(ADCSRA,ADCSRA_ADIE);
     dd0:	a6 e2       	ldi	r26, 0x26	; 38
     dd2:	b0 e0       	ldi	r27, 0x00	; 0
     dd4:	e6 e2       	ldi	r30, 0x26	; 38
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	80 81       	ld	r24, Z
     dda:	87 7f       	andi	r24, 0xF7	; 247
     ddc:	8c 93       	st	X, r24
   /*ADC NOW IS IDLE*/
   ADC_u8BusyFlag=IDLE;
     dde:	10 92 38 01 	sts	0x0138, r1

 /*invoke the call back notification function*/
   if(ADC_pvCallBAckNotificationFunc !=NULL)
     de2:	80 91 36 01 	lds	r24, 0x0136
     de6:	90 91 37 01 	lds	r25, 0x0137
     dea:	00 97       	sbiw	r24, 0x00	; 0
     dec:	09 f4       	brne	.+2      	; 0xdf0 <__vector__16+0x68>
     dee:	4d c0       	rjmp	.+154    	; 0xe8a <__vector__16+0x102>
   {
      ADC_pvCallBAckNotificationFunc();
     df0:	e0 91 36 01 	lds	r30, 0x0136
     df4:	f0 91 37 01 	lds	r31, 0x0137
     df8:	09 95       	icall
     dfa:	47 c0       	rjmp	.+142    	; 0xe8a <__vector__16+0x102>
   else
   {
	   /*DO NOthing*/
   }
    }
    else if(ADC_u8ISRSource==CHAIN_ASYNCH)
     dfc:	80 91 3c 01 	lds	r24, 0x013C
     e00:	81 30       	cpi	r24, 0x01	; 1
     e02:	09 f0       	breq	.+2      	; 0xe06 <__vector__16+0x7e>
     e04:	42 c0       	rjmp	.+132    	; 0xe8a <__vector__16+0x102>
    	volatile static uint8 Local_u8ChannelIndex= 0u;

    	/* ISR COMES TO COMPLETE  THE WORK OF CHAIN ASYNCH FUNC*/
    	 /*Read the result*/
    	    #if ADC_u8Resolution ==EIGHT_BITS
    	      ADC_pChainData-> ResultArr[Local_u8ChannelIndex]= ADCH;
     e06:	e0 91 39 01 	lds	r30, 0x0139
     e0a:	f0 91 3a 01 	lds	r31, 0x013A
     e0e:	23 81       	ldd	r18, Z+3	; 0x03
     e10:	34 81       	ldd	r19, Z+4	; 0x04
     e12:	80 91 3b 01 	lds	r24, 0x013B
     e16:	88 2f       	mov	r24, r24
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	88 0f       	add	r24, r24
     e1c:	99 1f       	adc	r25, r25
     e1e:	d9 01       	movw	r26, r18
     e20:	a8 0f       	add	r26, r24
     e22:	b9 1f       	adc	r27, r25
     e24:	e5 e2       	ldi	r30, 0x25	; 37
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	88 2f       	mov	r24, r24
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	11 96       	adiw	r26, 0x01	; 1
     e30:	9c 93       	st	X, r25
     e32:	8e 93       	st	-X, r24
    		#elif ADC_u8Resolution ==TEN_BITS
    		  ADC_pChainData-> ResultArr[Local_u8ChannelIndex]= ADC;
    		#endif
        /*Increment the channel Counter*/
    		  Local_u8ChannelIndex++;
     e34:	80 91 3b 01 	lds	r24, 0x013B
     e38:	8f 5f       	subi	r24, 0xFF	; 255
     e3a:	80 93 3b 01 	sts	0x013B, r24
    		  if(Local_u8ChannelIndex == ADC_pChainData->ChainSize)
     e3e:	e0 91 39 01 	lds	r30, 0x0139
     e42:	f0 91 3a 01 	lds	r31, 0x013A
     e46:	90 81       	ld	r25, Z
     e48:	80 91 3b 01 	lds	r24, 0x013B
     e4c:	98 17       	cp	r25, r24
     e4e:	e9 f0       	breq	.+58     	; 0xe8a <__vector__16+0x102>
    		  else
    		  {

    			  //chain is not finished yet ,start the next conversion
    			  /*Set the input channel*/
    			     	   ADMUX &= CHANNEL_BIT_MASK;   /*clear the channel selection bits*/
     e50:	a7 e2       	ldi	r26, 0x27	; 39
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	e7 e2       	ldi	r30, 0x27	; 39
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	80 7e       	andi	r24, 0xE0	; 224
     e5c:	8c 93       	st	X, r24
    			     	   ADMUX |= ADC_pChainData->ChannelArr[0];
     e5e:	a7 e2       	ldi	r26, 0x27	; 39
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	e7 e2       	ldi	r30, 0x27	; 39
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	90 81       	ld	r25, Z
     e68:	e0 91 39 01 	lds	r30, 0x0139
     e6c:	f0 91 3a 01 	lds	r31, 0x013A
     e70:	01 80       	ldd	r0, Z+1	; 0x01
     e72:	f2 81       	ldd	r31, Z+2	; 0x02
     e74:	e0 2d       	mov	r30, r0
     e76:	80 81       	ld	r24, Z
     e78:	89 2b       	or	r24, r25
     e7a:	8c 93       	st	X, r24
    			         /*Start Conversion*/
    			         SET_BIT(ADCSRA,ADCSRA_ADSC);
     e7c:	a6 e2       	ldi	r26, 0x26	; 38
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e6 e2       	ldi	r30, 0x26	; 38
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	80 64       	ori	r24, 0x40	; 64
     e88:	8c 93       	st	X, r24

    		  }
	}

}
     e8a:	cf 91       	pop	r28
     e8c:	df 91       	pop	r29
     e8e:	ff 91       	pop	r31
     e90:	ef 91       	pop	r30
     e92:	bf 91       	pop	r27
     e94:	af 91       	pop	r26
     e96:	9f 91       	pop	r25
     e98:	8f 91       	pop	r24
     e9a:	7f 91       	pop	r23
     e9c:	6f 91       	pop	r22
     e9e:	5f 91       	pop	r21
     ea0:	4f 91       	pop	r20
     ea2:	3f 91       	pop	r19
     ea4:	2f 91       	pop	r18
     ea6:	0f 90       	pop	r0
     ea8:	0f be       	out	0x3f, r0	; 63
     eaa:	0f 90       	pop	r0
     eac:	1f 90       	pop	r1
     eae:	18 95       	reti

00000eb0 <ADC_u8StartChainConversionAsynch>:

uint8 ADC_u8StartChainConversionAsynch(const ADC_Chain_t* Copy_object)
{
     eb0:	df 93       	push	r29
     eb2:	cf 93       	push	r28
     eb4:	00 d0       	rcall	.+0      	; 0xeb6 <ADC_u8StartChainConversionAsynch+0x6>
     eb6:	0f 92       	push	r0
     eb8:	cd b7       	in	r28, 0x3d	; 61
     eba:	de b7       	in	r29, 0x3e	; 62
     ebc:	9b 83       	std	Y+3, r25	; 0x03
     ebe:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8ErrorState =OK;
     ec0:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_object !=NULL)&&  (Copy_object->ChannelArr !=NULL) && (Copy_object->ResultArr !=NULL) &&(Copy_object->NotificationFunc!=NULL))
     ec2:	8a 81       	ldd	r24, Y+2	; 0x02
     ec4:	9b 81       	ldd	r25, Y+3	; 0x03
     ec6:	00 97       	sbiw	r24, 0x00	; 0
     ec8:	09 f4       	brne	.+2      	; 0xecc <ADC_u8StartChainConversionAsynch+0x1c>
     eca:	4c c0       	rjmp	.+152    	; 0xf64 <ADC_u8StartChainConversionAsynch+0xb4>
     ecc:	ea 81       	ldd	r30, Y+2	; 0x02
     ece:	fb 81       	ldd	r31, Y+3	; 0x03
     ed0:	81 81       	ldd	r24, Z+1	; 0x01
     ed2:	92 81       	ldd	r25, Z+2	; 0x02
     ed4:	00 97       	sbiw	r24, 0x00	; 0
     ed6:	09 f4       	brne	.+2      	; 0xeda <ADC_u8StartChainConversionAsynch+0x2a>
     ed8:	45 c0       	rjmp	.+138    	; 0xf64 <ADC_u8StartChainConversionAsynch+0xb4>
     eda:	ea 81       	ldd	r30, Y+2	; 0x02
     edc:	fb 81       	ldd	r31, Y+3	; 0x03
     ede:	83 81       	ldd	r24, Z+3	; 0x03
     ee0:	94 81       	ldd	r25, Z+4	; 0x04
     ee2:	00 97       	sbiw	r24, 0x00	; 0
     ee4:	09 f4       	brne	.+2      	; 0xee8 <ADC_u8StartChainConversionAsynch+0x38>
     ee6:	3e c0       	rjmp	.+124    	; 0xf64 <ADC_u8StartChainConversionAsynch+0xb4>
     ee8:	ea 81       	ldd	r30, Y+2	; 0x02
     eea:	fb 81       	ldd	r31, Y+3	; 0x03
     eec:	85 81       	ldd	r24, Z+5	; 0x05
     eee:	96 81       	ldd	r25, Z+6	; 0x06
     ef0:	00 97       	sbiw	r24, 0x00	; 0
     ef2:	c1 f1       	breq	.+112    	; 0xf64 <ADC_u8StartChainConversionAsynch+0xb4>
	{
		if(ADC_u8BusyFlag==IDLE)
     ef4:	80 91 38 01 	lds	r24, 0x0138
     ef8:	88 23       	and	r24, r24
     efa:	89 f5       	brne	.+98     	; 0xf5e <ADC_u8StartChainConversionAsynch+0xae>
		{
			ADC_u8BusyFlag = BUSY;
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	80 93 38 01 	sts	0x0138, r24
        /*Define the input chain Data Globally*/
        ADC_pChainData= Copy_object;
     f02:	8a 81       	ldd	r24, Y+2	; 0x02
     f04:	9b 81       	ldd	r25, Y+3	; 0x03
     f06:	90 93 3a 01 	sts	0x013A, r25
     f0a:	80 93 39 01 	sts	0x0139, r24

        /*Set the input channel*/
    	   ADMUX &= CHANNEL_BIT_MASK;   /*clear the channel selection bits*/
     f0e:	a7 e2       	ldi	r26, 0x27	; 39
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e7 e2       	ldi	r30, 0x27	; 39
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	80 7e       	andi	r24, 0xE0	; 224
     f1a:	8c 93       	st	X, r24
    	   ADMUX |= ADC_pChainData->ChannelArr[0];
     f1c:	a7 e2       	ldi	r26, 0x27	; 39
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	e7 e2       	ldi	r30, 0x27	; 39
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	90 81       	ld	r25, Z
     f26:	e0 91 39 01 	lds	r30, 0x0139
     f2a:	f0 91 3a 01 	lds	r31, 0x013A
     f2e:	01 80       	ldd	r0, Z+1	; 0x01
     f30:	f2 81       	ldd	r31, Z+2	; 0x02
     f32:	e0 2d       	mov	r30, r0
     f34:	80 81       	ld	r24, Z
     f36:	89 2b       	or	r24, r25
     f38:	8c 93       	st	X, r24
        /*Start Conversion*/
        SET_BIT(ADCSRA,ADCSRA_ADSC);
     f3a:	a6 e2       	ldi	r26, 0x26	; 38
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	e6 e2       	ldi	r30, 0x26	; 38
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	80 64       	ori	r24, 0x40	; 64
     f46:	8c 93       	st	X, r24


        /*Enable ADC Conversion complete interrupt*/
        SET_BIT(ADCSRA,ADCSRA_ADIE);
     f48:	a6 e2       	ldi	r26, 0x26	; 38
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	e6 e2       	ldi	r30, 0x26	; 38
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	88 60       	ori	r24, 0x08	; 8
     f54:	8c 93       	st	X, r24
        /*ISR Source is CHAIN Conversion Asynch*/
        ADC_u8ISRSource = CHAIN_ASYNCH;
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	80 93 3c 01 	sts	0x013C, r24
     f5c:	05 c0       	rjmp	.+10     	; 0xf68 <ADC_u8StartChainConversionAsynch+0xb8>
		}
		else
		{
			Local_u8ErrorState=BUSY_ERR;
     f5e:	84 e0       	ldi	r24, 0x04	; 4
     f60:	89 83       	std	Y+1, r24	; 0x01
     f62:	02 c0       	rjmp	.+4      	; 0xf68 <ADC_u8StartChainConversionAsynch+0xb8>
	}

	else
	{

		Local_u8ErrorState=NULL_PTR_ERR;
     f64:	82 e0       	ldi	r24, 0x02	; 2
     f66:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
     f68:	89 81       	ldd	r24, Y+1	; 0x01

}
     f6a:	0f 90       	pop	r0
     f6c:	0f 90       	pop	r0
     f6e:	0f 90       	pop	r0
     f70:	cf 91       	pop	r28
     f72:	df 91       	pop	r29
     f74:	08 95       	ret

00000f76 <voidSetHalfDataPort>:
#include"CLCD_interface.h"
#include"CLCD_prv.h"
#include"CLCD_cfg.h"
#if CLCD_u8BIT_MODE ==FOUR_BIT
static void voidSetHalfDataPort(uint8 Copy_u8Data)
{
     f76:	df 93       	push	r29
     f78:	cf 93       	push	r28
     f7a:	0f 92       	push	r0
     f7c:	cd b7       	in	r28, 0x3d	; 61
     f7e:	de b7       	in	r29, 0x3e	; 62
     f80:	89 83       	std	Y+1, r24	; 0x01
DIO_u8SetPinValue(CLCD_u8DATA_PORT,CLCD_u8D4_PIN,GET_BIT(Copy_u8Data,0));
     f82:	89 81       	ldd	r24, Y+1	; 0x01
     f84:	98 2f       	mov	r25, r24
     f86:	91 70       	andi	r25, 0x01	; 1
     f88:	80 e0       	ldi	r24, 0x00	; 0
     f8a:	63 e0       	ldi	r22, 0x03	; 3
     f8c:	49 2f       	mov	r20, r25
     f8e:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <DIO_u8SetPinValue>
DIO_u8SetPinValue(CLCD_u8DATA_PORT,CLCD_u8D5_PIN,GET_BIT(Copy_u8Data,1));
     f92:	89 81       	ldd	r24, Y+1	; 0x01
     f94:	86 95       	lsr	r24
     f96:	98 2f       	mov	r25, r24
     f98:	91 70       	andi	r25, 0x01	; 1
     f9a:	80 e0       	ldi	r24, 0x00	; 0
     f9c:	64 e0       	ldi	r22, 0x04	; 4
     f9e:	49 2f       	mov	r20, r25
     fa0:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <DIO_u8SetPinValue>
DIO_u8SetPinValue(CLCD_u8DATA_PORT,CLCD_u8D6_PIN,GET_BIT(Copy_u8Data,2));
     fa4:	89 81       	ldd	r24, Y+1	; 0x01
     fa6:	86 95       	lsr	r24
     fa8:	86 95       	lsr	r24
     faa:	98 2f       	mov	r25, r24
     fac:	91 70       	andi	r25, 0x01	; 1
     fae:	80 e0       	ldi	r24, 0x00	; 0
     fb0:	65 e0       	ldi	r22, 0x05	; 5
     fb2:	49 2f       	mov	r20, r25
     fb4:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <DIO_u8SetPinValue>
DIO_u8SetPinValue(CLCD_u8DATA_PORT,CLCD_u8D7_PIN,GET_BIT(Copy_u8Data,3));
     fb8:	89 81       	ldd	r24, Y+1	; 0x01
     fba:	86 95       	lsr	r24
     fbc:	86 95       	lsr	r24
     fbe:	86 95       	lsr	r24
     fc0:	98 2f       	mov	r25, r24
     fc2:	91 70       	andi	r25, 0x01	; 1
     fc4:	80 e0       	ldi	r24, 0x00	; 0
     fc6:	66 e0       	ldi	r22, 0x06	; 6
     fc8:	49 2f       	mov	r20, r25
     fca:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <DIO_u8SetPinValue>
}
     fce:	0f 90       	pop	r0
     fd0:	cf 91       	pop	r28
     fd2:	df 91       	pop	r29
     fd4:	08 95       	ret

00000fd6 <voidSendEnablePulse>:
#endif

static void voidSendEnablePulse(void)
{
     fd6:	df 93       	push	r29
     fd8:	cf 93       	push	r28
     fda:	cd b7       	in	r28, 0x3d	; 61
     fdc:	de b7       	in	r29, 0x3e	; 62
     fde:	2e 97       	sbiw	r28, 0x0e	; 14
     fe0:	0f b6       	in	r0, 0x3f	; 63
     fe2:	f8 94       	cli
     fe4:	de bf       	out	0x3e, r29	; 62
     fe6:	0f be       	out	0x3f, r0	; 63
     fe8:	cd bf       	out	0x3d, r28	; 61

	// send enable pulse
	DIO_u8SetPinValue(CLCD_u8CTRL_PORT,CLCD_u8E_PIN,DIO_u8PIN_HIGH );
     fea:	80 e0       	ldi	r24, 0x00	; 0
     fec:	62 e0       	ldi	r22, 0x02	; 2
     fee:	41 e0       	ldi	r20, 0x01	; 1
     ff0:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <DIO_u8SetPinValue>
     ff4:	80 e0       	ldi	r24, 0x00	; 0
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	a0 e0       	ldi	r26, 0x00	; 0
     ffa:	b0 e4       	ldi	r27, 0x40	; 64
     ffc:	8b 87       	std	Y+11, r24	; 0x0b
     ffe:	9c 87       	std	Y+12, r25	; 0x0c
    1000:	ad 87       	std	Y+13, r26	; 0x0d
    1002:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1004:	6b 85       	ldd	r22, Y+11	; 0x0b
    1006:	7c 85       	ldd	r23, Y+12	; 0x0c
    1008:	8d 85       	ldd	r24, Y+13	; 0x0d
    100a:	9e 85       	ldd	r25, Y+14	; 0x0e
    100c:	20 e0       	ldi	r18, 0x00	; 0
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	4a e7       	ldi	r20, 0x7A	; 122
    1012:	55 e4       	ldi	r21, 0x45	; 69
    1014:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1018:	dc 01       	movw	r26, r24
    101a:	cb 01       	movw	r24, r22
    101c:	8f 83       	std	Y+7, r24	; 0x07
    101e:	98 87       	std	Y+8, r25	; 0x08
    1020:	a9 87       	std	Y+9, r26	; 0x09
    1022:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1024:	6f 81       	ldd	r22, Y+7	; 0x07
    1026:	78 85       	ldd	r23, Y+8	; 0x08
    1028:	89 85       	ldd	r24, Y+9	; 0x09
    102a:	9a 85       	ldd	r25, Y+10	; 0x0a
    102c:	20 e0       	ldi	r18, 0x00	; 0
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	40 e8       	ldi	r20, 0x80	; 128
    1032:	5f e3       	ldi	r21, 0x3F	; 63
    1034:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1038:	88 23       	and	r24, r24
    103a:	2c f4       	brge	.+10     	; 0x1046 <voidSendEnablePulse+0x70>
		__ticks = 1;
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	9e 83       	std	Y+6, r25	; 0x06
    1042:	8d 83       	std	Y+5, r24	; 0x05
    1044:	3f c0       	rjmp	.+126    	; 0x10c4 <voidSendEnablePulse+0xee>
	else if (__tmp > 65535)
    1046:	6f 81       	ldd	r22, Y+7	; 0x07
    1048:	78 85       	ldd	r23, Y+8	; 0x08
    104a:	89 85       	ldd	r24, Y+9	; 0x09
    104c:	9a 85       	ldd	r25, Y+10	; 0x0a
    104e:	20 e0       	ldi	r18, 0x00	; 0
    1050:	3f ef       	ldi	r19, 0xFF	; 255
    1052:	4f e7       	ldi	r20, 0x7F	; 127
    1054:	57 e4       	ldi	r21, 0x47	; 71
    1056:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    105a:	18 16       	cp	r1, r24
    105c:	4c f5       	brge	.+82     	; 0x10b0 <voidSendEnablePulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    105e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1060:	7c 85       	ldd	r23, Y+12	; 0x0c
    1062:	8d 85       	ldd	r24, Y+13	; 0x0d
    1064:	9e 85       	ldd	r25, Y+14	; 0x0e
    1066:	20 e0       	ldi	r18, 0x00	; 0
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	40 e2       	ldi	r20, 0x20	; 32
    106c:	51 e4       	ldi	r21, 0x41	; 65
    106e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1072:	dc 01       	movw	r26, r24
    1074:	cb 01       	movw	r24, r22
    1076:	bc 01       	movw	r22, r24
    1078:	cd 01       	movw	r24, r26
    107a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    107e:	dc 01       	movw	r26, r24
    1080:	cb 01       	movw	r24, r22
    1082:	9e 83       	std	Y+6, r25	; 0x06
    1084:	8d 83       	std	Y+5, r24	; 0x05
    1086:	0f c0       	rjmp	.+30     	; 0x10a6 <voidSendEnablePulse+0xd0>
    1088:	80 e9       	ldi	r24, 0x90	; 144
    108a:	91 e0       	ldi	r25, 0x01	; 1
    108c:	9c 83       	std	Y+4, r25	; 0x04
    108e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1090:	8b 81       	ldd	r24, Y+3	; 0x03
    1092:	9c 81       	ldd	r25, Y+4	; 0x04
    1094:	01 97       	sbiw	r24, 0x01	; 1
    1096:	f1 f7       	brne	.-4      	; 0x1094 <voidSendEnablePulse+0xbe>
    1098:	9c 83       	std	Y+4, r25	; 0x04
    109a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    109c:	8d 81       	ldd	r24, Y+5	; 0x05
    109e:	9e 81       	ldd	r25, Y+6	; 0x06
    10a0:	01 97       	sbiw	r24, 0x01	; 1
    10a2:	9e 83       	std	Y+6, r25	; 0x06
    10a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10a6:	8d 81       	ldd	r24, Y+5	; 0x05
    10a8:	9e 81       	ldd	r25, Y+6	; 0x06
    10aa:	00 97       	sbiw	r24, 0x00	; 0
    10ac:	69 f7       	brne	.-38     	; 0x1088 <voidSendEnablePulse+0xb2>
    10ae:	14 c0       	rjmp	.+40     	; 0x10d8 <voidSendEnablePulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10b0:	6f 81       	ldd	r22, Y+7	; 0x07
    10b2:	78 85       	ldd	r23, Y+8	; 0x08
    10b4:	89 85       	ldd	r24, Y+9	; 0x09
    10b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    10b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10bc:	dc 01       	movw	r26, r24
    10be:	cb 01       	movw	r24, r22
    10c0:	9e 83       	std	Y+6, r25	; 0x06
    10c2:	8d 83       	std	Y+5, r24	; 0x05
    10c4:	8d 81       	ldd	r24, Y+5	; 0x05
    10c6:	9e 81       	ldd	r25, Y+6	; 0x06
    10c8:	9a 83       	std	Y+2, r25	; 0x02
    10ca:	89 83       	std	Y+1, r24	; 0x01
    10cc:	89 81       	ldd	r24, Y+1	; 0x01
    10ce:	9a 81       	ldd	r25, Y+2	; 0x02
    10d0:	01 97       	sbiw	r24, 0x01	; 1
    10d2:	f1 f7       	brne	.-4      	; 0x10d0 <voidSendEnablePulse+0xfa>
    10d4:	9a 83       	std	Y+2, r25	; 0x02
    10d6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_u8CTRL_PORT,CLCD_u8E_PIN,DIO_u8PIN_LOW);
    10d8:	80 e0       	ldi	r24, 0x00	; 0
    10da:	62 e0       	ldi	r22, 0x02	; 2
    10dc:	40 e0       	ldi	r20, 0x00	; 0
    10de:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <DIO_u8SetPinValue>
}
    10e2:	2e 96       	adiw	r28, 0x0e	; 14
    10e4:	0f b6       	in	r0, 0x3f	; 63
    10e6:	f8 94       	cli
    10e8:	de bf       	out	0x3e, r29	; 62
    10ea:	0f be       	out	0x3f, r0	; 63
    10ec:	cd bf       	out	0x3d, r28	; 61
    10ee:	cf 91       	pop	r28
    10f0:	df 91       	pop	r29
    10f2:	08 95       	ret

000010f4 <CLCD_voidSendCmd>:


void CLCD_voidSendCmd(uint8 Copy_u8Cmd)
{ //set RS pin to low for command
    10f4:	df 93       	push	r29
    10f6:	cf 93       	push	r28
    10f8:	0f 92       	push	r0
    10fa:	cd b7       	in	r28, 0x3d	; 61
    10fc:	de b7       	in	r29, 0x3e	; 62
    10fe:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(CLCD_u8CTRL_PORT,CLCD_u8RS_PIN,DIO_u8PIN_LOW);
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	61 e0       	ldi	r22, 0x01	; 1
    1104:	40 e0       	ldi	r20, 0x00	; 0
    1106:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <DIO_u8SetPinValue>
	//send the command
	DIO_u8SetPortValue(CLCD_u8DATA_PORT,Copy_u8Cmd);
	voidSendEnablePulse();
#elif 	CLCD_u8BIT_MODE==FOUR_BIT
	/*Send the 4 Most significant bits of the command first*/
	voidSetHalfDataPort(Copy_u8Cmd >> 4);
    110a:	89 81       	ldd	r24, Y+1	; 0x01
    110c:	82 95       	swap	r24
    110e:	8f 70       	andi	r24, 0x0F	; 15
    1110:	0e 94 bb 07 	call	0xf76	; 0xf76 <voidSetHalfDataPort>
	voidSendEnablePulse();
    1114:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <voidSendEnablePulse>
	voidSetHalfDataPort(Copy_u8Cmd);
    1118:	89 81       	ldd	r24, Y+1	; 0x01
    111a:	0e 94 bb 07 	call	0xf76	; 0xf76 <voidSetHalfDataPort>
	voidSendEnablePulse();
    111e:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <voidSendEnablePulse>
#else
#error wrong CLCD_u8BIT_MODE configuration option
#endif

}
    1122:	0f 90       	pop	r0
    1124:	cf 91       	pop	r28
    1126:	df 91       	pop	r29
    1128:	08 95       	ret

0000112a <CLCD_voidSendData>:
void CLCD_voidSendData(uint8 Copy_u8Data)
{
    112a:	df 93       	push	r29
    112c:	cf 93       	push	r28
    112e:	0f 92       	push	r0
    1130:	cd b7       	in	r28, 0x3d	; 61
    1132:	de b7       	in	r29, 0x3e	; 62
    1134:	89 83       	std	Y+1, r24	; 0x01

	 //set RS pin to HIGH for DATA
		DIO_u8SetPinValue(CLCD_u8CTRL_PORT,CLCD_u8RS_PIN,DIO_u8PIN_HIGH);
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	61 e0       	ldi	r22, 0x01	; 1
    113a:	41 e0       	ldi	r20, 0x01	; 1
    113c:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <DIO_u8SetPinValue>
	DIO_u8SetPortValue(CLCD_u8DATA_PORT,Copy_u8Data);//
	voidSendEnablePulse();

#elif CLCD_u8BIT_MODE == FOUR_BIT
	/*Send the 4 Most significant bits of the data first*/
	voidSetHalfDataPort(Copy_u8Data >> 4);
    1140:	89 81       	ldd	r24, Y+1	; 0x01
    1142:	82 95       	swap	r24
    1144:	8f 70       	andi	r24, 0x0F	; 15
    1146:	0e 94 bb 07 	call	0xf76	; 0xf76 <voidSetHalfDataPort>
	voidSendEnablePulse();
    114a:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <voidSendEnablePulse>
	voidSetHalfDataPort(Copy_u8Data);
    114e:	89 81       	ldd	r24, Y+1	; 0x01
    1150:	0e 94 bb 07 	call	0xf76	; 0xf76 <voidSetHalfDataPort>
	voidSendEnablePulse();
    1154:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <voidSendEnablePulse>

#else
#error wrong CLCD_u8BIT_MODE configuration option
#endif

}
    1158:	0f 90       	pop	r0
    115a:	cf 91       	pop	r28
    115c:	df 91       	pop	r29
    115e:	08 95       	ret

00001160 <CLCD_VoidInit>:
void CLCD_VoidInit(void)
{//if rs ==0 it is command ..low
    1160:	df 93       	push	r29
    1162:	cf 93       	push	r28
    1164:	cd b7       	in	r28, 0x3d	; 61
    1166:	de b7       	in	r29, 0x3e	; 62
    1168:	2e 97       	sbiw	r28, 0x0e	; 14
    116a:	0f b6       	in	r0, 0x3f	; 63
    116c:	f8 94       	cli
    116e:	de bf       	out	0x3e, r29	; 62
    1170:	0f be       	out	0x3f, r0	; 63
    1172:	cd bf       	out	0x3d, r28	; 61
    1174:	80 e0       	ldi	r24, 0x00	; 0
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	a0 e2       	ldi	r26, 0x20	; 32
    117a:	b2 e4       	ldi	r27, 0x42	; 66
    117c:	8b 87       	std	Y+11, r24	; 0x0b
    117e:	9c 87       	std	Y+12, r25	; 0x0c
    1180:	ad 87       	std	Y+13, r26	; 0x0d
    1182:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1184:	6b 85       	ldd	r22, Y+11	; 0x0b
    1186:	7c 85       	ldd	r23, Y+12	; 0x0c
    1188:	8d 85       	ldd	r24, Y+13	; 0x0d
    118a:	9e 85       	ldd	r25, Y+14	; 0x0e
    118c:	20 e0       	ldi	r18, 0x00	; 0
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	4a e7       	ldi	r20, 0x7A	; 122
    1192:	55 e4       	ldi	r21, 0x45	; 69
    1194:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1198:	dc 01       	movw	r26, r24
    119a:	cb 01       	movw	r24, r22
    119c:	8f 83       	std	Y+7, r24	; 0x07
    119e:	98 87       	std	Y+8, r25	; 0x08
    11a0:	a9 87       	std	Y+9, r26	; 0x09
    11a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11a4:	6f 81       	ldd	r22, Y+7	; 0x07
    11a6:	78 85       	ldd	r23, Y+8	; 0x08
    11a8:	89 85       	ldd	r24, Y+9	; 0x09
    11aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    11ac:	20 e0       	ldi	r18, 0x00	; 0
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	40 e8       	ldi	r20, 0x80	; 128
    11b2:	5f e3       	ldi	r21, 0x3F	; 63
    11b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11b8:	88 23       	and	r24, r24
    11ba:	2c f4       	brge	.+10     	; 0x11c6 <CLCD_VoidInit+0x66>
		__ticks = 1;
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	9e 83       	std	Y+6, r25	; 0x06
    11c2:	8d 83       	std	Y+5, r24	; 0x05
    11c4:	3f c0       	rjmp	.+126    	; 0x1244 <CLCD_VoidInit+0xe4>
	else if (__tmp > 65535)
    11c6:	6f 81       	ldd	r22, Y+7	; 0x07
    11c8:	78 85       	ldd	r23, Y+8	; 0x08
    11ca:	89 85       	ldd	r24, Y+9	; 0x09
    11cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    11ce:	20 e0       	ldi	r18, 0x00	; 0
    11d0:	3f ef       	ldi	r19, 0xFF	; 255
    11d2:	4f e7       	ldi	r20, 0x7F	; 127
    11d4:	57 e4       	ldi	r21, 0x47	; 71
    11d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11da:	18 16       	cp	r1, r24
    11dc:	4c f5       	brge	.+82     	; 0x1230 <CLCD_VoidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11de:	6b 85       	ldd	r22, Y+11	; 0x0b
    11e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    11e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    11e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    11e6:	20 e0       	ldi	r18, 0x00	; 0
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	40 e2       	ldi	r20, 0x20	; 32
    11ec:	51 e4       	ldi	r21, 0x41	; 65
    11ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11f2:	dc 01       	movw	r26, r24
    11f4:	cb 01       	movw	r24, r22
    11f6:	bc 01       	movw	r22, r24
    11f8:	cd 01       	movw	r24, r26
    11fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11fe:	dc 01       	movw	r26, r24
    1200:	cb 01       	movw	r24, r22
    1202:	9e 83       	std	Y+6, r25	; 0x06
    1204:	8d 83       	std	Y+5, r24	; 0x05
    1206:	0f c0       	rjmp	.+30     	; 0x1226 <CLCD_VoidInit+0xc6>
    1208:	80 e9       	ldi	r24, 0x90	; 144
    120a:	91 e0       	ldi	r25, 0x01	; 1
    120c:	9c 83       	std	Y+4, r25	; 0x04
    120e:	8b 83       	std	Y+3, r24	; 0x03
    1210:	8b 81       	ldd	r24, Y+3	; 0x03
    1212:	9c 81       	ldd	r25, Y+4	; 0x04
    1214:	01 97       	sbiw	r24, 0x01	; 1
    1216:	f1 f7       	brne	.-4      	; 0x1214 <CLCD_VoidInit+0xb4>
    1218:	9c 83       	std	Y+4, r25	; 0x04
    121a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    121c:	8d 81       	ldd	r24, Y+5	; 0x05
    121e:	9e 81       	ldd	r25, Y+6	; 0x06
    1220:	01 97       	sbiw	r24, 0x01	; 1
    1222:	9e 83       	std	Y+6, r25	; 0x06
    1224:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1226:	8d 81       	ldd	r24, Y+5	; 0x05
    1228:	9e 81       	ldd	r25, Y+6	; 0x06
    122a:	00 97       	sbiw	r24, 0x00	; 0
    122c:	69 f7       	brne	.-38     	; 0x1208 <CLCD_VoidInit+0xa8>
    122e:	14 c0       	rjmp	.+40     	; 0x1258 <CLCD_VoidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1230:	6f 81       	ldd	r22, Y+7	; 0x07
    1232:	78 85       	ldd	r23, Y+8	; 0x08
    1234:	89 85       	ldd	r24, Y+9	; 0x09
    1236:	9a 85       	ldd	r25, Y+10	; 0x0a
    1238:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    123c:	dc 01       	movw	r26, r24
    123e:	cb 01       	movw	r24, r22
    1240:	9e 83       	std	Y+6, r25	; 0x06
    1242:	8d 83       	std	Y+5, r24	; 0x05
    1244:	8d 81       	ldd	r24, Y+5	; 0x05
    1246:	9e 81       	ldd	r25, Y+6	; 0x06
    1248:	9a 83       	std	Y+2, r25	; 0x02
    124a:	89 83       	std	Y+1, r24	; 0x01
    124c:	89 81       	ldd	r24, Y+1	; 0x01
    124e:	9a 81       	ldd	r25, Y+2	; 0x02
    1250:	01 97       	sbiw	r24, 0x01	; 1
    1252:	f1 f7       	brne	.-4      	; 0x1250 <CLCD_VoidInit+0xf0>
    1254:	9a 83       	std	Y+2, r25	; 0x02
    1256:	89 83       	std	Y+1, r24	; 0x01
#if  CLCD_u8BIT_MODE == EIGHT_BIT
	//function set command :2lines , font size 5*11
	CLCD_voidSendCmd(0b00111100);

#elif  CLCD_u8BIT_MODE == FOUR_BIT
		voidSetHalfDataPort(0b0010);
    1258:	82 e0       	ldi	r24, 0x02	; 2
    125a:	0e 94 bb 07 	call	0xf76	; 0xf76 <voidSetHalfDataPort>
		voidSendEnablePulse();
    125e:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <voidSendEnablePulse>
		voidSetHalfDataPort(0b0010);
    1262:	82 e0       	ldi	r24, 0x02	; 2
    1264:	0e 94 bb 07 	call	0xf76	; 0xf76 <voidSetHalfDataPort>
		voidSendEnablePulse();
    1268:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <voidSendEnablePulse>
		voidSetHalfDataPort(0b1000);
    126c:	88 e0       	ldi	r24, 0x08	; 8
    126e:	0e 94 bb 07 	call	0xf76	; 0xf76 <voidSetHalfDataPort>
		voidSendEnablePulse();
    1272:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <voidSendEnablePulse>

	#endif

	//display on off control: display on, cursor off , blink cursor off
	CLCD_voidSendCmd(0b00001100);
    1276:	8c e0       	ldi	r24, 0x0C	; 12
    1278:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <CLCD_voidSendCmd>
	//clear display
	CLCD_voidSendCmd(1);
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <CLCD_voidSendCmd>

}
    1282:	2e 96       	adiw	r28, 0x0e	; 14
    1284:	0f b6       	in	r0, 0x3f	; 63
    1286:	f8 94       	cli
    1288:	de bf       	out	0x3e, r29	; 62
    128a:	0f be       	out	0x3f, r0	; 63
    128c:	cd bf       	out	0x3d, r28	; 61
    128e:	cf 91       	pop	r28
    1290:	df 91       	pop	r29
    1292:	08 95       	ret

00001294 <CLCD_u8SendString>:

uint8 CLCD_u8SendString(const char* Copy_pchString)
{
    1294:	df 93       	push	r29
    1296:	cf 93       	push	r28
    1298:	00 d0       	rcall	.+0      	; 0x129a <CLCD_u8SendString+0x6>
    129a:	00 d0       	rcall	.+0      	; 0x129c <CLCD_u8SendString+0x8>
    129c:	cd b7       	in	r28, 0x3d	; 61
    129e:	de b7       	in	r29, 0x3e	; 62
    12a0:	9c 83       	std	Y+4, r25	; 0x04
    12a2:	8b 83       	std	Y+3, r24	; 0x03

uint8 Local_u8ErrorState=OK;
    12a4:	1a 82       	std	Y+2, r1	; 0x02
 if(Copy_pchString!=NULL)
    12a6:	8b 81       	ldd	r24, Y+3	; 0x03
    12a8:	9c 81       	ldd	r25, Y+4	; 0x04
    12aa:	00 97       	sbiw	r24, 0x00	; 0
    12ac:	e1 f0       	breq	.+56     	; 0x12e6 <CLCD_u8SendString+0x52>
 {
  uint8 Local_u8Iteratot=0u;
    12ae:	19 82       	std	Y+1, r1	; 0x01
    12b0:	0e c0       	rjmp	.+28     	; 0x12ce <CLCD_u8SendString+0x3a>
   while(Copy_pchString[Local_u8Iteratot]!='\0')
      {
	    CLCD_voidSendData(Copy_pchString[Local_u8Iteratot]);
    12b2:	89 81       	ldd	r24, Y+1	; 0x01
    12b4:	28 2f       	mov	r18, r24
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ba:	9c 81       	ldd	r25, Y+4	; 0x04
    12bc:	fc 01       	movw	r30, r24
    12be:	e2 0f       	add	r30, r18
    12c0:	f3 1f       	adc	r31, r19
    12c2:	80 81       	ld	r24, Z
    12c4:	0e 94 95 08 	call	0x112a	; 0x112a <CLCD_voidSendData>
	    Local_u8Iteratot++;
    12c8:	89 81       	ldd	r24, Y+1	; 0x01
    12ca:	8f 5f       	subi	r24, 0xFF	; 255
    12cc:	89 83       	std	Y+1, r24	; 0x01

uint8 Local_u8ErrorState=OK;
 if(Copy_pchString!=NULL)
 {
  uint8 Local_u8Iteratot=0u;
   while(Copy_pchString[Local_u8Iteratot]!='\0')
    12ce:	89 81       	ldd	r24, Y+1	; 0x01
    12d0:	28 2f       	mov	r18, r24
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	8b 81       	ldd	r24, Y+3	; 0x03
    12d6:	9c 81       	ldd	r25, Y+4	; 0x04
    12d8:	fc 01       	movw	r30, r24
    12da:	e2 0f       	add	r30, r18
    12dc:	f3 1f       	adc	r31, r19
    12de:	80 81       	ld	r24, Z
    12e0:	88 23       	and	r24, r24
    12e2:	39 f7       	brne	.-50     	; 0x12b2 <CLCD_u8SendString+0x1e>
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <CLCD_u8SendString+0x56>
      }

 }
 else
  {
 	Local_u8ErrorState=  NULL_PTR_ERR;
    12e6:	82 e0       	ldi	r24, 0x02	; 2
    12e8:	8a 83       	std	Y+2, r24	; 0x02
  }
 return Local_u8ErrorState;
    12ea:	8a 81       	ldd	r24, Y+2	; 0x02
}
    12ec:	0f 90       	pop	r0
    12ee:	0f 90       	pop	r0
    12f0:	0f 90       	pop	r0
    12f2:	0f 90       	pop	r0
    12f4:	cf 91       	pop	r28
    12f6:	df 91       	pop	r29
    12f8:	08 95       	ret

000012fa <CLCD_voidSendNumber>:
void CLCD_voidSendNumber(sint32 Copy_s32Number )
{ char Local_chNumber[10];
    12fa:	df 93       	push	r29
    12fc:	cf 93       	push	r28
    12fe:	cd b7       	in	r28, 0x3d	; 61
    1300:	de b7       	in	r29, 0x3e	; 62
    1302:	61 97       	sbiw	r28, 0x11	; 17
    1304:	0f b6       	in	r0, 0x3f	; 63
    1306:	f8 94       	cli
    1308:	de bf       	out	0x3e, r29	; 62
    130a:	0f be       	out	0x3f, r0	; 63
    130c:	cd bf       	out	0x3d, r28	; 61
    130e:	6e 87       	std	Y+14, r22	; 0x0e
    1310:	7f 87       	std	Y+15, r23	; 0x0f
    1312:	88 8b       	std	Y+16, r24	; 0x10
    1314:	99 8b       	std	Y+17, r25	; 0x11
  uint8 Local_u8RightDigit,Local_u8Counter1=0u;
    1316:	1a 82       	std	Y+2, r1	; 0x02
  sint8 Local_s8Counter2=0;
    1318:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_s32Number==0)
    131a:	8e 85       	ldd	r24, Y+14	; 0x0e
    131c:	9f 85       	ldd	r25, Y+15	; 0x0f
    131e:	a8 89       	ldd	r26, Y+16	; 0x10
    1320:	b9 89       	ldd	r27, Y+17	; 0x11
    1322:	00 97       	sbiw	r24, 0x00	; 0
    1324:	a1 05       	cpc	r26, r1
    1326:	b1 05       	cpc	r27, r1
    1328:	21 f4       	brne	.+8      	; 0x1332 <CLCD_voidSendNumber+0x38>
	{
		CLCD_voidSendData('0');
    132a:	80 e3       	ldi	r24, 0x30	; 48
    132c:	0e 94 95 08 	call	0x112a	; 0x112a <CLCD_voidSendData>
    1330:	67 c0       	rjmp	.+206    	; 0x1400 <CLCD_voidSendNumber+0x106>
		return;
	}
	else if (Copy_s32Number<0)
    1332:	8e 85       	ldd	r24, Y+14	; 0x0e
    1334:	9f 85       	ldd	r25, Y+15	; 0x0f
    1336:	a8 89       	ldd	r26, Y+16	; 0x10
    1338:	b9 89       	ldd	r27, Y+17	; 0x11
    133a:	bb 23       	and	r27, r27
    133c:	0c f0       	brlt	.+2      	; 0x1340 <CLCD_voidSendNumber+0x46>
    133e:	43 c0       	rjmp	.+134    	; 0x13c6 <CLCD_voidSendNumber+0xcc>
	{ //make -ve -> +ve and print - "sign" on clcd
		Copy_s32Number *=-1;
    1340:	8e 85       	ldd	r24, Y+14	; 0x0e
    1342:	9f 85       	ldd	r25, Y+15	; 0x0f
    1344:	a8 89       	ldd	r26, Y+16	; 0x10
    1346:	b9 89       	ldd	r27, Y+17	; 0x11
    1348:	b0 95       	com	r27
    134a:	a0 95       	com	r26
    134c:	90 95       	com	r25
    134e:	81 95       	neg	r24
    1350:	9f 4f       	sbci	r25, 0xFF	; 255
    1352:	af 4f       	sbci	r26, 0xFF	; 255
    1354:	bf 4f       	sbci	r27, 0xFF	; 255
    1356:	8e 87       	std	Y+14, r24	; 0x0e
    1358:	9f 87       	std	Y+15, r25	; 0x0f
    135a:	a8 8b       	std	Y+16, r26	; 0x10
    135c:	b9 8b       	std	Y+17, r27	; 0x11
		CLCD_voidSendData('-');
    135e:	8d e2       	ldi	r24, 0x2D	; 45
    1360:	0e 94 95 08 	call	0x112a	; 0x112a <CLCD_voidSendData>
    1364:	30 c0       	rjmp	.+96     	; 0x13c6 <CLCD_voidSendNumber+0xcc>

	}
	while(Copy_s32Number!=0)
	{
		Local_u8RightDigit=(uint8)((uint32)Copy_s32Number %10);//get right most digit
    1366:	8e 85       	ldd	r24, Y+14	; 0x0e
    1368:	9f 85       	ldd	r25, Y+15	; 0x0f
    136a:	a8 89       	ldd	r26, Y+16	; 0x10
    136c:	b9 89       	ldd	r27, Y+17	; 0x11
    136e:	2a e0       	ldi	r18, 0x0A	; 10
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	40 e0       	ldi	r20, 0x00	; 0
    1374:	50 e0       	ldi	r21, 0x00	; 0
    1376:	bc 01       	movw	r22, r24
    1378:	cd 01       	movw	r24, r26
    137a:	0e 94 88 1f 	call	0x3f10	; 0x3f10 <__udivmodsi4>
    137e:	dc 01       	movw	r26, r24
    1380:	cb 01       	movw	r24, r22
    1382:	8b 83       	std	Y+3, r24	; 0x03
		Copy_s32Number/=10; //remove right digit
    1384:	8e 85       	ldd	r24, Y+14	; 0x0e
    1386:	9f 85       	ldd	r25, Y+15	; 0x0f
    1388:	a8 89       	ldd	r26, Y+16	; 0x10
    138a:	b9 89       	ldd	r27, Y+17	; 0x11
    138c:	2a e0       	ldi	r18, 0x0A	; 10
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	40 e0       	ldi	r20, 0x00	; 0
    1392:	50 e0       	ldi	r21, 0x00	; 0
    1394:	bc 01       	movw	r22, r24
    1396:	cd 01       	movw	r24, r26
    1398:	0e 94 aa 1f 	call	0x3f54	; 0x3f54 <__divmodsi4>
    139c:	da 01       	movw	r26, r20
    139e:	c9 01       	movw	r24, r18
    13a0:	8e 87       	std	Y+14, r24	; 0x0e
    13a2:	9f 87       	std	Y+15, r25	; 0x0f
    13a4:	a8 8b       	std	Y+16, r26	; 0x10
    13a6:	b9 8b       	std	Y+17, r27	; 0x11
		Local_chNumber[Local_u8Counter1]=Local_u8RightDigit+'0'; //CONVERT TO ASCII
    13a8:	8a 81       	ldd	r24, Y+2	; 0x02
    13aa:	28 2f       	mov	r18, r24
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	8b 81       	ldd	r24, Y+3	; 0x03
    13b0:	48 2f       	mov	r20, r24
    13b2:	40 5d       	subi	r20, 0xD0	; 208
    13b4:	ce 01       	movw	r24, r28
    13b6:	04 96       	adiw	r24, 0x04	; 4
    13b8:	fc 01       	movw	r30, r24
    13ba:	e2 0f       	add	r30, r18
    13bc:	f3 1f       	adc	r31, r19
    13be:	40 83       	st	Z, r20
		Local_u8Counter1++;
    13c0:	8a 81       	ldd	r24, Y+2	; 0x02
    13c2:	8f 5f       	subi	r24, 0xFF	; 255
    13c4:	8a 83       	std	Y+2, r24	; 0x02
	{ //make -ve -> +ve and print - "sign" on clcd
		Copy_s32Number *=-1;
		CLCD_voidSendData('-');

	}
	while(Copy_s32Number!=0)
    13c6:	8e 85       	ldd	r24, Y+14	; 0x0e
    13c8:	9f 85       	ldd	r25, Y+15	; 0x0f
    13ca:	a8 89       	ldd	r26, Y+16	; 0x10
    13cc:	b9 89       	ldd	r27, Y+17	; 0x11
    13ce:	00 97       	sbiw	r24, 0x00	; 0
    13d0:	a1 05       	cpc	r26, r1
    13d2:	b1 05       	cpc	r27, r1
    13d4:	41 f6       	brne	.-112    	; 0x1366 <CLCD_voidSendNumber+0x6c>
		Local_u8Counter1++;


	}
	/////////////
	for(Local_s8Counter2 =(sint8)Local_u8Counter1-1; Local_s8Counter2>=0;Local_s8Counter2--)
    13d6:	8a 81       	ldd	r24, Y+2	; 0x02
    13d8:	81 50       	subi	r24, 0x01	; 1
    13da:	89 83       	std	Y+1, r24	; 0x01
    13dc:	0e c0       	rjmp	.+28     	; 0x13fa <CLCD_voidSendNumber+0x100>

	{
		CLCD_voidSendData(Local_chNumber[(uint8)Local_s8Counter2]);
    13de:	89 81       	ldd	r24, Y+1	; 0x01
    13e0:	28 2f       	mov	r18, r24
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	ce 01       	movw	r24, r28
    13e6:	04 96       	adiw	r24, 0x04	; 4
    13e8:	fc 01       	movw	r30, r24
    13ea:	e2 0f       	add	r30, r18
    13ec:	f3 1f       	adc	r31, r19
    13ee:	80 81       	ld	r24, Z
    13f0:	0e 94 95 08 	call	0x112a	; 0x112a <CLCD_voidSendData>
		Local_u8Counter1++;


	}
	/////////////
	for(Local_s8Counter2 =(sint8)Local_u8Counter1-1; Local_s8Counter2>=0;Local_s8Counter2--)
    13f4:	89 81       	ldd	r24, Y+1	; 0x01
    13f6:	81 50       	subi	r24, 0x01	; 1
    13f8:	89 83       	std	Y+1, r24	; 0x01
    13fa:	89 81       	ldd	r24, Y+1	; 0x01
    13fc:	88 23       	and	r24, r24
    13fe:	7c f7       	brge	.-34     	; 0x13de <CLCD_voidSendNumber+0xe4>

	{
		CLCD_voidSendData(Local_chNumber[(uint8)Local_s8Counter2]);
	}
}
    1400:	61 96       	adiw	r28, 0x11	; 17
    1402:	0f b6       	in	r0, 0x3f	; 63
    1404:	f8 94       	cli
    1406:	de bf       	out	0x3e, r29	; 62
    1408:	0f be       	out	0x3f, r0	; 63
    140a:	cd bf       	out	0x3d, r28	; 61
    140c:	cf 91       	pop	r28
    140e:	df 91       	pop	r29
    1410:	08 95       	ret

00001412 <CLCD_VoidGoToXY>:
void CLCD_VoidGoToXY(uint8 Copy_u8Xpos,uint8 Copy_u8Ypos)
{
    1412:	df 93       	push	r29
    1414:	cf 93       	push	r28
    1416:	00 d0       	rcall	.+0      	; 0x1418 <CLCD_VoidGoToXY+0x6>
    1418:	0f 92       	push	r0
    141a:	cd b7       	in	r28, 0x3d	; 61
    141c:	de b7       	in	r29, 0x3e	; 62
    141e:	8a 83       	std	Y+2, r24	; 0x02
    1420:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8Adress ;
	if(Copy_u8Ypos==0u)
    1422:	8b 81       	ldd	r24, Y+3	; 0x03
    1424:	88 23       	and	r24, r24
    1426:	19 f4       	brne	.+6      	; 0x142e <CLCD_VoidGoToXY+0x1c>
	{
		Local_u8Adress=Copy_u8Xpos;
    1428:	8a 81       	ldd	r24, Y+2	; 0x02
    142a:	89 83       	std	Y+1, r24	; 0x01
    142c:	06 c0       	rjmp	.+12     	; 0x143a <CLCD_VoidGoToXY+0x28>
	}
	else if(Copy_u8Ypos==1u)
    142e:	8b 81       	ldd	r24, Y+3	; 0x03
    1430:	81 30       	cpi	r24, 0x01	; 1
    1432:	19 f4       	brne	.+6      	; 0x143a <CLCD_VoidGoToXY+0x28>
	{
		Local_u8Adress=0x40+Copy_u8Xpos;
    1434:	8a 81       	ldd	r24, Y+2	; 0x02
    1436:	80 5c       	subi	r24, 0xC0	; 192
    1438:	89 83       	std	Y+1, r24	; 0x01

	}
	// WE CAN USE IT INSTEAD OF IF.IFELSE :Local_u8Adress=ox40*Copy_u8Ypos+Copy_u8Xpos;
   // SET BIT 7 FOR SET DDRAM ADDRESS COMMAND
	SET_BIT(Local_u8Adress,7);
    143a:	89 81       	ldd	r24, Y+1	; 0x01
    143c:	80 68       	ori	r24, 0x80	; 128
    143e:	89 83       	std	Y+1, r24	; 0x01
	//EXECUTE SET DDRam address command
   CLCD_voidSendCmd(Local_u8Adress);
    1440:	89 81       	ldd	r24, Y+1	; 0x01
    1442:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <CLCD_voidSendCmd>

}
    1446:	0f 90       	pop	r0
    1448:	0f 90       	pop	r0
    144a:	0f 90       	pop	r0
    144c:	cf 91       	pop	r28
    144e:	df 91       	pop	r29
    1450:	08 95       	ret

00001452 <CLCD_u8SpecialCharacter>:
uint8 CLCD_u8SpecialCharacter(uint8 Copy_u8LocationNum, uint8 * Copy_puPattern,uint8 Copy_u8Xpos,uint8 Copy_u8Ypos)
{
    1452:	df 93       	push	r29
    1454:	cf 93       	push	r28
    1456:	cd b7       	in	r28, 0x3d	; 61
    1458:	de b7       	in	r29, 0x3e	; 62
    145a:	28 97       	sbiw	r28, 0x08	; 8
    145c:	0f b6       	in	r0, 0x3f	; 63
    145e:	f8 94       	cli
    1460:	de bf       	out	0x3e, r29	; 62
    1462:	0f be       	out	0x3f, r0	; 63
    1464:	cd bf       	out	0x3d, r28	; 61
    1466:	8c 83       	std	Y+4, r24	; 0x04
    1468:	7e 83       	std	Y+6, r23	; 0x06
    146a:	6d 83       	std	Y+5, r22	; 0x05
    146c:	4f 83       	std	Y+7, r20	; 0x07
    146e:	28 87       	std	Y+8, r18	; 0x08
uint8 Local_u8ErrorState=OK;
    1470:	1b 82       	std	Y+3, r1	; 0x03
uint8 Local_u8Counter=0;
    1472:	1a 82       	std	Y+2, r1	; 0x02
if(Copy_puPattern!=NULL)
    1474:	8d 81       	ldd	r24, Y+5	; 0x05
    1476:	9e 81       	ldd	r25, Y+6	; 0x06
    1478:	00 97       	sbiw	r24, 0x00	; 0
    147a:	59 f1       	breq	.+86     	; 0x14d2 <CLCD_u8SpecialCharacter+0x80>
{
	uint8 Local_u8CGRAMAddress= Copy_u8LocationNum*8;
    147c:	8c 81       	ldd	r24, Y+4	; 0x04
    147e:	88 2f       	mov	r24, r24
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	88 0f       	add	r24, r24
    1484:	99 1f       	adc	r25, r25
    1486:	88 0f       	add	r24, r24
    1488:	99 1f       	adc	r25, r25
    148a:	88 0f       	add	r24, r24
    148c:	99 1f       	adc	r25, r25
    148e:	89 83       	std	Y+1, r24	; 0x01
	//set bit 6 for CGRAM ADDRESS  command
	SET_BIT(Local_u8CGRAMAddress,6u);
    1490:	89 81       	ldd	r24, Y+1	; 0x01
    1492:	80 64       	ori	r24, 0x40	; 64
    1494:	89 83       	std	Y+1, r24	; 0x01
	// set CGRAM address
	CLCD_voidSendCmd(Local_u8CGRAMAddress);
    1496:	89 81       	ldd	r24, Y+1	; 0x01
    1498:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <CLCD_voidSendCmd>
	//write the input pattern inside cGRAM
	for(Local_u8Counter=0;Local_u8Counter<8;Local_u8Counter++)
    149c:	1a 82       	std	Y+2, r1	; 0x02
    149e:	0e c0       	rjmp	.+28     	; 0x14bc <CLCD_u8SpecialCharacter+0x6a>
	{
		CLCD_voidSendData(Copy_puPattern[Local_u8Counter]);
    14a0:	8a 81       	ldd	r24, Y+2	; 0x02
    14a2:	28 2f       	mov	r18, r24
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	8d 81       	ldd	r24, Y+5	; 0x05
    14a8:	9e 81       	ldd	r25, Y+6	; 0x06
    14aa:	fc 01       	movw	r30, r24
    14ac:	e2 0f       	add	r30, r18
    14ae:	f3 1f       	adc	r31, r19
    14b0:	80 81       	ld	r24, Z
    14b2:	0e 94 95 08 	call	0x112a	; 0x112a <CLCD_voidSendData>
	//set bit 6 for CGRAM ADDRESS  command
	SET_BIT(Local_u8CGRAMAddress,6u);
	// set CGRAM address
	CLCD_voidSendCmd(Local_u8CGRAMAddress);
	//write the input pattern inside cGRAM
	for(Local_u8Counter=0;Local_u8Counter<8;Local_u8Counter++)
    14b6:	8a 81       	ldd	r24, Y+2	; 0x02
    14b8:	8f 5f       	subi	r24, 0xFF	; 255
    14ba:	8a 83       	std	Y+2, r24	; 0x02
    14bc:	8a 81       	ldd	r24, Y+2	; 0x02
    14be:	88 30       	cpi	r24, 0x08	; 8
    14c0:	78 f3       	brcs	.-34     	; 0x14a0 <CLCD_u8SpecialCharacter+0x4e>
	{
		CLCD_voidSendData(Copy_puPattern[Local_u8Counter]);
	}
	//GO BACK TO DDRAM
	CLCD_VoidGoToXY(Copy_u8Xpos,Copy_u8Ypos);
    14c2:	8f 81       	ldd	r24, Y+7	; 0x07
    14c4:	68 85       	ldd	r22, Y+8	; 0x08
    14c6:	0e 94 09 0a 	call	0x1412	; 0x1412 <CLCD_VoidGoToXY>
	//WRITE SPECIAL PATTERN INSIDE CGRAM " DISPLAY
	CLCD_voidSendData(Copy_u8LocationNum);
    14ca:	8c 81       	ldd	r24, Y+4	; 0x04
    14cc:	0e 94 95 08 	call	0x112a	; 0x112a <CLCD_voidSendData>
    14d0:	02 c0       	rjmp	.+4      	; 0x14d6 <CLCD_u8SpecialCharacter+0x84>
}
else
{
	Local_u8ErrorState=NULL_PTR_ERR;
    14d2:	82 e0       	ldi	r24, 0x02	; 2
    14d4:	8b 83       	std	Y+3, r24	; 0x03
}
return Local_u8ErrorState;
    14d6:	8b 81       	ldd	r24, Y+3	; 0x03
}
    14d8:	28 96       	adiw	r28, 0x08	; 8
    14da:	0f b6       	in	r0, 0x3f	; 63
    14dc:	f8 94       	cli
    14de:	de bf       	out	0x3e, r29	; 62
    14e0:	0f be       	out	0x3f, r0	; 63
    14e2:	cd bf       	out	0x3d, r28	; 61
    14e4:	cf 91       	pop	r28
    14e6:	df 91       	pop	r29
    14e8:	08 95       	ret

000014ea <CLCD_voidClear>:

void CLCD_voidClear()
{
    14ea:	df 93       	push	r29
    14ec:	cf 93       	push	r28
    14ee:	cd b7       	in	r28, 0x3d	; 61
    14f0:	de b7       	in	r29, 0x3e	; 62
CLCD_voidSendCmd(1);
    14f2:	81 e0       	ldi	r24, 0x01	; 1
    14f4:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <CLCD_voidSendCmd>
}
    14f8:	cf 91       	pop	r28
    14fa:	df 91       	pop	r29
    14fc:	08 95       	ret

000014fe <CLCD_voidHamoksha>:

void CLCD_voidHamoksha()
{
    14fe:	0f 93       	push	r16
    1500:	1f 93       	push	r17
    1502:	df 93       	push	r29
    1504:	cf 93       	push	r28
    1506:	cd b7       	in	r28, 0x3d	; 61
    1508:	de b7       	in	r29, 0x3e	; 62
    150a:	c3 56       	subi	r28, 0x63	; 99
    150c:	d1 40       	sbci	r29, 0x01	; 1
    150e:	0f b6       	in	r0, 0x3f	; 63
    1510:	f8 94       	cli
    1512:	de bf       	out	0x3e, r29	; 62
    1514:	0f be       	out	0x3f, r0	; 63
    1516:	cd bf       	out	0x3d, r28	; 61
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000001
           ,0b00011111,
            0b00011111,0};
    1518:	ce 01       	movw	r24, r28
    151a:	8e 51       	subi	r24, 0x1E	; 30
    151c:	9f 4f       	sbci	r25, 0xFF	; 255
    151e:	ce 5c       	subi	r28, 0xCE	; 206
    1520:	de 4f       	sbci	r29, 0xFE	; 254
    1522:	99 83       	std	Y+1, r25	; 0x01
    1524:	88 83       	st	Y, r24
    1526:	c2 53       	subi	r28, 0x32	; 50
    1528:	d1 40       	sbci	r29, 0x01	; 1
    152a:	84 e0       	ldi	r24, 0x04	; 4
    152c:	91 e0       	ldi	r25, 0x01	; 1
    152e:	cc 5c       	subi	r28, 0xCC	; 204
    1530:	de 4f       	sbci	r29, 0xFE	; 254
    1532:	99 83       	std	Y+1, r25	; 0x01
    1534:	88 83       	st	Y, r24
    1536:	c4 53       	subi	r28, 0x34	; 52
    1538:	d1 40       	sbci	r29, 0x01	; 1
    153a:	98 e0       	ldi	r25, 0x08	; 8
    153c:	ca 5c       	subi	r28, 0xCA	; 202
    153e:	de 4f       	sbci	r29, 0xFE	; 254
    1540:	98 83       	st	Y, r25
    1542:	c6 53       	subi	r28, 0x36	; 54
    1544:	d1 40       	sbci	r29, 0x01	; 1
    1546:	cc 5c       	subi	r28, 0xCC	; 204
    1548:	de 4f       	sbci	r29, 0xFE	; 254
    154a:	e8 81       	ld	r30, Y
    154c:	f9 81       	ldd	r31, Y+1	; 0x01
    154e:	c4 53       	subi	r28, 0x34	; 52
    1550:	d1 40       	sbci	r29, 0x01	; 1
    1552:	00 80       	ld	r0, Z
    1554:	cc 5c       	subi	r28, 0xCC	; 204
    1556:	de 4f       	sbci	r29, 0xFE	; 254
    1558:	88 81       	ld	r24, Y
    155a:	99 81       	ldd	r25, Y+1	; 0x01
    155c:	c4 53       	subi	r28, 0x34	; 52
    155e:	d1 40       	sbci	r29, 0x01	; 1
    1560:	01 96       	adiw	r24, 0x01	; 1
    1562:	cc 5c       	subi	r28, 0xCC	; 204
    1564:	de 4f       	sbci	r29, 0xFE	; 254
    1566:	99 83       	std	Y+1, r25	; 0x01
    1568:	88 83       	st	Y, r24
    156a:	c4 53       	subi	r28, 0x34	; 52
    156c:	d1 40       	sbci	r29, 0x01	; 1
    156e:	ce 5c       	subi	r28, 0xCE	; 206
    1570:	de 4f       	sbci	r29, 0xFE	; 254
    1572:	e8 81       	ld	r30, Y
    1574:	f9 81       	ldd	r31, Y+1	; 0x01
    1576:	c2 53       	subi	r28, 0x32	; 50
    1578:	d1 40       	sbci	r29, 0x01	; 1
    157a:	00 82       	st	Z, r0
    157c:	ce 5c       	subi	r28, 0xCE	; 206
    157e:	de 4f       	sbci	r29, 0xFE	; 254
    1580:	88 81       	ld	r24, Y
    1582:	99 81       	ldd	r25, Y+1	; 0x01
    1584:	c2 53       	subi	r28, 0x32	; 50
    1586:	d1 40       	sbci	r29, 0x01	; 1
    1588:	01 96       	adiw	r24, 0x01	; 1
    158a:	ce 5c       	subi	r28, 0xCE	; 206
    158c:	de 4f       	sbci	r29, 0xFE	; 254
    158e:	99 83       	std	Y+1, r25	; 0x01
    1590:	88 83       	st	Y, r24
    1592:	c2 53       	subi	r28, 0x32	; 50
    1594:	d1 40       	sbci	r29, 0x01	; 1
    1596:	ca 5c       	subi	r28, 0xCA	; 202
    1598:	de 4f       	sbci	r29, 0xFE	; 254
    159a:	98 81       	ld	r25, Y
    159c:	c6 53       	subi	r28, 0x36	; 54
    159e:	d1 40       	sbci	r29, 0x01	; 1
    15a0:	91 50       	subi	r25, 0x01	; 1
    15a2:	ca 5c       	subi	r28, 0xCA	; 202
    15a4:	de 4f       	sbci	r29, 0xFE	; 254
    15a6:	98 83       	st	Y, r25
    15a8:	c6 53       	subi	r28, 0x36	; 54
    15aa:	d1 40       	sbci	r29, 0x01	; 1
    15ac:	ca 5c       	subi	r28, 0xCA	; 202
    15ae:	de 4f       	sbci	r29, 0xFE	; 254
    15b0:	e8 81       	ld	r30, Y
    15b2:	c6 53       	subi	r28, 0x36	; 54
    15b4:	d1 40       	sbci	r29, 0x01	; 1
    15b6:	ee 23       	and	r30, r30
    15b8:	31 f6       	brne	.-116    	; 0x1546 <CLCD_voidHamoksha+0x48>
                                         0b00001110,
                                         0b00010101,
                                         0b00010101,
                                         0b00000100
                                        ,0b00001010,
                                         0b00001010,0};
    15ba:	ce 01       	movw	r24, r28
    15bc:	86 51       	subi	r24, 0x16	; 22
    15be:	9f 4f       	sbci	r25, 0xFF	; 255
    15c0:	c9 5c       	subi	r28, 0xC9	; 201
    15c2:	de 4f       	sbci	r29, 0xFE	; 254
    15c4:	99 83       	std	Y+1, r25	; 0x01
    15c6:	88 83       	st	Y, r24
    15c8:	c7 53       	subi	r28, 0x37	; 55
    15ca:	d1 40       	sbci	r29, 0x01	; 1
    15cc:	8c ef       	ldi	r24, 0xFC	; 252
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	c7 5c       	subi	r28, 0xC7	; 199
    15d2:	de 4f       	sbci	r29, 0xFE	; 254
    15d4:	99 83       	std	Y+1, r25	; 0x01
    15d6:	88 83       	st	Y, r24
    15d8:	c9 53       	subi	r28, 0x39	; 57
    15da:	d1 40       	sbci	r29, 0x01	; 1
    15dc:	98 e0       	ldi	r25, 0x08	; 8
    15de:	c5 5c       	subi	r28, 0xC5	; 197
    15e0:	de 4f       	sbci	r29, 0xFE	; 254
    15e2:	98 83       	st	Y, r25
    15e4:	cb 53       	subi	r28, 0x3B	; 59
    15e6:	d1 40       	sbci	r29, 0x01	; 1
    15e8:	c7 5c       	subi	r28, 0xC7	; 199
    15ea:	de 4f       	sbci	r29, 0xFE	; 254
    15ec:	e8 81       	ld	r30, Y
    15ee:	f9 81       	ldd	r31, Y+1	; 0x01
    15f0:	c9 53       	subi	r28, 0x39	; 57
    15f2:	d1 40       	sbci	r29, 0x01	; 1
    15f4:	00 80       	ld	r0, Z
    15f6:	c7 5c       	subi	r28, 0xC7	; 199
    15f8:	de 4f       	sbci	r29, 0xFE	; 254
    15fa:	88 81       	ld	r24, Y
    15fc:	99 81       	ldd	r25, Y+1	; 0x01
    15fe:	c9 53       	subi	r28, 0x39	; 57
    1600:	d1 40       	sbci	r29, 0x01	; 1
    1602:	01 96       	adiw	r24, 0x01	; 1
    1604:	c7 5c       	subi	r28, 0xC7	; 199
    1606:	de 4f       	sbci	r29, 0xFE	; 254
    1608:	99 83       	std	Y+1, r25	; 0x01
    160a:	88 83       	st	Y, r24
    160c:	c9 53       	subi	r28, 0x39	; 57
    160e:	d1 40       	sbci	r29, 0x01	; 1
    1610:	c9 5c       	subi	r28, 0xC9	; 201
    1612:	de 4f       	sbci	r29, 0xFE	; 254
    1614:	e8 81       	ld	r30, Y
    1616:	f9 81       	ldd	r31, Y+1	; 0x01
    1618:	c7 53       	subi	r28, 0x37	; 55
    161a:	d1 40       	sbci	r29, 0x01	; 1
    161c:	00 82       	st	Z, r0
    161e:	c9 5c       	subi	r28, 0xC9	; 201
    1620:	de 4f       	sbci	r29, 0xFE	; 254
    1622:	88 81       	ld	r24, Y
    1624:	99 81       	ldd	r25, Y+1	; 0x01
    1626:	c7 53       	subi	r28, 0x37	; 55
    1628:	d1 40       	sbci	r29, 0x01	; 1
    162a:	01 96       	adiw	r24, 0x01	; 1
    162c:	c9 5c       	subi	r28, 0xC9	; 201
    162e:	de 4f       	sbci	r29, 0xFE	; 254
    1630:	99 83       	std	Y+1, r25	; 0x01
    1632:	88 83       	st	Y, r24
    1634:	c7 53       	subi	r28, 0x37	; 55
    1636:	d1 40       	sbci	r29, 0x01	; 1
    1638:	c5 5c       	subi	r28, 0xC5	; 197
    163a:	de 4f       	sbci	r29, 0xFE	; 254
    163c:	98 81       	ld	r25, Y
    163e:	cb 53       	subi	r28, 0x3B	; 59
    1640:	d1 40       	sbci	r29, 0x01	; 1
    1642:	91 50       	subi	r25, 0x01	; 1
    1644:	c5 5c       	subi	r28, 0xC5	; 197
    1646:	de 4f       	sbci	r29, 0xFE	; 254
    1648:	98 83       	st	Y, r25
    164a:	cb 53       	subi	r28, 0x3B	; 59
    164c:	d1 40       	sbci	r29, 0x01	; 1
    164e:	c5 5c       	subi	r28, 0xC5	; 197
    1650:	de 4f       	sbci	r29, 0xFE	; 254
    1652:	e8 81       	ld	r30, Y
    1654:	cb 53       	subi	r28, 0x3B	; 59
    1656:	d1 40       	sbci	r29, 0x01	; 1
    1658:	ee 23       	and	r30, r30
    165a:	31 f6       	brne	.-116    	; 0x15e8 <CLCD_voidHamoksha+0xea>
	                                         0b00011111,
	                                         0b00010101,
	                                         0b00000100,
	                                         0b00000100
	                                        ,0b00010001,
	                                         0b00010001,0};
    165c:	ce 01       	movw	r24, r28
    165e:	8e 50       	subi	r24, 0x0E	; 14
    1660:	9f 4f       	sbci	r25, 0xFF	; 255
    1662:	c4 5c       	subi	r28, 0xC4	; 196
    1664:	de 4f       	sbci	r29, 0xFE	; 254
    1666:	99 83       	std	Y+1, r25	; 0x01
    1668:	88 83       	st	Y, r24
    166a:	cc 53       	subi	r28, 0x3C	; 60
    166c:	d1 40       	sbci	r29, 0x01	; 1
    166e:	84 ef       	ldi	r24, 0xF4	; 244
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	c2 5c       	subi	r28, 0xC2	; 194
    1674:	de 4f       	sbci	r29, 0xFE	; 254
    1676:	99 83       	std	Y+1, r25	; 0x01
    1678:	88 83       	st	Y, r24
    167a:	ce 53       	subi	r28, 0x3E	; 62
    167c:	d1 40       	sbci	r29, 0x01	; 1
    167e:	98 e0       	ldi	r25, 0x08	; 8
    1680:	c0 5c       	subi	r28, 0xC0	; 192
    1682:	de 4f       	sbci	r29, 0xFE	; 254
    1684:	98 83       	st	Y, r25
    1686:	c0 54       	subi	r28, 0x40	; 64
    1688:	d1 40       	sbci	r29, 0x01	; 1
    168a:	c2 5c       	subi	r28, 0xC2	; 194
    168c:	de 4f       	sbci	r29, 0xFE	; 254
    168e:	e8 81       	ld	r30, Y
    1690:	f9 81       	ldd	r31, Y+1	; 0x01
    1692:	ce 53       	subi	r28, 0x3E	; 62
    1694:	d1 40       	sbci	r29, 0x01	; 1
    1696:	00 80       	ld	r0, Z
    1698:	c2 5c       	subi	r28, 0xC2	; 194
    169a:	de 4f       	sbci	r29, 0xFE	; 254
    169c:	88 81       	ld	r24, Y
    169e:	99 81       	ldd	r25, Y+1	; 0x01
    16a0:	ce 53       	subi	r28, 0x3E	; 62
    16a2:	d1 40       	sbci	r29, 0x01	; 1
    16a4:	01 96       	adiw	r24, 0x01	; 1
    16a6:	c2 5c       	subi	r28, 0xC2	; 194
    16a8:	de 4f       	sbci	r29, 0xFE	; 254
    16aa:	99 83       	std	Y+1, r25	; 0x01
    16ac:	88 83       	st	Y, r24
    16ae:	ce 53       	subi	r28, 0x3E	; 62
    16b0:	d1 40       	sbci	r29, 0x01	; 1
    16b2:	c4 5c       	subi	r28, 0xC4	; 196
    16b4:	de 4f       	sbci	r29, 0xFE	; 254
    16b6:	e8 81       	ld	r30, Y
    16b8:	f9 81       	ldd	r31, Y+1	; 0x01
    16ba:	cc 53       	subi	r28, 0x3C	; 60
    16bc:	d1 40       	sbci	r29, 0x01	; 1
    16be:	00 82       	st	Z, r0
    16c0:	c4 5c       	subi	r28, 0xC4	; 196
    16c2:	de 4f       	sbci	r29, 0xFE	; 254
    16c4:	88 81       	ld	r24, Y
    16c6:	99 81       	ldd	r25, Y+1	; 0x01
    16c8:	cc 53       	subi	r28, 0x3C	; 60
    16ca:	d1 40       	sbci	r29, 0x01	; 1
    16cc:	01 96       	adiw	r24, 0x01	; 1
    16ce:	c4 5c       	subi	r28, 0xC4	; 196
    16d0:	de 4f       	sbci	r29, 0xFE	; 254
    16d2:	99 83       	std	Y+1, r25	; 0x01
    16d4:	88 83       	st	Y, r24
    16d6:	cc 53       	subi	r28, 0x3C	; 60
    16d8:	d1 40       	sbci	r29, 0x01	; 1
    16da:	c0 5c       	subi	r28, 0xC0	; 192
    16dc:	de 4f       	sbci	r29, 0xFE	; 254
    16de:	98 81       	ld	r25, Y
    16e0:	c0 54       	subi	r28, 0x40	; 64
    16e2:	d1 40       	sbci	r29, 0x01	; 1
    16e4:	91 50       	subi	r25, 0x01	; 1
    16e6:	c0 5c       	subi	r28, 0xC0	; 192
    16e8:	de 4f       	sbci	r29, 0xFE	; 254
    16ea:	98 83       	st	Y, r25
    16ec:	c0 54       	subi	r28, 0x40	; 64
    16ee:	d1 40       	sbci	r29, 0x01	; 1
    16f0:	c0 5c       	subi	r28, 0xC0	; 192
    16f2:	de 4f       	sbci	r29, 0xFE	; 254
    16f4:	e8 81       	ld	r30, Y
    16f6:	c0 54       	subi	r28, 0x40	; 64
    16f8:	d1 40       	sbci	r29, 0x01	; 1
    16fa:	ee 23       	and	r30, r30
    16fc:	31 f6       	brne	.-116    	; 0x168a <CLCD_voidHamoksha+0x18c>
	                                         0b00011111,
	                                         0b00010101,
	                                         0b00000100,
	                                         0b00000100
	                                        ,0b00001010,
	                                         0b00001010,0};
    16fe:	ce 01       	movw	r24, r28
    1700:	86 50       	subi	r24, 0x06	; 6
    1702:	9f 4f       	sbci	r25, 0xFF	; 255
    1704:	cf 5b       	subi	r28, 0xBF	; 191
    1706:	de 4f       	sbci	r29, 0xFE	; 254
    1708:	99 83       	std	Y+1, r25	; 0x01
    170a:	88 83       	st	Y, r24
    170c:	c1 54       	subi	r28, 0x41	; 65
    170e:	d1 40       	sbci	r29, 0x01	; 1
    1710:	8c ee       	ldi	r24, 0xEC	; 236
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	cd 5b       	subi	r28, 0xBD	; 189
    1716:	de 4f       	sbci	r29, 0xFE	; 254
    1718:	99 83       	std	Y+1, r25	; 0x01
    171a:	88 83       	st	Y, r24
    171c:	c3 54       	subi	r28, 0x43	; 67
    171e:	d1 40       	sbci	r29, 0x01	; 1
    1720:	98 e0       	ldi	r25, 0x08	; 8
    1722:	cb 5b       	subi	r28, 0xBB	; 187
    1724:	de 4f       	sbci	r29, 0xFE	; 254
    1726:	98 83       	st	Y, r25
    1728:	c5 54       	subi	r28, 0x45	; 69
    172a:	d1 40       	sbci	r29, 0x01	; 1
    172c:	cd 5b       	subi	r28, 0xBD	; 189
    172e:	de 4f       	sbci	r29, 0xFE	; 254
    1730:	e8 81       	ld	r30, Y
    1732:	f9 81       	ldd	r31, Y+1	; 0x01
    1734:	c3 54       	subi	r28, 0x43	; 67
    1736:	d1 40       	sbci	r29, 0x01	; 1
    1738:	00 80       	ld	r0, Z
    173a:	cd 5b       	subi	r28, 0xBD	; 189
    173c:	de 4f       	sbci	r29, 0xFE	; 254
    173e:	88 81       	ld	r24, Y
    1740:	99 81       	ldd	r25, Y+1	; 0x01
    1742:	c3 54       	subi	r28, 0x43	; 67
    1744:	d1 40       	sbci	r29, 0x01	; 1
    1746:	01 96       	adiw	r24, 0x01	; 1
    1748:	cd 5b       	subi	r28, 0xBD	; 189
    174a:	de 4f       	sbci	r29, 0xFE	; 254
    174c:	99 83       	std	Y+1, r25	; 0x01
    174e:	88 83       	st	Y, r24
    1750:	c3 54       	subi	r28, 0x43	; 67
    1752:	d1 40       	sbci	r29, 0x01	; 1
    1754:	cf 5b       	subi	r28, 0xBF	; 191
    1756:	de 4f       	sbci	r29, 0xFE	; 254
    1758:	e8 81       	ld	r30, Y
    175a:	f9 81       	ldd	r31, Y+1	; 0x01
    175c:	c1 54       	subi	r28, 0x41	; 65
    175e:	d1 40       	sbci	r29, 0x01	; 1
    1760:	00 82       	st	Z, r0
    1762:	cf 5b       	subi	r28, 0xBF	; 191
    1764:	de 4f       	sbci	r29, 0xFE	; 254
    1766:	88 81       	ld	r24, Y
    1768:	99 81       	ldd	r25, Y+1	; 0x01
    176a:	c1 54       	subi	r28, 0x41	; 65
    176c:	d1 40       	sbci	r29, 0x01	; 1
    176e:	01 96       	adiw	r24, 0x01	; 1
    1770:	cf 5b       	subi	r28, 0xBF	; 191
    1772:	de 4f       	sbci	r29, 0xFE	; 254
    1774:	99 83       	std	Y+1, r25	; 0x01
    1776:	88 83       	st	Y, r24
    1778:	c1 54       	subi	r28, 0x41	; 65
    177a:	d1 40       	sbci	r29, 0x01	; 1
    177c:	cb 5b       	subi	r28, 0xBB	; 187
    177e:	de 4f       	sbci	r29, 0xFE	; 254
    1780:	98 81       	ld	r25, Y
    1782:	c5 54       	subi	r28, 0x45	; 69
    1784:	d1 40       	sbci	r29, 0x01	; 1
    1786:	91 50       	subi	r25, 0x01	; 1
    1788:	cb 5b       	subi	r28, 0xBB	; 187
    178a:	de 4f       	sbci	r29, 0xFE	; 254
    178c:	98 83       	st	Y, r25
    178e:	c5 54       	subi	r28, 0x45	; 69
    1790:	d1 40       	sbci	r29, 0x01	; 1
    1792:	cb 5b       	subi	r28, 0xBB	; 187
    1794:	de 4f       	sbci	r29, 0xFE	; 254
    1796:	e8 81       	ld	r30, Y
    1798:	c5 54       	subi	r28, 0x45	; 69
    179a:	d1 40       	sbci	r29, 0x01	; 1
    179c:	ee 23       	and	r30, r30
    179e:	31 f6       	brne	.-116    	; 0x172c <CLCD_voidHamoksha+0x22e>
                                         0b00001110,
                                         0b00000100,
                                         0b00000100,
                                         0b00000100
                                        ,0b00001010,
                                         0b00001010,0};
    17a0:	ce 01       	movw	r24, r28
    17a2:	8e 5f       	subi	r24, 0xFE	; 254
    17a4:	9e 4f       	sbci	r25, 0xFE	; 254
    17a6:	ca 5b       	subi	r28, 0xBA	; 186
    17a8:	de 4f       	sbci	r29, 0xFE	; 254
    17aa:	99 83       	std	Y+1, r25	; 0x01
    17ac:	88 83       	st	Y, r24
    17ae:	c6 54       	subi	r28, 0x46	; 70
    17b0:	d1 40       	sbci	r29, 0x01	; 1
    17b2:	84 ee       	ldi	r24, 0xE4	; 228
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	c8 5b       	subi	r28, 0xB8	; 184
    17b8:	de 4f       	sbci	r29, 0xFE	; 254
    17ba:	99 83       	std	Y+1, r25	; 0x01
    17bc:	88 83       	st	Y, r24
    17be:	c8 54       	subi	r28, 0x48	; 72
    17c0:	d1 40       	sbci	r29, 0x01	; 1
    17c2:	98 e0       	ldi	r25, 0x08	; 8
    17c4:	c6 5b       	subi	r28, 0xB6	; 182
    17c6:	de 4f       	sbci	r29, 0xFE	; 254
    17c8:	98 83       	st	Y, r25
    17ca:	ca 54       	subi	r28, 0x4A	; 74
    17cc:	d1 40       	sbci	r29, 0x01	; 1
    17ce:	c8 5b       	subi	r28, 0xB8	; 184
    17d0:	de 4f       	sbci	r29, 0xFE	; 254
    17d2:	e8 81       	ld	r30, Y
    17d4:	f9 81       	ldd	r31, Y+1	; 0x01
    17d6:	c8 54       	subi	r28, 0x48	; 72
    17d8:	d1 40       	sbci	r29, 0x01	; 1
    17da:	00 80       	ld	r0, Z
    17dc:	c8 5b       	subi	r28, 0xB8	; 184
    17de:	de 4f       	sbci	r29, 0xFE	; 254
    17e0:	88 81       	ld	r24, Y
    17e2:	99 81       	ldd	r25, Y+1	; 0x01
    17e4:	c8 54       	subi	r28, 0x48	; 72
    17e6:	d1 40       	sbci	r29, 0x01	; 1
    17e8:	01 96       	adiw	r24, 0x01	; 1
    17ea:	c8 5b       	subi	r28, 0xB8	; 184
    17ec:	de 4f       	sbci	r29, 0xFE	; 254
    17ee:	99 83       	std	Y+1, r25	; 0x01
    17f0:	88 83       	st	Y, r24
    17f2:	c8 54       	subi	r28, 0x48	; 72
    17f4:	d1 40       	sbci	r29, 0x01	; 1
    17f6:	ca 5b       	subi	r28, 0xBA	; 186
    17f8:	de 4f       	sbci	r29, 0xFE	; 254
    17fa:	e8 81       	ld	r30, Y
    17fc:	f9 81       	ldd	r31, Y+1	; 0x01
    17fe:	c6 54       	subi	r28, 0x46	; 70
    1800:	d1 40       	sbci	r29, 0x01	; 1
    1802:	00 82       	st	Z, r0
    1804:	ca 5b       	subi	r28, 0xBA	; 186
    1806:	de 4f       	sbci	r29, 0xFE	; 254
    1808:	88 81       	ld	r24, Y
    180a:	99 81       	ldd	r25, Y+1	; 0x01
    180c:	c6 54       	subi	r28, 0x46	; 70
    180e:	d1 40       	sbci	r29, 0x01	; 1
    1810:	01 96       	adiw	r24, 0x01	; 1
    1812:	ca 5b       	subi	r28, 0xBA	; 186
    1814:	de 4f       	sbci	r29, 0xFE	; 254
    1816:	99 83       	std	Y+1, r25	; 0x01
    1818:	88 83       	st	Y, r24
    181a:	c6 54       	subi	r28, 0x46	; 70
    181c:	d1 40       	sbci	r29, 0x01	; 1
    181e:	c6 5b       	subi	r28, 0xB6	; 182
    1820:	de 4f       	sbci	r29, 0xFE	; 254
    1822:	98 81       	ld	r25, Y
    1824:	ca 54       	subi	r28, 0x4A	; 74
    1826:	d1 40       	sbci	r29, 0x01	; 1
    1828:	91 50       	subi	r25, 0x01	; 1
    182a:	c6 5b       	subi	r28, 0xB6	; 182
    182c:	de 4f       	sbci	r29, 0xFE	; 254
    182e:	98 83       	st	Y, r25
    1830:	ca 54       	subi	r28, 0x4A	; 74
    1832:	d1 40       	sbci	r29, 0x01	; 1
    1834:	c6 5b       	subi	r28, 0xB6	; 182
    1836:	de 4f       	sbci	r29, 0xFE	; 254
    1838:	e8 81       	ld	r30, Y
    183a:	ca 54       	subi	r28, 0x4A	; 74
    183c:	d1 40       	sbci	r29, 0x01	; 1
    183e:	ee 23       	and	r30, r30
    1840:	31 f6       	brne	.-116    	; 0x17ce <CLCD_voidHamoksha+0x2d0>
                                         0b00001110,
                                         0b00000100,
                                         0b00000100,
                                         0b00000100
                                        ,0b00001001,
                                         0b00001001,0};
    1842:	ce 01       	movw	r24, r28
    1844:	86 5f       	subi	r24, 0xF6	; 246
    1846:	9e 4f       	sbci	r25, 0xFE	; 254
    1848:	c5 5b       	subi	r28, 0xB5	; 181
    184a:	de 4f       	sbci	r29, 0xFE	; 254
    184c:	99 83       	std	Y+1, r25	; 0x01
    184e:	88 83       	st	Y, r24
    1850:	cb 54       	subi	r28, 0x4B	; 75
    1852:	d1 40       	sbci	r29, 0x01	; 1
    1854:	8c ed       	ldi	r24, 0xDC	; 220
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	c3 5b       	subi	r28, 0xB3	; 179
    185a:	de 4f       	sbci	r29, 0xFE	; 254
    185c:	99 83       	std	Y+1, r25	; 0x01
    185e:	88 83       	st	Y, r24
    1860:	cd 54       	subi	r28, 0x4D	; 77
    1862:	d1 40       	sbci	r29, 0x01	; 1
    1864:	98 e0       	ldi	r25, 0x08	; 8
    1866:	c1 5b       	subi	r28, 0xB1	; 177
    1868:	de 4f       	sbci	r29, 0xFE	; 254
    186a:	98 83       	st	Y, r25
    186c:	cf 54       	subi	r28, 0x4F	; 79
    186e:	d1 40       	sbci	r29, 0x01	; 1
    1870:	c3 5b       	subi	r28, 0xB3	; 179
    1872:	de 4f       	sbci	r29, 0xFE	; 254
    1874:	e8 81       	ld	r30, Y
    1876:	f9 81       	ldd	r31, Y+1	; 0x01
    1878:	cd 54       	subi	r28, 0x4D	; 77
    187a:	d1 40       	sbci	r29, 0x01	; 1
    187c:	00 80       	ld	r0, Z
    187e:	c3 5b       	subi	r28, 0xB3	; 179
    1880:	de 4f       	sbci	r29, 0xFE	; 254
    1882:	88 81       	ld	r24, Y
    1884:	99 81       	ldd	r25, Y+1	; 0x01
    1886:	cd 54       	subi	r28, 0x4D	; 77
    1888:	d1 40       	sbci	r29, 0x01	; 1
    188a:	01 96       	adiw	r24, 0x01	; 1
    188c:	c3 5b       	subi	r28, 0xB3	; 179
    188e:	de 4f       	sbci	r29, 0xFE	; 254
    1890:	99 83       	std	Y+1, r25	; 0x01
    1892:	88 83       	st	Y, r24
    1894:	cd 54       	subi	r28, 0x4D	; 77
    1896:	d1 40       	sbci	r29, 0x01	; 1
    1898:	c5 5b       	subi	r28, 0xB5	; 181
    189a:	de 4f       	sbci	r29, 0xFE	; 254
    189c:	e8 81       	ld	r30, Y
    189e:	f9 81       	ldd	r31, Y+1	; 0x01
    18a0:	cb 54       	subi	r28, 0x4B	; 75
    18a2:	d1 40       	sbci	r29, 0x01	; 1
    18a4:	00 82       	st	Z, r0
    18a6:	c5 5b       	subi	r28, 0xB5	; 181
    18a8:	de 4f       	sbci	r29, 0xFE	; 254
    18aa:	88 81       	ld	r24, Y
    18ac:	99 81       	ldd	r25, Y+1	; 0x01
    18ae:	cb 54       	subi	r28, 0x4B	; 75
    18b0:	d1 40       	sbci	r29, 0x01	; 1
    18b2:	01 96       	adiw	r24, 0x01	; 1
    18b4:	c5 5b       	subi	r28, 0xB5	; 181
    18b6:	de 4f       	sbci	r29, 0xFE	; 254
    18b8:	99 83       	std	Y+1, r25	; 0x01
    18ba:	88 83       	st	Y, r24
    18bc:	cb 54       	subi	r28, 0x4B	; 75
    18be:	d1 40       	sbci	r29, 0x01	; 1
    18c0:	c1 5b       	subi	r28, 0xB1	; 177
    18c2:	de 4f       	sbci	r29, 0xFE	; 254
    18c4:	98 81       	ld	r25, Y
    18c6:	cf 54       	subi	r28, 0x4F	; 79
    18c8:	d1 40       	sbci	r29, 0x01	; 1
    18ca:	91 50       	subi	r25, 0x01	; 1
    18cc:	c1 5b       	subi	r28, 0xB1	; 177
    18ce:	de 4f       	sbci	r29, 0xFE	; 254
    18d0:	98 83       	st	Y, r25
    18d2:	cf 54       	subi	r28, 0x4F	; 79
    18d4:	d1 40       	sbci	r29, 0x01	; 1
    18d6:	c1 5b       	subi	r28, 0xB1	; 177
    18d8:	de 4f       	sbci	r29, 0xFE	; 254
    18da:	e8 81       	ld	r30, Y
    18dc:	cf 54       	subi	r28, 0x4F	; 79
    18de:	d1 40       	sbci	r29, 0x01	; 1
    18e0:	ee 23       	and	r30, r30
    18e2:	31 f6       	brne	.-116    	; 0x1870 <CLCD_voidHamoksha+0x372>
	                                         0b00001110,
	                                         0b00000100,
	                                         0b00000101,
	                                         0b00000101
	                                        ,0b00001010,
	                                         0b00001000,0};
    18e4:	ce 01       	movw	r24, r28
    18e6:	8e 5e       	subi	r24, 0xEE	; 238
    18e8:	9e 4f       	sbci	r25, 0xFE	; 254
    18ea:	c0 5b       	subi	r28, 0xB0	; 176
    18ec:	de 4f       	sbci	r29, 0xFE	; 254
    18ee:	99 83       	std	Y+1, r25	; 0x01
    18f0:	88 83       	st	Y, r24
    18f2:	c0 55       	subi	r28, 0x50	; 80
    18f4:	d1 40       	sbci	r29, 0x01	; 1
    18f6:	84 ed       	ldi	r24, 0xD4	; 212
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	ce 5a       	subi	r28, 0xAE	; 174
    18fc:	de 4f       	sbci	r29, 0xFE	; 254
    18fe:	99 83       	std	Y+1, r25	; 0x01
    1900:	88 83       	st	Y, r24
    1902:	c2 55       	subi	r28, 0x52	; 82
    1904:	d1 40       	sbci	r29, 0x01	; 1
    1906:	98 e0       	ldi	r25, 0x08	; 8
    1908:	cc 5a       	subi	r28, 0xAC	; 172
    190a:	de 4f       	sbci	r29, 0xFE	; 254
    190c:	98 83       	st	Y, r25
    190e:	c4 55       	subi	r28, 0x54	; 84
    1910:	d1 40       	sbci	r29, 0x01	; 1
    1912:	ce 5a       	subi	r28, 0xAE	; 174
    1914:	de 4f       	sbci	r29, 0xFE	; 254
    1916:	e8 81       	ld	r30, Y
    1918:	f9 81       	ldd	r31, Y+1	; 0x01
    191a:	c2 55       	subi	r28, 0x52	; 82
    191c:	d1 40       	sbci	r29, 0x01	; 1
    191e:	00 80       	ld	r0, Z
    1920:	ce 5a       	subi	r28, 0xAE	; 174
    1922:	de 4f       	sbci	r29, 0xFE	; 254
    1924:	88 81       	ld	r24, Y
    1926:	99 81       	ldd	r25, Y+1	; 0x01
    1928:	c2 55       	subi	r28, 0x52	; 82
    192a:	d1 40       	sbci	r29, 0x01	; 1
    192c:	01 96       	adiw	r24, 0x01	; 1
    192e:	ce 5a       	subi	r28, 0xAE	; 174
    1930:	de 4f       	sbci	r29, 0xFE	; 254
    1932:	99 83       	std	Y+1, r25	; 0x01
    1934:	88 83       	st	Y, r24
    1936:	c2 55       	subi	r28, 0x52	; 82
    1938:	d1 40       	sbci	r29, 0x01	; 1
    193a:	c0 5b       	subi	r28, 0xB0	; 176
    193c:	de 4f       	sbci	r29, 0xFE	; 254
    193e:	e8 81       	ld	r30, Y
    1940:	f9 81       	ldd	r31, Y+1	; 0x01
    1942:	c0 55       	subi	r28, 0x50	; 80
    1944:	d1 40       	sbci	r29, 0x01	; 1
    1946:	00 82       	st	Z, r0
    1948:	c0 5b       	subi	r28, 0xB0	; 176
    194a:	de 4f       	sbci	r29, 0xFE	; 254
    194c:	88 81       	ld	r24, Y
    194e:	99 81       	ldd	r25, Y+1	; 0x01
    1950:	c0 55       	subi	r28, 0x50	; 80
    1952:	d1 40       	sbci	r29, 0x01	; 1
    1954:	01 96       	adiw	r24, 0x01	; 1
    1956:	c0 5b       	subi	r28, 0xB0	; 176
    1958:	de 4f       	sbci	r29, 0xFE	; 254
    195a:	99 83       	std	Y+1, r25	; 0x01
    195c:	88 83       	st	Y, r24
    195e:	c0 55       	subi	r28, 0x50	; 80
    1960:	d1 40       	sbci	r29, 0x01	; 1
    1962:	cc 5a       	subi	r28, 0xAC	; 172
    1964:	de 4f       	sbci	r29, 0xFE	; 254
    1966:	98 81       	ld	r25, Y
    1968:	c4 55       	subi	r28, 0x54	; 84
    196a:	d1 40       	sbci	r29, 0x01	; 1
    196c:	91 50       	subi	r25, 0x01	; 1
    196e:	cc 5a       	subi	r28, 0xAC	; 172
    1970:	de 4f       	sbci	r29, 0xFE	; 254
    1972:	98 83       	st	Y, r25
    1974:	c4 55       	subi	r28, 0x54	; 84
    1976:	d1 40       	sbci	r29, 0x01	; 1
    1978:	cc 5a       	subi	r28, 0xAC	; 172
    197a:	de 4f       	sbci	r29, 0xFE	; 254
    197c:	e8 81       	ld	r30, Y
    197e:	c4 55       	subi	r28, 0x54	; 84
    1980:	d1 40       	sbci	r29, 0x01	; 1
    1982:	ee 23       	and	r30, r30
    1984:	31 f6       	brne	.-116    	; 0x1912 <CLCD_voidHamoksha+0x414>
            0b00011111,
            0b00011111,
            0b00011111,
            0b00011111
           ,0b00011111,
            0b00011111,0};
    1986:	ce 01       	movw	r24, r28
    1988:	86 5e       	subi	r24, 0xE6	; 230
    198a:	9e 4f       	sbci	r25, 0xFE	; 254
    198c:	cb 5a       	subi	r28, 0xAB	; 171
    198e:	de 4f       	sbci	r29, 0xFE	; 254
    1990:	99 83       	std	Y+1, r25	; 0x01
    1992:	88 83       	st	Y, r24
    1994:	c5 55       	subi	r28, 0x55	; 85
    1996:	d1 40       	sbci	r29, 0x01	; 1
    1998:	8c ec       	ldi	r24, 0xCC	; 204
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	c9 5a       	subi	r28, 0xA9	; 169
    199e:	de 4f       	sbci	r29, 0xFE	; 254
    19a0:	99 83       	std	Y+1, r25	; 0x01
    19a2:	88 83       	st	Y, r24
    19a4:	c7 55       	subi	r28, 0x57	; 87
    19a6:	d1 40       	sbci	r29, 0x01	; 1
    19a8:	98 e0       	ldi	r25, 0x08	; 8
    19aa:	c7 5a       	subi	r28, 0xA7	; 167
    19ac:	de 4f       	sbci	r29, 0xFE	; 254
    19ae:	98 83       	st	Y, r25
    19b0:	c9 55       	subi	r28, 0x59	; 89
    19b2:	d1 40       	sbci	r29, 0x01	; 1
    19b4:	c9 5a       	subi	r28, 0xA9	; 169
    19b6:	de 4f       	sbci	r29, 0xFE	; 254
    19b8:	e8 81       	ld	r30, Y
    19ba:	f9 81       	ldd	r31, Y+1	; 0x01
    19bc:	c7 55       	subi	r28, 0x57	; 87
    19be:	d1 40       	sbci	r29, 0x01	; 1
    19c0:	00 80       	ld	r0, Z
    19c2:	c9 5a       	subi	r28, 0xA9	; 169
    19c4:	de 4f       	sbci	r29, 0xFE	; 254
    19c6:	88 81       	ld	r24, Y
    19c8:	99 81       	ldd	r25, Y+1	; 0x01
    19ca:	c7 55       	subi	r28, 0x57	; 87
    19cc:	d1 40       	sbci	r29, 0x01	; 1
    19ce:	01 96       	adiw	r24, 0x01	; 1
    19d0:	c9 5a       	subi	r28, 0xA9	; 169
    19d2:	de 4f       	sbci	r29, 0xFE	; 254
    19d4:	99 83       	std	Y+1, r25	; 0x01
    19d6:	88 83       	st	Y, r24
    19d8:	c7 55       	subi	r28, 0x57	; 87
    19da:	d1 40       	sbci	r29, 0x01	; 1
    19dc:	cb 5a       	subi	r28, 0xAB	; 171
    19de:	de 4f       	sbci	r29, 0xFE	; 254
    19e0:	e8 81       	ld	r30, Y
    19e2:	f9 81       	ldd	r31, Y+1	; 0x01
    19e4:	c5 55       	subi	r28, 0x55	; 85
    19e6:	d1 40       	sbci	r29, 0x01	; 1
    19e8:	00 82       	st	Z, r0
    19ea:	cb 5a       	subi	r28, 0xAB	; 171
    19ec:	de 4f       	sbci	r29, 0xFE	; 254
    19ee:	88 81       	ld	r24, Y
    19f0:	99 81       	ldd	r25, Y+1	; 0x01
    19f2:	c5 55       	subi	r28, 0x55	; 85
    19f4:	d1 40       	sbci	r29, 0x01	; 1
    19f6:	01 96       	adiw	r24, 0x01	; 1
    19f8:	cb 5a       	subi	r28, 0xAB	; 171
    19fa:	de 4f       	sbci	r29, 0xFE	; 254
    19fc:	99 83       	std	Y+1, r25	; 0x01
    19fe:	88 83       	st	Y, r24
    1a00:	c5 55       	subi	r28, 0x55	; 85
    1a02:	d1 40       	sbci	r29, 0x01	; 1
    1a04:	c7 5a       	subi	r28, 0xA7	; 167
    1a06:	de 4f       	sbci	r29, 0xFE	; 254
    1a08:	98 81       	ld	r25, Y
    1a0a:	c9 55       	subi	r28, 0x59	; 89
    1a0c:	d1 40       	sbci	r29, 0x01	; 1
    1a0e:	91 50       	subi	r25, 0x01	; 1
    1a10:	c7 5a       	subi	r28, 0xA7	; 167
    1a12:	de 4f       	sbci	r29, 0xFE	; 254
    1a14:	98 83       	st	Y, r25
    1a16:	c9 55       	subi	r28, 0x59	; 89
    1a18:	d1 40       	sbci	r29, 0x01	; 1
    1a1a:	c7 5a       	subi	r28, 0xA7	; 167
    1a1c:	de 4f       	sbci	r29, 0xFE	; 254
    1a1e:	e8 81       	ld	r30, Y
    1a20:	c9 55       	subi	r28, 0x59	; 89
    1a22:	d1 40       	sbci	r29, 0x01	; 1
    1a24:	ee 23       	and	r30, r30
    1a26:	31 f6       	brne	.-116    	; 0x19b4 <CLCD_voidHamoksha+0x4b6>
	            0b00011111,
	            0b00011111,
	            0b00011111,
	            0b00000000
	           ,0b00000000,
	            0b00000000,0};
    1a28:	ce 01       	movw	r24, r28
    1a2a:	8e 5d       	subi	r24, 0xDE	; 222
    1a2c:	9e 4f       	sbci	r25, 0xFE	; 254
    1a2e:	c6 5a       	subi	r28, 0xA6	; 166
    1a30:	de 4f       	sbci	r29, 0xFE	; 254
    1a32:	99 83       	std	Y+1, r25	; 0x01
    1a34:	88 83       	st	Y, r24
    1a36:	ca 55       	subi	r28, 0x5A	; 90
    1a38:	d1 40       	sbci	r29, 0x01	; 1
    1a3a:	84 ec       	ldi	r24, 0xC4	; 196
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	c4 5a       	subi	r28, 0xA4	; 164
    1a40:	de 4f       	sbci	r29, 0xFE	; 254
    1a42:	99 83       	std	Y+1, r25	; 0x01
    1a44:	88 83       	st	Y, r24
    1a46:	cc 55       	subi	r28, 0x5C	; 92
    1a48:	d1 40       	sbci	r29, 0x01	; 1
    1a4a:	98 e0       	ldi	r25, 0x08	; 8
    1a4c:	c2 5a       	subi	r28, 0xA2	; 162
    1a4e:	de 4f       	sbci	r29, 0xFE	; 254
    1a50:	98 83       	st	Y, r25
    1a52:	ce 55       	subi	r28, 0x5E	; 94
    1a54:	d1 40       	sbci	r29, 0x01	; 1
    1a56:	c4 5a       	subi	r28, 0xA4	; 164
    1a58:	de 4f       	sbci	r29, 0xFE	; 254
    1a5a:	e8 81       	ld	r30, Y
    1a5c:	f9 81       	ldd	r31, Y+1	; 0x01
    1a5e:	cc 55       	subi	r28, 0x5C	; 92
    1a60:	d1 40       	sbci	r29, 0x01	; 1
    1a62:	00 80       	ld	r0, Z
    1a64:	c4 5a       	subi	r28, 0xA4	; 164
    1a66:	de 4f       	sbci	r29, 0xFE	; 254
    1a68:	88 81       	ld	r24, Y
    1a6a:	99 81       	ldd	r25, Y+1	; 0x01
    1a6c:	cc 55       	subi	r28, 0x5C	; 92
    1a6e:	d1 40       	sbci	r29, 0x01	; 1
    1a70:	01 96       	adiw	r24, 0x01	; 1
    1a72:	c4 5a       	subi	r28, 0xA4	; 164
    1a74:	de 4f       	sbci	r29, 0xFE	; 254
    1a76:	99 83       	std	Y+1, r25	; 0x01
    1a78:	88 83       	st	Y, r24
    1a7a:	cc 55       	subi	r28, 0x5C	; 92
    1a7c:	d1 40       	sbci	r29, 0x01	; 1
    1a7e:	c6 5a       	subi	r28, 0xA6	; 166
    1a80:	de 4f       	sbci	r29, 0xFE	; 254
    1a82:	e8 81       	ld	r30, Y
    1a84:	f9 81       	ldd	r31, Y+1	; 0x01
    1a86:	ca 55       	subi	r28, 0x5A	; 90
    1a88:	d1 40       	sbci	r29, 0x01	; 1
    1a8a:	00 82       	st	Z, r0
    1a8c:	c6 5a       	subi	r28, 0xA6	; 166
    1a8e:	de 4f       	sbci	r29, 0xFE	; 254
    1a90:	88 81       	ld	r24, Y
    1a92:	99 81       	ldd	r25, Y+1	; 0x01
    1a94:	ca 55       	subi	r28, 0x5A	; 90
    1a96:	d1 40       	sbci	r29, 0x01	; 1
    1a98:	01 96       	adiw	r24, 0x01	; 1
    1a9a:	c6 5a       	subi	r28, 0xA6	; 166
    1a9c:	de 4f       	sbci	r29, 0xFE	; 254
    1a9e:	99 83       	std	Y+1, r25	; 0x01
    1aa0:	88 83       	st	Y, r24
    1aa2:	ca 55       	subi	r28, 0x5A	; 90
    1aa4:	d1 40       	sbci	r29, 0x01	; 1
    1aa6:	c2 5a       	subi	r28, 0xA2	; 162
    1aa8:	de 4f       	sbci	r29, 0xFE	; 254
    1aaa:	98 81       	ld	r25, Y
    1aac:	ce 55       	subi	r28, 0x5E	; 94
    1aae:	d1 40       	sbci	r29, 0x01	; 1
    1ab0:	91 50       	subi	r25, 0x01	; 1
    1ab2:	c2 5a       	subi	r28, 0xA2	; 162
    1ab4:	de 4f       	sbci	r29, 0xFE	; 254
    1ab6:	98 83       	st	Y, r25
    1ab8:	ce 55       	subi	r28, 0x5E	; 94
    1aba:	d1 40       	sbci	r29, 0x01	; 1
    1abc:	c2 5a       	subi	r28, 0xA2	; 162
    1abe:	de 4f       	sbci	r29, 0xFE	; 254
    1ac0:	e8 81       	ld	r30, Y
    1ac2:	ce 55       	subi	r28, 0x5E	; 94
    1ac4:	d1 40       	sbci	r29, 0x01	; 1
    1ac6:	ee 23       	and	r30, r30
    1ac8:	31 f6       	brne	.-116    	; 0x1a56 <CLCD_voidHamoksha+0x558>
                                   0b00001110,
                                   0b00001110,
                                   0b00000000,
                                   0b00000000
                                  ,0b00000000,
                                   0b00000000,0};
    1aca:	ce 01       	movw	r24, r28
    1acc:	86 5d       	subi	r24, 0xD6	; 214
    1ace:	9e 4f       	sbci	r25, 0xFE	; 254
    1ad0:	c1 5a       	subi	r28, 0xA1	; 161
    1ad2:	de 4f       	sbci	r29, 0xFE	; 254
    1ad4:	99 83       	std	Y+1, r25	; 0x01
    1ad6:	88 83       	st	Y, r24
    1ad8:	cf 55       	subi	r28, 0x5F	; 95
    1ada:	d1 40       	sbci	r29, 0x01	; 1
    1adc:	8c eb       	ldi	r24, 0xBC	; 188
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	cf 59       	subi	r28, 0x9F	; 159
    1ae2:	de 4f       	sbci	r29, 0xFE	; 254
    1ae4:	99 83       	std	Y+1, r25	; 0x01
    1ae6:	88 83       	st	Y, r24
    1ae8:	c1 56       	subi	r28, 0x61	; 97
    1aea:	d1 40       	sbci	r29, 0x01	; 1
    1aec:	98 e0       	ldi	r25, 0x08	; 8
    1aee:	cd 59       	subi	r28, 0x9D	; 157
    1af0:	de 4f       	sbci	r29, 0xFE	; 254
    1af2:	98 83       	st	Y, r25
    1af4:	c3 56       	subi	r28, 0x63	; 99
    1af6:	d1 40       	sbci	r29, 0x01	; 1
    1af8:	cf 59       	subi	r28, 0x9F	; 159
    1afa:	de 4f       	sbci	r29, 0xFE	; 254
    1afc:	e8 81       	ld	r30, Y
    1afe:	f9 81       	ldd	r31, Y+1	; 0x01
    1b00:	c1 56       	subi	r28, 0x61	; 97
    1b02:	d1 40       	sbci	r29, 0x01	; 1
    1b04:	00 80       	ld	r0, Z
    1b06:	cf 59       	subi	r28, 0x9F	; 159
    1b08:	de 4f       	sbci	r29, 0xFE	; 254
    1b0a:	88 81       	ld	r24, Y
    1b0c:	99 81       	ldd	r25, Y+1	; 0x01
    1b0e:	c1 56       	subi	r28, 0x61	; 97
    1b10:	d1 40       	sbci	r29, 0x01	; 1
    1b12:	01 96       	adiw	r24, 0x01	; 1
    1b14:	cf 59       	subi	r28, 0x9F	; 159
    1b16:	de 4f       	sbci	r29, 0xFE	; 254
    1b18:	99 83       	std	Y+1, r25	; 0x01
    1b1a:	88 83       	st	Y, r24
    1b1c:	c1 56       	subi	r28, 0x61	; 97
    1b1e:	d1 40       	sbci	r29, 0x01	; 1
    1b20:	c1 5a       	subi	r28, 0xA1	; 161
    1b22:	de 4f       	sbci	r29, 0xFE	; 254
    1b24:	e8 81       	ld	r30, Y
    1b26:	f9 81       	ldd	r31, Y+1	; 0x01
    1b28:	cf 55       	subi	r28, 0x5F	; 95
    1b2a:	d1 40       	sbci	r29, 0x01	; 1
    1b2c:	00 82       	st	Z, r0
    1b2e:	c1 5a       	subi	r28, 0xA1	; 161
    1b30:	de 4f       	sbci	r29, 0xFE	; 254
    1b32:	88 81       	ld	r24, Y
    1b34:	99 81       	ldd	r25, Y+1	; 0x01
    1b36:	cf 55       	subi	r28, 0x5F	; 95
    1b38:	d1 40       	sbci	r29, 0x01	; 1
    1b3a:	01 96       	adiw	r24, 0x01	; 1
    1b3c:	c1 5a       	subi	r28, 0xA1	; 161
    1b3e:	de 4f       	sbci	r29, 0xFE	; 254
    1b40:	99 83       	std	Y+1, r25	; 0x01
    1b42:	88 83       	st	Y, r24
    1b44:	cf 55       	subi	r28, 0x5F	; 95
    1b46:	d1 40       	sbci	r29, 0x01	; 1
    1b48:	cd 59       	subi	r28, 0x9D	; 157
    1b4a:	de 4f       	sbci	r29, 0xFE	; 254
    1b4c:	98 81       	ld	r25, Y
    1b4e:	c3 56       	subi	r28, 0x63	; 99
    1b50:	d1 40       	sbci	r29, 0x01	; 1
    1b52:	91 50       	subi	r25, 0x01	; 1
    1b54:	cd 59       	subi	r28, 0x9D	; 157
    1b56:	de 4f       	sbci	r29, 0xFE	; 254
    1b58:	98 83       	st	Y, r25
    1b5a:	c3 56       	subi	r28, 0x63	; 99
    1b5c:	d1 40       	sbci	r29, 0x01	; 1
    1b5e:	cd 59       	subi	r28, 0x9D	; 157
    1b60:	de 4f       	sbci	r29, 0xFE	; 254
    1b62:	e8 81       	ld	r30, Y
    1b64:	c3 56       	subi	r28, 0x63	; 99
    1b66:	d1 40       	sbci	r29, 0x01	; 1
    1b68:	ee 23       	and	r30, r30
    1b6a:	31 f6       	brne	.-116    	; 0x1af8 <CLCD_voidHamoksha+0x5fa>





CLCD_voidClear();
    1b6c:	0e 94 75 0a 	call	0x14ea	; 0x14ea <CLCD_voidClear>
	CLCD_VoidGoToXY(0,0);
    1b70:	80 e0       	ldi	r24, 0x00	; 0
    1b72:	60 e0       	ldi	r22, 0x00	; 0
    1b74:	0e 94 09 0a 	call	0x1412	; 0x1412 <CLCD_VoidGoToXY>
	CLCD_u8SendString("HI I AM HAMOKSHA");
    1b78:	80 e6       	ldi	r24, 0x60	; 96
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	0e 94 4a 09 	call	0x1294	; 0x1294 <CLCD_u8SendString>

	CLCD_u8SpecialCharacter(0,Local_u8HamokshaPattern1,7,1);
    1b80:	9e 01       	movw	r18, r28
    1b82:	26 51       	subi	r18, 0x16	; 22
    1b84:	3f 4f       	sbci	r19, 0xFF	; 255
    1b86:	80 e0       	ldi	r24, 0x00	; 0
    1b88:	b9 01       	movw	r22, r18
    1b8a:	47 e0       	ldi	r20, 0x07	; 7
    1b8c:	21 e0       	ldi	r18, 0x01	; 1
    1b8e:	0e 94 29 0a 	call	0x1452	; 0x1452 <CLCD_u8SpecialCharacter>
    1b92:	fe 01       	movw	r30, r28
    1b94:	e3 52       	subi	r30, 0x23	; 35
    1b96:	ff 4f       	sbci	r31, 0xFF	; 255
    1b98:	80 e0       	ldi	r24, 0x00	; 0
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	af e2       	ldi	r26, 0x2F	; 47
    1b9e:	b4 e4       	ldi	r27, 0x44	; 68
    1ba0:	80 83       	st	Z, r24
    1ba2:	91 83       	std	Z+1, r25	; 0x01
    1ba4:	a2 83       	std	Z+2, r26	; 0x02
    1ba6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ba8:	8e 01       	movw	r16, r28
    1baa:	07 52       	subi	r16, 0x27	; 39
    1bac:	1f 4f       	sbci	r17, 0xFF	; 255
    1bae:	fe 01       	movw	r30, r28
    1bb0:	e3 52       	subi	r30, 0x23	; 35
    1bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb4:	60 81       	ld	r22, Z
    1bb6:	71 81       	ldd	r23, Z+1	; 0x01
    1bb8:	82 81       	ldd	r24, Z+2	; 0x02
    1bba:	93 81       	ldd	r25, Z+3	; 0x03
    1bbc:	20 e0       	ldi	r18, 0x00	; 0
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	4a e7       	ldi	r20, 0x7A	; 122
    1bc2:	55 e4       	ldi	r21, 0x45	; 69
    1bc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bc8:	dc 01       	movw	r26, r24
    1bca:	cb 01       	movw	r24, r22
    1bcc:	f8 01       	movw	r30, r16
    1bce:	80 83       	st	Z, r24
    1bd0:	91 83       	std	Z+1, r25	; 0x01
    1bd2:	a2 83       	std	Z+2, r26	; 0x02
    1bd4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bd6:	fe 01       	movw	r30, r28
    1bd8:	e7 52       	subi	r30, 0x27	; 39
    1bda:	ff 4f       	sbci	r31, 0xFF	; 255
    1bdc:	60 81       	ld	r22, Z
    1bde:	71 81       	ldd	r23, Z+1	; 0x01
    1be0:	82 81       	ldd	r24, Z+2	; 0x02
    1be2:	93 81       	ldd	r25, Z+3	; 0x03
    1be4:	20 e0       	ldi	r18, 0x00	; 0
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	40 e8       	ldi	r20, 0x80	; 128
    1bea:	5f e3       	ldi	r21, 0x3F	; 63
    1bec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bf0:	88 23       	and	r24, r24
    1bf2:	44 f4       	brge	.+16     	; 0x1c04 <CLCD_voidHamoksha+0x706>
		__ticks = 1;
    1bf4:	fe 01       	movw	r30, r28
    1bf6:	e9 52       	subi	r30, 0x29	; 41
    1bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfa:	81 e0       	ldi	r24, 0x01	; 1
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	91 83       	std	Z+1, r25	; 0x01
    1c00:	80 83       	st	Z, r24
    1c02:	64 c0       	rjmp	.+200    	; 0x1ccc <CLCD_voidHamoksha+0x7ce>
	else if (__tmp > 65535)
    1c04:	fe 01       	movw	r30, r28
    1c06:	e7 52       	subi	r30, 0x27	; 39
    1c08:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0a:	60 81       	ld	r22, Z
    1c0c:	71 81       	ldd	r23, Z+1	; 0x01
    1c0e:	82 81       	ldd	r24, Z+2	; 0x02
    1c10:	93 81       	ldd	r25, Z+3	; 0x03
    1c12:	20 e0       	ldi	r18, 0x00	; 0
    1c14:	3f ef       	ldi	r19, 0xFF	; 255
    1c16:	4f e7       	ldi	r20, 0x7F	; 127
    1c18:	57 e4       	ldi	r21, 0x47	; 71
    1c1a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c1e:	18 16       	cp	r1, r24
    1c20:	0c f0       	brlt	.+2      	; 0x1c24 <CLCD_voidHamoksha+0x726>
    1c22:	43 c0       	rjmp	.+134    	; 0x1caa <CLCD_voidHamoksha+0x7ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c24:	fe 01       	movw	r30, r28
    1c26:	e3 52       	subi	r30, 0x23	; 35
    1c28:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2a:	60 81       	ld	r22, Z
    1c2c:	71 81       	ldd	r23, Z+1	; 0x01
    1c2e:	82 81       	ldd	r24, Z+2	; 0x02
    1c30:	93 81       	ldd	r25, Z+3	; 0x03
    1c32:	20 e0       	ldi	r18, 0x00	; 0
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	40 e2       	ldi	r20, 0x20	; 32
    1c38:	51 e4       	ldi	r21, 0x41	; 65
    1c3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c3e:	dc 01       	movw	r26, r24
    1c40:	cb 01       	movw	r24, r22
    1c42:	8e 01       	movw	r16, r28
    1c44:	09 52       	subi	r16, 0x29	; 41
    1c46:	1f 4f       	sbci	r17, 0xFF	; 255
    1c48:	bc 01       	movw	r22, r24
    1c4a:	cd 01       	movw	r24, r26
    1c4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c50:	dc 01       	movw	r26, r24
    1c52:	cb 01       	movw	r24, r22
    1c54:	f8 01       	movw	r30, r16
    1c56:	91 83       	std	Z+1, r25	; 0x01
    1c58:	80 83       	st	Z, r24
    1c5a:	1f c0       	rjmp	.+62     	; 0x1c9a <CLCD_voidHamoksha+0x79c>
    1c5c:	fe 01       	movw	r30, r28
    1c5e:	eb 52       	subi	r30, 0x2B	; 43
    1c60:	ff 4f       	sbci	r31, 0xFF	; 255
    1c62:	80 e9       	ldi	r24, 0x90	; 144
    1c64:	91 e0       	ldi	r25, 0x01	; 1
    1c66:	91 83       	std	Z+1, r25	; 0x01
    1c68:	80 83       	st	Z, r24
    1c6a:	fe 01       	movw	r30, r28
    1c6c:	eb 52       	subi	r30, 0x2B	; 43
    1c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c70:	80 81       	ld	r24, Z
    1c72:	91 81       	ldd	r25, Z+1	; 0x01
    1c74:	01 97       	sbiw	r24, 0x01	; 1
    1c76:	f1 f7       	brne	.-4      	; 0x1c74 <CLCD_voidHamoksha+0x776>
    1c78:	fe 01       	movw	r30, r28
    1c7a:	eb 52       	subi	r30, 0x2B	; 43
    1c7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c7e:	91 83       	std	Z+1, r25	; 0x01
    1c80:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c82:	de 01       	movw	r26, r28
    1c84:	a9 52       	subi	r26, 0x29	; 41
    1c86:	bf 4f       	sbci	r27, 0xFF	; 255
    1c88:	fe 01       	movw	r30, r28
    1c8a:	e9 52       	subi	r30, 0x29	; 41
    1c8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8e:	80 81       	ld	r24, Z
    1c90:	91 81       	ldd	r25, Z+1	; 0x01
    1c92:	01 97       	sbiw	r24, 0x01	; 1
    1c94:	11 96       	adiw	r26, 0x01	; 1
    1c96:	9c 93       	st	X, r25
    1c98:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c9a:	fe 01       	movw	r30, r28
    1c9c:	e9 52       	subi	r30, 0x29	; 41
    1c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca0:	80 81       	ld	r24, Z
    1ca2:	91 81       	ldd	r25, Z+1	; 0x01
    1ca4:	00 97       	sbiw	r24, 0x00	; 0
    1ca6:	d1 f6       	brne	.-76     	; 0x1c5c <CLCD_voidHamoksha+0x75e>
    1ca8:	27 c0       	rjmp	.+78     	; 0x1cf8 <CLCD_voidHamoksha+0x7fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1caa:	8e 01       	movw	r16, r28
    1cac:	09 52       	subi	r16, 0x29	; 41
    1cae:	1f 4f       	sbci	r17, 0xFF	; 255
    1cb0:	fe 01       	movw	r30, r28
    1cb2:	e7 52       	subi	r30, 0x27	; 39
    1cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb6:	60 81       	ld	r22, Z
    1cb8:	71 81       	ldd	r23, Z+1	; 0x01
    1cba:	82 81       	ldd	r24, Z+2	; 0x02
    1cbc:	93 81       	ldd	r25, Z+3	; 0x03
    1cbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cc2:	dc 01       	movw	r26, r24
    1cc4:	cb 01       	movw	r24, r22
    1cc6:	f8 01       	movw	r30, r16
    1cc8:	91 83       	std	Z+1, r25	; 0x01
    1cca:	80 83       	st	Z, r24
    1ccc:	de 01       	movw	r26, r28
    1cce:	ad 52       	subi	r26, 0x2D	; 45
    1cd0:	bf 4f       	sbci	r27, 0xFF	; 255
    1cd2:	fe 01       	movw	r30, r28
    1cd4:	e9 52       	subi	r30, 0x29	; 41
    1cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd8:	80 81       	ld	r24, Z
    1cda:	91 81       	ldd	r25, Z+1	; 0x01
    1cdc:	8d 93       	st	X+, r24
    1cde:	9c 93       	st	X, r25
    1ce0:	fe 01       	movw	r30, r28
    1ce2:	ed 52       	subi	r30, 0x2D	; 45
    1ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce6:	80 81       	ld	r24, Z
    1ce8:	91 81       	ldd	r25, Z+1	; 0x01
    1cea:	01 97       	sbiw	r24, 0x01	; 1
    1cec:	f1 f7       	brne	.-4      	; 0x1cea <CLCD_voidHamoksha+0x7ec>
    1cee:	fe 01       	movw	r30, r28
    1cf0:	ed 52       	subi	r30, 0x2D	; 45
    1cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf4:	91 83       	std	Z+1, r25	; 0x01
    1cf6:	80 83       	st	Z, r24
	_delay_ms(700);
	CLCD_voidClear();
    1cf8:	0e 94 75 0a 	call	0x14ea	; 0x14ea <CLCD_voidClear>
	CLCD_VoidGoToXY(0,0);
    1cfc:	80 e0       	ldi	r24, 0x00	; 0
    1cfe:	60 e0       	ldi	r22, 0x00	; 0
    1d00:	0e 94 09 0a 	call	0x1412	; 0x1412 <CLCD_VoidGoToXY>
	CLCD_u8SendString("I CAN RUN");
    1d04:	81 e7       	ldi	r24, 0x71	; 113
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	0e 94 4a 09 	call	0x1294	; 0x1294 <CLCD_u8SendString>
    1d0c:	fe 01       	movw	r30, r28
    1d0e:	e1 53       	subi	r30, 0x31	; 49
    1d10:	ff 4f       	sbci	r31, 0xFF	; 255
    1d12:	80 e0       	ldi	r24, 0x00	; 0
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	a6 e1       	ldi	r26, 0x16	; 22
    1d18:	b4 e4       	ldi	r27, 0x44	; 68
    1d1a:	80 83       	st	Z, r24
    1d1c:	91 83       	std	Z+1, r25	; 0x01
    1d1e:	a2 83       	std	Z+2, r26	; 0x02
    1d20:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d22:	8e 01       	movw	r16, r28
    1d24:	05 53       	subi	r16, 0x35	; 53
    1d26:	1f 4f       	sbci	r17, 0xFF	; 255
    1d28:	fe 01       	movw	r30, r28
    1d2a:	e1 53       	subi	r30, 0x31	; 49
    1d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2e:	60 81       	ld	r22, Z
    1d30:	71 81       	ldd	r23, Z+1	; 0x01
    1d32:	82 81       	ldd	r24, Z+2	; 0x02
    1d34:	93 81       	ldd	r25, Z+3	; 0x03
    1d36:	20 e0       	ldi	r18, 0x00	; 0
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	4a e7       	ldi	r20, 0x7A	; 122
    1d3c:	55 e4       	ldi	r21, 0x45	; 69
    1d3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d42:	dc 01       	movw	r26, r24
    1d44:	cb 01       	movw	r24, r22
    1d46:	f8 01       	movw	r30, r16
    1d48:	80 83       	st	Z, r24
    1d4a:	91 83       	std	Z+1, r25	; 0x01
    1d4c:	a2 83       	std	Z+2, r26	; 0x02
    1d4e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d50:	fe 01       	movw	r30, r28
    1d52:	e5 53       	subi	r30, 0x35	; 53
    1d54:	ff 4f       	sbci	r31, 0xFF	; 255
    1d56:	60 81       	ld	r22, Z
    1d58:	71 81       	ldd	r23, Z+1	; 0x01
    1d5a:	82 81       	ldd	r24, Z+2	; 0x02
    1d5c:	93 81       	ldd	r25, Z+3	; 0x03
    1d5e:	20 e0       	ldi	r18, 0x00	; 0
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	40 e8       	ldi	r20, 0x80	; 128
    1d64:	5f e3       	ldi	r21, 0x3F	; 63
    1d66:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d6a:	88 23       	and	r24, r24
    1d6c:	44 f4       	brge	.+16     	; 0x1d7e <CLCD_voidHamoksha+0x880>
		__ticks = 1;
    1d6e:	fe 01       	movw	r30, r28
    1d70:	e7 53       	subi	r30, 0x37	; 55
    1d72:	ff 4f       	sbci	r31, 0xFF	; 255
    1d74:	81 e0       	ldi	r24, 0x01	; 1
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	91 83       	std	Z+1, r25	; 0x01
    1d7a:	80 83       	st	Z, r24
    1d7c:	64 c0       	rjmp	.+200    	; 0x1e46 <CLCD_voidHamoksha+0x948>
	else if (__tmp > 65535)
    1d7e:	fe 01       	movw	r30, r28
    1d80:	e5 53       	subi	r30, 0x35	; 53
    1d82:	ff 4f       	sbci	r31, 0xFF	; 255
    1d84:	60 81       	ld	r22, Z
    1d86:	71 81       	ldd	r23, Z+1	; 0x01
    1d88:	82 81       	ldd	r24, Z+2	; 0x02
    1d8a:	93 81       	ldd	r25, Z+3	; 0x03
    1d8c:	20 e0       	ldi	r18, 0x00	; 0
    1d8e:	3f ef       	ldi	r19, 0xFF	; 255
    1d90:	4f e7       	ldi	r20, 0x7F	; 127
    1d92:	57 e4       	ldi	r21, 0x47	; 71
    1d94:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d98:	18 16       	cp	r1, r24
    1d9a:	0c f0       	brlt	.+2      	; 0x1d9e <CLCD_voidHamoksha+0x8a0>
    1d9c:	43 c0       	rjmp	.+134    	; 0x1e24 <CLCD_voidHamoksha+0x926>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d9e:	fe 01       	movw	r30, r28
    1da0:	e1 53       	subi	r30, 0x31	; 49
    1da2:	ff 4f       	sbci	r31, 0xFF	; 255
    1da4:	60 81       	ld	r22, Z
    1da6:	71 81       	ldd	r23, Z+1	; 0x01
    1da8:	82 81       	ldd	r24, Z+2	; 0x02
    1daa:	93 81       	ldd	r25, Z+3	; 0x03
    1dac:	20 e0       	ldi	r18, 0x00	; 0
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	40 e2       	ldi	r20, 0x20	; 32
    1db2:	51 e4       	ldi	r21, 0x41	; 65
    1db4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1db8:	dc 01       	movw	r26, r24
    1dba:	cb 01       	movw	r24, r22
    1dbc:	8e 01       	movw	r16, r28
    1dbe:	07 53       	subi	r16, 0x37	; 55
    1dc0:	1f 4f       	sbci	r17, 0xFF	; 255
    1dc2:	bc 01       	movw	r22, r24
    1dc4:	cd 01       	movw	r24, r26
    1dc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dca:	dc 01       	movw	r26, r24
    1dcc:	cb 01       	movw	r24, r22
    1dce:	f8 01       	movw	r30, r16
    1dd0:	91 83       	std	Z+1, r25	; 0x01
    1dd2:	80 83       	st	Z, r24
    1dd4:	1f c0       	rjmp	.+62     	; 0x1e14 <CLCD_voidHamoksha+0x916>
    1dd6:	fe 01       	movw	r30, r28
    1dd8:	e9 53       	subi	r30, 0x39	; 57
    1dda:	ff 4f       	sbci	r31, 0xFF	; 255
    1ddc:	80 e9       	ldi	r24, 0x90	; 144
    1dde:	91 e0       	ldi	r25, 0x01	; 1
    1de0:	91 83       	std	Z+1, r25	; 0x01
    1de2:	80 83       	st	Z, r24
    1de4:	fe 01       	movw	r30, r28
    1de6:	e9 53       	subi	r30, 0x39	; 57
    1de8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dea:	80 81       	ld	r24, Z
    1dec:	91 81       	ldd	r25, Z+1	; 0x01
    1dee:	01 97       	sbiw	r24, 0x01	; 1
    1df0:	f1 f7       	brne	.-4      	; 0x1dee <CLCD_voidHamoksha+0x8f0>
    1df2:	fe 01       	movw	r30, r28
    1df4:	e9 53       	subi	r30, 0x39	; 57
    1df6:	ff 4f       	sbci	r31, 0xFF	; 255
    1df8:	91 83       	std	Z+1, r25	; 0x01
    1dfa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dfc:	de 01       	movw	r26, r28
    1dfe:	a7 53       	subi	r26, 0x37	; 55
    1e00:	bf 4f       	sbci	r27, 0xFF	; 255
    1e02:	fe 01       	movw	r30, r28
    1e04:	e7 53       	subi	r30, 0x37	; 55
    1e06:	ff 4f       	sbci	r31, 0xFF	; 255
    1e08:	80 81       	ld	r24, Z
    1e0a:	91 81       	ldd	r25, Z+1	; 0x01
    1e0c:	01 97       	sbiw	r24, 0x01	; 1
    1e0e:	11 96       	adiw	r26, 0x01	; 1
    1e10:	9c 93       	st	X, r25
    1e12:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e14:	fe 01       	movw	r30, r28
    1e16:	e7 53       	subi	r30, 0x37	; 55
    1e18:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1a:	80 81       	ld	r24, Z
    1e1c:	91 81       	ldd	r25, Z+1	; 0x01
    1e1e:	00 97       	sbiw	r24, 0x00	; 0
    1e20:	d1 f6       	brne	.-76     	; 0x1dd6 <CLCD_voidHamoksha+0x8d8>
    1e22:	28 c0       	rjmp	.+80     	; 0x1e74 <CLCD_voidHamoksha+0x976>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e24:	8e 01       	movw	r16, r28
    1e26:	07 53       	subi	r16, 0x37	; 55
    1e28:	1f 4f       	sbci	r17, 0xFF	; 255
    1e2a:	fe 01       	movw	r30, r28
    1e2c:	e5 53       	subi	r30, 0x35	; 53
    1e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e30:	60 81       	ld	r22, Z
    1e32:	71 81       	ldd	r23, Z+1	; 0x01
    1e34:	82 81       	ldd	r24, Z+2	; 0x02
    1e36:	93 81       	ldd	r25, Z+3	; 0x03
    1e38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e3c:	dc 01       	movw	r26, r24
    1e3e:	cb 01       	movw	r24, r22
    1e40:	f8 01       	movw	r30, r16
    1e42:	91 83       	std	Z+1, r25	; 0x01
    1e44:	80 83       	st	Z, r24
    1e46:	de 01       	movw	r26, r28
    1e48:	ab 53       	subi	r26, 0x3B	; 59
    1e4a:	bf 4f       	sbci	r27, 0xFF	; 255
    1e4c:	fe 01       	movw	r30, r28
    1e4e:	e7 53       	subi	r30, 0x37	; 55
    1e50:	ff 4f       	sbci	r31, 0xFF	; 255
    1e52:	80 81       	ld	r24, Z
    1e54:	91 81       	ldd	r25, Z+1	; 0x01
    1e56:	11 96       	adiw	r26, 0x01	; 1
    1e58:	9c 93       	st	X, r25
    1e5a:	8e 93       	st	-X, r24
    1e5c:	fe 01       	movw	r30, r28
    1e5e:	eb 53       	subi	r30, 0x3B	; 59
    1e60:	ff 4f       	sbci	r31, 0xFF	; 255
    1e62:	80 81       	ld	r24, Z
    1e64:	91 81       	ldd	r25, Z+1	; 0x01
    1e66:	01 97       	sbiw	r24, 0x01	; 1
    1e68:	f1 f7       	brne	.-4      	; 0x1e66 <CLCD_voidHamoksha+0x968>
    1e6a:	fe 01       	movw	r30, r28
    1e6c:	eb 53       	subi	r30, 0x3B	; 59
    1e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e70:	91 83       	std	Z+1, r25	; 0x01
    1e72:	80 83       	st	Z, r24
	_delay_ms(600);
uint8 i=0;
    1e74:	fe 01       	movw	r30, r28
    1e76:	ef 51       	subi	r30, 0x1F	; 31
    1e78:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7a:	10 82       	st	Z, r1
    1e7c:	93 c1       	rjmp	.+806    	; 0x21a4 <CLCD_voidHamoksha+0xca6>
while(i<16)
	{   CLCD_voidClear();
    1e7e:	0e 94 75 0a 	call	0x14ea	; 0x14ea <CLCD_voidClear>
		CLCD_u8SpecialCharacter(0,Local_u8HamokshaPattern4,i++,1);
    1e82:	fe 01       	movw	r30, r28
    1e84:	ef 51       	subi	r30, 0x1F	; 31
    1e86:	ff 4f       	sbci	r31, 0xFF	; 255
    1e88:	90 81       	ld	r25, Z
    1e8a:	de 01       	movw	r26, r28
    1e8c:	af 51       	subi	r26, 0x1F	; 31
    1e8e:	bf 4f       	sbci	r27, 0xFF	; 255
    1e90:	fe 01       	movw	r30, r28
    1e92:	ef 51       	subi	r30, 0x1F	; 31
    1e94:	ff 4f       	sbci	r31, 0xFF	; 255
    1e96:	80 81       	ld	r24, Z
    1e98:	8f 5f       	subi	r24, 0xFF	; 255
    1e9a:	8c 93       	st	X, r24
    1e9c:	9e 01       	movw	r18, r28
    1e9e:	2e 5f       	subi	r18, 0xFE	; 254
    1ea0:	3e 4f       	sbci	r19, 0xFE	; 254
    1ea2:	80 e0       	ldi	r24, 0x00	; 0
    1ea4:	b9 01       	movw	r22, r18
    1ea6:	49 2f       	mov	r20, r25
    1ea8:	21 e0       	ldi	r18, 0x01	; 1
    1eaa:	0e 94 29 0a 	call	0x1452	; 0x1452 <CLCD_u8SpecialCharacter>
    1eae:	fe 01       	movw	r30, r28
    1eb0:	ef 53       	subi	r30, 0x3F	; 63
    1eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb4:	80 e0       	ldi	r24, 0x00	; 0
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	a0 e2       	ldi	r26, 0x20	; 32
    1eba:	b2 e4       	ldi	r27, 0x42	; 66
    1ebc:	80 83       	st	Z, r24
    1ebe:	91 83       	std	Z+1, r25	; 0x01
    1ec0:	a2 83       	std	Z+2, r26	; 0x02
    1ec2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ec4:	8e 01       	movw	r16, r28
    1ec6:	03 54       	subi	r16, 0x43	; 67
    1ec8:	1f 4f       	sbci	r17, 0xFF	; 255
    1eca:	fe 01       	movw	r30, r28
    1ecc:	ef 53       	subi	r30, 0x3F	; 63
    1ece:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed0:	60 81       	ld	r22, Z
    1ed2:	71 81       	ldd	r23, Z+1	; 0x01
    1ed4:	82 81       	ldd	r24, Z+2	; 0x02
    1ed6:	93 81       	ldd	r25, Z+3	; 0x03
    1ed8:	20 e0       	ldi	r18, 0x00	; 0
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	4a e7       	ldi	r20, 0x7A	; 122
    1ede:	55 e4       	ldi	r21, 0x45	; 69
    1ee0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee4:	dc 01       	movw	r26, r24
    1ee6:	cb 01       	movw	r24, r22
    1ee8:	f8 01       	movw	r30, r16
    1eea:	80 83       	st	Z, r24
    1eec:	91 83       	std	Z+1, r25	; 0x01
    1eee:	a2 83       	std	Z+2, r26	; 0x02
    1ef0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ef2:	fe 01       	movw	r30, r28
    1ef4:	e3 54       	subi	r30, 0x43	; 67
    1ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef8:	60 81       	ld	r22, Z
    1efa:	71 81       	ldd	r23, Z+1	; 0x01
    1efc:	82 81       	ldd	r24, Z+2	; 0x02
    1efe:	93 81       	ldd	r25, Z+3	; 0x03
    1f00:	20 e0       	ldi	r18, 0x00	; 0
    1f02:	30 e0       	ldi	r19, 0x00	; 0
    1f04:	40 e8       	ldi	r20, 0x80	; 128
    1f06:	5f e3       	ldi	r21, 0x3F	; 63
    1f08:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f0c:	88 23       	and	r24, r24
    1f0e:	44 f4       	brge	.+16     	; 0x1f20 <CLCD_voidHamoksha+0xa22>
		__ticks = 1;
    1f10:	fe 01       	movw	r30, r28
    1f12:	e5 54       	subi	r30, 0x45	; 69
    1f14:	ff 4f       	sbci	r31, 0xFF	; 255
    1f16:	81 e0       	ldi	r24, 0x01	; 1
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	91 83       	std	Z+1, r25	; 0x01
    1f1c:	80 83       	st	Z, r24
    1f1e:	64 c0       	rjmp	.+200    	; 0x1fe8 <CLCD_voidHamoksha+0xaea>
	else if (__tmp > 65535)
    1f20:	fe 01       	movw	r30, r28
    1f22:	e3 54       	subi	r30, 0x43	; 67
    1f24:	ff 4f       	sbci	r31, 0xFF	; 255
    1f26:	60 81       	ld	r22, Z
    1f28:	71 81       	ldd	r23, Z+1	; 0x01
    1f2a:	82 81       	ldd	r24, Z+2	; 0x02
    1f2c:	93 81       	ldd	r25, Z+3	; 0x03
    1f2e:	20 e0       	ldi	r18, 0x00	; 0
    1f30:	3f ef       	ldi	r19, 0xFF	; 255
    1f32:	4f e7       	ldi	r20, 0x7F	; 127
    1f34:	57 e4       	ldi	r21, 0x47	; 71
    1f36:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f3a:	18 16       	cp	r1, r24
    1f3c:	0c f0       	brlt	.+2      	; 0x1f40 <CLCD_voidHamoksha+0xa42>
    1f3e:	43 c0       	rjmp	.+134    	; 0x1fc6 <CLCD_voidHamoksha+0xac8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f40:	fe 01       	movw	r30, r28
    1f42:	ef 53       	subi	r30, 0x3F	; 63
    1f44:	ff 4f       	sbci	r31, 0xFF	; 255
    1f46:	60 81       	ld	r22, Z
    1f48:	71 81       	ldd	r23, Z+1	; 0x01
    1f4a:	82 81       	ldd	r24, Z+2	; 0x02
    1f4c:	93 81       	ldd	r25, Z+3	; 0x03
    1f4e:	20 e0       	ldi	r18, 0x00	; 0
    1f50:	30 e0       	ldi	r19, 0x00	; 0
    1f52:	40 e2       	ldi	r20, 0x20	; 32
    1f54:	51 e4       	ldi	r21, 0x41	; 65
    1f56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f5a:	dc 01       	movw	r26, r24
    1f5c:	cb 01       	movw	r24, r22
    1f5e:	8e 01       	movw	r16, r28
    1f60:	05 54       	subi	r16, 0x45	; 69
    1f62:	1f 4f       	sbci	r17, 0xFF	; 255
    1f64:	bc 01       	movw	r22, r24
    1f66:	cd 01       	movw	r24, r26
    1f68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f6c:	dc 01       	movw	r26, r24
    1f6e:	cb 01       	movw	r24, r22
    1f70:	f8 01       	movw	r30, r16
    1f72:	91 83       	std	Z+1, r25	; 0x01
    1f74:	80 83       	st	Z, r24
    1f76:	1f c0       	rjmp	.+62     	; 0x1fb6 <CLCD_voidHamoksha+0xab8>
    1f78:	fe 01       	movw	r30, r28
    1f7a:	e7 54       	subi	r30, 0x47	; 71
    1f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7e:	80 e9       	ldi	r24, 0x90	; 144
    1f80:	91 e0       	ldi	r25, 0x01	; 1
    1f82:	91 83       	std	Z+1, r25	; 0x01
    1f84:	80 83       	st	Z, r24
    1f86:	fe 01       	movw	r30, r28
    1f88:	e7 54       	subi	r30, 0x47	; 71
    1f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8c:	80 81       	ld	r24, Z
    1f8e:	91 81       	ldd	r25, Z+1	; 0x01
    1f90:	01 97       	sbiw	r24, 0x01	; 1
    1f92:	f1 f7       	brne	.-4      	; 0x1f90 <CLCD_voidHamoksha+0xa92>
    1f94:	fe 01       	movw	r30, r28
    1f96:	e7 54       	subi	r30, 0x47	; 71
    1f98:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9a:	91 83       	std	Z+1, r25	; 0x01
    1f9c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f9e:	de 01       	movw	r26, r28
    1fa0:	a5 54       	subi	r26, 0x45	; 69
    1fa2:	bf 4f       	sbci	r27, 0xFF	; 255
    1fa4:	fe 01       	movw	r30, r28
    1fa6:	e5 54       	subi	r30, 0x45	; 69
    1fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    1faa:	80 81       	ld	r24, Z
    1fac:	91 81       	ldd	r25, Z+1	; 0x01
    1fae:	01 97       	sbiw	r24, 0x01	; 1
    1fb0:	11 96       	adiw	r26, 0x01	; 1
    1fb2:	9c 93       	st	X, r25
    1fb4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fb6:	fe 01       	movw	r30, r28
    1fb8:	e5 54       	subi	r30, 0x45	; 69
    1fba:	ff 4f       	sbci	r31, 0xFF	; 255
    1fbc:	80 81       	ld	r24, Z
    1fbe:	91 81       	ldd	r25, Z+1	; 0x01
    1fc0:	00 97       	sbiw	r24, 0x00	; 0
    1fc2:	d1 f6       	brne	.-76     	; 0x1f78 <CLCD_voidHamoksha+0xa7a>
    1fc4:	27 c0       	rjmp	.+78     	; 0x2014 <CLCD_voidHamoksha+0xb16>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fc6:	8e 01       	movw	r16, r28
    1fc8:	05 54       	subi	r16, 0x45	; 69
    1fca:	1f 4f       	sbci	r17, 0xFF	; 255
    1fcc:	fe 01       	movw	r30, r28
    1fce:	e3 54       	subi	r30, 0x43	; 67
    1fd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd2:	60 81       	ld	r22, Z
    1fd4:	71 81       	ldd	r23, Z+1	; 0x01
    1fd6:	82 81       	ldd	r24, Z+2	; 0x02
    1fd8:	93 81       	ldd	r25, Z+3	; 0x03
    1fda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fde:	dc 01       	movw	r26, r24
    1fe0:	cb 01       	movw	r24, r22
    1fe2:	f8 01       	movw	r30, r16
    1fe4:	91 83       	std	Z+1, r25	; 0x01
    1fe6:	80 83       	st	Z, r24
    1fe8:	de 01       	movw	r26, r28
    1fea:	a9 54       	subi	r26, 0x49	; 73
    1fec:	bf 4f       	sbci	r27, 0xFF	; 255
    1fee:	fe 01       	movw	r30, r28
    1ff0:	e5 54       	subi	r30, 0x45	; 69
    1ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff4:	80 81       	ld	r24, Z
    1ff6:	91 81       	ldd	r25, Z+1	; 0x01
    1ff8:	8d 93       	st	X+, r24
    1ffa:	9c 93       	st	X, r25
    1ffc:	fe 01       	movw	r30, r28
    1ffe:	e9 54       	subi	r30, 0x49	; 73
    2000:	ff 4f       	sbci	r31, 0xFF	; 255
    2002:	80 81       	ld	r24, Z
    2004:	91 81       	ldd	r25, Z+1	; 0x01
    2006:	01 97       	sbiw	r24, 0x01	; 1
    2008:	f1 f7       	brne	.-4      	; 0x2006 <CLCD_voidHamoksha+0xb08>
    200a:	fe 01       	movw	r30, r28
    200c:	e9 54       	subi	r30, 0x49	; 73
    200e:	ff 4f       	sbci	r31, 0xFF	; 255
    2010:	91 83       	std	Z+1, r25	; 0x01
    2012:	80 83       	st	Z, r24
		_delay_ms(40);
		CLCD_u8SpecialCharacter(0,Local_u8HamokshaPattern5,i,1);
    2014:	9e 01       	movw	r18, r28
    2016:	26 5f       	subi	r18, 0xF6	; 246
    2018:	3e 4f       	sbci	r19, 0xFE	; 254
    201a:	fe 01       	movw	r30, r28
    201c:	ef 51       	subi	r30, 0x1F	; 31
    201e:	ff 4f       	sbci	r31, 0xFF	; 255
    2020:	80 e0       	ldi	r24, 0x00	; 0
    2022:	b9 01       	movw	r22, r18
    2024:	40 81       	ld	r20, Z
    2026:	21 e0       	ldi	r18, 0x01	; 1
    2028:	0e 94 29 0a 	call	0x1452	; 0x1452 <CLCD_u8SpecialCharacter>
    202c:	fe 01       	movw	r30, r28
    202e:	ed 54       	subi	r30, 0x4D	; 77
    2030:	ff 4f       	sbci	r31, 0xFF	; 255
    2032:	80 e0       	ldi	r24, 0x00	; 0
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	a0 e2       	ldi	r26, 0x20	; 32
    2038:	b2 e4       	ldi	r27, 0x42	; 66
    203a:	80 83       	st	Z, r24
    203c:	91 83       	std	Z+1, r25	; 0x01
    203e:	a2 83       	std	Z+2, r26	; 0x02
    2040:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2042:	8e 01       	movw	r16, r28
    2044:	01 55       	subi	r16, 0x51	; 81
    2046:	1f 4f       	sbci	r17, 0xFF	; 255
    2048:	fe 01       	movw	r30, r28
    204a:	ed 54       	subi	r30, 0x4D	; 77
    204c:	ff 4f       	sbci	r31, 0xFF	; 255
    204e:	60 81       	ld	r22, Z
    2050:	71 81       	ldd	r23, Z+1	; 0x01
    2052:	82 81       	ldd	r24, Z+2	; 0x02
    2054:	93 81       	ldd	r25, Z+3	; 0x03
    2056:	20 e0       	ldi	r18, 0x00	; 0
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	4a e7       	ldi	r20, 0x7A	; 122
    205c:	55 e4       	ldi	r21, 0x45	; 69
    205e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2062:	dc 01       	movw	r26, r24
    2064:	cb 01       	movw	r24, r22
    2066:	f8 01       	movw	r30, r16
    2068:	80 83       	st	Z, r24
    206a:	91 83       	std	Z+1, r25	; 0x01
    206c:	a2 83       	std	Z+2, r26	; 0x02
    206e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2070:	fe 01       	movw	r30, r28
    2072:	e1 55       	subi	r30, 0x51	; 81
    2074:	ff 4f       	sbci	r31, 0xFF	; 255
    2076:	60 81       	ld	r22, Z
    2078:	71 81       	ldd	r23, Z+1	; 0x01
    207a:	82 81       	ldd	r24, Z+2	; 0x02
    207c:	93 81       	ldd	r25, Z+3	; 0x03
    207e:	20 e0       	ldi	r18, 0x00	; 0
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	40 e8       	ldi	r20, 0x80	; 128
    2084:	5f e3       	ldi	r21, 0x3F	; 63
    2086:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    208a:	88 23       	and	r24, r24
    208c:	44 f4       	brge	.+16     	; 0x209e <CLCD_voidHamoksha+0xba0>
		__ticks = 1;
    208e:	fe 01       	movw	r30, r28
    2090:	e3 55       	subi	r30, 0x53	; 83
    2092:	ff 4f       	sbci	r31, 0xFF	; 255
    2094:	81 e0       	ldi	r24, 0x01	; 1
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	91 83       	std	Z+1, r25	; 0x01
    209a:	80 83       	st	Z, r24
    209c:	64 c0       	rjmp	.+200    	; 0x2166 <CLCD_voidHamoksha+0xc68>
	else if (__tmp > 65535)
    209e:	fe 01       	movw	r30, r28
    20a0:	e1 55       	subi	r30, 0x51	; 81
    20a2:	ff 4f       	sbci	r31, 0xFF	; 255
    20a4:	60 81       	ld	r22, Z
    20a6:	71 81       	ldd	r23, Z+1	; 0x01
    20a8:	82 81       	ldd	r24, Z+2	; 0x02
    20aa:	93 81       	ldd	r25, Z+3	; 0x03
    20ac:	20 e0       	ldi	r18, 0x00	; 0
    20ae:	3f ef       	ldi	r19, 0xFF	; 255
    20b0:	4f e7       	ldi	r20, 0x7F	; 127
    20b2:	57 e4       	ldi	r21, 0x47	; 71
    20b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20b8:	18 16       	cp	r1, r24
    20ba:	0c f0       	brlt	.+2      	; 0x20be <CLCD_voidHamoksha+0xbc0>
    20bc:	43 c0       	rjmp	.+134    	; 0x2144 <CLCD_voidHamoksha+0xc46>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20be:	fe 01       	movw	r30, r28
    20c0:	ed 54       	subi	r30, 0x4D	; 77
    20c2:	ff 4f       	sbci	r31, 0xFF	; 255
    20c4:	60 81       	ld	r22, Z
    20c6:	71 81       	ldd	r23, Z+1	; 0x01
    20c8:	82 81       	ldd	r24, Z+2	; 0x02
    20ca:	93 81       	ldd	r25, Z+3	; 0x03
    20cc:	20 e0       	ldi	r18, 0x00	; 0
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	40 e2       	ldi	r20, 0x20	; 32
    20d2:	51 e4       	ldi	r21, 0x41	; 65
    20d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d8:	dc 01       	movw	r26, r24
    20da:	cb 01       	movw	r24, r22
    20dc:	8e 01       	movw	r16, r28
    20de:	03 55       	subi	r16, 0x53	; 83
    20e0:	1f 4f       	sbci	r17, 0xFF	; 255
    20e2:	bc 01       	movw	r22, r24
    20e4:	cd 01       	movw	r24, r26
    20e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ea:	dc 01       	movw	r26, r24
    20ec:	cb 01       	movw	r24, r22
    20ee:	f8 01       	movw	r30, r16
    20f0:	91 83       	std	Z+1, r25	; 0x01
    20f2:	80 83       	st	Z, r24
    20f4:	1f c0       	rjmp	.+62     	; 0x2134 <CLCD_voidHamoksha+0xc36>
    20f6:	fe 01       	movw	r30, r28
    20f8:	e5 55       	subi	r30, 0x55	; 85
    20fa:	ff 4f       	sbci	r31, 0xFF	; 255
    20fc:	80 e9       	ldi	r24, 0x90	; 144
    20fe:	91 e0       	ldi	r25, 0x01	; 1
    2100:	91 83       	std	Z+1, r25	; 0x01
    2102:	80 83       	st	Z, r24
    2104:	fe 01       	movw	r30, r28
    2106:	e5 55       	subi	r30, 0x55	; 85
    2108:	ff 4f       	sbci	r31, 0xFF	; 255
    210a:	80 81       	ld	r24, Z
    210c:	91 81       	ldd	r25, Z+1	; 0x01
    210e:	01 97       	sbiw	r24, 0x01	; 1
    2110:	f1 f7       	brne	.-4      	; 0x210e <CLCD_voidHamoksha+0xc10>
    2112:	fe 01       	movw	r30, r28
    2114:	e5 55       	subi	r30, 0x55	; 85
    2116:	ff 4f       	sbci	r31, 0xFF	; 255
    2118:	91 83       	std	Z+1, r25	; 0x01
    211a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    211c:	de 01       	movw	r26, r28
    211e:	a3 55       	subi	r26, 0x53	; 83
    2120:	bf 4f       	sbci	r27, 0xFF	; 255
    2122:	fe 01       	movw	r30, r28
    2124:	e3 55       	subi	r30, 0x53	; 83
    2126:	ff 4f       	sbci	r31, 0xFF	; 255
    2128:	80 81       	ld	r24, Z
    212a:	91 81       	ldd	r25, Z+1	; 0x01
    212c:	01 97       	sbiw	r24, 0x01	; 1
    212e:	11 96       	adiw	r26, 0x01	; 1
    2130:	9c 93       	st	X, r25
    2132:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2134:	fe 01       	movw	r30, r28
    2136:	e3 55       	subi	r30, 0x53	; 83
    2138:	ff 4f       	sbci	r31, 0xFF	; 255
    213a:	80 81       	ld	r24, Z
    213c:	91 81       	ldd	r25, Z+1	; 0x01
    213e:	00 97       	sbiw	r24, 0x00	; 0
    2140:	d1 f6       	brne	.-76     	; 0x20f6 <CLCD_voidHamoksha+0xbf8>
    2142:	27 c0       	rjmp	.+78     	; 0x2192 <CLCD_voidHamoksha+0xc94>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2144:	8e 01       	movw	r16, r28
    2146:	03 55       	subi	r16, 0x53	; 83
    2148:	1f 4f       	sbci	r17, 0xFF	; 255
    214a:	fe 01       	movw	r30, r28
    214c:	e1 55       	subi	r30, 0x51	; 81
    214e:	ff 4f       	sbci	r31, 0xFF	; 255
    2150:	60 81       	ld	r22, Z
    2152:	71 81       	ldd	r23, Z+1	; 0x01
    2154:	82 81       	ldd	r24, Z+2	; 0x02
    2156:	93 81       	ldd	r25, Z+3	; 0x03
    2158:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    215c:	dc 01       	movw	r26, r24
    215e:	cb 01       	movw	r24, r22
    2160:	f8 01       	movw	r30, r16
    2162:	91 83       	std	Z+1, r25	; 0x01
    2164:	80 83       	st	Z, r24
    2166:	de 01       	movw	r26, r28
    2168:	a7 55       	subi	r26, 0x57	; 87
    216a:	bf 4f       	sbci	r27, 0xFF	; 255
    216c:	fe 01       	movw	r30, r28
    216e:	e3 55       	subi	r30, 0x53	; 83
    2170:	ff 4f       	sbci	r31, 0xFF	; 255
    2172:	80 81       	ld	r24, Z
    2174:	91 81       	ldd	r25, Z+1	; 0x01
    2176:	8d 93       	st	X+, r24
    2178:	9c 93       	st	X, r25
    217a:	fe 01       	movw	r30, r28
    217c:	e7 55       	subi	r30, 0x57	; 87
    217e:	ff 4f       	sbci	r31, 0xFF	; 255
    2180:	80 81       	ld	r24, Z
    2182:	91 81       	ldd	r25, Z+1	; 0x01
    2184:	01 97       	sbiw	r24, 0x01	; 1
    2186:	f1 f7       	brne	.-4      	; 0x2184 <CLCD_voidHamoksha+0xc86>
    2188:	fe 01       	movw	r30, r28
    218a:	e7 55       	subi	r30, 0x57	; 87
    218c:	ff 4f       	sbci	r31, 0xFF	; 255
    218e:	91 83       	std	Z+1, r25	; 0x01
    2190:	80 83       	st	Z, r24
		_delay_ms(40);
		        i++;
    2192:	de 01       	movw	r26, r28
    2194:	af 51       	subi	r26, 0x1F	; 31
    2196:	bf 4f       	sbci	r27, 0xFF	; 255
    2198:	fe 01       	movw	r30, r28
    219a:	ef 51       	subi	r30, 0x1F	; 31
    219c:	ff 4f       	sbci	r31, 0xFF	; 255
    219e:	80 81       	ld	r24, Z
    21a0:	8f 5f       	subi	r24, 0xFF	; 255
    21a2:	8c 93       	st	X, r24
	CLCD_voidClear();
	CLCD_VoidGoToXY(0,0);
	CLCD_u8SendString("I CAN RUN");
	_delay_ms(600);
uint8 i=0;
while(i<16)
    21a4:	fe 01       	movw	r30, r28
    21a6:	ef 51       	subi	r30, 0x1F	; 31
    21a8:	ff 4f       	sbci	r31, 0xFF	; 255
    21aa:	80 81       	ld	r24, Z
    21ac:	80 31       	cpi	r24, 0x10	; 16
    21ae:	08 f4       	brcc	.+2      	; 0x21b2 <CLCD_voidHamoksha+0xcb4>
    21b0:	66 ce       	rjmp	.-820    	; 0x1e7e <CLCD_voidHamoksha+0x980>
		CLCD_u8SpecialCharacter(0,Local_u8HamokshaPattern5,i,1);
		_delay_ms(40);
		        i++;

	}
CLCD_voidClear();
    21b2:	0e 94 75 0a 	call	0x14ea	; 0x14ea <CLCD_voidClear>
CLCD_VoidGoToXY(0,0);
    21b6:	80 e0       	ldi	r24, 0x00	; 0
    21b8:	60 e0       	ldi	r22, 0x00	; 0
    21ba:	0e 94 09 0a 	call	0x1412	; 0x1412 <CLCD_VoidGoToXY>
	CLCD_u8SendString("I CAN DANCE");
    21be:	8b e7       	ldi	r24, 0x7B	; 123
    21c0:	90 e0       	ldi	r25, 0x00	; 0
    21c2:	0e 94 4a 09 	call	0x1294	; 0x1294 <CLCD_u8SendString>
    21c6:	fe 01       	movw	r30, r28
    21c8:	eb 55       	subi	r30, 0x5B	; 91
    21ca:	ff 4f       	sbci	r31, 0xFF	; 255
    21cc:	80 e0       	ldi	r24, 0x00	; 0
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	a6 e1       	ldi	r26, 0x16	; 22
    21d2:	b4 e4       	ldi	r27, 0x44	; 68
    21d4:	80 83       	st	Z, r24
    21d6:	91 83       	std	Z+1, r25	; 0x01
    21d8:	a2 83       	std	Z+2, r26	; 0x02
    21da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21dc:	8e 01       	movw	r16, r28
    21de:	0f 55       	subi	r16, 0x5F	; 95
    21e0:	1f 4f       	sbci	r17, 0xFF	; 255
    21e2:	fe 01       	movw	r30, r28
    21e4:	eb 55       	subi	r30, 0x5B	; 91
    21e6:	ff 4f       	sbci	r31, 0xFF	; 255
    21e8:	60 81       	ld	r22, Z
    21ea:	71 81       	ldd	r23, Z+1	; 0x01
    21ec:	82 81       	ldd	r24, Z+2	; 0x02
    21ee:	93 81       	ldd	r25, Z+3	; 0x03
    21f0:	20 e0       	ldi	r18, 0x00	; 0
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	4a e7       	ldi	r20, 0x7A	; 122
    21f6:	55 e4       	ldi	r21, 0x45	; 69
    21f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21fc:	dc 01       	movw	r26, r24
    21fe:	cb 01       	movw	r24, r22
    2200:	f8 01       	movw	r30, r16
    2202:	80 83       	st	Z, r24
    2204:	91 83       	std	Z+1, r25	; 0x01
    2206:	a2 83       	std	Z+2, r26	; 0x02
    2208:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    220a:	fe 01       	movw	r30, r28
    220c:	ef 55       	subi	r30, 0x5F	; 95
    220e:	ff 4f       	sbci	r31, 0xFF	; 255
    2210:	60 81       	ld	r22, Z
    2212:	71 81       	ldd	r23, Z+1	; 0x01
    2214:	82 81       	ldd	r24, Z+2	; 0x02
    2216:	93 81       	ldd	r25, Z+3	; 0x03
    2218:	20 e0       	ldi	r18, 0x00	; 0
    221a:	30 e0       	ldi	r19, 0x00	; 0
    221c:	40 e8       	ldi	r20, 0x80	; 128
    221e:	5f e3       	ldi	r21, 0x3F	; 63
    2220:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2224:	88 23       	and	r24, r24
    2226:	44 f4       	brge	.+16     	; 0x2238 <CLCD_voidHamoksha+0xd3a>
		__ticks = 1;
    2228:	fe 01       	movw	r30, r28
    222a:	e1 56       	subi	r30, 0x61	; 97
    222c:	ff 4f       	sbci	r31, 0xFF	; 255
    222e:	81 e0       	ldi	r24, 0x01	; 1
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	91 83       	std	Z+1, r25	; 0x01
    2234:	80 83       	st	Z, r24
    2236:	64 c0       	rjmp	.+200    	; 0x2300 <CLCD_voidHamoksha+0xe02>
	else if (__tmp > 65535)
    2238:	fe 01       	movw	r30, r28
    223a:	ef 55       	subi	r30, 0x5F	; 95
    223c:	ff 4f       	sbci	r31, 0xFF	; 255
    223e:	60 81       	ld	r22, Z
    2240:	71 81       	ldd	r23, Z+1	; 0x01
    2242:	82 81       	ldd	r24, Z+2	; 0x02
    2244:	93 81       	ldd	r25, Z+3	; 0x03
    2246:	20 e0       	ldi	r18, 0x00	; 0
    2248:	3f ef       	ldi	r19, 0xFF	; 255
    224a:	4f e7       	ldi	r20, 0x7F	; 127
    224c:	57 e4       	ldi	r21, 0x47	; 71
    224e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2252:	18 16       	cp	r1, r24
    2254:	0c f0       	brlt	.+2      	; 0x2258 <CLCD_voidHamoksha+0xd5a>
    2256:	43 c0       	rjmp	.+134    	; 0x22de <CLCD_voidHamoksha+0xde0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2258:	fe 01       	movw	r30, r28
    225a:	eb 55       	subi	r30, 0x5B	; 91
    225c:	ff 4f       	sbci	r31, 0xFF	; 255
    225e:	60 81       	ld	r22, Z
    2260:	71 81       	ldd	r23, Z+1	; 0x01
    2262:	82 81       	ldd	r24, Z+2	; 0x02
    2264:	93 81       	ldd	r25, Z+3	; 0x03
    2266:	20 e0       	ldi	r18, 0x00	; 0
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	40 e2       	ldi	r20, 0x20	; 32
    226c:	51 e4       	ldi	r21, 0x41	; 65
    226e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2272:	dc 01       	movw	r26, r24
    2274:	cb 01       	movw	r24, r22
    2276:	8e 01       	movw	r16, r28
    2278:	01 56       	subi	r16, 0x61	; 97
    227a:	1f 4f       	sbci	r17, 0xFF	; 255
    227c:	bc 01       	movw	r22, r24
    227e:	cd 01       	movw	r24, r26
    2280:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2284:	dc 01       	movw	r26, r24
    2286:	cb 01       	movw	r24, r22
    2288:	f8 01       	movw	r30, r16
    228a:	91 83       	std	Z+1, r25	; 0x01
    228c:	80 83       	st	Z, r24
    228e:	1f c0       	rjmp	.+62     	; 0x22ce <CLCD_voidHamoksha+0xdd0>
    2290:	fe 01       	movw	r30, r28
    2292:	e3 56       	subi	r30, 0x63	; 99
    2294:	ff 4f       	sbci	r31, 0xFF	; 255
    2296:	80 e9       	ldi	r24, 0x90	; 144
    2298:	91 e0       	ldi	r25, 0x01	; 1
    229a:	91 83       	std	Z+1, r25	; 0x01
    229c:	80 83       	st	Z, r24
    229e:	fe 01       	movw	r30, r28
    22a0:	e3 56       	subi	r30, 0x63	; 99
    22a2:	ff 4f       	sbci	r31, 0xFF	; 255
    22a4:	80 81       	ld	r24, Z
    22a6:	91 81       	ldd	r25, Z+1	; 0x01
    22a8:	01 97       	sbiw	r24, 0x01	; 1
    22aa:	f1 f7       	brne	.-4      	; 0x22a8 <CLCD_voidHamoksha+0xdaa>
    22ac:	fe 01       	movw	r30, r28
    22ae:	e3 56       	subi	r30, 0x63	; 99
    22b0:	ff 4f       	sbci	r31, 0xFF	; 255
    22b2:	91 83       	std	Z+1, r25	; 0x01
    22b4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22b6:	de 01       	movw	r26, r28
    22b8:	a1 56       	subi	r26, 0x61	; 97
    22ba:	bf 4f       	sbci	r27, 0xFF	; 255
    22bc:	fe 01       	movw	r30, r28
    22be:	e1 56       	subi	r30, 0x61	; 97
    22c0:	ff 4f       	sbci	r31, 0xFF	; 255
    22c2:	80 81       	ld	r24, Z
    22c4:	91 81       	ldd	r25, Z+1	; 0x01
    22c6:	01 97       	sbiw	r24, 0x01	; 1
    22c8:	11 96       	adiw	r26, 0x01	; 1
    22ca:	9c 93       	st	X, r25
    22cc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ce:	fe 01       	movw	r30, r28
    22d0:	e1 56       	subi	r30, 0x61	; 97
    22d2:	ff 4f       	sbci	r31, 0xFF	; 255
    22d4:	80 81       	ld	r24, Z
    22d6:	91 81       	ldd	r25, Z+1	; 0x01
    22d8:	00 97       	sbiw	r24, 0x00	; 0
    22da:	d1 f6       	brne	.-76     	; 0x2290 <CLCD_voidHamoksha+0xd92>
    22dc:	28 c0       	rjmp	.+80     	; 0x232e <CLCD_voidHamoksha+0xe30>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22de:	8e 01       	movw	r16, r28
    22e0:	01 56       	subi	r16, 0x61	; 97
    22e2:	1f 4f       	sbci	r17, 0xFF	; 255
    22e4:	fe 01       	movw	r30, r28
    22e6:	ef 55       	subi	r30, 0x5F	; 95
    22e8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ea:	60 81       	ld	r22, Z
    22ec:	71 81       	ldd	r23, Z+1	; 0x01
    22ee:	82 81       	ldd	r24, Z+2	; 0x02
    22f0:	93 81       	ldd	r25, Z+3	; 0x03
    22f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22f6:	dc 01       	movw	r26, r24
    22f8:	cb 01       	movw	r24, r22
    22fa:	f8 01       	movw	r30, r16
    22fc:	91 83       	std	Z+1, r25	; 0x01
    22fe:	80 83       	st	Z, r24
    2300:	de 01       	movw	r26, r28
    2302:	a5 56       	subi	r26, 0x65	; 101
    2304:	bf 4f       	sbci	r27, 0xFF	; 255
    2306:	fe 01       	movw	r30, r28
    2308:	e1 56       	subi	r30, 0x61	; 97
    230a:	ff 4f       	sbci	r31, 0xFF	; 255
    230c:	80 81       	ld	r24, Z
    230e:	91 81       	ldd	r25, Z+1	; 0x01
    2310:	11 96       	adiw	r26, 0x01	; 1
    2312:	9c 93       	st	X, r25
    2314:	8e 93       	st	-X, r24
    2316:	fe 01       	movw	r30, r28
    2318:	e5 56       	subi	r30, 0x65	; 101
    231a:	ff 4f       	sbci	r31, 0xFF	; 255
    231c:	80 81       	ld	r24, Z
    231e:	91 81       	ldd	r25, Z+1	; 0x01
    2320:	01 97       	sbiw	r24, 0x01	; 1
    2322:	f1 f7       	brne	.-4      	; 0x2320 <CLCD_voidHamoksha+0xe22>
    2324:	fe 01       	movw	r30, r28
    2326:	e5 56       	subi	r30, 0x65	; 101
    2328:	ff 4f       	sbci	r31, 0xFF	; 255
    232a:	91 83       	std	Z+1, r25	; 0x01
    232c:	80 83       	st	Z, r24
	_delay_ms(600);
	 i=0;
    232e:	fe 01       	movw	r30, r28
    2330:	ef 51       	subi	r30, 0x1F	; 31
    2332:	ff 4f       	sbci	r31, 0xFF	; 255
    2334:	10 82       	st	Z, r1
    2336:	3d c2       	rjmp	.+1146   	; 0x27b2 <CLCD_voidHamoksha+0x12b4>
	while(i<10)
	{
		CLCD_u8SpecialCharacter(0,Local_u8HamokshaPattern1,7,1);
    2338:	9e 01       	movw	r18, r28
    233a:	26 51       	subi	r18, 0x16	; 22
    233c:	3f 4f       	sbci	r19, 0xFF	; 255
    233e:	80 e0       	ldi	r24, 0x00	; 0
    2340:	b9 01       	movw	r22, r18
    2342:	47 e0       	ldi	r20, 0x07	; 7
    2344:	21 e0       	ldi	r18, 0x01	; 1
    2346:	0e 94 29 0a 	call	0x1452	; 0x1452 <CLCD_u8SpecialCharacter>
    234a:	fe 01       	movw	r30, r28
    234c:	e9 56       	subi	r30, 0x69	; 105
    234e:	ff 4f       	sbci	r31, 0xFF	; 255
    2350:	80 e0       	ldi	r24, 0x00	; 0
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	a0 e2       	ldi	r26, 0x20	; 32
    2356:	b2 e4       	ldi	r27, 0x42	; 66
    2358:	80 83       	st	Z, r24
    235a:	91 83       	std	Z+1, r25	; 0x01
    235c:	a2 83       	std	Z+2, r26	; 0x02
    235e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2360:	8e 01       	movw	r16, r28
    2362:	0d 56       	subi	r16, 0x6D	; 109
    2364:	1f 4f       	sbci	r17, 0xFF	; 255
    2366:	fe 01       	movw	r30, r28
    2368:	e9 56       	subi	r30, 0x69	; 105
    236a:	ff 4f       	sbci	r31, 0xFF	; 255
    236c:	60 81       	ld	r22, Z
    236e:	71 81       	ldd	r23, Z+1	; 0x01
    2370:	82 81       	ldd	r24, Z+2	; 0x02
    2372:	93 81       	ldd	r25, Z+3	; 0x03
    2374:	20 e0       	ldi	r18, 0x00	; 0
    2376:	30 e0       	ldi	r19, 0x00	; 0
    2378:	4a e7       	ldi	r20, 0x7A	; 122
    237a:	55 e4       	ldi	r21, 0x45	; 69
    237c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2380:	dc 01       	movw	r26, r24
    2382:	cb 01       	movw	r24, r22
    2384:	f8 01       	movw	r30, r16
    2386:	80 83       	st	Z, r24
    2388:	91 83       	std	Z+1, r25	; 0x01
    238a:	a2 83       	std	Z+2, r26	; 0x02
    238c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    238e:	fe 01       	movw	r30, r28
    2390:	ed 56       	subi	r30, 0x6D	; 109
    2392:	ff 4f       	sbci	r31, 0xFF	; 255
    2394:	60 81       	ld	r22, Z
    2396:	71 81       	ldd	r23, Z+1	; 0x01
    2398:	82 81       	ldd	r24, Z+2	; 0x02
    239a:	93 81       	ldd	r25, Z+3	; 0x03
    239c:	20 e0       	ldi	r18, 0x00	; 0
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	40 e8       	ldi	r20, 0x80	; 128
    23a2:	5f e3       	ldi	r21, 0x3F	; 63
    23a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23a8:	88 23       	and	r24, r24
    23aa:	44 f4       	brge	.+16     	; 0x23bc <CLCD_voidHamoksha+0xebe>
		__ticks = 1;
    23ac:	fe 01       	movw	r30, r28
    23ae:	ef 56       	subi	r30, 0x6F	; 111
    23b0:	ff 4f       	sbci	r31, 0xFF	; 255
    23b2:	81 e0       	ldi	r24, 0x01	; 1
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	91 83       	std	Z+1, r25	; 0x01
    23b8:	80 83       	st	Z, r24
    23ba:	64 c0       	rjmp	.+200    	; 0x2484 <CLCD_voidHamoksha+0xf86>
	else if (__tmp > 65535)
    23bc:	fe 01       	movw	r30, r28
    23be:	ed 56       	subi	r30, 0x6D	; 109
    23c0:	ff 4f       	sbci	r31, 0xFF	; 255
    23c2:	60 81       	ld	r22, Z
    23c4:	71 81       	ldd	r23, Z+1	; 0x01
    23c6:	82 81       	ldd	r24, Z+2	; 0x02
    23c8:	93 81       	ldd	r25, Z+3	; 0x03
    23ca:	20 e0       	ldi	r18, 0x00	; 0
    23cc:	3f ef       	ldi	r19, 0xFF	; 255
    23ce:	4f e7       	ldi	r20, 0x7F	; 127
    23d0:	57 e4       	ldi	r21, 0x47	; 71
    23d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23d6:	18 16       	cp	r1, r24
    23d8:	0c f0       	brlt	.+2      	; 0x23dc <CLCD_voidHamoksha+0xede>
    23da:	43 c0       	rjmp	.+134    	; 0x2462 <CLCD_voidHamoksha+0xf64>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23dc:	fe 01       	movw	r30, r28
    23de:	e9 56       	subi	r30, 0x69	; 105
    23e0:	ff 4f       	sbci	r31, 0xFF	; 255
    23e2:	60 81       	ld	r22, Z
    23e4:	71 81       	ldd	r23, Z+1	; 0x01
    23e6:	82 81       	ldd	r24, Z+2	; 0x02
    23e8:	93 81       	ldd	r25, Z+3	; 0x03
    23ea:	20 e0       	ldi	r18, 0x00	; 0
    23ec:	30 e0       	ldi	r19, 0x00	; 0
    23ee:	40 e2       	ldi	r20, 0x20	; 32
    23f0:	51 e4       	ldi	r21, 0x41	; 65
    23f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23f6:	dc 01       	movw	r26, r24
    23f8:	cb 01       	movw	r24, r22
    23fa:	8e 01       	movw	r16, r28
    23fc:	0f 56       	subi	r16, 0x6F	; 111
    23fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2400:	bc 01       	movw	r22, r24
    2402:	cd 01       	movw	r24, r26
    2404:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2408:	dc 01       	movw	r26, r24
    240a:	cb 01       	movw	r24, r22
    240c:	f8 01       	movw	r30, r16
    240e:	91 83       	std	Z+1, r25	; 0x01
    2410:	80 83       	st	Z, r24
    2412:	1f c0       	rjmp	.+62     	; 0x2452 <CLCD_voidHamoksha+0xf54>
    2414:	fe 01       	movw	r30, r28
    2416:	e1 57       	subi	r30, 0x71	; 113
    2418:	ff 4f       	sbci	r31, 0xFF	; 255
    241a:	80 e9       	ldi	r24, 0x90	; 144
    241c:	91 e0       	ldi	r25, 0x01	; 1
    241e:	91 83       	std	Z+1, r25	; 0x01
    2420:	80 83       	st	Z, r24
    2422:	fe 01       	movw	r30, r28
    2424:	e1 57       	subi	r30, 0x71	; 113
    2426:	ff 4f       	sbci	r31, 0xFF	; 255
    2428:	80 81       	ld	r24, Z
    242a:	91 81       	ldd	r25, Z+1	; 0x01
    242c:	01 97       	sbiw	r24, 0x01	; 1
    242e:	f1 f7       	brne	.-4      	; 0x242c <CLCD_voidHamoksha+0xf2e>
    2430:	fe 01       	movw	r30, r28
    2432:	e1 57       	subi	r30, 0x71	; 113
    2434:	ff 4f       	sbci	r31, 0xFF	; 255
    2436:	91 83       	std	Z+1, r25	; 0x01
    2438:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    243a:	de 01       	movw	r26, r28
    243c:	af 56       	subi	r26, 0x6F	; 111
    243e:	bf 4f       	sbci	r27, 0xFF	; 255
    2440:	fe 01       	movw	r30, r28
    2442:	ef 56       	subi	r30, 0x6F	; 111
    2444:	ff 4f       	sbci	r31, 0xFF	; 255
    2446:	80 81       	ld	r24, Z
    2448:	91 81       	ldd	r25, Z+1	; 0x01
    244a:	01 97       	sbiw	r24, 0x01	; 1
    244c:	11 96       	adiw	r26, 0x01	; 1
    244e:	9c 93       	st	X, r25
    2450:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2452:	fe 01       	movw	r30, r28
    2454:	ef 56       	subi	r30, 0x6F	; 111
    2456:	ff 4f       	sbci	r31, 0xFF	; 255
    2458:	80 81       	ld	r24, Z
    245a:	91 81       	ldd	r25, Z+1	; 0x01
    245c:	00 97       	sbiw	r24, 0x00	; 0
    245e:	d1 f6       	brne	.-76     	; 0x2414 <CLCD_voidHamoksha+0xf16>
    2460:	27 c0       	rjmp	.+78     	; 0x24b0 <CLCD_voidHamoksha+0xfb2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2462:	8e 01       	movw	r16, r28
    2464:	0f 56       	subi	r16, 0x6F	; 111
    2466:	1f 4f       	sbci	r17, 0xFF	; 255
    2468:	fe 01       	movw	r30, r28
    246a:	ed 56       	subi	r30, 0x6D	; 109
    246c:	ff 4f       	sbci	r31, 0xFF	; 255
    246e:	60 81       	ld	r22, Z
    2470:	71 81       	ldd	r23, Z+1	; 0x01
    2472:	82 81       	ldd	r24, Z+2	; 0x02
    2474:	93 81       	ldd	r25, Z+3	; 0x03
    2476:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    247a:	dc 01       	movw	r26, r24
    247c:	cb 01       	movw	r24, r22
    247e:	f8 01       	movw	r30, r16
    2480:	91 83       	std	Z+1, r25	; 0x01
    2482:	80 83       	st	Z, r24
    2484:	de 01       	movw	r26, r28
    2486:	a3 57       	subi	r26, 0x73	; 115
    2488:	bf 4f       	sbci	r27, 0xFF	; 255
    248a:	fe 01       	movw	r30, r28
    248c:	ef 56       	subi	r30, 0x6F	; 111
    248e:	ff 4f       	sbci	r31, 0xFF	; 255
    2490:	80 81       	ld	r24, Z
    2492:	91 81       	ldd	r25, Z+1	; 0x01
    2494:	8d 93       	st	X+, r24
    2496:	9c 93       	st	X, r25
    2498:	fe 01       	movw	r30, r28
    249a:	e3 57       	subi	r30, 0x73	; 115
    249c:	ff 4f       	sbci	r31, 0xFF	; 255
    249e:	80 81       	ld	r24, Z
    24a0:	91 81       	ldd	r25, Z+1	; 0x01
    24a2:	01 97       	sbiw	r24, 0x01	; 1
    24a4:	f1 f7       	brne	.-4      	; 0x24a2 <CLCD_voidHamoksha+0xfa4>
    24a6:	fe 01       	movw	r30, r28
    24a8:	e3 57       	subi	r30, 0x73	; 115
    24aa:	ff 4f       	sbci	r31, 0xFF	; 255
    24ac:	91 83       	std	Z+1, r25	; 0x01
    24ae:	80 83       	st	Z, r24
		_delay_ms(40);
		CLCD_u8SpecialCharacter(1,Local_u8HamokshaPattern2,7,1);
    24b0:	9e 01       	movw	r18, r28
    24b2:	2e 50       	subi	r18, 0x0E	; 14
    24b4:	3f 4f       	sbci	r19, 0xFF	; 255
    24b6:	81 e0       	ldi	r24, 0x01	; 1
    24b8:	b9 01       	movw	r22, r18
    24ba:	47 e0       	ldi	r20, 0x07	; 7
    24bc:	21 e0       	ldi	r18, 0x01	; 1
    24be:	0e 94 29 0a 	call	0x1452	; 0x1452 <CLCD_u8SpecialCharacter>
    24c2:	fe 01       	movw	r30, r28
    24c4:	e7 57       	subi	r30, 0x77	; 119
    24c6:	ff 4f       	sbci	r31, 0xFF	; 255
    24c8:	80 e0       	ldi	r24, 0x00	; 0
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	a0 e2       	ldi	r26, 0x20	; 32
    24ce:	b2 e4       	ldi	r27, 0x42	; 66
    24d0:	80 83       	st	Z, r24
    24d2:	91 83       	std	Z+1, r25	; 0x01
    24d4:	a2 83       	std	Z+2, r26	; 0x02
    24d6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24d8:	8e 01       	movw	r16, r28
    24da:	0b 57       	subi	r16, 0x7B	; 123
    24dc:	1f 4f       	sbci	r17, 0xFF	; 255
    24de:	fe 01       	movw	r30, r28
    24e0:	e7 57       	subi	r30, 0x77	; 119
    24e2:	ff 4f       	sbci	r31, 0xFF	; 255
    24e4:	60 81       	ld	r22, Z
    24e6:	71 81       	ldd	r23, Z+1	; 0x01
    24e8:	82 81       	ldd	r24, Z+2	; 0x02
    24ea:	93 81       	ldd	r25, Z+3	; 0x03
    24ec:	20 e0       	ldi	r18, 0x00	; 0
    24ee:	30 e0       	ldi	r19, 0x00	; 0
    24f0:	4a e7       	ldi	r20, 0x7A	; 122
    24f2:	55 e4       	ldi	r21, 0x45	; 69
    24f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24f8:	dc 01       	movw	r26, r24
    24fa:	cb 01       	movw	r24, r22
    24fc:	f8 01       	movw	r30, r16
    24fe:	80 83       	st	Z, r24
    2500:	91 83       	std	Z+1, r25	; 0x01
    2502:	a2 83       	std	Z+2, r26	; 0x02
    2504:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2506:	fe 01       	movw	r30, r28
    2508:	eb 57       	subi	r30, 0x7B	; 123
    250a:	ff 4f       	sbci	r31, 0xFF	; 255
    250c:	60 81       	ld	r22, Z
    250e:	71 81       	ldd	r23, Z+1	; 0x01
    2510:	82 81       	ldd	r24, Z+2	; 0x02
    2512:	93 81       	ldd	r25, Z+3	; 0x03
    2514:	20 e0       	ldi	r18, 0x00	; 0
    2516:	30 e0       	ldi	r19, 0x00	; 0
    2518:	40 e8       	ldi	r20, 0x80	; 128
    251a:	5f e3       	ldi	r21, 0x3F	; 63
    251c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2520:	88 23       	and	r24, r24
    2522:	44 f4       	brge	.+16     	; 0x2534 <CLCD_voidHamoksha+0x1036>
		__ticks = 1;
    2524:	fe 01       	movw	r30, r28
    2526:	ed 57       	subi	r30, 0x7D	; 125
    2528:	ff 4f       	sbci	r31, 0xFF	; 255
    252a:	81 e0       	ldi	r24, 0x01	; 1
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	91 83       	std	Z+1, r25	; 0x01
    2530:	80 83       	st	Z, r24
    2532:	64 c0       	rjmp	.+200    	; 0x25fc <CLCD_voidHamoksha+0x10fe>
	else if (__tmp > 65535)
    2534:	fe 01       	movw	r30, r28
    2536:	eb 57       	subi	r30, 0x7B	; 123
    2538:	ff 4f       	sbci	r31, 0xFF	; 255
    253a:	60 81       	ld	r22, Z
    253c:	71 81       	ldd	r23, Z+1	; 0x01
    253e:	82 81       	ldd	r24, Z+2	; 0x02
    2540:	93 81       	ldd	r25, Z+3	; 0x03
    2542:	20 e0       	ldi	r18, 0x00	; 0
    2544:	3f ef       	ldi	r19, 0xFF	; 255
    2546:	4f e7       	ldi	r20, 0x7F	; 127
    2548:	57 e4       	ldi	r21, 0x47	; 71
    254a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    254e:	18 16       	cp	r1, r24
    2550:	0c f0       	brlt	.+2      	; 0x2554 <CLCD_voidHamoksha+0x1056>
    2552:	43 c0       	rjmp	.+134    	; 0x25da <CLCD_voidHamoksha+0x10dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2554:	fe 01       	movw	r30, r28
    2556:	e7 57       	subi	r30, 0x77	; 119
    2558:	ff 4f       	sbci	r31, 0xFF	; 255
    255a:	60 81       	ld	r22, Z
    255c:	71 81       	ldd	r23, Z+1	; 0x01
    255e:	82 81       	ldd	r24, Z+2	; 0x02
    2560:	93 81       	ldd	r25, Z+3	; 0x03
    2562:	20 e0       	ldi	r18, 0x00	; 0
    2564:	30 e0       	ldi	r19, 0x00	; 0
    2566:	40 e2       	ldi	r20, 0x20	; 32
    2568:	51 e4       	ldi	r21, 0x41	; 65
    256a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    256e:	dc 01       	movw	r26, r24
    2570:	cb 01       	movw	r24, r22
    2572:	8e 01       	movw	r16, r28
    2574:	0d 57       	subi	r16, 0x7D	; 125
    2576:	1f 4f       	sbci	r17, 0xFF	; 255
    2578:	bc 01       	movw	r22, r24
    257a:	cd 01       	movw	r24, r26
    257c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2580:	dc 01       	movw	r26, r24
    2582:	cb 01       	movw	r24, r22
    2584:	f8 01       	movw	r30, r16
    2586:	91 83       	std	Z+1, r25	; 0x01
    2588:	80 83       	st	Z, r24
    258a:	1f c0       	rjmp	.+62     	; 0x25ca <CLCD_voidHamoksha+0x10cc>
    258c:	fe 01       	movw	r30, r28
    258e:	ef 57       	subi	r30, 0x7F	; 127
    2590:	ff 4f       	sbci	r31, 0xFF	; 255
    2592:	80 e9       	ldi	r24, 0x90	; 144
    2594:	91 e0       	ldi	r25, 0x01	; 1
    2596:	91 83       	std	Z+1, r25	; 0x01
    2598:	80 83       	st	Z, r24
    259a:	fe 01       	movw	r30, r28
    259c:	ef 57       	subi	r30, 0x7F	; 127
    259e:	ff 4f       	sbci	r31, 0xFF	; 255
    25a0:	80 81       	ld	r24, Z
    25a2:	91 81       	ldd	r25, Z+1	; 0x01
    25a4:	01 97       	sbiw	r24, 0x01	; 1
    25a6:	f1 f7       	brne	.-4      	; 0x25a4 <CLCD_voidHamoksha+0x10a6>
    25a8:	fe 01       	movw	r30, r28
    25aa:	ef 57       	subi	r30, 0x7F	; 127
    25ac:	ff 4f       	sbci	r31, 0xFF	; 255
    25ae:	91 83       	std	Z+1, r25	; 0x01
    25b0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25b2:	de 01       	movw	r26, r28
    25b4:	ad 57       	subi	r26, 0x7D	; 125
    25b6:	bf 4f       	sbci	r27, 0xFF	; 255
    25b8:	fe 01       	movw	r30, r28
    25ba:	ed 57       	subi	r30, 0x7D	; 125
    25bc:	ff 4f       	sbci	r31, 0xFF	; 255
    25be:	80 81       	ld	r24, Z
    25c0:	91 81       	ldd	r25, Z+1	; 0x01
    25c2:	01 97       	sbiw	r24, 0x01	; 1
    25c4:	11 96       	adiw	r26, 0x01	; 1
    25c6:	9c 93       	st	X, r25
    25c8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ca:	fe 01       	movw	r30, r28
    25cc:	ed 57       	subi	r30, 0x7D	; 125
    25ce:	ff 4f       	sbci	r31, 0xFF	; 255
    25d0:	80 81       	ld	r24, Z
    25d2:	91 81       	ldd	r25, Z+1	; 0x01
    25d4:	00 97       	sbiw	r24, 0x00	; 0
    25d6:	d1 f6       	brne	.-76     	; 0x258c <CLCD_voidHamoksha+0x108e>
    25d8:	27 c0       	rjmp	.+78     	; 0x2628 <CLCD_voidHamoksha+0x112a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25da:	8e 01       	movw	r16, r28
    25dc:	0d 57       	subi	r16, 0x7D	; 125
    25de:	1f 4f       	sbci	r17, 0xFF	; 255
    25e0:	fe 01       	movw	r30, r28
    25e2:	eb 57       	subi	r30, 0x7B	; 123
    25e4:	ff 4f       	sbci	r31, 0xFF	; 255
    25e6:	60 81       	ld	r22, Z
    25e8:	71 81       	ldd	r23, Z+1	; 0x01
    25ea:	82 81       	ldd	r24, Z+2	; 0x02
    25ec:	93 81       	ldd	r25, Z+3	; 0x03
    25ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f2:	dc 01       	movw	r26, r24
    25f4:	cb 01       	movw	r24, r22
    25f6:	f8 01       	movw	r30, r16
    25f8:	91 83       	std	Z+1, r25	; 0x01
    25fa:	80 83       	st	Z, r24
    25fc:	de 01       	movw	r26, r28
    25fe:	a1 58       	subi	r26, 0x81	; 129
    2600:	bf 4f       	sbci	r27, 0xFF	; 255
    2602:	fe 01       	movw	r30, r28
    2604:	ed 57       	subi	r30, 0x7D	; 125
    2606:	ff 4f       	sbci	r31, 0xFF	; 255
    2608:	80 81       	ld	r24, Z
    260a:	91 81       	ldd	r25, Z+1	; 0x01
    260c:	8d 93       	st	X+, r24
    260e:	9c 93       	st	X, r25
    2610:	fe 01       	movw	r30, r28
    2612:	e1 58       	subi	r30, 0x81	; 129
    2614:	ff 4f       	sbci	r31, 0xFF	; 255
    2616:	80 81       	ld	r24, Z
    2618:	91 81       	ldd	r25, Z+1	; 0x01
    261a:	01 97       	sbiw	r24, 0x01	; 1
    261c:	f1 f7       	brne	.-4      	; 0x261a <CLCD_voidHamoksha+0x111c>
    261e:	fe 01       	movw	r30, r28
    2620:	e1 58       	subi	r30, 0x81	; 129
    2622:	ff 4f       	sbci	r31, 0xFF	; 255
    2624:	91 83       	std	Z+1, r25	; 0x01
    2626:	80 83       	st	Z, r24
		_delay_ms(40);
		CLCD_u8SpecialCharacter(2,Local_u8HamokshaPattern3,7,1);
    2628:	9e 01       	movw	r18, r28
    262a:	26 50       	subi	r18, 0x06	; 6
    262c:	3f 4f       	sbci	r19, 0xFF	; 255
    262e:	82 e0       	ldi	r24, 0x02	; 2
    2630:	b9 01       	movw	r22, r18
    2632:	47 e0       	ldi	r20, 0x07	; 7
    2634:	21 e0       	ldi	r18, 0x01	; 1
    2636:	0e 94 29 0a 	call	0x1452	; 0x1452 <CLCD_u8SpecialCharacter>
    263a:	fe 01       	movw	r30, r28
    263c:	e5 58       	subi	r30, 0x85	; 133
    263e:	ff 4f       	sbci	r31, 0xFF	; 255
    2640:	80 e0       	ldi	r24, 0x00	; 0
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	a0 e2       	ldi	r26, 0x20	; 32
    2646:	b2 e4       	ldi	r27, 0x42	; 66
    2648:	80 83       	st	Z, r24
    264a:	91 83       	std	Z+1, r25	; 0x01
    264c:	a2 83       	std	Z+2, r26	; 0x02
    264e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2650:	8e 01       	movw	r16, r28
    2652:	09 58       	subi	r16, 0x89	; 137
    2654:	1f 4f       	sbci	r17, 0xFF	; 255
    2656:	fe 01       	movw	r30, r28
    2658:	e5 58       	subi	r30, 0x85	; 133
    265a:	ff 4f       	sbci	r31, 0xFF	; 255
    265c:	60 81       	ld	r22, Z
    265e:	71 81       	ldd	r23, Z+1	; 0x01
    2660:	82 81       	ldd	r24, Z+2	; 0x02
    2662:	93 81       	ldd	r25, Z+3	; 0x03
    2664:	20 e0       	ldi	r18, 0x00	; 0
    2666:	30 e0       	ldi	r19, 0x00	; 0
    2668:	4a e7       	ldi	r20, 0x7A	; 122
    266a:	55 e4       	ldi	r21, 0x45	; 69
    266c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2670:	dc 01       	movw	r26, r24
    2672:	cb 01       	movw	r24, r22
    2674:	f8 01       	movw	r30, r16
    2676:	80 83       	st	Z, r24
    2678:	91 83       	std	Z+1, r25	; 0x01
    267a:	a2 83       	std	Z+2, r26	; 0x02
    267c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    267e:	fe 01       	movw	r30, r28
    2680:	e9 58       	subi	r30, 0x89	; 137
    2682:	ff 4f       	sbci	r31, 0xFF	; 255
    2684:	60 81       	ld	r22, Z
    2686:	71 81       	ldd	r23, Z+1	; 0x01
    2688:	82 81       	ldd	r24, Z+2	; 0x02
    268a:	93 81       	ldd	r25, Z+3	; 0x03
    268c:	20 e0       	ldi	r18, 0x00	; 0
    268e:	30 e0       	ldi	r19, 0x00	; 0
    2690:	40 e8       	ldi	r20, 0x80	; 128
    2692:	5f e3       	ldi	r21, 0x3F	; 63
    2694:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2698:	88 23       	and	r24, r24
    269a:	44 f4       	brge	.+16     	; 0x26ac <CLCD_voidHamoksha+0x11ae>
		__ticks = 1;
    269c:	fe 01       	movw	r30, r28
    269e:	eb 58       	subi	r30, 0x8B	; 139
    26a0:	ff 4f       	sbci	r31, 0xFF	; 255
    26a2:	81 e0       	ldi	r24, 0x01	; 1
    26a4:	90 e0       	ldi	r25, 0x00	; 0
    26a6:	91 83       	std	Z+1, r25	; 0x01
    26a8:	80 83       	st	Z, r24
    26aa:	64 c0       	rjmp	.+200    	; 0x2774 <CLCD_voidHamoksha+0x1276>
	else if (__tmp > 65535)
    26ac:	fe 01       	movw	r30, r28
    26ae:	e9 58       	subi	r30, 0x89	; 137
    26b0:	ff 4f       	sbci	r31, 0xFF	; 255
    26b2:	60 81       	ld	r22, Z
    26b4:	71 81       	ldd	r23, Z+1	; 0x01
    26b6:	82 81       	ldd	r24, Z+2	; 0x02
    26b8:	93 81       	ldd	r25, Z+3	; 0x03
    26ba:	20 e0       	ldi	r18, 0x00	; 0
    26bc:	3f ef       	ldi	r19, 0xFF	; 255
    26be:	4f e7       	ldi	r20, 0x7F	; 127
    26c0:	57 e4       	ldi	r21, 0x47	; 71
    26c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26c6:	18 16       	cp	r1, r24
    26c8:	0c f0       	brlt	.+2      	; 0x26cc <CLCD_voidHamoksha+0x11ce>
    26ca:	43 c0       	rjmp	.+134    	; 0x2752 <CLCD_voidHamoksha+0x1254>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26cc:	fe 01       	movw	r30, r28
    26ce:	e5 58       	subi	r30, 0x85	; 133
    26d0:	ff 4f       	sbci	r31, 0xFF	; 255
    26d2:	60 81       	ld	r22, Z
    26d4:	71 81       	ldd	r23, Z+1	; 0x01
    26d6:	82 81       	ldd	r24, Z+2	; 0x02
    26d8:	93 81       	ldd	r25, Z+3	; 0x03
    26da:	20 e0       	ldi	r18, 0x00	; 0
    26dc:	30 e0       	ldi	r19, 0x00	; 0
    26de:	40 e2       	ldi	r20, 0x20	; 32
    26e0:	51 e4       	ldi	r21, 0x41	; 65
    26e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26e6:	dc 01       	movw	r26, r24
    26e8:	cb 01       	movw	r24, r22
    26ea:	8e 01       	movw	r16, r28
    26ec:	0b 58       	subi	r16, 0x8B	; 139
    26ee:	1f 4f       	sbci	r17, 0xFF	; 255
    26f0:	bc 01       	movw	r22, r24
    26f2:	cd 01       	movw	r24, r26
    26f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f8:	dc 01       	movw	r26, r24
    26fa:	cb 01       	movw	r24, r22
    26fc:	f8 01       	movw	r30, r16
    26fe:	91 83       	std	Z+1, r25	; 0x01
    2700:	80 83       	st	Z, r24
    2702:	1f c0       	rjmp	.+62     	; 0x2742 <CLCD_voidHamoksha+0x1244>
    2704:	fe 01       	movw	r30, r28
    2706:	ed 58       	subi	r30, 0x8D	; 141
    2708:	ff 4f       	sbci	r31, 0xFF	; 255
    270a:	80 e9       	ldi	r24, 0x90	; 144
    270c:	91 e0       	ldi	r25, 0x01	; 1
    270e:	91 83       	std	Z+1, r25	; 0x01
    2710:	80 83       	st	Z, r24
    2712:	fe 01       	movw	r30, r28
    2714:	ed 58       	subi	r30, 0x8D	; 141
    2716:	ff 4f       	sbci	r31, 0xFF	; 255
    2718:	80 81       	ld	r24, Z
    271a:	91 81       	ldd	r25, Z+1	; 0x01
    271c:	01 97       	sbiw	r24, 0x01	; 1
    271e:	f1 f7       	brne	.-4      	; 0x271c <CLCD_voidHamoksha+0x121e>
    2720:	fe 01       	movw	r30, r28
    2722:	ed 58       	subi	r30, 0x8D	; 141
    2724:	ff 4f       	sbci	r31, 0xFF	; 255
    2726:	91 83       	std	Z+1, r25	; 0x01
    2728:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    272a:	de 01       	movw	r26, r28
    272c:	ab 58       	subi	r26, 0x8B	; 139
    272e:	bf 4f       	sbci	r27, 0xFF	; 255
    2730:	fe 01       	movw	r30, r28
    2732:	eb 58       	subi	r30, 0x8B	; 139
    2734:	ff 4f       	sbci	r31, 0xFF	; 255
    2736:	80 81       	ld	r24, Z
    2738:	91 81       	ldd	r25, Z+1	; 0x01
    273a:	01 97       	sbiw	r24, 0x01	; 1
    273c:	11 96       	adiw	r26, 0x01	; 1
    273e:	9c 93       	st	X, r25
    2740:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2742:	fe 01       	movw	r30, r28
    2744:	eb 58       	subi	r30, 0x8B	; 139
    2746:	ff 4f       	sbci	r31, 0xFF	; 255
    2748:	80 81       	ld	r24, Z
    274a:	91 81       	ldd	r25, Z+1	; 0x01
    274c:	00 97       	sbiw	r24, 0x00	; 0
    274e:	d1 f6       	brne	.-76     	; 0x2704 <CLCD_voidHamoksha+0x1206>
    2750:	27 c0       	rjmp	.+78     	; 0x27a0 <CLCD_voidHamoksha+0x12a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2752:	8e 01       	movw	r16, r28
    2754:	0b 58       	subi	r16, 0x8B	; 139
    2756:	1f 4f       	sbci	r17, 0xFF	; 255
    2758:	fe 01       	movw	r30, r28
    275a:	e9 58       	subi	r30, 0x89	; 137
    275c:	ff 4f       	sbci	r31, 0xFF	; 255
    275e:	60 81       	ld	r22, Z
    2760:	71 81       	ldd	r23, Z+1	; 0x01
    2762:	82 81       	ldd	r24, Z+2	; 0x02
    2764:	93 81       	ldd	r25, Z+3	; 0x03
    2766:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    276a:	dc 01       	movw	r26, r24
    276c:	cb 01       	movw	r24, r22
    276e:	f8 01       	movw	r30, r16
    2770:	91 83       	std	Z+1, r25	; 0x01
    2772:	80 83       	st	Z, r24
    2774:	de 01       	movw	r26, r28
    2776:	af 58       	subi	r26, 0x8F	; 143
    2778:	bf 4f       	sbci	r27, 0xFF	; 255
    277a:	fe 01       	movw	r30, r28
    277c:	eb 58       	subi	r30, 0x8B	; 139
    277e:	ff 4f       	sbci	r31, 0xFF	; 255
    2780:	80 81       	ld	r24, Z
    2782:	91 81       	ldd	r25, Z+1	; 0x01
    2784:	8d 93       	st	X+, r24
    2786:	9c 93       	st	X, r25
    2788:	fe 01       	movw	r30, r28
    278a:	ef 58       	subi	r30, 0x8F	; 143
    278c:	ff 4f       	sbci	r31, 0xFF	; 255
    278e:	80 81       	ld	r24, Z
    2790:	91 81       	ldd	r25, Z+1	; 0x01
    2792:	01 97       	sbiw	r24, 0x01	; 1
    2794:	f1 f7       	brne	.-4      	; 0x2792 <CLCD_voidHamoksha+0x1294>
    2796:	fe 01       	movw	r30, r28
    2798:	ef 58       	subi	r30, 0x8F	; 143
    279a:	ff 4f       	sbci	r31, 0xFF	; 255
    279c:	91 83       	std	Z+1, r25	; 0x01
    279e:	80 83       	st	Z, r24
		_delay_ms(40);
        i++;
    27a0:	de 01       	movw	r26, r28
    27a2:	af 51       	subi	r26, 0x1F	; 31
    27a4:	bf 4f       	sbci	r27, 0xFF	; 255
    27a6:	fe 01       	movw	r30, r28
    27a8:	ef 51       	subi	r30, 0x1F	; 31
    27aa:	ff 4f       	sbci	r31, 0xFF	; 255
    27ac:	80 81       	ld	r24, Z
    27ae:	8f 5f       	subi	r24, 0xFF	; 255
    27b0:	8c 93       	st	X, r24
CLCD_voidClear();
CLCD_VoidGoToXY(0,0);
	CLCD_u8SendString("I CAN DANCE");
	_delay_ms(600);
	 i=0;
	while(i<10)
    27b2:	fe 01       	movw	r30, r28
    27b4:	ef 51       	subi	r30, 0x1F	; 31
    27b6:	ff 4f       	sbci	r31, 0xFF	; 255
    27b8:	80 81       	ld	r24, Z
    27ba:	8a 30       	cpi	r24, 0x0A	; 10
    27bc:	08 f4       	brcc	.+2      	; 0x27c0 <CLCD_voidHamoksha+0x12c2>
    27be:	bc cd       	rjmp	.-1160   	; 0x2338 <CLCD_voidHamoksha+0xe3a>
		CLCD_u8SpecialCharacter(2,Local_u8HamokshaPattern3,7,1);
		_delay_ms(40);
        i++;

	}
	CLCD_voidClear();
    27c0:	0e 94 75 0a 	call	0x14ea	; 0x14ea <CLCD_voidClear>
	CLCD_VoidGoToXY(0,0);
    27c4:	80 e0       	ldi	r24, 0x00	; 0
    27c6:	60 e0       	ldi	r22, 0x00	; 0
    27c8:	0e 94 09 0a 	call	0x1412	; 0x1412 <CLCD_VoidGoToXY>
	CLCD_u8SendString(" I play Football");
    27cc:	87 e8       	ldi	r24, 0x87	; 135
    27ce:	90 e0       	ldi	r25, 0x00	; 0
    27d0:	0e 94 4a 09 	call	0x1294	; 0x1294 <CLCD_u8SendString>
    27d4:	fe 01       	movw	r30, r28
    27d6:	e3 59       	subi	r30, 0x93	; 147
    27d8:	ff 4f       	sbci	r31, 0xFF	; 255
    27da:	80 e0       	ldi	r24, 0x00	; 0
    27dc:	90 e0       	ldi	r25, 0x00	; 0
    27de:	a6 e1       	ldi	r26, 0x16	; 22
    27e0:	b4 e4       	ldi	r27, 0x44	; 68
    27e2:	80 83       	st	Z, r24
    27e4:	91 83       	std	Z+1, r25	; 0x01
    27e6:	a2 83       	std	Z+2, r26	; 0x02
    27e8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27ea:	8e 01       	movw	r16, r28
    27ec:	07 59       	subi	r16, 0x97	; 151
    27ee:	1f 4f       	sbci	r17, 0xFF	; 255
    27f0:	fe 01       	movw	r30, r28
    27f2:	e3 59       	subi	r30, 0x93	; 147
    27f4:	ff 4f       	sbci	r31, 0xFF	; 255
    27f6:	60 81       	ld	r22, Z
    27f8:	71 81       	ldd	r23, Z+1	; 0x01
    27fa:	82 81       	ldd	r24, Z+2	; 0x02
    27fc:	93 81       	ldd	r25, Z+3	; 0x03
    27fe:	20 e0       	ldi	r18, 0x00	; 0
    2800:	30 e0       	ldi	r19, 0x00	; 0
    2802:	4a e7       	ldi	r20, 0x7A	; 122
    2804:	55 e4       	ldi	r21, 0x45	; 69
    2806:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    280a:	dc 01       	movw	r26, r24
    280c:	cb 01       	movw	r24, r22
    280e:	f8 01       	movw	r30, r16
    2810:	80 83       	st	Z, r24
    2812:	91 83       	std	Z+1, r25	; 0x01
    2814:	a2 83       	std	Z+2, r26	; 0x02
    2816:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2818:	fe 01       	movw	r30, r28
    281a:	e7 59       	subi	r30, 0x97	; 151
    281c:	ff 4f       	sbci	r31, 0xFF	; 255
    281e:	60 81       	ld	r22, Z
    2820:	71 81       	ldd	r23, Z+1	; 0x01
    2822:	82 81       	ldd	r24, Z+2	; 0x02
    2824:	93 81       	ldd	r25, Z+3	; 0x03
    2826:	20 e0       	ldi	r18, 0x00	; 0
    2828:	30 e0       	ldi	r19, 0x00	; 0
    282a:	40 e8       	ldi	r20, 0x80	; 128
    282c:	5f e3       	ldi	r21, 0x3F	; 63
    282e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2832:	88 23       	and	r24, r24
    2834:	44 f4       	brge	.+16     	; 0x2846 <CLCD_voidHamoksha+0x1348>
		__ticks = 1;
    2836:	fe 01       	movw	r30, r28
    2838:	e9 59       	subi	r30, 0x99	; 153
    283a:	ff 4f       	sbci	r31, 0xFF	; 255
    283c:	81 e0       	ldi	r24, 0x01	; 1
    283e:	90 e0       	ldi	r25, 0x00	; 0
    2840:	91 83       	std	Z+1, r25	; 0x01
    2842:	80 83       	st	Z, r24
    2844:	64 c0       	rjmp	.+200    	; 0x290e <CLCD_voidHamoksha+0x1410>
	else if (__tmp > 65535)
    2846:	fe 01       	movw	r30, r28
    2848:	e7 59       	subi	r30, 0x97	; 151
    284a:	ff 4f       	sbci	r31, 0xFF	; 255
    284c:	60 81       	ld	r22, Z
    284e:	71 81       	ldd	r23, Z+1	; 0x01
    2850:	82 81       	ldd	r24, Z+2	; 0x02
    2852:	93 81       	ldd	r25, Z+3	; 0x03
    2854:	20 e0       	ldi	r18, 0x00	; 0
    2856:	3f ef       	ldi	r19, 0xFF	; 255
    2858:	4f e7       	ldi	r20, 0x7F	; 127
    285a:	57 e4       	ldi	r21, 0x47	; 71
    285c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2860:	18 16       	cp	r1, r24
    2862:	0c f0       	brlt	.+2      	; 0x2866 <CLCD_voidHamoksha+0x1368>
    2864:	43 c0       	rjmp	.+134    	; 0x28ec <CLCD_voidHamoksha+0x13ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2866:	fe 01       	movw	r30, r28
    2868:	e3 59       	subi	r30, 0x93	; 147
    286a:	ff 4f       	sbci	r31, 0xFF	; 255
    286c:	60 81       	ld	r22, Z
    286e:	71 81       	ldd	r23, Z+1	; 0x01
    2870:	82 81       	ldd	r24, Z+2	; 0x02
    2872:	93 81       	ldd	r25, Z+3	; 0x03
    2874:	20 e0       	ldi	r18, 0x00	; 0
    2876:	30 e0       	ldi	r19, 0x00	; 0
    2878:	40 e2       	ldi	r20, 0x20	; 32
    287a:	51 e4       	ldi	r21, 0x41	; 65
    287c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2880:	dc 01       	movw	r26, r24
    2882:	cb 01       	movw	r24, r22
    2884:	8e 01       	movw	r16, r28
    2886:	09 59       	subi	r16, 0x99	; 153
    2888:	1f 4f       	sbci	r17, 0xFF	; 255
    288a:	bc 01       	movw	r22, r24
    288c:	cd 01       	movw	r24, r26
    288e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2892:	dc 01       	movw	r26, r24
    2894:	cb 01       	movw	r24, r22
    2896:	f8 01       	movw	r30, r16
    2898:	91 83       	std	Z+1, r25	; 0x01
    289a:	80 83       	st	Z, r24
    289c:	1f c0       	rjmp	.+62     	; 0x28dc <CLCD_voidHamoksha+0x13de>
    289e:	fe 01       	movw	r30, r28
    28a0:	eb 59       	subi	r30, 0x9B	; 155
    28a2:	ff 4f       	sbci	r31, 0xFF	; 255
    28a4:	80 e9       	ldi	r24, 0x90	; 144
    28a6:	91 e0       	ldi	r25, 0x01	; 1
    28a8:	91 83       	std	Z+1, r25	; 0x01
    28aa:	80 83       	st	Z, r24
    28ac:	fe 01       	movw	r30, r28
    28ae:	eb 59       	subi	r30, 0x9B	; 155
    28b0:	ff 4f       	sbci	r31, 0xFF	; 255
    28b2:	80 81       	ld	r24, Z
    28b4:	91 81       	ldd	r25, Z+1	; 0x01
    28b6:	01 97       	sbiw	r24, 0x01	; 1
    28b8:	f1 f7       	brne	.-4      	; 0x28b6 <CLCD_voidHamoksha+0x13b8>
    28ba:	fe 01       	movw	r30, r28
    28bc:	eb 59       	subi	r30, 0x9B	; 155
    28be:	ff 4f       	sbci	r31, 0xFF	; 255
    28c0:	91 83       	std	Z+1, r25	; 0x01
    28c2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28c4:	de 01       	movw	r26, r28
    28c6:	a9 59       	subi	r26, 0x99	; 153
    28c8:	bf 4f       	sbci	r27, 0xFF	; 255
    28ca:	fe 01       	movw	r30, r28
    28cc:	e9 59       	subi	r30, 0x99	; 153
    28ce:	ff 4f       	sbci	r31, 0xFF	; 255
    28d0:	80 81       	ld	r24, Z
    28d2:	91 81       	ldd	r25, Z+1	; 0x01
    28d4:	01 97       	sbiw	r24, 0x01	; 1
    28d6:	11 96       	adiw	r26, 0x01	; 1
    28d8:	9c 93       	st	X, r25
    28da:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28dc:	fe 01       	movw	r30, r28
    28de:	e9 59       	subi	r30, 0x99	; 153
    28e0:	ff 4f       	sbci	r31, 0xFF	; 255
    28e2:	80 81       	ld	r24, Z
    28e4:	91 81       	ldd	r25, Z+1	; 0x01
    28e6:	00 97       	sbiw	r24, 0x00	; 0
    28e8:	d1 f6       	brne	.-76     	; 0x289e <CLCD_voidHamoksha+0x13a0>
    28ea:	28 c0       	rjmp	.+80     	; 0x293c <CLCD_voidHamoksha+0x143e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28ec:	8e 01       	movw	r16, r28
    28ee:	09 59       	subi	r16, 0x99	; 153
    28f0:	1f 4f       	sbci	r17, 0xFF	; 255
    28f2:	fe 01       	movw	r30, r28
    28f4:	e7 59       	subi	r30, 0x97	; 151
    28f6:	ff 4f       	sbci	r31, 0xFF	; 255
    28f8:	60 81       	ld	r22, Z
    28fa:	71 81       	ldd	r23, Z+1	; 0x01
    28fc:	82 81       	ldd	r24, Z+2	; 0x02
    28fe:	93 81       	ldd	r25, Z+3	; 0x03
    2900:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2904:	dc 01       	movw	r26, r24
    2906:	cb 01       	movw	r24, r22
    2908:	f8 01       	movw	r30, r16
    290a:	91 83       	std	Z+1, r25	; 0x01
    290c:	80 83       	st	Z, r24
    290e:	de 01       	movw	r26, r28
    2910:	ad 59       	subi	r26, 0x9D	; 157
    2912:	bf 4f       	sbci	r27, 0xFF	; 255
    2914:	fe 01       	movw	r30, r28
    2916:	e9 59       	subi	r30, 0x99	; 153
    2918:	ff 4f       	sbci	r31, 0xFF	; 255
    291a:	80 81       	ld	r24, Z
    291c:	91 81       	ldd	r25, Z+1	; 0x01
    291e:	11 96       	adiw	r26, 0x01	; 1
    2920:	9c 93       	st	X, r25
    2922:	8e 93       	st	-X, r24
    2924:	fe 01       	movw	r30, r28
    2926:	ed 59       	subi	r30, 0x9D	; 157
    2928:	ff 4f       	sbci	r31, 0xFF	; 255
    292a:	80 81       	ld	r24, Z
    292c:	91 81       	ldd	r25, Z+1	; 0x01
    292e:	01 97       	sbiw	r24, 0x01	; 1
    2930:	f1 f7       	brne	.-4      	; 0x292e <CLCD_voidHamoksha+0x1430>
    2932:	fe 01       	movw	r30, r28
    2934:	ed 59       	subi	r30, 0x9D	; 157
    2936:	ff 4f       	sbci	r31, 0xFF	; 255
    2938:	91 83       	std	Z+1, r25	; 0x01
    293a:	80 83       	st	Z, r24
	_delay_ms(600);
	i=0;
    293c:	fe 01       	movw	r30, r28
    293e:	ef 51       	subi	r30, 0x1F	; 31
    2940:	ff 4f       	sbci	r31, 0xFF	; 255
    2942:	10 82       	st	Z, r1
    2944:	93 c1       	rjmp	.+806    	; 0x2c6c <CLCD_voidHamoksha+0x176e>
	{
		while(i<16)
			{   CLCD_voidClear();
    2946:	0e 94 75 0a 	call	0x14ea	; 0x14ea <CLCD_voidClear>
				CLCD_u8SpecialCharacter(0,Local_u8HamokshaPattern4,i++,1);
    294a:	fe 01       	movw	r30, r28
    294c:	ef 51       	subi	r30, 0x1F	; 31
    294e:	ff 4f       	sbci	r31, 0xFF	; 255
    2950:	90 81       	ld	r25, Z
    2952:	de 01       	movw	r26, r28
    2954:	af 51       	subi	r26, 0x1F	; 31
    2956:	bf 4f       	sbci	r27, 0xFF	; 255
    2958:	fe 01       	movw	r30, r28
    295a:	ef 51       	subi	r30, 0x1F	; 31
    295c:	ff 4f       	sbci	r31, 0xFF	; 255
    295e:	80 81       	ld	r24, Z
    2960:	8f 5f       	subi	r24, 0xFF	; 255
    2962:	8c 93       	st	X, r24
    2964:	9e 01       	movw	r18, r28
    2966:	2e 5f       	subi	r18, 0xFE	; 254
    2968:	3e 4f       	sbci	r19, 0xFE	; 254
    296a:	80 e0       	ldi	r24, 0x00	; 0
    296c:	b9 01       	movw	r22, r18
    296e:	49 2f       	mov	r20, r25
    2970:	21 e0       	ldi	r18, 0x01	; 1
    2972:	0e 94 29 0a 	call	0x1452	; 0x1452 <CLCD_u8SpecialCharacter>
    2976:	fe 01       	movw	r30, r28
    2978:	e1 5a       	subi	r30, 0xA1	; 161
    297a:	ff 4f       	sbci	r31, 0xFF	; 255
    297c:	80 e0       	ldi	r24, 0x00	; 0
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	a0 e2       	ldi	r26, 0x20	; 32
    2982:	b2 e4       	ldi	r27, 0x42	; 66
    2984:	80 83       	st	Z, r24
    2986:	91 83       	std	Z+1, r25	; 0x01
    2988:	a2 83       	std	Z+2, r26	; 0x02
    298a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    298c:	8e 01       	movw	r16, r28
    298e:	05 5a       	subi	r16, 0xA5	; 165
    2990:	1f 4f       	sbci	r17, 0xFF	; 255
    2992:	fe 01       	movw	r30, r28
    2994:	e1 5a       	subi	r30, 0xA1	; 161
    2996:	ff 4f       	sbci	r31, 0xFF	; 255
    2998:	60 81       	ld	r22, Z
    299a:	71 81       	ldd	r23, Z+1	; 0x01
    299c:	82 81       	ldd	r24, Z+2	; 0x02
    299e:	93 81       	ldd	r25, Z+3	; 0x03
    29a0:	20 e0       	ldi	r18, 0x00	; 0
    29a2:	30 e0       	ldi	r19, 0x00	; 0
    29a4:	4a e7       	ldi	r20, 0x7A	; 122
    29a6:	55 e4       	ldi	r21, 0x45	; 69
    29a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ac:	dc 01       	movw	r26, r24
    29ae:	cb 01       	movw	r24, r22
    29b0:	f8 01       	movw	r30, r16
    29b2:	80 83       	st	Z, r24
    29b4:	91 83       	std	Z+1, r25	; 0x01
    29b6:	a2 83       	std	Z+2, r26	; 0x02
    29b8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29ba:	fe 01       	movw	r30, r28
    29bc:	e5 5a       	subi	r30, 0xA5	; 165
    29be:	ff 4f       	sbci	r31, 0xFF	; 255
    29c0:	60 81       	ld	r22, Z
    29c2:	71 81       	ldd	r23, Z+1	; 0x01
    29c4:	82 81       	ldd	r24, Z+2	; 0x02
    29c6:	93 81       	ldd	r25, Z+3	; 0x03
    29c8:	20 e0       	ldi	r18, 0x00	; 0
    29ca:	30 e0       	ldi	r19, 0x00	; 0
    29cc:	40 e8       	ldi	r20, 0x80	; 128
    29ce:	5f e3       	ldi	r21, 0x3F	; 63
    29d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29d4:	88 23       	and	r24, r24
    29d6:	44 f4       	brge	.+16     	; 0x29e8 <CLCD_voidHamoksha+0x14ea>
		__ticks = 1;
    29d8:	fe 01       	movw	r30, r28
    29da:	e7 5a       	subi	r30, 0xA7	; 167
    29dc:	ff 4f       	sbci	r31, 0xFF	; 255
    29de:	81 e0       	ldi	r24, 0x01	; 1
    29e0:	90 e0       	ldi	r25, 0x00	; 0
    29e2:	91 83       	std	Z+1, r25	; 0x01
    29e4:	80 83       	st	Z, r24
    29e6:	64 c0       	rjmp	.+200    	; 0x2ab0 <CLCD_voidHamoksha+0x15b2>
	else if (__tmp > 65535)
    29e8:	fe 01       	movw	r30, r28
    29ea:	e5 5a       	subi	r30, 0xA5	; 165
    29ec:	ff 4f       	sbci	r31, 0xFF	; 255
    29ee:	60 81       	ld	r22, Z
    29f0:	71 81       	ldd	r23, Z+1	; 0x01
    29f2:	82 81       	ldd	r24, Z+2	; 0x02
    29f4:	93 81       	ldd	r25, Z+3	; 0x03
    29f6:	20 e0       	ldi	r18, 0x00	; 0
    29f8:	3f ef       	ldi	r19, 0xFF	; 255
    29fa:	4f e7       	ldi	r20, 0x7F	; 127
    29fc:	57 e4       	ldi	r21, 0x47	; 71
    29fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a02:	18 16       	cp	r1, r24
    2a04:	0c f0       	brlt	.+2      	; 0x2a08 <CLCD_voidHamoksha+0x150a>
    2a06:	43 c0       	rjmp	.+134    	; 0x2a8e <CLCD_voidHamoksha+0x1590>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a08:	fe 01       	movw	r30, r28
    2a0a:	e1 5a       	subi	r30, 0xA1	; 161
    2a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a0e:	60 81       	ld	r22, Z
    2a10:	71 81       	ldd	r23, Z+1	; 0x01
    2a12:	82 81       	ldd	r24, Z+2	; 0x02
    2a14:	93 81       	ldd	r25, Z+3	; 0x03
    2a16:	20 e0       	ldi	r18, 0x00	; 0
    2a18:	30 e0       	ldi	r19, 0x00	; 0
    2a1a:	40 e2       	ldi	r20, 0x20	; 32
    2a1c:	51 e4       	ldi	r21, 0x41	; 65
    2a1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a22:	dc 01       	movw	r26, r24
    2a24:	cb 01       	movw	r24, r22
    2a26:	8e 01       	movw	r16, r28
    2a28:	07 5a       	subi	r16, 0xA7	; 167
    2a2a:	1f 4f       	sbci	r17, 0xFF	; 255
    2a2c:	bc 01       	movw	r22, r24
    2a2e:	cd 01       	movw	r24, r26
    2a30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a34:	dc 01       	movw	r26, r24
    2a36:	cb 01       	movw	r24, r22
    2a38:	f8 01       	movw	r30, r16
    2a3a:	91 83       	std	Z+1, r25	; 0x01
    2a3c:	80 83       	st	Z, r24
    2a3e:	1f c0       	rjmp	.+62     	; 0x2a7e <CLCD_voidHamoksha+0x1580>
    2a40:	fe 01       	movw	r30, r28
    2a42:	e9 5a       	subi	r30, 0xA9	; 169
    2a44:	ff 4f       	sbci	r31, 0xFF	; 255
    2a46:	80 e9       	ldi	r24, 0x90	; 144
    2a48:	91 e0       	ldi	r25, 0x01	; 1
    2a4a:	91 83       	std	Z+1, r25	; 0x01
    2a4c:	80 83       	st	Z, r24
    2a4e:	fe 01       	movw	r30, r28
    2a50:	e9 5a       	subi	r30, 0xA9	; 169
    2a52:	ff 4f       	sbci	r31, 0xFF	; 255
    2a54:	80 81       	ld	r24, Z
    2a56:	91 81       	ldd	r25, Z+1	; 0x01
    2a58:	01 97       	sbiw	r24, 0x01	; 1
    2a5a:	f1 f7       	brne	.-4      	; 0x2a58 <CLCD_voidHamoksha+0x155a>
    2a5c:	fe 01       	movw	r30, r28
    2a5e:	e9 5a       	subi	r30, 0xA9	; 169
    2a60:	ff 4f       	sbci	r31, 0xFF	; 255
    2a62:	91 83       	std	Z+1, r25	; 0x01
    2a64:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a66:	de 01       	movw	r26, r28
    2a68:	a7 5a       	subi	r26, 0xA7	; 167
    2a6a:	bf 4f       	sbci	r27, 0xFF	; 255
    2a6c:	fe 01       	movw	r30, r28
    2a6e:	e7 5a       	subi	r30, 0xA7	; 167
    2a70:	ff 4f       	sbci	r31, 0xFF	; 255
    2a72:	80 81       	ld	r24, Z
    2a74:	91 81       	ldd	r25, Z+1	; 0x01
    2a76:	01 97       	sbiw	r24, 0x01	; 1
    2a78:	11 96       	adiw	r26, 0x01	; 1
    2a7a:	9c 93       	st	X, r25
    2a7c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a7e:	fe 01       	movw	r30, r28
    2a80:	e7 5a       	subi	r30, 0xA7	; 167
    2a82:	ff 4f       	sbci	r31, 0xFF	; 255
    2a84:	80 81       	ld	r24, Z
    2a86:	91 81       	ldd	r25, Z+1	; 0x01
    2a88:	00 97       	sbiw	r24, 0x00	; 0
    2a8a:	d1 f6       	brne	.-76     	; 0x2a40 <CLCD_voidHamoksha+0x1542>
    2a8c:	27 c0       	rjmp	.+78     	; 0x2adc <CLCD_voidHamoksha+0x15de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a8e:	8e 01       	movw	r16, r28
    2a90:	07 5a       	subi	r16, 0xA7	; 167
    2a92:	1f 4f       	sbci	r17, 0xFF	; 255
    2a94:	fe 01       	movw	r30, r28
    2a96:	e5 5a       	subi	r30, 0xA5	; 165
    2a98:	ff 4f       	sbci	r31, 0xFF	; 255
    2a9a:	60 81       	ld	r22, Z
    2a9c:	71 81       	ldd	r23, Z+1	; 0x01
    2a9e:	82 81       	ldd	r24, Z+2	; 0x02
    2aa0:	93 81       	ldd	r25, Z+3	; 0x03
    2aa2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aa6:	dc 01       	movw	r26, r24
    2aa8:	cb 01       	movw	r24, r22
    2aaa:	f8 01       	movw	r30, r16
    2aac:	91 83       	std	Z+1, r25	; 0x01
    2aae:	80 83       	st	Z, r24
    2ab0:	de 01       	movw	r26, r28
    2ab2:	ab 5a       	subi	r26, 0xAB	; 171
    2ab4:	bf 4f       	sbci	r27, 0xFF	; 255
    2ab6:	fe 01       	movw	r30, r28
    2ab8:	e7 5a       	subi	r30, 0xA7	; 167
    2aba:	ff 4f       	sbci	r31, 0xFF	; 255
    2abc:	80 81       	ld	r24, Z
    2abe:	91 81       	ldd	r25, Z+1	; 0x01
    2ac0:	8d 93       	st	X+, r24
    2ac2:	9c 93       	st	X, r25
    2ac4:	fe 01       	movw	r30, r28
    2ac6:	eb 5a       	subi	r30, 0xAB	; 171
    2ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aca:	80 81       	ld	r24, Z
    2acc:	91 81       	ldd	r25, Z+1	; 0x01
    2ace:	01 97       	sbiw	r24, 0x01	; 1
    2ad0:	f1 f7       	brne	.-4      	; 0x2ace <CLCD_voidHamoksha+0x15d0>
    2ad2:	fe 01       	movw	r30, r28
    2ad4:	eb 5a       	subi	r30, 0xAB	; 171
    2ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad8:	91 83       	std	Z+1, r25	; 0x01
    2ada:	80 83       	st	Z, r24
				_delay_ms(40);
				CLCD_u8SpecialCharacter(0,Local_u8HamokshaPattern42,i,1);
    2adc:	9e 01       	movw	r18, r28
    2ade:	2e 5e       	subi	r18, 0xEE	; 238
    2ae0:	3e 4f       	sbci	r19, 0xFE	; 254
    2ae2:	fe 01       	movw	r30, r28
    2ae4:	ef 51       	subi	r30, 0x1F	; 31
    2ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae8:	80 e0       	ldi	r24, 0x00	; 0
    2aea:	b9 01       	movw	r22, r18
    2aec:	40 81       	ld	r20, Z
    2aee:	21 e0       	ldi	r18, 0x01	; 1
    2af0:	0e 94 29 0a 	call	0x1452	; 0x1452 <CLCD_u8SpecialCharacter>
    2af4:	fe 01       	movw	r30, r28
    2af6:	ef 5a       	subi	r30, 0xAF	; 175
    2af8:	ff 4f       	sbci	r31, 0xFF	; 255
    2afa:	80 e0       	ldi	r24, 0x00	; 0
    2afc:	90 e0       	ldi	r25, 0x00	; 0
    2afe:	a0 e2       	ldi	r26, 0x20	; 32
    2b00:	b2 e4       	ldi	r27, 0x42	; 66
    2b02:	80 83       	st	Z, r24
    2b04:	91 83       	std	Z+1, r25	; 0x01
    2b06:	a2 83       	std	Z+2, r26	; 0x02
    2b08:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b0a:	8e 01       	movw	r16, r28
    2b0c:	03 5b       	subi	r16, 0xB3	; 179
    2b0e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b10:	fe 01       	movw	r30, r28
    2b12:	ef 5a       	subi	r30, 0xAF	; 175
    2b14:	ff 4f       	sbci	r31, 0xFF	; 255
    2b16:	60 81       	ld	r22, Z
    2b18:	71 81       	ldd	r23, Z+1	; 0x01
    2b1a:	82 81       	ldd	r24, Z+2	; 0x02
    2b1c:	93 81       	ldd	r25, Z+3	; 0x03
    2b1e:	20 e0       	ldi	r18, 0x00	; 0
    2b20:	30 e0       	ldi	r19, 0x00	; 0
    2b22:	4a e7       	ldi	r20, 0x7A	; 122
    2b24:	55 e4       	ldi	r21, 0x45	; 69
    2b26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b2a:	dc 01       	movw	r26, r24
    2b2c:	cb 01       	movw	r24, r22
    2b2e:	f8 01       	movw	r30, r16
    2b30:	80 83       	st	Z, r24
    2b32:	91 83       	std	Z+1, r25	; 0x01
    2b34:	a2 83       	std	Z+2, r26	; 0x02
    2b36:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b38:	fe 01       	movw	r30, r28
    2b3a:	e3 5b       	subi	r30, 0xB3	; 179
    2b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3e:	60 81       	ld	r22, Z
    2b40:	71 81       	ldd	r23, Z+1	; 0x01
    2b42:	82 81       	ldd	r24, Z+2	; 0x02
    2b44:	93 81       	ldd	r25, Z+3	; 0x03
    2b46:	20 e0       	ldi	r18, 0x00	; 0
    2b48:	30 e0       	ldi	r19, 0x00	; 0
    2b4a:	40 e8       	ldi	r20, 0x80	; 128
    2b4c:	5f e3       	ldi	r21, 0x3F	; 63
    2b4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b52:	88 23       	and	r24, r24
    2b54:	44 f4       	brge	.+16     	; 0x2b66 <CLCD_voidHamoksha+0x1668>
		__ticks = 1;
    2b56:	fe 01       	movw	r30, r28
    2b58:	e5 5b       	subi	r30, 0xB5	; 181
    2b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b5c:	81 e0       	ldi	r24, 0x01	; 1
    2b5e:	90 e0       	ldi	r25, 0x00	; 0
    2b60:	91 83       	std	Z+1, r25	; 0x01
    2b62:	80 83       	st	Z, r24
    2b64:	64 c0       	rjmp	.+200    	; 0x2c2e <CLCD_voidHamoksha+0x1730>
	else if (__tmp > 65535)
    2b66:	fe 01       	movw	r30, r28
    2b68:	e3 5b       	subi	r30, 0xB3	; 179
    2b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6c:	60 81       	ld	r22, Z
    2b6e:	71 81       	ldd	r23, Z+1	; 0x01
    2b70:	82 81       	ldd	r24, Z+2	; 0x02
    2b72:	93 81       	ldd	r25, Z+3	; 0x03
    2b74:	20 e0       	ldi	r18, 0x00	; 0
    2b76:	3f ef       	ldi	r19, 0xFF	; 255
    2b78:	4f e7       	ldi	r20, 0x7F	; 127
    2b7a:	57 e4       	ldi	r21, 0x47	; 71
    2b7c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b80:	18 16       	cp	r1, r24
    2b82:	0c f0       	brlt	.+2      	; 0x2b86 <CLCD_voidHamoksha+0x1688>
    2b84:	43 c0       	rjmp	.+134    	; 0x2c0c <CLCD_voidHamoksha+0x170e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b86:	fe 01       	movw	r30, r28
    2b88:	ef 5a       	subi	r30, 0xAF	; 175
    2b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b8c:	60 81       	ld	r22, Z
    2b8e:	71 81       	ldd	r23, Z+1	; 0x01
    2b90:	82 81       	ldd	r24, Z+2	; 0x02
    2b92:	93 81       	ldd	r25, Z+3	; 0x03
    2b94:	20 e0       	ldi	r18, 0x00	; 0
    2b96:	30 e0       	ldi	r19, 0x00	; 0
    2b98:	40 e2       	ldi	r20, 0x20	; 32
    2b9a:	51 e4       	ldi	r21, 0x41	; 65
    2b9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ba0:	dc 01       	movw	r26, r24
    2ba2:	cb 01       	movw	r24, r22
    2ba4:	8e 01       	movw	r16, r28
    2ba6:	05 5b       	subi	r16, 0xB5	; 181
    2ba8:	1f 4f       	sbci	r17, 0xFF	; 255
    2baa:	bc 01       	movw	r22, r24
    2bac:	cd 01       	movw	r24, r26
    2bae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bb2:	dc 01       	movw	r26, r24
    2bb4:	cb 01       	movw	r24, r22
    2bb6:	f8 01       	movw	r30, r16
    2bb8:	91 83       	std	Z+1, r25	; 0x01
    2bba:	80 83       	st	Z, r24
    2bbc:	1f c0       	rjmp	.+62     	; 0x2bfc <CLCD_voidHamoksha+0x16fe>
    2bbe:	fe 01       	movw	r30, r28
    2bc0:	e7 5b       	subi	r30, 0xB7	; 183
    2bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc4:	80 e9       	ldi	r24, 0x90	; 144
    2bc6:	91 e0       	ldi	r25, 0x01	; 1
    2bc8:	91 83       	std	Z+1, r25	; 0x01
    2bca:	80 83       	st	Z, r24
    2bcc:	fe 01       	movw	r30, r28
    2bce:	e7 5b       	subi	r30, 0xB7	; 183
    2bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd2:	80 81       	ld	r24, Z
    2bd4:	91 81       	ldd	r25, Z+1	; 0x01
    2bd6:	01 97       	sbiw	r24, 0x01	; 1
    2bd8:	f1 f7       	brne	.-4      	; 0x2bd6 <CLCD_voidHamoksha+0x16d8>
    2bda:	fe 01       	movw	r30, r28
    2bdc:	e7 5b       	subi	r30, 0xB7	; 183
    2bde:	ff 4f       	sbci	r31, 0xFF	; 255
    2be0:	91 83       	std	Z+1, r25	; 0x01
    2be2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2be4:	de 01       	movw	r26, r28
    2be6:	a5 5b       	subi	r26, 0xB5	; 181
    2be8:	bf 4f       	sbci	r27, 0xFF	; 255
    2bea:	fe 01       	movw	r30, r28
    2bec:	e5 5b       	subi	r30, 0xB5	; 181
    2bee:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf0:	80 81       	ld	r24, Z
    2bf2:	91 81       	ldd	r25, Z+1	; 0x01
    2bf4:	01 97       	sbiw	r24, 0x01	; 1
    2bf6:	11 96       	adiw	r26, 0x01	; 1
    2bf8:	9c 93       	st	X, r25
    2bfa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bfc:	fe 01       	movw	r30, r28
    2bfe:	e5 5b       	subi	r30, 0xB5	; 181
    2c00:	ff 4f       	sbci	r31, 0xFF	; 255
    2c02:	80 81       	ld	r24, Z
    2c04:	91 81       	ldd	r25, Z+1	; 0x01
    2c06:	00 97       	sbiw	r24, 0x00	; 0
    2c08:	d1 f6       	brne	.-76     	; 0x2bbe <CLCD_voidHamoksha+0x16c0>
    2c0a:	27 c0       	rjmp	.+78     	; 0x2c5a <CLCD_voidHamoksha+0x175c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c0c:	8e 01       	movw	r16, r28
    2c0e:	05 5b       	subi	r16, 0xB5	; 181
    2c10:	1f 4f       	sbci	r17, 0xFF	; 255
    2c12:	fe 01       	movw	r30, r28
    2c14:	e3 5b       	subi	r30, 0xB3	; 179
    2c16:	ff 4f       	sbci	r31, 0xFF	; 255
    2c18:	60 81       	ld	r22, Z
    2c1a:	71 81       	ldd	r23, Z+1	; 0x01
    2c1c:	82 81       	ldd	r24, Z+2	; 0x02
    2c1e:	93 81       	ldd	r25, Z+3	; 0x03
    2c20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c24:	dc 01       	movw	r26, r24
    2c26:	cb 01       	movw	r24, r22
    2c28:	f8 01       	movw	r30, r16
    2c2a:	91 83       	std	Z+1, r25	; 0x01
    2c2c:	80 83       	st	Z, r24
    2c2e:	de 01       	movw	r26, r28
    2c30:	a9 5b       	subi	r26, 0xB9	; 185
    2c32:	bf 4f       	sbci	r27, 0xFF	; 255
    2c34:	fe 01       	movw	r30, r28
    2c36:	e5 5b       	subi	r30, 0xB5	; 181
    2c38:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3a:	80 81       	ld	r24, Z
    2c3c:	91 81       	ldd	r25, Z+1	; 0x01
    2c3e:	8d 93       	st	X+, r24
    2c40:	9c 93       	st	X, r25
    2c42:	fe 01       	movw	r30, r28
    2c44:	e9 5b       	subi	r30, 0xB9	; 185
    2c46:	ff 4f       	sbci	r31, 0xFF	; 255
    2c48:	80 81       	ld	r24, Z
    2c4a:	91 81       	ldd	r25, Z+1	; 0x01
    2c4c:	01 97       	sbiw	r24, 0x01	; 1
    2c4e:	f1 f7       	brne	.-4      	; 0x2c4c <CLCD_voidHamoksha+0x174e>
    2c50:	fe 01       	movw	r30, r28
    2c52:	e9 5b       	subi	r30, 0xB9	; 185
    2c54:	ff 4f       	sbci	r31, 0xFF	; 255
    2c56:	91 83       	std	Z+1, r25	; 0x01
    2c58:	80 83       	st	Z, r24
				_delay_ms(40);
				        i++;
    2c5a:	de 01       	movw	r26, r28
    2c5c:	af 51       	subi	r26, 0x1F	; 31
    2c5e:	bf 4f       	sbci	r27, 0xFF	; 255
    2c60:	fe 01       	movw	r30, r28
    2c62:	ef 51       	subi	r30, 0x1F	; 31
    2c64:	ff 4f       	sbci	r31, 0xFF	; 255
    2c66:	80 81       	ld	r24, Z
    2c68:	8f 5f       	subi	r24, 0xFF	; 255
    2c6a:	8c 93       	st	X, r24
	CLCD_VoidGoToXY(0,0);
	CLCD_u8SendString(" I play Football");
	_delay_ms(600);
	i=0;
	{
		while(i<16)
    2c6c:	fe 01       	movw	r30, r28
    2c6e:	ef 51       	subi	r30, 0x1F	; 31
    2c70:	ff 4f       	sbci	r31, 0xFF	; 255
    2c72:	80 81       	ld	r24, Z
    2c74:	80 31       	cpi	r24, 0x10	; 16
    2c76:	08 f4       	brcc	.+2      	; 0x2c7a <CLCD_voidHamoksha+0x177c>
    2c78:	66 ce       	rjmp	.-820    	; 0x2946 <CLCD_voidHamoksha+0x1448>

			}

	}

	CLCD_voidClear();
    2c7a:	0e 94 75 0a 	call	0x14ea	; 0x14ea <CLCD_voidClear>
	CLCD_VoidGoToXY(0,0);
    2c7e:	80 e0       	ldi	r24, 0x00	; 0
    2c80:	60 e0       	ldi	r22, 0x00	; 0
    2c82:	0e 94 09 0a 	call	0x1412	; 0x1412 <CLCD_VoidGoToXY>
	CLCD_u8SendString(" DON'T KILL ME");
    2c86:	88 e9       	ldi	r24, 0x98	; 152
    2c88:	90 e0       	ldi	r25, 0x00	; 0
    2c8a:	0e 94 4a 09 	call	0x1294	; 0x1294 <CLCD_u8SendString>
    2c8e:	fe 01       	movw	r30, r28
    2c90:	ed 5b       	subi	r30, 0xBD	; 189
    2c92:	ff 4f       	sbci	r31, 0xFF	; 255
    2c94:	80 e0       	ldi	r24, 0x00	; 0
    2c96:	90 e0       	ldi	r25, 0x00	; 0
    2c98:	a6 e1       	ldi	r26, 0x16	; 22
    2c9a:	b4 e4       	ldi	r27, 0x44	; 68
    2c9c:	80 83       	st	Z, r24
    2c9e:	91 83       	std	Z+1, r25	; 0x01
    2ca0:	a2 83       	std	Z+2, r26	; 0x02
    2ca2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ca4:	8e 01       	movw	r16, r28
    2ca6:	01 5c       	subi	r16, 0xC1	; 193
    2ca8:	1f 4f       	sbci	r17, 0xFF	; 255
    2caa:	fe 01       	movw	r30, r28
    2cac:	ed 5b       	subi	r30, 0xBD	; 189
    2cae:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb0:	60 81       	ld	r22, Z
    2cb2:	71 81       	ldd	r23, Z+1	; 0x01
    2cb4:	82 81       	ldd	r24, Z+2	; 0x02
    2cb6:	93 81       	ldd	r25, Z+3	; 0x03
    2cb8:	20 e0       	ldi	r18, 0x00	; 0
    2cba:	30 e0       	ldi	r19, 0x00	; 0
    2cbc:	4a e7       	ldi	r20, 0x7A	; 122
    2cbe:	55 e4       	ldi	r21, 0x45	; 69
    2cc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cc4:	dc 01       	movw	r26, r24
    2cc6:	cb 01       	movw	r24, r22
    2cc8:	f8 01       	movw	r30, r16
    2cca:	80 83       	st	Z, r24
    2ccc:	91 83       	std	Z+1, r25	; 0x01
    2cce:	a2 83       	std	Z+2, r26	; 0x02
    2cd0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2cd2:	fe 01       	movw	r30, r28
    2cd4:	ff 96       	adiw	r30, 0x3f	; 63
    2cd6:	60 81       	ld	r22, Z
    2cd8:	71 81       	ldd	r23, Z+1	; 0x01
    2cda:	82 81       	ldd	r24, Z+2	; 0x02
    2cdc:	93 81       	ldd	r25, Z+3	; 0x03
    2cde:	20 e0       	ldi	r18, 0x00	; 0
    2ce0:	30 e0       	ldi	r19, 0x00	; 0
    2ce2:	40 e8       	ldi	r20, 0x80	; 128
    2ce4:	5f e3       	ldi	r21, 0x3F	; 63
    2ce6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cea:	88 23       	and	r24, r24
    2cec:	2c f4       	brge	.+10     	; 0x2cf8 <CLCD_voidHamoksha+0x17fa>
		__ticks = 1;
    2cee:	81 e0       	ldi	r24, 0x01	; 1
    2cf0:	90 e0       	ldi	r25, 0x00	; 0
    2cf2:	9e af       	std	Y+62, r25	; 0x3e
    2cf4:	8d af       	std	Y+61, r24	; 0x3d
    2cf6:	46 c0       	rjmp	.+140    	; 0x2d84 <CLCD_voidHamoksha+0x1886>
	else if (__tmp > 65535)
    2cf8:	fe 01       	movw	r30, r28
    2cfa:	ff 96       	adiw	r30, 0x3f	; 63
    2cfc:	60 81       	ld	r22, Z
    2cfe:	71 81       	ldd	r23, Z+1	; 0x01
    2d00:	82 81       	ldd	r24, Z+2	; 0x02
    2d02:	93 81       	ldd	r25, Z+3	; 0x03
    2d04:	20 e0       	ldi	r18, 0x00	; 0
    2d06:	3f ef       	ldi	r19, 0xFF	; 255
    2d08:	4f e7       	ldi	r20, 0x7F	; 127
    2d0a:	57 e4       	ldi	r21, 0x47	; 71
    2d0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d10:	18 16       	cp	r1, r24
    2d12:	64 f5       	brge	.+88     	; 0x2d6c <CLCD_voidHamoksha+0x186e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d14:	fe 01       	movw	r30, r28
    2d16:	ed 5b       	subi	r30, 0xBD	; 189
    2d18:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1a:	60 81       	ld	r22, Z
    2d1c:	71 81       	ldd	r23, Z+1	; 0x01
    2d1e:	82 81       	ldd	r24, Z+2	; 0x02
    2d20:	93 81       	ldd	r25, Z+3	; 0x03
    2d22:	20 e0       	ldi	r18, 0x00	; 0
    2d24:	30 e0       	ldi	r19, 0x00	; 0
    2d26:	40 e2       	ldi	r20, 0x20	; 32
    2d28:	51 e4       	ldi	r21, 0x41	; 65
    2d2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d2e:	dc 01       	movw	r26, r24
    2d30:	cb 01       	movw	r24, r22
    2d32:	bc 01       	movw	r22, r24
    2d34:	cd 01       	movw	r24, r26
    2d36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d3a:	dc 01       	movw	r26, r24
    2d3c:	cb 01       	movw	r24, r22
    2d3e:	9e af       	std	Y+62, r25	; 0x3e
    2d40:	8d af       	std	Y+61, r24	; 0x3d
    2d42:	0f c0       	rjmp	.+30     	; 0x2d62 <CLCD_voidHamoksha+0x1864>
    2d44:	80 e9       	ldi	r24, 0x90	; 144
    2d46:	91 e0       	ldi	r25, 0x01	; 1
    2d48:	9c af       	std	Y+60, r25	; 0x3c
    2d4a:	8b af       	std	Y+59, r24	; 0x3b
    2d4c:	8b ad       	ldd	r24, Y+59	; 0x3b
    2d4e:	9c ad       	ldd	r25, Y+60	; 0x3c
    2d50:	01 97       	sbiw	r24, 0x01	; 1
    2d52:	f1 f7       	brne	.-4      	; 0x2d50 <CLCD_voidHamoksha+0x1852>
    2d54:	9c af       	std	Y+60, r25	; 0x3c
    2d56:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d58:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d5a:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d5c:	01 97       	sbiw	r24, 0x01	; 1
    2d5e:	9e af       	std	Y+62, r25	; 0x3e
    2d60:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d62:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d64:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d66:	00 97       	sbiw	r24, 0x00	; 0
    2d68:	69 f7       	brne	.-38     	; 0x2d44 <CLCD_voidHamoksha+0x1846>
    2d6a:	16 c0       	rjmp	.+44     	; 0x2d98 <CLCD_voidHamoksha+0x189a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d6c:	fe 01       	movw	r30, r28
    2d6e:	ff 96       	adiw	r30, 0x3f	; 63
    2d70:	60 81       	ld	r22, Z
    2d72:	71 81       	ldd	r23, Z+1	; 0x01
    2d74:	82 81       	ldd	r24, Z+2	; 0x02
    2d76:	93 81       	ldd	r25, Z+3	; 0x03
    2d78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d7c:	dc 01       	movw	r26, r24
    2d7e:	cb 01       	movw	r24, r22
    2d80:	9e af       	std	Y+62, r25	; 0x3e
    2d82:	8d af       	std	Y+61, r24	; 0x3d
    2d84:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d86:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d88:	9a af       	std	Y+58, r25	; 0x3a
    2d8a:	89 af       	std	Y+57, r24	; 0x39
    2d8c:	89 ad       	ldd	r24, Y+57	; 0x39
    2d8e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2d90:	01 97       	sbiw	r24, 0x01	; 1
    2d92:	f1 f7       	brne	.-4      	; 0x2d90 <CLCD_voidHamoksha+0x1892>
    2d94:	9a af       	std	Y+58, r25	; 0x3a
    2d96:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(600);
	CLCD_voidClear();
    2d98:	0e 94 75 0a 	call	0x14ea	; 0x14ea <CLCD_voidClear>
		CLCD_u8SpecialCharacter(0,Local_u8HamokshaPattern1,13,1);
    2d9c:	9e 01       	movw	r18, r28
    2d9e:	26 51       	subi	r18, 0x16	; 22
    2da0:	3f 4f       	sbci	r19, 0xFF	; 255
    2da2:	80 e0       	ldi	r24, 0x00	; 0
    2da4:	b9 01       	movw	r22, r18
    2da6:	4d e0       	ldi	r20, 0x0D	; 13
    2da8:	21 e0       	ldi	r18, 0x01	; 1
    2daa:	0e 94 29 0a 	call	0x1452	; 0x1452 <CLCD_u8SpecialCharacter>


			CLCD_u8SpecialCharacter(1,Local_u8HamokshaPattern6,0,1);
    2dae:	9e 01       	movw	r18, r28
    2db0:	26 5e       	subi	r18, 0xE6	; 230
    2db2:	3e 4f       	sbci	r19, 0xFE	; 254
    2db4:	81 e0       	ldi	r24, 0x01	; 1
    2db6:	b9 01       	movw	r22, r18
    2db8:	40 e0       	ldi	r20, 0x00	; 0
    2dba:	21 e0       	ldi	r18, 0x01	; 1
    2dbc:	0e 94 29 0a 	call	0x1452	; 0x1452 <CLCD_u8SpecialCharacter>
			CLCD_u8SpecialCharacter(2,Local_u8HamokshaPattern7,1,1);
    2dc0:	9e 01       	movw	r18, r28
    2dc2:	2e 5d       	subi	r18, 0xDE	; 222
    2dc4:	3e 4f       	sbci	r19, 0xFE	; 254
    2dc6:	82 e0       	ldi	r24, 0x02	; 2
    2dc8:	b9 01       	movw	r22, r18
    2dca:	41 e0       	ldi	r20, 0x01	; 1
    2dcc:	21 e0       	ldi	r18, 0x01	; 1
    2dce:	0e 94 29 0a 	call	0x1452	; 0x1452 <CLCD_u8SpecialCharacter>
			CLCD_u8SpecialCharacter(3,Local_u8HamokshaPattern7,2,1);
    2dd2:	9e 01       	movw	r18, r28
    2dd4:	2e 5d       	subi	r18, 0xDE	; 222
    2dd6:	3e 4f       	sbci	r19, 0xFE	; 254
    2dd8:	83 e0       	ldi	r24, 0x03	; 3
    2dda:	b9 01       	movw	r22, r18
    2ddc:	42 e0       	ldi	r20, 0x02	; 2
    2dde:	21 e0       	ldi	r18, 0x01	; 1
    2de0:	0e 94 29 0a 	call	0x1452	; 0x1452 <CLCD_u8SpecialCharacter>

			CLCD_u8SpecialCharacter(4,Local_u8HamokshaPattern8,4,1);
    2de4:	9e 01       	movw	r18, r28
    2de6:	26 5d       	subi	r18, 0xD6	; 214
    2de8:	3e 4f       	sbci	r19, 0xFE	; 254
    2dea:	84 e0       	ldi	r24, 0x04	; 4
    2dec:	b9 01       	movw	r22, r18
    2dee:	44 e0       	ldi	r20, 0x04	; 4
    2df0:	21 e0       	ldi	r18, 0x01	; 1
    2df2:	0e 94 29 0a 	call	0x1452	; 0x1452 <CLCD_u8SpecialCharacter>
    2df6:	80 e0       	ldi	r24, 0x00	; 0
    2df8:	90 e0       	ldi	r25, 0x00	; 0
    2dfa:	a0 ef       	ldi	r26, 0xF0	; 240
    2dfc:	b1 e4       	ldi	r27, 0x41	; 65
    2dfe:	8d ab       	std	Y+53, r24	; 0x35
    2e00:	9e ab       	std	Y+54, r25	; 0x36
    2e02:	af ab       	std	Y+55, r26	; 0x37
    2e04:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e06:	6d a9       	ldd	r22, Y+53	; 0x35
    2e08:	7e a9       	ldd	r23, Y+54	; 0x36
    2e0a:	8f a9       	ldd	r24, Y+55	; 0x37
    2e0c:	98 ad       	ldd	r25, Y+56	; 0x38
    2e0e:	20 e0       	ldi	r18, 0x00	; 0
    2e10:	30 e0       	ldi	r19, 0x00	; 0
    2e12:	4a e7       	ldi	r20, 0x7A	; 122
    2e14:	55 e4       	ldi	r21, 0x45	; 69
    2e16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e1a:	dc 01       	movw	r26, r24
    2e1c:	cb 01       	movw	r24, r22
    2e1e:	89 ab       	std	Y+49, r24	; 0x31
    2e20:	9a ab       	std	Y+50, r25	; 0x32
    2e22:	ab ab       	std	Y+51, r26	; 0x33
    2e24:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2e26:	69 a9       	ldd	r22, Y+49	; 0x31
    2e28:	7a a9       	ldd	r23, Y+50	; 0x32
    2e2a:	8b a9       	ldd	r24, Y+51	; 0x33
    2e2c:	9c a9       	ldd	r25, Y+52	; 0x34
    2e2e:	20 e0       	ldi	r18, 0x00	; 0
    2e30:	30 e0       	ldi	r19, 0x00	; 0
    2e32:	40 e8       	ldi	r20, 0x80	; 128
    2e34:	5f e3       	ldi	r21, 0x3F	; 63
    2e36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e3a:	88 23       	and	r24, r24
    2e3c:	2c f4       	brge	.+10     	; 0x2e48 <CLCD_voidHamoksha+0x194a>
		__ticks = 1;
    2e3e:	81 e0       	ldi	r24, 0x01	; 1
    2e40:	90 e0       	ldi	r25, 0x00	; 0
    2e42:	98 ab       	std	Y+48, r25	; 0x30
    2e44:	8f a7       	std	Y+47, r24	; 0x2f
    2e46:	3f c0       	rjmp	.+126    	; 0x2ec6 <CLCD_voidHamoksha+0x19c8>
	else if (__tmp > 65535)
    2e48:	69 a9       	ldd	r22, Y+49	; 0x31
    2e4a:	7a a9       	ldd	r23, Y+50	; 0x32
    2e4c:	8b a9       	ldd	r24, Y+51	; 0x33
    2e4e:	9c a9       	ldd	r25, Y+52	; 0x34
    2e50:	20 e0       	ldi	r18, 0x00	; 0
    2e52:	3f ef       	ldi	r19, 0xFF	; 255
    2e54:	4f e7       	ldi	r20, 0x7F	; 127
    2e56:	57 e4       	ldi	r21, 0x47	; 71
    2e58:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e5c:	18 16       	cp	r1, r24
    2e5e:	4c f5       	brge	.+82     	; 0x2eb2 <CLCD_voidHamoksha+0x19b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e60:	6d a9       	ldd	r22, Y+53	; 0x35
    2e62:	7e a9       	ldd	r23, Y+54	; 0x36
    2e64:	8f a9       	ldd	r24, Y+55	; 0x37
    2e66:	98 ad       	ldd	r25, Y+56	; 0x38
    2e68:	20 e0       	ldi	r18, 0x00	; 0
    2e6a:	30 e0       	ldi	r19, 0x00	; 0
    2e6c:	40 e2       	ldi	r20, 0x20	; 32
    2e6e:	51 e4       	ldi	r21, 0x41	; 65
    2e70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e74:	dc 01       	movw	r26, r24
    2e76:	cb 01       	movw	r24, r22
    2e78:	bc 01       	movw	r22, r24
    2e7a:	cd 01       	movw	r24, r26
    2e7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e80:	dc 01       	movw	r26, r24
    2e82:	cb 01       	movw	r24, r22
    2e84:	98 ab       	std	Y+48, r25	; 0x30
    2e86:	8f a7       	std	Y+47, r24	; 0x2f
    2e88:	0f c0       	rjmp	.+30     	; 0x2ea8 <CLCD_voidHamoksha+0x19aa>
    2e8a:	80 e9       	ldi	r24, 0x90	; 144
    2e8c:	91 e0       	ldi	r25, 0x01	; 1
    2e8e:	9e a7       	std	Y+46, r25	; 0x2e
    2e90:	8d a7       	std	Y+45, r24	; 0x2d
    2e92:	8d a5       	ldd	r24, Y+45	; 0x2d
    2e94:	9e a5       	ldd	r25, Y+46	; 0x2e
    2e96:	01 97       	sbiw	r24, 0x01	; 1
    2e98:	f1 f7       	brne	.-4      	; 0x2e96 <CLCD_voidHamoksha+0x1998>
    2e9a:	9e a7       	std	Y+46, r25	; 0x2e
    2e9c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e9e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ea0:	98 a9       	ldd	r25, Y+48	; 0x30
    2ea2:	01 97       	sbiw	r24, 0x01	; 1
    2ea4:	98 ab       	std	Y+48, r25	; 0x30
    2ea6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ea8:	8f a5       	ldd	r24, Y+47	; 0x2f
    2eaa:	98 a9       	ldd	r25, Y+48	; 0x30
    2eac:	00 97       	sbiw	r24, 0x00	; 0
    2eae:	69 f7       	brne	.-38     	; 0x2e8a <CLCD_voidHamoksha+0x198c>
    2eb0:	14 c0       	rjmp	.+40     	; 0x2eda <CLCD_voidHamoksha+0x19dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eb2:	69 a9       	ldd	r22, Y+49	; 0x31
    2eb4:	7a a9       	ldd	r23, Y+50	; 0x32
    2eb6:	8b a9       	ldd	r24, Y+51	; 0x33
    2eb8:	9c a9       	ldd	r25, Y+52	; 0x34
    2eba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ebe:	dc 01       	movw	r26, r24
    2ec0:	cb 01       	movw	r24, r22
    2ec2:	98 ab       	std	Y+48, r25	; 0x30
    2ec4:	8f a7       	std	Y+47, r24	; 0x2f
    2ec6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ec8:	98 a9       	ldd	r25, Y+48	; 0x30
    2eca:	9c a7       	std	Y+44, r25	; 0x2c
    2ecc:	8b a7       	std	Y+43, r24	; 0x2b
    2ece:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ed0:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ed2:	01 97       	sbiw	r24, 0x01	; 1
    2ed4:	f1 f7       	brne	.-4      	; 0x2ed2 <CLCD_voidHamoksha+0x19d4>
    2ed6:	9c a7       	std	Y+44, r25	; 0x2c
    2ed8:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(30);
			CLCD_u8SpecialCharacter(5,Local_u8HamokshaPattern8,7,1);
    2eda:	9e 01       	movw	r18, r28
    2edc:	26 5d       	subi	r18, 0xD6	; 214
    2ede:	3e 4f       	sbci	r19, 0xFE	; 254
    2ee0:	85 e0       	ldi	r24, 0x05	; 5
    2ee2:	b9 01       	movw	r22, r18
    2ee4:	47 e0       	ldi	r20, 0x07	; 7
    2ee6:	21 e0       	ldi	r18, 0x01	; 1
    2ee8:	0e 94 29 0a 	call	0x1452	; 0x1452 <CLCD_u8SpecialCharacter>
    2eec:	80 e0       	ldi	r24, 0x00	; 0
    2eee:	90 e0       	ldi	r25, 0x00	; 0
    2ef0:	a0 ef       	ldi	r26, 0xF0	; 240
    2ef2:	b1 e4       	ldi	r27, 0x41	; 65
    2ef4:	8f a3       	std	Y+39, r24	; 0x27
    2ef6:	98 a7       	std	Y+40, r25	; 0x28
    2ef8:	a9 a7       	std	Y+41, r26	; 0x29
    2efa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2efc:	6f a1       	ldd	r22, Y+39	; 0x27
    2efe:	78 a5       	ldd	r23, Y+40	; 0x28
    2f00:	89 a5       	ldd	r24, Y+41	; 0x29
    2f02:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f04:	20 e0       	ldi	r18, 0x00	; 0
    2f06:	30 e0       	ldi	r19, 0x00	; 0
    2f08:	4a e7       	ldi	r20, 0x7A	; 122
    2f0a:	55 e4       	ldi	r21, 0x45	; 69
    2f0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f10:	dc 01       	movw	r26, r24
    2f12:	cb 01       	movw	r24, r22
    2f14:	8b a3       	std	Y+35, r24	; 0x23
    2f16:	9c a3       	std	Y+36, r25	; 0x24
    2f18:	ad a3       	std	Y+37, r26	; 0x25
    2f1a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2f1c:	6b a1       	ldd	r22, Y+35	; 0x23
    2f1e:	7c a1       	ldd	r23, Y+36	; 0x24
    2f20:	8d a1       	ldd	r24, Y+37	; 0x25
    2f22:	9e a1       	ldd	r25, Y+38	; 0x26
    2f24:	20 e0       	ldi	r18, 0x00	; 0
    2f26:	30 e0       	ldi	r19, 0x00	; 0
    2f28:	40 e8       	ldi	r20, 0x80	; 128
    2f2a:	5f e3       	ldi	r21, 0x3F	; 63
    2f2c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f30:	88 23       	and	r24, r24
    2f32:	2c f4       	brge	.+10     	; 0x2f3e <CLCD_voidHamoksha+0x1a40>
		__ticks = 1;
    2f34:	81 e0       	ldi	r24, 0x01	; 1
    2f36:	90 e0       	ldi	r25, 0x00	; 0
    2f38:	9a a3       	std	Y+34, r25	; 0x22
    2f3a:	89 a3       	std	Y+33, r24	; 0x21
    2f3c:	3f c0       	rjmp	.+126    	; 0x2fbc <CLCD_voidHamoksha+0x1abe>
	else if (__tmp > 65535)
    2f3e:	6b a1       	ldd	r22, Y+35	; 0x23
    2f40:	7c a1       	ldd	r23, Y+36	; 0x24
    2f42:	8d a1       	ldd	r24, Y+37	; 0x25
    2f44:	9e a1       	ldd	r25, Y+38	; 0x26
    2f46:	20 e0       	ldi	r18, 0x00	; 0
    2f48:	3f ef       	ldi	r19, 0xFF	; 255
    2f4a:	4f e7       	ldi	r20, 0x7F	; 127
    2f4c:	57 e4       	ldi	r21, 0x47	; 71
    2f4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f52:	18 16       	cp	r1, r24
    2f54:	4c f5       	brge	.+82     	; 0x2fa8 <CLCD_voidHamoksha+0x1aaa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f56:	6f a1       	ldd	r22, Y+39	; 0x27
    2f58:	78 a5       	ldd	r23, Y+40	; 0x28
    2f5a:	89 a5       	ldd	r24, Y+41	; 0x29
    2f5c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f5e:	20 e0       	ldi	r18, 0x00	; 0
    2f60:	30 e0       	ldi	r19, 0x00	; 0
    2f62:	40 e2       	ldi	r20, 0x20	; 32
    2f64:	51 e4       	ldi	r21, 0x41	; 65
    2f66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f6a:	dc 01       	movw	r26, r24
    2f6c:	cb 01       	movw	r24, r22
    2f6e:	bc 01       	movw	r22, r24
    2f70:	cd 01       	movw	r24, r26
    2f72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f76:	dc 01       	movw	r26, r24
    2f78:	cb 01       	movw	r24, r22
    2f7a:	9a a3       	std	Y+34, r25	; 0x22
    2f7c:	89 a3       	std	Y+33, r24	; 0x21
    2f7e:	0f c0       	rjmp	.+30     	; 0x2f9e <CLCD_voidHamoksha+0x1aa0>
    2f80:	80 e9       	ldi	r24, 0x90	; 144
    2f82:	91 e0       	ldi	r25, 0x01	; 1
    2f84:	98 a3       	std	Y+32, r25	; 0x20
    2f86:	8f 8f       	std	Y+31, r24	; 0x1f
    2f88:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f8a:	98 a1       	ldd	r25, Y+32	; 0x20
    2f8c:	01 97       	sbiw	r24, 0x01	; 1
    2f8e:	f1 f7       	brne	.-4      	; 0x2f8c <CLCD_voidHamoksha+0x1a8e>
    2f90:	98 a3       	std	Y+32, r25	; 0x20
    2f92:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f94:	89 a1       	ldd	r24, Y+33	; 0x21
    2f96:	9a a1       	ldd	r25, Y+34	; 0x22
    2f98:	01 97       	sbiw	r24, 0x01	; 1
    2f9a:	9a a3       	std	Y+34, r25	; 0x22
    2f9c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f9e:	89 a1       	ldd	r24, Y+33	; 0x21
    2fa0:	9a a1       	ldd	r25, Y+34	; 0x22
    2fa2:	00 97       	sbiw	r24, 0x00	; 0
    2fa4:	69 f7       	brne	.-38     	; 0x2f80 <CLCD_voidHamoksha+0x1a82>
    2fa6:	14 c0       	rjmp	.+40     	; 0x2fd0 <CLCD_voidHamoksha+0x1ad2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fa8:	6b a1       	ldd	r22, Y+35	; 0x23
    2faa:	7c a1       	ldd	r23, Y+36	; 0x24
    2fac:	8d a1       	ldd	r24, Y+37	; 0x25
    2fae:	9e a1       	ldd	r25, Y+38	; 0x26
    2fb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fb4:	dc 01       	movw	r26, r24
    2fb6:	cb 01       	movw	r24, r22
    2fb8:	9a a3       	std	Y+34, r25	; 0x22
    2fba:	89 a3       	std	Y+33, r24	; 0x21
    2fbc:	89 a1       	ldd	r24, Y+33	; 0x21
    2fbe:	9a a1       	ldd	r25, Y+34	; 0x22
    2fc0:	9e 8f       	std	Y+30, r25	; 0x1e
    2fc2:	8d 8f       	std	Y+29, r24	; 0x1d
    2fc4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2fc6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2fc8:	01 97       	sbiw	r24, 0x01	; 1
    2fca:	f1 f7       	brne	.-4      	; 0x2fc8 <CLCD_voidHamoksha+0x1aca>
    2fcc:	9e 8f       	std	Y+30, r25	; 0x1e
    2fce:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(30);
			CLCD_u8SpecialCharacter(6,Local_u8HamokshaPattern8,9,1);
    2fd0:	9e 01       	movw	r18, r28
    2fd2:	26 5d       	subi	r18, 0xD6	; 214
    2fd4:	3e 4f       	sbci	r19, 0xFE	; 254
    2fd6:	86 e0       	ldi	r24, 0x06	; 6
    2fd8:	b9 01       	movw	r22, r18
    2fda:	49 e0       	ldi	r20, 0x09	; 9
    2fdc:	21 e0       	ldi	r18, 0x01	; 1
    2fde:	0e 94 29 0a 	call	0x1452	; 0x1452 <CLCD_u8SpecialCharacter>
    2fe2:	80 e0       	ldi	r24, 0x00	; 0
    2fe4:	90 e0       	ldi	r25, 0x00	; 0
    2fe6:	a0 ef       	ldi	r26, 0xF0	; 240
    2fe8:	b1 e4       	ldi	r27, 0x41	; 65
    2fea:	89 8f       	std	Y+25, r24	; 0x19
    2fec:	9a 8f       	std	Y+26, r25	; 0x1a
    2fee:	ab 8f       	std	Y+27, r26	; 0x1b
    2ff0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ff2:	69 8d       	ldd	r22, Y+25	; 0x19
    2ff4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ff6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ff8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ffa:	20 e0       	ldi	r18, 0x00	; 0
    2ffc:	30 e0       	ldi	r19, 0x00	; 0
    2ffe:	4a e7       	ldi	r20, 0x7A	; 122
    3000:	55 e4       	ldi	r21, 0x45	; 69
    3002:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3006:	dc 01       	movw	r26, r24
    3008:	cb 01       	movw	r24, r22
    300a:	8d 8b       	std	Y+21, r24	; 0x15
    300c:	9e 8b       	std	Y+22, r25	; 0x16
    300e:	af 8b       	std	Y+23, r26	; 0x17
    3010:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3012:	6d 89       	ldd	r22, Y+21	; 0x15
    3014:	7e 89       	ldd	r23, Y+22	; 0x16
    3016:	8f 89       	ldd	r24, Y+23	; 0x17
    3018:	98 8d       	ldd	r25, Y+24	; 0x18
    301a:	20 e0       	ldi	r18, 0x00	; 0
    301c:	30 e0       	ldi	r19, 0x00	; 0
    301e:	40 e8       	ldi	r20, 0x80	; 128
    3020:	5f e3       	ldi	r21, 0x3F	; 63
    3022:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3026:	88 23       	and	r24, r24
    3028:	2c f4       	brge	.+10     	; 0x3034 <CLCD_voidHamoksha+0x1b36>
		__ticks = 1;
    302a:	81 e0       	ldi	r24, 0x01	; 1
    302c:	90 e0       	ldi	r25, 0x00	; 0
    302e:	9c 8b       	std	Y+20, r25	; 0x14
    3030:	8b 8b       	std	Y+19, r24	; 0x13
    3032:	3f c0       	rjmp	.+126    	; 0x30b2 <CLCD_voidHamoksha+0x1bb4>
	else if (__tmp > 65535)
    3034:	6d 89       	ldd	r22, Y+21	; 0x15
    3036:	7e 89       	ldd	r23, Y+22	; 0x16
    3038:	8f 89       	ldd	r24, Y+23	; 0x17
    303a:	98 8d       	ldd	r25, Y+24	; 0x18
    303c:	20 e0       	ldi	r18, 0x00	; 0
    303e:	3f ef       	ldi	r19, 0xFF	; 255
    3040:	4f e7       	ldi	r20, 0x7F	; 127
    3042:	57 e4       	ldi	r21, 0x47	; 71
    3044:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3048:	18 16       	cp	r1, r24
    304a:	4c f5       	brge	.+82     	; 0x309e <CLCD_voidHamoksha+0x1ba0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    304c:	69 8d       	ldd	r22, Y+25	; 0x19
    304e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3050:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3052:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3054:	20 e0       	ldi	r18, 0x00	; 0
    3056:	30 e0       	ldi	r19, 0x00	; 0
    3058:	40 e2       	ldi	r20, 0x20	; 32
    305a:	51 e4       	ldi	r21, 0x41	; 65
    305c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3060:	dc 01       	movw	r26, r24
    3062:	cb 01       	movw	r24, r22
    3064:	bc 01       	movw	r22, r24
    3066:	cd 01       	movw	r24, r26
    3068:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    306c:	dc 01       	movw	r26, r24
    306e:	cb 01       	movw	r24, r22
    3070:	9c 8b       	std	Y+20, r25	; 0x14
    3072:	8b 8b       	std	Y+19, r24	; 0x13
    3074:	0f c0       	rjmp	.+30     	; 0x3094 <CLCD_voidHamoksha+0x1b96>
    3076:	80 e9       	ldi	r24, 0x90	; 144
    3078:	91 e0       	ldi	r25, 0x01	; 1
    307a:	9a 8b       	std	Y+18, r25	; 0x12
    307c:	89 8b       	std	Y+17, r24	; 0x11
    307e:	89 89       	ldd	r24, Y+17	; 0x11
    3080:	9a 89       	ldd	r25, Y+18	; 0x12
    3082:	01 97       	sbiw	r24, 0x01	; 1
    3084:	f1 f7       	brne	.-4      	; 0x3082 <CLCD_voidHamoksha+0x1b84>
    3086:	9a 8b       	std	Y+18, r25	; 0x12
    3088:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    308a:	8b 89       	ldd	r24, Y+19	; 0x13
    308c:	9c 89       	ldd	r25, Y+20	; 0x14
    308e:	01 97       	sbiw	r24, 0x01	; 1
    3090:	9c 8b       	std	Y+20, r25	; 0x14
    3092:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3094:	8b 89       	ldd	r24, Y+19	; 0x13
    3096:	9c 89       	ldd	r25, Y+20	; 0x14
    3098:	00 97       	sbiw	r24, 0x00	; 0
    309a:	69 f7       	brne	.-38     	; 0x3076 <CLCD_voidHamoksha+0x1b78>
    309c:	14 c0       	rjmp	.+40     	; 0x30c6 <CLCD_voidHamoksha+0x1bc8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    309e:	6d 89       	ldd	r22, Y+21	; 0x15
    30a0:	7e 89       	ldd	r23, Y+22	; 0x16
    30a2:	8f 89       	ldd	r24, Y+23	; 0x17
    30a4:	98 8d       	ldd	r25, Y+24	; 0x18
    30a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30aa:	dc 01       	movw	r26, r24
    30ac:	cb 01       	movw	r24, r22
    30ae:	9c 8b       	std	Y+20, r25	; 0x14
    30b0:	8b 8b       	std	Y+19, r24	; 0x13
    30b2:	8b 89       	ldd	r24, Y+19	; 0x13
    30b4:	9c 89       	ldd	r25, Y+20	; 0x14
    30b6:	98 8b       	std	Y+16, r25	; 0x10
    30b8:	8f 87       	std	Y+15, r24	; 0x0f
    30ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    30bc:	98 89       	ldd	r25, Y+16	; 0x10
    30be:	01 97       	sbiw	r24, 0x01	; 1
    30c0:	f1 f7       	brne	.-4      	; 0x30be <CLCD_voidHamoksha+0x1bc0>
    30c2:	98 8b       	std	Y+16, r25	; 0x10
    30c4:	8f 87       	std	Y+15, r24	; 0x0f
            _delay_ms(30);

			CLCD_u8SpecialCharacter(0,Local_u8HamokshaPattern0,13,1);
    30c6:	9e 01       	movw	r18, r28
    30c8:	2e 51       	subi	r18, 0x1E	; 30
    30ca:	3f 4f       	sbci	r19, 0xFF	; 255
    30cc:	80 e0       	ldi	r24, 0x00	; 0
    30ce:	b9 01       	movw	r22, r18
    30d0:	4d e0       	ldi	r20, 0x0D	; 13
    30d2:	21 e0       	ldi	r18, 0x01	; 1
    30d4:	0e 94 29 0a 	call	0x1452	; 0x1452 <CLCD_u8SpecialCharacter>
    30d8:	80 e0       	ldi	r24, 0x00	; 0
    30da:	90 e0       	ldi	r25, 0x00	; 0
    30dc:	a6 e9       	ldi	r26, 0x96	; 150
    30de:	b3 e4       	ldi	r27, 0x43	; 67
    30e0:	8b 87       	std	Y+11, r24	; 0x0b
    30e2:	9c 87       	std	Y+12, r25	; 0x0c
    30e4:	ad 87       	std	Y+13, r26	; 0x0d
    30e6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    30ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    30ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    30ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    30f0:	20 e0       	ldi	r18, 0x00	; 0
    30f2:	30 e0       	ldi	r19, 0x00	; 0
    30f4:	4a e7       	ldi	r20, 0x7A	; 122
    30f6:	55 e4       	ldi	r21, 0x45	; 69
    30f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30fc:	dc 01       	movw	r26, r24
    30fe:	cb 01       	movw	r24, r22
    3100:	8f 83       	std	Y+7, r24	; 0x07
    3102:	98 87       	std	Y+8, r25	; 0x08
    3104:	a9 87       	std	Y+9, r26	; 0x09
    3106:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3108:	6f 81       	ldd	r22, Y+7	; 0x07
    310a:	78 85       	ldd	r23, Y+8	; 0x08
    310c:	89 85       	ldd	r24, Y+9	; 0x09
    310e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3110:	20 e0       	ldi	r18, 0x00	; 0
    3112:	30 e0       	ldi	r19, 0x00	; 0
    3114:	40 e8       	ldi	r20, 0x80	; 128
    3116:	5f e3       	ldi	r21, 0x3F	; 63
    3118:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    311c:	88 23       	and	r24, r24
    311e:	2c f4       	brge	.+10     	; 0x312a <CLCD_voidHamoksha+0x1c2c>
		__ticks = 1;
    3120:	81 e0       	ldi	r24, 0x01	; 1
    3122:	90 e0       	ldi	r25, 0x00	; 0
    3124:	9e 83       	std	Y+6, r25	; 0x06
    3126:	8d 83       	std	Y+5, r24	; 0x05
    3128:	3f c0       	rjmp	.+126    	; 0x31a8 <CLCD_voidHamoksha+0x1caa>
	else if (__tmp > 65535)
    312a:	6f 81       	ldd	r22, Y+7	; 0x07
    312c:	78 85       	ldd	r23, Y+8	; 0x08
    312e:	89 85       	ldd	r24, Y+9	; 0x09
    3130:	9a 85       	ldd	r25, Y+10	; 0x0a
    3132:	20 e0       	ldi	r18, 0x00	; 0
    3134:	3f ef       	ldi	r19, 0xFF	; 255
    3136:	4f e7       	ldi	r20, 0x7F	; 127
    3138:	57 e4       	ldi	r21, 0x47	; 71
    313a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    313e:	18 16       	cp	r1, r24
    3140:	4c f5       	brge	.+82     	; 0x3194 <CLCD_voidHamoksha+0x1c96>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3142:	6b 85       	ldd	r22, Y+11	; 0x0b
    3144:	7c 85       	ldd	r23, Y+12	; 0x0c
    3146:	8d 85       	ldd	r24, Y+13	; 0x0d
    3148:	9e 85       	ldd	r25, Y+14	; 0x0e
    314a:	20 e0       	ldi	r18, 0x00	; 0
    314c:	30 e0       	ldi	r19, 0x00	; 0
    314e:	40 e2       	ldi	r20, 0x20	; 32
    3150:	51 e4       	ldi	r21, 0x41	; 65
    3152:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3156:	dc 01       	movw	r26, r24
    3158:	cb 01       	movw	r24, r22
    315a:	bc 01       	movw	r22, r24
    315c:	cd 01       	movw	r24, r26
    315e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3162:	dc 01       	movw	r26, r24
    3164:	cb 01       	movw	r24, r22
    3166:	9e 83       	std	Y+6, r25	; 0x06
    3168:	8d 83       	std	Y+5, r24	; 0x05
    316a:	0f c0       	rjmp	.+30     	; 0x318a <CLCD_voidHamoksha+0x1c8c>
    316c:	80 e9       	ldi	r24, 0x90	; 144
    316e:	91 e0       	ldi	r25, 0x01	; 1
    3170:	9c 83       	std	Y+4, r25	; 0x04
    3172:	8b 83       	std	Y+3, r24	; 0x03
    3174:	8b 81       	ldd	r24, Y+3	; 0x03
    3176:	9c 81       	ldd	r25, Y+4	; 0x04
    3178:	01 97       	sbiw	r24, 0x01	; 1
    317a:	f1 f7       	brne	.-4      	; 0x3178 <CLCD_voidHamoksha+0x1c7a>
    317c:	9c 83       	std	Y+4, r25	; 0x04
    317e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3180:	8d 81       	ldd	r24, Y+5	; 0x05
    3182:	9e 81       	ldd	r25, Y+6	; 0x06
    3184:	01 97       	sbiw	r24, 0x01	; 1
    3186:	9e 83       	std	Y+6, r25	; 0x06
    3188:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    318a:	8d 81       	ldd	r24, Y+5	; 0x05
    318c:	9e 81       	ldd	r25, Y+6	; 0x06
    318e:	00 97       	sbiw	r24, 0x00	; 0
    3190:	69 f7       	brne	.-38     	; 0x316c <CLCD_voidHamoksha+0x1c6e>
    3192:	14 c0       	rjmp	.+40     	; 0x31bc <CLCD_voidHamoksha+0x1cbe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3194:	6f 81       	ldd	r22, Y+7	; 0x07
    3196:	78 85       	ldd	r23, Y+8	; 0x08
    3198:	89 85       	ldd	r24, Y+9	; 0x09
    319a:	9a 85       	ldd	r25, Y+10	; 0x0a
    319c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31a0:	dc 01       	movw	r26, r24
    31a2:	cb 01       	movw	r24, r22
    31a4:	9e 83       	std	Y+6, r25	; 0x06
    31a6:	8d 83       	std	Y+5, r24	; 0x05
    31a8:	8d 81       	ldd	r24, Y+5	; 0x05
    31aa:	9e 81       	ldd	r25, Y+6	; 0x06
    31ac:	9a 83       	std	Y+2, r25	; 0x02
    31ae:	89 83       	std	Y+1, r24	; 0x01
    31b0:	89 81       	ldd	r24, Y+1	; 0x01
    31b2:	9a 81       	ldd	r25, Y+2	; 0x02
    31b4:	01 97       	sbiw	r24, 0x01	; 1
    31b6:	f1 f7       	brne	.-4      	; 0x31b4 <CLCD_voidHamoksha+0x1cb6>
    31b8:	9a 83       	std	Y+2, r25	; 0x02
    31ba:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(300);
		}
    31bc:	cd 59       	subi	r28, 0x9D	; 157
    31be:	de 4f       	sbci	r29, 0xFE	; 254
    31c0:	0f b6       	in	r0, 0x3f	; 63
    31c2:	f8 94       	cli
    31c4:	de bf       	out	0x3e, r29	; 62
    31c6:	0f be       	out	0x3f, r0	; 63
    31c8:	cd bf       	out	0x3d, r28	; 61
    31ca:	cf 91       	pop	r28
    31cc:	df 91       	pop	r29
    31ce:	1f 91       	pop	r17
    31d0:	0f 91       	pop	r16
    31d2:	08 95       	ret

000031d4 <CLCD_voidMyNameSin>:


void CLCD_voidMyNameSin()
{
    31d4:	df 93       	push	r29
    31d6:	cf 93       	push	r28
    31d8:	cd b7       	in	r28, 0x3d	; 61
    31da:	de b7       	in	r29, 0x3e	; 62
    31dc:	c1 55       	subi	r28, 0x51	; 81
    31de:	d0 40       	sbci	r29, 0x00	; 0
    31e0:	0f b6       	in	r0, 0x3f	; 63
    31e2:	f8 94       	cli
    31e4:	de bf       	out	0x3e, r29	; 62
    31e6:	0f be       	out	0x3f, r0	; 63
    31e8:	cd bf       	out	0x3d, r28	; 61
                        0b00000100,
                        0b00011111,
                        0b00000100,
                        0b00000100,
                        0b00000100,
                        0b00000100,0};
    31ea:	ce 01       	movw	r24, r28
    31ec:	41 96       	adiw	r24, 0x11	; 17
    31ee:	9a af       	std	Y+58, r25	; 0x3a
    31f0:	89 af       	std	Y+57, r24	; 0x39
    31f2:	ec e2       	ldi	r30, 0x2C	; 44
    31f4:	f1 e0       	ldi	r31, 0x01	; 1
    31f6:	fc af       	std	Y+60, r31	; 0x3c
    31f8:	eb af       	std	Y+59, r30	; 0x3b
    31fa:	f8 e0       	ldi	r31, 0x08	; 8
    31fc:	fd af       	std	Y+61, r31	; 0x3d
    31fe:	eb ad       	ldd	r30, Y+59	; 0x3b
    3200:	fc ad       	ldd	r31, Y+60	; 0x3c
    3202:	00 80       	ld	r0, Z
    3204:	8b ad       	ldd	r24, Y+59	; 0x3b
    3206:	9c ad       	ldd	r25, Y+60	; 0x3c
    3208:	01 96       	adiw	r24, 0x01	; 1
    320a:	9c af       	std	Y+60, r25	; 0x3c
    320c:	8b af       	std	Y+59, r24	; 0x3b
    320e:	e9 ad       	ldd	r30, Y+57	; 0x39
    3210:	fa ad       	ldd	r31, Y+58	; 0x3a
    3212:	00 82       	st	Z, r0
    3214:	89 ad       	ldd	r24, Y+57	; 0x39
    3216:	9a ad       	ldd	r25, Y+58	; 0x3a
    3218:	01 96       	adiw	r24, 0x01	; 1
    321a:	9a af       	std	Y+58, r25	; 0x3a
    321c:	89 af       	std	Y+57, r24	; 0x39
    321e:	9d ad       	ldd	r25, Y+61	; 0x3d
    3220:	91 50       	subi	r25, 0x01	; 1
    3222:	9d af       	std	Y+61, r25	; 0x3d
    3224:	ed ad       	ldd	r30, Y+61	; 0x3d
    3226:	ee 23       	and	r30, r30
    3228:	51 f7       	brne	.-44     	; 0x31fe <CLCD_voidMyNameSin+0x2a>
                              0b00000000,
                              0b00000111,
                              0b00000101,
                              0b00000111,
                              0b00011111,
                              0b00000000,0};
    322a:	ce 01       	movw	r24, r28
    322c:	49 96       	adiw	r24, 0x19	; 25
    322e:	9f af       	std	Y+63, r25	; 0x3f
    3230:	8e af       	std	Y+62, r24	; 0x3e
    3232:	e4 e2       	ldi	r30, 0x24	; 36
    3234:	f1 e0       	ldi	r31, 0x01	; 1
    3236:	22 96       	adiw	r28, 0x02	; 2
    3238:	ff af       	std	Y+63, r31	; 0x3f
    323a:	ee af       	std	Y+62, r30	; 0x3e
    323c:	22 97       	sbiw	r28, 0x02	; 2
    323e:	f8 e0       	ldi	r31, 0x08	; 8
    3240:	23 96       	adiw	r28, 0x03	; 3
    3242:	ff af       	std	Y+63, r31	; 0x3f
    3244:	23 97       	sbiw	r28, 0x03	; 3
    3246:	22 96       	adiw	r28, 0x02	; 2
    3248:	ee ad       	ldd	r30, Y+62	; 0x3e
    324a:	ff ad       	ldd	r31, Y+63	; 0x3f
    324c:	22 97       	sbiw	r28, 0x02	; 2
    324e:	00 80       	ld	r0, Z
    3250:	22 96       	adiw	r28, 0x02	; 2
    3252:	8e ad       	ldd	r24, Y+62	; 0x3e
    3254:	9f ad       	ldd	r25, Y+63	; 0x3f
    3256:	22 97       	sbiw	r28, 0x02	; 2
    3258:	01 96       	adiw	r24, 0x01	; 1
    325a:	22 96       	adiw	r28, 0x02	; 2
    325c:	9f af       	std	Y+63, r25	; 0x3f
    325e:	8e af       	std	Y+62, r24	; 0x3e
    3260:	22 97       	sbiw	r28, 0x02	; 2
    3262:	ee ad       	ldd	r30, Y+62	; 0x3e
    3264:	ff ad       	ldd	r31, Y+63	; 0x3f
    3266:	00 82       	st	Z, r0
    3268:	8e ad       	ldd	r24, Y+62	; 0x3e
    326a:	9f ad       	ldd	r25, Y+63	; 0x3f
    326c:	01 96       	adiw	r24, 0x01	; 1
    326e:	9f af       	std	Y+63, r25	; 0x3f
    3270:	8e af       	std	Y+62, r24	; 0x3e
    3272:	23 96       	adiw	r28, 0x03	; 3
    3274:	9f ad       	ldd	r25, Y+63	; 0x3f
    3276:	23 97       	sbiw	r28, 0x03	; 3
    3278:	91 50       	subi	r25, 0x01	; 1
    327a:	23 96       	adiw	r28, 0x03	; 3
    327c:	9f af       	std	Y+63, r25	; 0x3f
    327e:	23 97       	sbiw	r28, 0x03	; 3
    3280:	23 96       	adiw	r28, 0x03	; 3
    3282:	ef ad       	ldd	r30, Y+63	; 0x3f
    3284:	23 97       	sbiw	r28, 0x03	; 3
    3286:	ee 23       	and	r30, r30
    3288:	f1 f6       	brne	.-68     	; 0x3246 <CLCD_voidMyNameSin+0x72>
                              0b00000000,
                              0b00000000,
                              0b00000101,
                              0b00000001,
                              0b00011111,
                              0b00000000,0};
    328a:	ce 01       	movw	r24, r28
    328c:	81 96       	adiw	r24, 0x21	; 33
    328e:	25 96       	adiw	r28, 0x05	; 5
    3290:	9f af       	std	Y+63, r25	; 0x3f
    3292:	8e af       	std	Y+62, r24	; 0x3e
    3294:	25 97       	sbiw	r28, 0x05	; 5
    3296:	ec e1       	ldi	r30, 0x1C	; 28
    3298:	f1 e0       	ldi	r31, 0x01	; 1
    329a:	27 96       	adiw	r28, 0x07	; 7
    329c:	ff af       	std	Y+63, r31	; 0x3f
    329e:	ee af       	std	Y+62, r30	; 0x3e
    32a0:	27 97       	sbiw	r28, 0x07	; 7
    32a2:	f8 e0       	ldi	r31, 0x08	; 8
    32a4:	28 96       	adiw	r28, 0x08	; 8
    32a6:	ff af       	std	Y+63, r31	; 0x3f
    32a8:	28 97       	sbiw	r28, 0x08	; 8
    32aa:	27 96       	adiw	r28, 0x07	; 7
    32ac:	ee ad       	ldd	r30, Y+62	; 0x3e
    32ae:	ff ad       	ldd	r31, Y+63	; 0x3f
    32b0:	27 97       	sbiw	r28, 0x07	; 7
    32b2:	00 80       	ld	r0, Z
    32b4:	27 96       	adiw	r28, 0x07	; 7
    32b6:	8e ad       	ldd	r24, Y+62	; 0x3e
    32b8:	9f ad       	ldd	r25, Y+63	; 0x3f
    32ba:	27 97       	sbiw	r28, 0x07	; 7
    32bc:	01 96       	adiw	r24, 0x01	; 1
    32be:	27 96       	adiw	r28, 0x07	; 7
    32c0:	9f af       	std	Y+63, r25	; 0x3f
    32c2:	8e af       	std	Y+62, r24	; 0x3e
    32c4:	27 97       	sbiw	r28, 0x07	; 7
    32c6:	25 96       	adiw	r28, 0x05	; 5
    32c8:	ee ad       	ldd	r30, Y+62	; 0x3e
    32ca:	ff ad       	ldd	r31, Y+63	; 0x3f
    32cc:	25 97       	sbiw	r28, 0x05	; 5
    32ce:	00 82       	st	Z, r0
    32d0:	25 96       	adiw	r28, 0x05	; 5
    32d2:	8e ad       	ldd	r24, Y+62	; 0x3e
    32d4:	9f ad       	ldd	r25, Y+63	; 0x3f
    32d6:	25 97       	sbiw	r28, 0x05	; 5
    32d8:	01 96       	adiw	r24, 0x01	; 1
    32da:	25 96       	adiw	r28, 0x05	; 5
    32dc:	9f af       	std	Y+63, r25	; 0x3f
    32de:	8e af       	std	Y+62, r24	; 0x3e
    32e0:	25 97       	sbiw	r28, 0x05	; 5
    32e2:	28 96       	adiw	r28, 0x08	; 8
    32e4:	9f ad       	ldd	r25, Y+63	; 0x3f
    32e6:	28 97       	sbiw	r28, 0x08	; 8
    32e8:	91 50       	subi	r25, 0x01	; 1
    32ea:	28 96       	adiw	r28, 0x08	; 8
    32ec:	9f af       	std	Y+63, r25	; 0x3f
    32ee:	28 97       	sbiw	r28, 0x08	; 8
    32f0:	28 96       	adiw	r28, 0x08	; 8
    32f2:	ef ad       	ldd	r30, Y+63	; 0x3f
    32f4:	28 97       	sbiw	r28, 0x08	; 8
    32f6:	ee 23       	and	r30, r30
    32f8:	c1 f6       	brne	.-80     	; 0x32aa <CLCD_voidMyNameSin+0xd6>
                              0b00000000,
                              0b00000001,
                              0b00000001,
                              0b00011111,
                              0b00000000,
                              0b00001010,0};
    32fa:	ce 01       	movw	r24, r28
    32fc:	89 96       	adiw	r24, 0x29	; 41
    32fe:	2a 96       	adiw	r28, 0x0a	; 10
    3300:	9f af       	std	Y+63, r25	; 0x3f
    3302:	8e af       	std	Y+62, r24	; 0x3e
    3304:	2a 97       	sbiw	r28, 0x0a	; 10
    3306:	e4 e1       	ldi	r30, 0x14	; 20
    3308:	f1 e0       	ldi	r31, 0x01	; 1
    330a:	2c 96       	adiw	r28, 0x0c	; 12
    330c:	ff af       	std	Y+63, r31	; 0x3f
    330e:	ee af       	std	Y+62, r30	; 0x3e
    3310:	2c 97       	sbiw	r28, 0x0c	; 12
    3312:	f8 e0       	ldi	r31, 0x08	; 8
    3314:	2d 96       	adiw	r28, 0x0d	; 13
    3316:	ff af       	std	Y+63, r31	; 0x3f
    3318:	2d 97       	sbiw	r28, 0x0d	; 13
    331a:	2c 96       	adiw	r28, 0x0c	; 12
    331c:	ee ad       	ldd	r30, Y+62	; 0x3e
    331e:	ff ad       	ldd	r31, Y+63	; 0x3f
    3320:	2c 97       	sbiw	r28, 0x0c	; 12
    3322:	00 80       	ld	r0, Z
    3324:	2c 96       	adiw	r28, 0x0c	; 12
    3326:	8e ad       	ldd	r24, Y+62	; 0x3e
    3328:	9f ad       	ldd	r25, Y+63	; 0x3f
    332a:	2c 97       	sbiw	r28, 0x0c	; 12
    332c:	01 96       	adiw	r24, 0x01	; 1
    332e:	2c 96       	adiw	r28, 0x0c	; 12
    3330:	9f af       	std	Y+63, r25	; 0x3f
    3332:	8e af       	std	Y+62, r24	; 0x3e
    3334:	2c 97       	sbiw	r28, 0x0c	; 12
    3336:	2a 96       	adiw	r28, 0x0a	; 10
    3338:	ee ad       	ldd	r30, Y+62	; 0x3e
    333a:	ff ad       	ldd	r31, Y+63	; 0x3f
    333c:	2a 97       	sbiw	r28, 0x0a	; 10
    333e:	00 82       	st	Z, r0
    3340:	2a 96       	adiw	r28, 0x0a	; 10
    3342:	8e ad       	ldd	r24, Y+62	; 0x3e
    3344:	9f ad       	ldd	r25, Y+63	; 0x3f
    3346:	2a 97       	sbiw	r28, 0x0a	; 10
    3348:	01 96       	adiw	r24, 0x01	; 1
    334a:	2a 96       	adiw	r28, 0x0a	; 10
    334c:	9f af       	std	Y+63, r25	; 0x3f
    334e:	8e af       	std	Y+62, r24	; 0x3e
    3350:	2a 97       	sbiw	r28, 0x0a	; 10
    3352:	2d 96       	adiw	r28, 0x0d	; 13
    3354:	9f ad       	ldd	r25, Y+63	; 0x3f
    3356:	2d 97       	sbiw	r28, 0x0d	; 13
    3358:	91 50       	subi	r25, 0x01	; 1
    335a:	2d 96       	adiw	r28, 0x0d	; 13
    335c:	9f af       	std	Y+63, r25	; 0x3f
    335e:	2d 97       	sbiw	r28, 0x0d	; 13
    3360:	2d 96       	adiw	r28, 0x0d	; 13
    3362:	ef ad       	ldd	r30, Y+63	; 0x3f
    3364:	2d 97       	sbiw	r28, 0x0d	; 13
    3366:	ee 23       	and	r30, r30
    3368:	c1 f6       	brne	.-80     	; 0x331a <CLCD_voidMyNameSin+0x146>
                              0b00001111,
                              0b00001001,
                              0b00001111,
                              0b00000001,
                              0b00000000,0
                              };
    336a:	ce 01       	movw	r24, r28
    336c:	c1 96       	adiw	r24, 0x31	; 49
    336e:	2f 96       	adiw	r28, 0x0f	; 15
    3370:	9f af       	std	Y+63, r25	; 0x3f
    3372:	8e af       	std	Y+62, r24	; 0x3e
    3374:	2f 97       	sbiw	r28, 0x0f	; 15
    3376:	ec e0       	ldi	r30, 0x0C	; 12
    3378:	f1 e0       	ldi	r31, 0x01	; 1
    337a:	61 96       	adiw	r28, 0x11	; 17
    337c:	ff af       	std	Y+63, r31	; 0x3f
    337e:	ee af       	std	Y+62, r30	; 0x3e
    3380:	61 97       	sbiw	r28, 0x11	; 17
    3382:	f8 e0       	ldi	r31, 0x08	; 8
    3384:	62 96       	adiw	r28, 0x12	; 18
    3386:	ff af       	std	Y+63, r31	; 0x3f
    3388:	62 97       	sbiw	r28, 0x12	; 18
    338a:	61 96       	adiw	r28, 0x11	; 17
    338c:	ee ad       	ldd	r30, Y+62	; 0x3e
    338e:	ff ad       	ldd	r31, Y+63	; 0x3f
    3390:	61 97       	sbiw	r28, 0x11	; 17
    3392:	00 80       	ld	r0, Z
    3394:	61 96       	adiw	r28, 0x11	; 17
    3396:	8e ad       	ldd	r24, Y+62	; 0x3e
    3398:	9f ad       	ldd	r25, Y+63	; 0x3f
    339a:	61 97       	sbiw	r28, 0x11	; 17
    339c:	01 96       	adiw	r24, 0x01	; 1
    339e:	61 96       	adiw	r28, 0x11	; 17
    33a0:	9f af       	std	Y+63, r25	; 0x3f
    33a2:	8e af       	std	Y+62, r24	; 0x3e
    33a4:	61 97       	sbiw	r28, 0x11	; 17
    33a6:	2f 96       	adiw	r28, 0x0f	; 15
    33a8:	ee ad       	ldd	r30, Y+62	; 0x3e
    33aa:	ff ad       	ldd	r31, Y+63	; 0x3f
    33ac:	2f 97       	sbiw	r28, 0x0f	; 15
    33ae:	00 82       	st	Z, r0
    33b0:	2f 96       	adiw	r28, 0x0f	; 15
    33b2:	8e ad       	ldd	r24, Y+62	; 0x3e
    33b4:	9f ad       	ldd	r25, Y+63	; 0x3f
    33b6:	2f 97       	sbiw	r28, 0x0f	; 15
    33b8:	01 96       	adiw	r24, 0x01	; 1
    33ba:	2f 96       	adiw	r28, 0x0f	; 15
    33bc:	9f af       	std	Y+63, r25	; 0x3f
    33be:	8e af       	std	Y+62, r24	; 0x3e
    33c0:	2f 97       	sbiw	r28, 0x0f	; 15
    33c2:	62 96       	adiw	r28, 0x12	; 18
    33c4:	9f ad       	ldd	r25, Y+63	; 0x3f
    33c6:	62 97       	sbiw	r28, 0x12	; 18
    33c8:	91 50       	subi	r25, 0x01	; 1
    33ca:	62 96       	adiw	r28, 0x12	; 18
    33cc:	9f af       	std	Y+63, r25	; 0x3f
    33ce:	62 97       	sbiw	r28, 0x12	; 18
    33d0:	62 96       	adiw	r28, 0x12	; 18
    33d2:	ef ad       	ldd	r30, Y+63	; 0x3f
    33d4:	62 97       	sbiw	r28, 0x12	; 18
    33d6:	ee 23       	and	r30, r30
    33d8:	c1 f6       	brne	.-80     	; 0x338a <CLCD_voidMyNameSin+0x1b6>
   // sint8 j;
    for(uint8 i=15,j=0; (i>0 && j<2) ;i--,j++)
    33da:	8f e0       	ldi	r24, 0x0F	; 15
    33dc:	88 8b       	std	Y+16, r24	; 0x10
    33de:	1f 86       	std	Y+15, r1	; 0x0f
    33e0:	bc c0       	rjmp	.+376    	; 0x355a <CLCD_voidMyNameSin+0x386>
    {
	CLCD_u8SpecialCharacter(0,Local_u81letter,i--,j);
    33e2:	98 89       	ldd	r25, Y+16	; 0x10
    33e4:	88 89       	ldd	r24, Y+16	; 0x10
    33e6:	81 50       	subi	r24, 0x01	; 1
    33e8:	88 8b       	std	Y+16, r24	; 0x10
    33ea:	9e 01       	movw	r18, r28
    33ec:	2f 5e       	subi	r18, 0xEF	; 239
    33ee:	3f 4f       	sbci	r19, 0xFF	; 255
    33f0:	80 e0       	ldi	r24, 0x00	; 0
    33f2:	b9 01       	movw	r22, r18
    33f4:	49 2f       	mov	r20, r25
    33f6:	2f 85       	ldd	r18, Y+15	; 0x0f
    33f8:	0e 94 29 0a 	call	0x1452	; 0x1452 <CLCD_u8SpecialCharacter>
	CLCD_u8SpecialCharacter(1,Local_u82letter,i--,j);
    33fc:	98 89       	ldd	r25, Y+16	; 0x10
    33fe:	88 89       	ldd	r24, Y+16	; 0x10
    3400:	81 50       	subi	r24, 0x01	; 1
    3402:	88 8b       	std	Y+16, r24	; 0x10
    3404:	9e 01       	movw	r18, r28
    3406:	27 5e       	subi	r18, 0xE7	; 231
    3408:	3f 4f       	sbci	r19, 0xFF	; 255
    340a:	81 e0       	ldi	r24, 0x01	; 1
    340c:	b9 01       	movw	r22, r18
    340e:	49 2f       	mov	r20, r25
    3410:	2f 85       	ldd	r18, Y+15	; 0x0f
    3412:	0e 94 29 0a 	call	0x1452	; 0x1452 <CLCD_u8SpecialCharacter>
	CLCD_u8SpecialCharacter(2,Local_u83letter,i--,j);
    3416:	98 89       	ldd	r25, Y+16	; 0x10
    3418:	88 89       	ldd	r24, Y+16	; 0x10
    341a:	81 50       	subi	r24, 0x01	; 1
    341c:	88 8b       	std	Y+16, r24	; 0x10
    341e:	9e 01       	movw	r18, r28
    3420:	2f 5d       	subi	r18, 0xDF	; 223
    3422:	3f 4f       	sbci	r19, 0xFF	; 255
    3424:	82 e0       	ldi	r24, 0x02	; 2
    3426:	b9 01       	movw	r22, r18
    3428:	49 2f       	mov	r20, r25
    342a:	2f 85       	ldd	r18, Y+15	; 0x0f
    342c:	0e 94 29 0a 	call	0x1452	; 0x1452 <CLCD_u8SpecialCharacter>
	CLCD_u8SpecialCharacter(3,Local_u84letter,i--,j);
    3430:	98 89       	ldd	r25, Y+16	; 0x10
    3432:	88 89       	ldd	r24, Y+16	; 0x10
    3434:	81 50       	subi	r24, 0x01	; 1
    3436:	88 8b       	std	Y+16, r24	; 0x10
    3438:	9e 01       	movw	r18, r28
    343a:	27 5d       	subi	r18, 0xD7	; 215
    343c:	3f 4f       	sbci	r19, 0xFF	; 255
    343e:	83 e0       	ldi	r24, 0x03	; 3
    3440:	b9 01       	movw	r22, r18
    3442:	49 2f       	mov	r20, r25
    3444:	2f 85       	ldd	r18, Y+15	; 0x0f
    3446:	0e 94 29 0a 	call	0x1452	; 0x1452 <CLCD_u8SpecialCharacter>
	CLCD_u8SpecialCharacter(4,Local_u85letter,i,j);
    344a:	9e 01       	movw	r18, r28
    344c:	2f 5c       	subi	r18, 0xCF	; 207
    344e:	3f 4f       	sbci	r19, 0xFF	; 255
    3450:	84 e0       	ldi	r24, 0x04	; 4
    3452:	b9 01       	movw	r22, r18
    3454:	48 89       	ldd	r20, Y+16	; 0x10
    3456:	2f 85       	ldd	r18, Y+15	; 0x0f
    3458:	0e 94 29 0a 	call	0x1452	; 0x1452 <CLCD_u8SpecialCharacter>
    345c:	80 e0       	ldi	r24, 0x00	; 0
    345e:	90 e0       	ldi	r25, 0x00	; 0
    3460:	a0 ea       	ldi	r26, 0xA0	; 160
    3462:	b2 e4       	ldi	r27, 0x42	; 66
    3464:	8b 87       	std	Y+11, r24	; 0x0b
    3466:	9c 87       	std	Y+12, r25	; 0x0c
    3468:	ad 87       	std	Y+13, r26	; 0x0d
    346a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    346c:	6b 85       	ldd	r22, Y+11	; 0x0b
    346e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3470:	8d 85       	ldd	r24, Y+13	; 0x0d
    3472:	9e 85       	ldd	r25, Y+14	; 0x0e
    3474:	20 e0       	ldi	r18, 0x00	; 0
    3476:	30 e0       	ldi	r19, 0x00	; 0
    3478:	4a e7       	ldi	r20, 0x7A	; 122
    347a:	55 e4       	ldi	r21, 0x45	; 69
    347c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3480:	dc 01       	movw	r26, r24
    3482:	cb 01       	movw	r24, r22
    3484:	8f 83       	std	Y+7, r24	; 0x07
    3486:	98 87       	std	Y+8, r25	; 0x08
    3488:	a9 87       	std	Y+9, r26	; 0x09
    348a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    348c:	6f 81       	ldd	r22, Y+7	; 0x07
    348e:	78 85       	ldd	r23, Y+8	; 0x08
    3490:	89 85       	ldd	r24, Y+9	; 0x09
    3492:	9a 85       	ldd	r25, Y+10	; 0x0a
    3494:	20 e0       	ldi	r18, 0x00	; 0
    3496:	30 e0       	ldi	r19, 0x00	; 0
    3498:	40 e8       	ldi	r20, 0x80	; 128
    349a:	5f e3       	ldi	r21, 0x3F	; 63
    349c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34a0:	88 23       	and	r24, r24
    34a2:	2c f4       	brge	.+10     	; 0x34ae <CLCD_voidMyNameSin+0x2da>
		__ticks = 1;
    34a4:	81 e0       	ldi	r24, 0x01	; 1
    34a6:	90 e0       	ldi	r25, 0x00	; 0
    34a8:	9e 83       	std	Y+6, r25	; 0x06
    34aa:	8d 83       	std	Y+5, r24	; 0x05
    34ac:	3f c0       	rjmp	.+126    	; 0x352c <CLCD_voidMyNameSin+0x358>
	else if (__tmp > 65535)
    34ae:	6f 81       	ldd	r22, Y+7	; 0x07
    34b0:	78 85       	ldd	r23, Y+8	; 0x08
    34b2:	89 85       	ldd	r24, Y+9	; 0x09
    34b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    34b6:	20 e0       	ldi	r18, 0x00	; 0
    34b8:	3f ef       	ldi	r19, 0xFF	; 255
    34ba:	4f e7       	ldi	r20, 0x7F	; 127
    34bc:	57 e4       	ldi	r21, 0x47	; 71
    34be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    34c2:	18 16       	cp	r1, r24
    34c4:	4c f5       	brge	.+82     	; 0x3518 <CLCD_voidMyNameSin+0x344>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    34c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    34ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    34cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    34ce:	20 e0       	ldi	r18, 0x00	; 0
    34d0:	30 e0       	ldi	r19, 0x00	; 0
    34d2:	40 e2       	ldi	r20, 0x20	; 32
    34d4:	51 e4       	ldi	r21, 0x41	; 65
    34d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34da:	dc 01       	movw	r26, r24
    34dc:	cb 01       	movw	r24, r22
    34de:	bc 01       	movw	r22, r24
    34e0:	cd 01       	movw	r24, r26
    34e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34e6:	dc 01       	movw	r26, r24
    34e8:	cb 01       	movw	r24, r22
    34ea:	9e 83       	std	Y+6, r25	; 0x06
    34ec:	8d 83       	std	Y+5, r24	; 0x05
    34ee:	0f c0       	rjmp	.+30     	; 0x350e <CLCD_voidMyNameSin+0x33a>
    34f0:	80 e9       	ldi	r24, 0x90	; 144
    34f2:	91 e0       	ldi	r25, 0x01	; 1
    34f4:	9c 83       	std	Y+4, r25	; 0x04
    34f6:	8b 83       	std	Y+3, r24	; 0x03
    34f8:	8b 81       	ldd	r24, Y+3	; 0x03
    34fa:	9c 81       	ldd	r25, Y+4	; 0x04
    34fc:	01 97       	sbiw	r24, 0x01	; 1
    34fe:	f1 f7       	brne	.-4      	; 0x34fc <CLCD_voidMyNameSin+0x328>
    3500:	9c 83       	std	Y+4, r25	; 0x04
    3502:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3504:	8d 81       	ldd	r24, Y+5	; 0x05
    3506:	9e 81       	ldd	r25, Y+6	; 0x06
    3508:	01 97       	sbiw	r24, 0x01	; 1
    350a:	9e 83       	std	Y+6, r25	; 0x06
    350c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    350e:	8d 81       	ldd	r24, Y+5	; 0x05
    3510:	9e 81       	ldd	r25, Y+6	; 0x06
    3512:	00 97       	sbiw	r24, 0x00	; 0
    3514:	69 f7       	brne	.-38     	; 0x34f0 <CLCD_voidMyNameSin+0x31c>
    3516:	14 c0       	rjmp	.+40     	; 0x3540 <CLCD_voidMyNameSin+0x36c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3518:	6f 81       	ldd	r22, Y+7	; 0x07
    351a:	78 85       	ldd	r23, Y+8	; 0x08
    351c:	89 85       	ldd	r24, Y+9	; 0x09
    351e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3520:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3524:	dc 01       	movw	r26, r24
    3526:	cb 01       	movw	r24, r22
    3528:	9e 83       	std	Y+6, r25	; 0x06
    352a:	8d 83       	std	Y+5, r24	; 0x05
    352c:	8d 81       	ldd	r24, Y+5	; 0x05
    352e:	9e 81       	ldd	r25, Y+6	; 0x06
    3530:	9a 83       	std	Y+2, r25	; 0x02
    3532:	89 83       	std	Y+1, r24	; 0x01
    3534:	89 81       	ldd	r24, Y+1	; 0x01
    3536:	9a 81       	ldd	r25, Y+2	; 0x02
    3538:	01 97       	sbiw	r24, 0x01	; 1
    353a:	f1 f7       	brne	.-4      	; 0x3538 <CLCD_voidMyNameSin+0x364>
    353c:	9a 83       	std	Y+2, r25	; 0x02
    353e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(80);
	CLCD_voidClear();
    3540:	0e 94 75 0a 	call	0x14ea	; 0x14ea <CLCD_voidClear>
	if(j==1)
    3544:	8f 85       	ldd	r24, Y+15	; 0x0f
    3546:	81 30       	cpi	r24, 0x01	; 1
    3548:	11 f4       	brne	.+4      	; 0x354e <CLCD_voidMyNameSin+0x37a>
	{
		j=-1;
    354a:	8f ef       	ldi	r24, 0xFF	; 255
    354c:	8f 87       	std	Y+15, r24	; 0x0f
                              0b00001111,
                              0b00000001,
                              0b00000000,0
                              };
   // sint8 j;
    for(uint8 i=15,j=0; (i>0 && j<2) ;i--,j++)
    354e:	88 89       	ldd	r24, Y+16	; 0x10
    3550:	81 50       	subi	r24, 0x01	; 1
    3552:	88 8b       	std	Y+16, r24	; 0x10
    3554:	8f 85       	ldd	r24, Y+15	; 0x0f
    3556:	8f 5f       	subi	r24, 0xFF	; 255
    3558:	8f 87       	std	Y+15, r24	; 0x0f
    355a:	88 89       	ldd	r24, Y+16	; 0x10
    355c:	88 23       	and	r24, r24
    355e:	21 f0       	breq	.+8      	; 0x3568 <CLCD_voidMyNameSin+0x394>
    3560:	8f 85       	ldd	r24, Y+15	; 0x0f
    3562:	82 30       	cpi	r24, 0x02	; 2
    3564:	08 f4       	brcc	.+2      	; 0x3568 <CLCD_voidMyNameSin+0x394>
    3566:	3d cf       	rjmp	.-390    	; 0x33e2 <CLCD_voidMyNameSin+0x20e>
	}
    }



}
    3568:	cf 5a       	subi	r28, 0xAF	; 175
    356a:	df 4f       	sbci	r29, 0xFF	; 255
    356c:	0f b6       	in	r0, 0x3f	; 63
    356e:	f8 94       	cli
    3570:	de bf       	out	0x3e, r29	; 62
    3572:	0f be       	out	0x3f, r0	; 63
    3574:	cd bf       	out	0x3d, r28	; 61
    3576:	cf 91       	pop	r28
    3578:	df 91       	pop	r29
    357a:	08 95       	ret

0000357c <DIO_u8SetPinDirection>:
#include"DIO_interface.h"
#include"DIO_prv.h"
#include"DIO_cfg.h"
#include"DIO_reg.h"
uint8 DIO_u8SetPinDirection (uint8 Copy_u8Port,uint8 Copy_u8Pin,uint8 Copy_u8Direction )
{
    357c:	df 93       	push	r29
    357e:	cf 93       	push	r28
    3580:	cd b7       	in	r28, 0x3d	; 61
    3582:	de b7       	in	r29, 0x3e	; 62
    3584:	28 97       	sbiw	r28, 0x08	; 8
    3586:	0f b6       	in	r0, 0x3f	; 63
    3588:	f8 94       	cli
    358a:	de bf       	out	0x3e, r29	; 62
    358c:	0f be       	out	0x3f, r0	; 63
    358e:	cd bf       	out	0x3d, r28	; 61
    3590:	8a 83       	std	Y+2, r24	; 0x02
    3592:	6b 83       	std	Y+3, r22	; 0x03
    3594:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState=OK;
    3596:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=DIO_u8PIN7)
    3598:	8b 81       	ldd	r24, Y+3	; 0x03
    359a:	88 30       	cpi	r24, 0x08	; 8
    359c:	08 f0       	brcs	.+2      	; 0x35a0 <DIO_u8SetPinDirection+0x24>
    359e:	f4 c0       	rjmp	.+488    	; 0x3788 <DIO_u8SetPinDirection+0x20c>
	{
	if(Copy_u8Direction==DIO_u8PIN_INPUT)
    35a0:	8c 81       	ldd	r24, Y+4	; 0x04
    35a2:	88 23       	and	r24, r24
    35a4:	09 f0       	breq	.+2      	; 0x35a8 <DIO_u8SetPinDirection+0x2c>
    35a6:	77 c0       	rjmp	.+238    	; 0x3696 <DIO_u8SetPinDirection+0x11a>
	{
		switch(Copy_u8Port){
    35a8:	8a 81       	ldd	r24, Y+2	; 0x02
    35aa:	28 2f       	mov	r18, r24
    35ac:	30 e0       	ldi	r19, 0x00	; 0
    35ae:	38 87       	std	Y+8, r19	; 0x08
    35b0:	2f 83       	std	Y+7, r18	; 0x07
    35b2:	8f 81       	ldd	r24, Y+7	; 0x07
    35b4:	98 85       	ldd	r25, Y+8	; 0x08
    35b6:	81 30       	cpi	r24, 0x01	; 1
    35b8:	91 05       	cpc	r25, r1
    35ba:	59 f1       	breq	.+86     	; 0x3612 <DIO_u8SetPinDirection+0x96>
    35bc:	2f 81       	ldd	r18, Y+7	; 0x07
    35be:	38 85       	ldd	r19, Y+8	; 0x08
    35c0:	22 30       	cpi	r18, 0x02	; 2
    35c2:	31 05       	cpc	r19, r1
    35c4:	2c f4       	brge	.+10     	; 0x35d0 <DIO_u8SetPinDirection+0x54>
    35c6:	8f 81       	ldd	r24, Y+7	; 0x07
    35c8:	98 85       	ldd	r25, Y+8	; 0x08
    35ca:	00 97       	sbiw	r24, 0x00	; 0
    35cc:	69 f0       	breq	.+26     	; 0x35e8 <DIO_u8SetPinDirection+0x6c>
    35ce:	60 c0       	rjmp	.+192    	; 0x3690 <DIO_u8SetPinDirection+0x114>
    35d0:	2f 81       	ldd	r18, Y+7	; 0x07
    35d2:	38 85       	ldd	r19, Y+8	; 0x08
    35d4:	22 30       	cpi	r18, 0x02	; 2
    35d6:	31 05       	cpc	r19, r1
    35d8:	89 f1       	breq	.+98     	; 0x363c <DIO_u8SetPinDirection+0xc0>
    35da:	8f 81       	ldd	r24, Y+7	; 0x07
    35dc:	98 85       	ldd	r25, Y+8	; 0x08
    35de:	83 30       	cpi	r24, 0x03	; 3
    35e0:	91 05       	cpc	r25, r1
    35e2:	09 f4       	brne	.+2      	; 0x35e6 <DIO_u8SetPinDirection+0x6a>
    35e4:	40 c0       	rjmp	.+128    	; 0x3666 <DIO_u8SetPinDirection+0xea>
    35e6:	54 c0       	rjmp	.+168    	; 0x3690 <DIO_u8SetPinDirection+0x114>
		case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
    35e8:	aa e3       	ldi	r26, 0x3A	; 58
    35ea:	b0 e0       	ldi	r27, 0x00	; 0
    35ec:	ea e3       	ldi	r30, 0x3A	; 58
    35ee:	f0 e0       	ldi	r31, 0x00	; 0
    35f0:	80 81       	ld	r24, Z
    35f2:	48 2f       	mov	r20, r24
    35f4:	8b 81       	ldd	r24, Y+3	; 0x03
    35f6:	28 2f       	mov	r18, r24
    35f8:	30 e0       	ldi	r19, 0x00	; 0
    35fa:	81 e0       	ldi	r24, 0x01	; 1
    35fc:	90 e0       	ldi	r25, 0x00	; 0
    35fe:	02 2e       	mov	r0, r18
    3600:	02 c0       	rjmp	.+4      	; 0x3606 <DIO_u8SetPinDirection+0x8a>
    3602:	88 0f       	add	r24, r24
    3604:	99 1f       	adc	r25, r25
    3606:	0a 94       	dec	r0
    3608:	e2 f7       	brpl	.-8      	; 0x3602 <DIO_u8SetPinDirection+0x86>
    360a:	80 95       	com	r24
    360c:	84 23       	and	r24, r20
    360e:	8c 93       	st	X, r24
    3610:	bd c0       	rjmp	.+378    	; 0x378c <DIO_u8SetPinDirection+0x210>
		case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
    3612:	a7 e3       	ldi	r26, 0x37	; 55
    3614:	b0 e0       	ldi	r27, 0x00	; 0
    3616:	e7 e3       	ldi	r30, 0x37	; 55
    3618:	f0 e0       	ldi	r31, 0x00	; 0
    361a:	80 81       	ld	r24, Z
    361c:	48 2f       	mov	r20, r24
    361e:	8b 81       	ldd	r24, Y+3	; 0x03
    3620:	28 2f       	mov	r18, r24
    3622:	30 e0       	ldi	r19, 0x00	; 0
    3624:	81 e0       	ldi	r24, 0x01	; 1
    3626:	90 e0       	ldi	r25, 0x00	; 0
    3628:	02 2e       	mov	r0, r18
    362a:	02 c0       	rjmp	.+4      	; 0x3630 <DIO_u8SetPinDirection+0xb4>
    362c:	88 0f       	add	r24, r24
    362e:	99 1f       	adc	r25, r25
    3630:	0a 94       	dec	r0
    3632:	e2 f7       	brpl	.-8      	; 0x362c <DIO_u8SetPinDirection+0xb0>
    3634:	80 95       	com	r24
    3636:	84 23       	and	r24, r20
    3638:	8c 93       	st	X, r24
    363a:	a8 c0       	rjmp	.+336    	; 0x378c <DIO_u8SetPinDirection+0x210>
		case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); break;
    363c:	a4 e3       	ldi	r26, 0x34	; 52
    363e:	b0 e0       	ldi	r27, 0x00	; 0
    3640:	e4 e3       	ldi	r30, 0x34	; 52
    3642:	f0 e0       	ldi	r31, 0x00	; 0
    3644:	80 81       	ld	r24, Z
    3646:	48 2f       	mov	r20, r24
    3648:	8b 81       	ldd	r24, Y+3	; 0x03
    364a:	28 2f       	mov	r18, r24
    364c:	30 e0       	ldi	r19, 0x00	; 0
    364e:	81 e0       	ldi	r24, 0x01	; 1
    3650:	90 e0       	ldi	r25, 0x00	; 0
    3652:	02 2e       	mov	r0, r18
    3654:	02 c0       	rjmp	.+4      	; 0x365a <DIO_u8SetPinDirection+0xde>
    3656:	88 0f       	add	r24, r24
    3658:	99 1f       	adc	r25, r25
    365a:	0a 94       	dec	r0
    365c:	e2 f7       	brpl	.-8      	; 0x3656 <DIO_u8SetPinDirection+0xda>
    365e:	80 95       	com	r24
    3660:	84 23       	and	r24, r20
    3662:	8c 93       	st	X, r24
    3664:	93 c0       	rjmp	.+294    	; 0x378c <DIO_u8SetPinDirection+0x210>
		case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin); break;
    3666:	a1 e3       	ldi	r26, 0x31	; 49
    3668:	b0 e0       	ldi	r27, 0x00	; 0
    366a:	e1 e3       	ldi	r30, 0x31	; 49
    366c:	f0 e0       	ldi	r31, 0x00	; 0
    366e:	80 81       	ld	r24, Z
    3670:	48 2f       	mov	r20, r24
    3672:	8b 81       	ldd	r24, Y+3	; 0x03
    3674:	28 2f       	mov	r18, r24
    3676:	30 e0       	ldi	r19, 0x00	; 0
    3678:	81 e0       	ldi	r24, 0x01	; 1
    367a:	90 e0       	ldi	r25, 0x00	; 0
    367c:	02 2e       	mov	r0, r18
    367e:	02 c0       	rjmp	.+4      	; 0x3684 <DIO_u8SetPinDirection+0x108>
    3680:	88 0f       	add	r24, r24
    3682:	99 1f       	adc	r25, r25
    3684:	0a 94       	dec	r0
    3686:	e2 f7       	brpl	.-8      	; 0x3680 <DIO_u8SetPinDirection+0x104>
    3688:	80 95       	com	r24
    368a:	84 23       	and	r24, r20
    368c:	8c 93       	st	X, r24
    368e:	7e c0       	rjmp	.+252    	; 0x378c <DIO_u8SetPinDirection+0x210>
		default: Local_u8ErrorState=NOK;
    3690:	81 e0       	ldi	r24, 0x01	; 1
    3692:	89 83       	std	Y+1, r24	; 0x01
    3694:	7b c0       	rjmp	.+246    	; 0x378c <DIO_u8SetPinDirection+0x210>
		}
	}
	else if(Copy_u8Direction==DIO_u8PIN_OUTPUT)
    3696:	8c 81       	ldd	r24, Y+4	; 0x04
    3698:	81 30       	cpi	r24, 0x01	; 1
    369a:	09 f0       	breq	.+2      	; 0x369e <DIO_u8SetPinDirection+0x122>
    369c:	72 c0       	rjmp	.+228    	; 0x3782 <DIO_u8SetPinDirection+0x206>
	{
		switch(Copy_u8Port){
    369e:	8a 81       	ldd	r24, Y+2	; 0x02
    36a0:	28 2f       	mov	r18, r24
    36a2:	30 e0       	ldi	r19, 0x00	; 0
    36a4:	3e 83       	std	Y+6, r19	; 0x06
    36a6:	2d 83       	std	Y+5, r18	; 0x05
    36a8:	8d 81       	ldd	r24, Y+5	; 0x05
    36aa:	9e 81       	ldd	r25, Y+6	; 0x06
    36ac:	81 30       	cpi	r24, 0x01	; 1
    36ae:	91 05       	cpc	r25, r1
    36b0:	49 f1       	breq	.+82     	; 0x3704 <DIO_u8SetPinDirection+0x188>
    36b2:	2d 81       	ldd	r18, Y+5	; 0x05
    36b4:	3e 81       	ldd	r19, Y+6	; 0x06
    36b6:	22 30       	cpi	r18, 0x02	; 2
    36b8:	31 05       	cpc	r19, r1
    36ba:	2c f4       	brge	.+10     	; 0x36c6 <DIO_u8SetPinDirection+0x14a>
    36bc:	8d 81       	ldd	r24, Y+5	; 0x05
    36be:	9e 81       	ldd	r25, Y+6	; 0x06
    36c0:	00 97       	sbiw	r24, 0x00	; 0
    36c2:	61 f0       	breq	.+24     	; 0x36dc <DIO_u8SetPinDirection+0x160>
    36c4:	5b c0       	rjmp	.+182    	; 0x377c <DIO_u8SetPinDirection+0x200>
    36c6:	2d 81       	ldd	r18, Y+5	; 0x05
    36c8:	3e 81       	ldd	r19, Y+6	; 0x06
    36ca:	22 30       	cpi	r18, 0x02	; 2
    36cc:	31 05       	cpc	r19, r1
    36ce:	71 f1       	breq	.+92     	; 0x372c <DIO_u8SetPinDirection+0x1b0>
    36d0:	8d 81       	ldd	r24, Y+5	; 0x05
    36d2:	9e 81       	ldd	r25, Y+6	; 0x06
    36d4:	83 30       	cpi	r24, 0x03	; 3
    36d6:	91 05       	cpc	r25, r1
    36d8:	e9 f1       	breq	.+122    	; 0x3754 <DIO_u8SetPinDirection+0x1d8>
    36da:	50 c0       	rjmp	.+160    	; 0x377c <DIO_u8SetPinDirection+0x200>
		case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
    36dc:	aa e3       	ldi	r26, 0x3A	; 58
    36de:	b0 e0       	ldi	r27, 0x00	; 0
    36e0:	ea e3       	ldi	r30, 0x3A	; 58
    36e2:	f0 e0       	ldi	r31, 0x00	; 0
    36e4:	80 81       	ld	r24, Z
    36e6:	48 2f       	mov	r20, r24
    36e8:	8b 81       	ldd	r24, Y+3	; 0x03
    36ea:	28 2f       	mov	r18, r24
    36ec:	30 e0       	ldi	r19, 0x00	; 0
    36ee:	81 e0       	ldi	r24, 0x01	; 1
    36f0:	90 e0       	ldi	r25, 0x00	; 0
    36f2:	02 2e       	mov	r0, r18
    36f4:	02 c0       	rjmp	.+4      	; 0x36fa <DIO_u8SetPinDirection+0x17e>
    36f6:	88 0f       	add	r24, r24
    36f8:	99 1f       	adc	r25, r25
    36fa:	0a 94       	dec	r0
    36fc:	e2 f7       	brpl	.-8      	; 0x36f6 <DIO_u8SetPinDirection+0x17a>
    36fe:	84 2b       	or	r24, r20
    3700:	8c 93       	st	X, r24
    3702:	44 c0       	rjmp	.+136    	; 0x378c <DIO_u8SetPinDirection+0x210>
		case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
    3704:	a7 e3       	ldi	r26, 0x37	; 55
    3706:	b0 e0       	ldi	r27, 0x00	; 0
    3708:	e7 e3       	ldi	r30, 0x37	; 55
    370a:	f0 e0       	ldi	r31, 0x00	; 0
    370c:	80 81       	ld	r24, Z
    370e:	48 2f       	mov	r20, r24
    3710:	8b 81       	ldd	r24, Y+3	; 0x03
    3712:	28 2f       	mov	r18, r24
    3714:	30 e0       	ldi	r19, 0x00	; 0
    3716:	81 e0       	ldi	r24, 0x01	; 1
    3718:	90 e0       	ldi	r25, 0x00	; 0
    371a:	02 2e       	mov	r0, r18
    371c:	02 c0       	rjmp	.+4      	; 0x3722 <DIO_u8SetPinDirection+0x1a6>
    371e:	88 0f       	add	r24, r24
    3720:	99 1f       	adc	r25, r25
    3722:	0a 94       	dec	r0
    3724:	e2 f7       	brpl	.-8      	; 0x371e <DIO_u8SetPinDirection+0x1a2>
    3726:	84 2b       	or	r24, r20
    3728:	8c 93       	st	X, r24
    372a:	30 c0       	rjmp	.+96     	; 0x378c <DIO_u8SetPinDirection+0x210>
		case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin); break;
    372c:	a4 e3       	ldi	r26, 0x34	; 52
    372e:	b0 e0       	ldi	r27, 0x00	; 0
    3730:	e4 e3       	ldi	r30, 0x34	; 52
    3732:	f0 e0       	ldi	r31, 0x00	; 0
    3734:	80 81       	ld	r24, Z
    3736:	48 2f       	mov	r20, r24
    3738:	8b 81       	ldd	r24, Y+3	; 0x03
    373a:	28 2f       	mov	r18, r24
    373c:	30 e0       	ldi	r19, 0x00	; 0
    373e:	81 e0       	ldi	r24, 0x01	; 1
    3740:	90 e0       	ldi	r25, 0x00	; 0
    3742:	02 2e       	mov	r0, r18
    3744:	02 c0       	rjmp	.+4      	; 0x374a <DIO_u8SetPinDirection+0x1ce>
    3746:	88 0f       	add	r24, r24
    3748:	99 1f       	adc	r25, r25
    374a:	0a 94       	dec	r0
    374c:	e2 f7       	brpl	.-8      	; 0x3746 <DIO_u8SetPinDirection+0x1ca>
    374e:	84 2b       	or	r24, r20
    3750:	8c 93       	st	X, r24
    3752:	1c c0       	rjmp	.+56     	; 0x378c <DIO_u8SetPinDirection+0x210>
		case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin); break;
    3754:	a1 e3       	ldi	r26, 0x31	; 49
    3756:	b0 e0       	ldi	r27, 0x00	; 0
    3758:	e1 e3       	ldi	r30, 0x31	; 49
    375a:	f0 e0       	ldi	r31, 0x00	; 0
    375c:	80 81       	ld	r24, Z
    375e:	48 2f       	mov	r20, r24
    3760:	8b 81       	ldd	r24, Y+3	; 0x03
    3762:	28 2f       	mov	r18, r24
    3764:	30 e0       	ldi	r19, 0x00	; 0
    3766:	81 e0       	ldi	r24, 0x01	; 1
    3768:	90 e0       	ldi	r25, 0x00	; 0
    376a:	02 2e       	mov	r0, r18
    376c:	02 c0       	rjmp	.+4      	; 0x3772 <DIO_u8SetPinDirection+0x1f6>
    376e:	88 0f       	add	r24, r24
    3770:	99 1f       	adc	r25, r25
    3772:	0a 94       	dec	r0
    3774:	e2 f7       	brpl	.-8      	; 0x376e <DIO_u8SetPinDirection+0x1f2>
    3776:	84 2b       	or	r24, r20
    3778:	8c 93       	st	X, r24
    377a:	08 c0       	rjmp	.+16     	; 0x378c <DIO_u8SetPinDirection+0x210>
		default: Local_u8ErrorState=NOK;
    377c:	81 e0       	ldi	r24, 0x01	; 1
    377e:	89 83       	std	Y+1, r24	; 0x01
    3780:	05 c0       	rjmp	.+10     	; 0x378c <DIO_u8SetPinDirection+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=NOK;
    3782:	81 e0       	ldi	r24, 0x01	; 1
    3784:	89 83       	std	Y+1, r24	; 0x01
    3786:	02 c0       	rjmp	.+4      	; 0x378c <DIO_u8SetPinDirection+0x210>
	}
	}
	else
	{
		//PIN NUMBER IS INVALID
		Local_u8ErrorState=NOK;
    3788:	81 e0       	ldi	r24, 0x01	; 1
    378a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    378c:	89 81       	ldd	r24, Y+1	; 0x01

}
    378e:	28 96       	adiw	r28, 0x08	; 8
    3790:	0f b6       	in	r0, 0x3f	; 63
    3792:	f8 94       	cli
    3794:	de bf       	out	0x3e, r29	; 62
    3796:	0f be       	out	0x3f, r0	; 63
    3798:	cd bf       	out	0x3d, r28	; 61
    379a:	cf 91       	pop	r28
    379c:	df 91       	pop	r29
    379e:	08 95       	ret

000037a0 <DIO_u8SetPinValue>:

uint8 DIO_u8SetPinValue (uint8 Copy_u8port,uint8 Copy_u8Pin,uint8 Copy_u8Value )
{
    37a0:	df 93       	push	r29
    37a2:	cf 93       	push	r28
    37a4:	cd b7       	in	r28, 0x3d	; 61
    37a6:	de b7       	in	r29, 0x3e	; 62
    37a8:	28 97       	sbiw	r28, 0x08	; 8
    37aa:	0f b6       	in	r0, 0x3f	; 63
    37ac:	f8 94       	cli
    37ae:	de bf       	out	0x3e, r29	; 62
    37b0:	0f be       	out	0x3f, r0	; 63
    37b2:	cd bf       	out	0x3d, r28	; 61
    37b4:	8a 83       	std	Y+2, r24	; 0x02
    37b6:	6b 83       	std	Y+3, r22	; 0x03
    37b8:	4c 83       	std	Y+4, r20	; 0x04
     uint8 Local_u8ErrorState=OK;
    37ba:	19 82       	std	Y+1, r1	; 0x01
    if(Copy_u8Value == DIO_u8PIN_LOW){
    37bc:	8c 81       	ldd	r24, Y+4	; 0x04
    37be:	88 23       	and	r24, r24
    37c0:	09 f0       	breq	.+2      	; 0x37c4 <DIO_u8SetPinValue+0x24>
    37c2:	77 c0       	rjmp	.+238    	; 0x38b2 <DIO_u8SetPinValue+0x112>
    	switch(Copy_u8port){
    37c4:	8a 81       	ldd	r24, Y+2	; 0x02
    37c6:	28 2f       	mov	r18, r24
    37c8:	30 e0       	ldi	r19, 0x00	; 0
    37ca:	38 87       	std	Y+8, r19	; 0x08
    37cc:	2f 83       	std	Y+7, r18	; 0x07
    37ce:	8f 81       	ldd	r24, Y+7	; 0x07
    37d0:	98 85       	ldd	r25, Y+8	; 0x08
    37d2:	81 30       	cpi	r24, 0x01	; 1
    37d4:	91 05       	cpc	r25, r1
    37d6:	59 f1       	breq	.+86     	; 0x382e <DIO_u8SetPinValue+0x8e>
    37d8:	2f 81       	ldd	r18, Y+7	; 0x07
    37da:	38 85       	ldd	r19, Y+8	; 0x08
    37dc:	22 30       	cpi	r18, 0x02	; 2
    37de:	31 05       	cpc	r19, r1
    37e0:	2c f4       	brge	.+10     	; 0x37ec <DIO_u8SetPinValue+0x4c>
    37e2:	8f 81       	ldd	r24, Y+7	; 0x07
    37e4:	98 85       	ldd	r25, Y+8	; 0x08
    37e6:	00 97       	sbiw	r24, 0x00	; 0
    37e8:	69 f0       	breq	.+26     	; 0x3804 <DIO_u8SetPinValue+0x64>
    37ea:	60 c0       	rjmp	.+192    	; 0x38ac <DIO_u8SetPinValue+0x10c>
    37ec:	2f 81       	ldd	r18, Y+7	; 0x07
    37ee:	38 85       	ldd	r19, Y+8	; 0x08
    37f0:	22 30       	cpi	r18, 0x02	; 2
    37f2:	31 05       	cpc	r19, r1
    37f4:	89 f1       	breq	.+98     	; 0x3858 <DIO_u8SetPinValue+0xb8>
    37f6:	8f 81       	ldd	r24, Y+7	; 0x07
    37f8:	98 85       	ldd	r25, Y+8	; 0x08
    37fa:	83 30       	cpi	r24, 0x03	; 3
    37fc:	91 05       	cpc	r25, r1
    37fe:	09 f4       	brne	.+2      	; 0x3802 <DIO_u8SetPinValue+0x62>
    3800:	40 c0       	rjmp	.+128    	; 0x3882 <DIO_u8SetPinValue+0xe2>
    3802:	54 c0       	rjmp	.+168    	; 0x38ac <DIO_u8SetPinValue+0x10c>
    	        case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
    3804:	ab e3       	ldi	r26, 0x3B	; 59
    3806:	b0 e0       	ldi	r27, 0x00	; 0
    3808:	eb e3       	ldi	r30, 0x3B	; 59
    380a:	f0 e0       	ldi	r31, 0x00	; 0
    380c:	80 81       	ld	r24, Z
    380e:	48 2f       	mov	r20, r24
    3810:	8b 81       	ldd	r24, Y+3	; 0x03
    3812:	28 2f       	mov	r18, r24
    3814:	30 e0       	ldi	r19, 0x00	; 0
    3816:	81 e0       	ldi	r24, 0x01	; 1
    3818:	90 e0       	ldi	r25, 0x00	; 0
    381a:	02 2e       	mov	r0, r18
    381c:	02 c0       	rjmp	.+4      	; 0x3822 <DIO_u8SetPinValue+0x82>
    381e:	88 0f       	add	r24, r24
    3820:	99 1f       	adc	r25, r25
    3822:	0a 94       	dec	r0
    3824:	e2 f7       	brpl	.-8      	; 0x381e <DIO_u8SetPinValue+0x7e>
    3826:	80 95       	com	r24
    3828:	84 23       	and	r24, r20
    382a:	8c 93       	st	X, r24
    382c:	ba c0       	rjmp	.+372    	; 0x39a2 <DIO_u8SetPinValue+0x202>
    			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
    382e:	a8 e3       	ldi	r26, 0x38	; 56
    3830:	b0 e0       	ldi	r27, 0x00	; 0
    3832:	e8 e3       	ldi	r30, 0x38	; 56
    3834:	f0 e0       	ldi	r31, 0x00	; 0
    3836:	80 81       	ld	r24, Z
    3838:	48 2f       	mov	r20, r24
    383a:	8b 81       	ldd	r24, Y+3	; 0x03
    383c:	28 2f       	mov	r18, r24
    383e:	30 e0       	ldi	r19, 0x00	; 0
    3840:	81 e0       	ldi	r24, 0x01	; 1
    3842:	90 e0       	ldi	r25, 0x00	; 0
    3844:	02 2e       	mov	r0, r18
    3846:	02 c0       	rjmp	.+4      	; 0x384c <DIO_u8SetPinValue+0xac>
    3848:	88 0f       	add	r24, r24
    384a:	99 1f       	adc	r25, r25
    384c:	0a 94       	dec	r0
    384e:	e2 f7       	brpl	.-8      	; 0x3848 <DIO_u8SetPinValue+0xa8>
    3850:	80 95       	com	r24
    3852:	84 23       	and	r24, r20
    3854:	8c 93       	st	X, r24
    3856:	a5 c0       	rjmp	.+330    	; 0x39a2 <DIO_u8SetPinValue+0x202>
    			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
    3858:	a5 e3       	ldi	r26, 0x35	; 53
    385a:	b0 e0       	ldi	r27, 0x00	; 0
    385c:	e5 e3       	ldi	r30, 0x35	; 53
    385e:	f0 e0       	ldi	r31, 0x00	; 0
    3860:	80 81       	ld	r24, Z
    3862:	48 2f       	mov	r20, r24
    3864:	8b 81       	ldd	r24, Y+3	; 0x03
    3866:	28 2f       	mov	r18, r24
    3868:	30 e0       	ldi	r19, 0x00	; 0
    386a:	81 e0       	ldi	r24, 0x01	; 1
    386c:	90 e0       	ldi	r25, 0x00	; 0
    386e:	02 2e       	mov	r0, r18
    3870:	02 c0       	rjmp	.+4      	; 0x3876 <DIO_u8SetPinValue+0xd6>
    3872:	88 0f       	add	r24, r24
    3874:	99 1f       	adc	r25, r25
    3876:	0a 94       	dec	r0
    3878:	e2 f7       	brpl	.-8      	; 0x3872 <DIO_u8SetPinValue+0xd2>
    387a:	80 95       	com	r24
    387c:	84 23       	and	r24, r20
    387e:	8c 93       	st	X, r24
    3880:	90 c0       	rjmp	.+288    	; 0x39a2 <DIO_u8SetPinValue+0x202>
    			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
    3882:	a2 e3       	ldi	r26, 0x32	; 50
    3884:	b0 e0       	ldi	r27, 0x00	; 0
    3886:	e2 e3       	ldi	r30, 0x32	; 50
    3888:	f0 e0       	ldi	r31, 0x00	; 0
    388a:	80 81       	ld	r24, Z
    388c:	48 2f       	mov	r20, r24
    388e:	8b 81       	ldd	r24, Y+3	; 0x03
    3890:	28 2f       	mov	r18, r24
    3892:	30 e0       	ldi	r19, 0x00	; 0
    3894:	81 e0       	ldi	r24, 0x01	; 1
    3896:	90 e0       	ldi	r25, 0x00	; 0
    3898:	02 2e       	mov	r0, r18
    389a:	02 c0       	rjmp	.+4      	; 0x38a0 <DIO_u8SetPinValue+0x100>
    389c:	88 0f       	add	r24, r24
    389e:	99 1f       	adc	r25, r25
    38a0:	0a 94       	dec	r0
    38a2:	e2 f7       	brpl	.-8      	; 0x389c <DIO_u8SetPinValue+0xfc>
    38a4:	80 95       	com	r24
    38a6:	84 23       	and	r24, r20
    38a8:	8c 93       	st	X, r24
    38aa:	7b c0       	rjmp	.+246    	; 0x39a2 <DIO_u8SetPinValue+0x202>
    			default: Local_u8ErrorState=NOK;
    38ac:	81 e0       	ldi	r24, 0x01	; 1
    38ae:	89 83       	std	Y+1, r24	; 0x01
    38b0:	78 c0       	rjmp	.+240    	; 0x39a2 <DIO_u8SetPinValue+0x202>
    	}
    }
    else if(Copy_u8Value == DIO_u8PIN_HIGH){
    38b2:	8c 81       	ldd	r24, Y+4	; 0x04
    38b4:	81 30       	cpi	r24, 0x01	; 1
    38b6:	09 f0       	breq	.+2      	; 0x38ba <DIO_u8SetPinValue+0x11a>
    38b8:	72 c0       	rjmp	.+228    	; 0x399e <DIO_u8SetPinValue+0x1fe>
    	switch(Copy_u8port){
    38ba:	8a 81       	ldd	r24, Y+2	; 0x02
    38bc:	28 2f       	mov	r18, r24
    38be:	30 e0       	ldi	r19, 0x00	; 0
    38c0:	3e 83       	std	Y+6, r19	; 0x06
    38c2:	2d 83       	std	Y+5, r18	; 0x05
    38c4:	8d 81       	ldd	r24, Y+5	; 0x05
    38c6:	9e 81       	ldd	r25, Y+6	; 0x06
    38c8:	81 30       	cpi	r24, 0x01	; 1
    38ca:	91 05       	cpc	r25, r1
    38cc:	49 f1       	breq	.+82     	; 0x3920 <DIO_u8SetPinValue+0x180>
    38ce:	2d 81       	ldd	r18, Y+5	; 0x05
    38d0:	3e 81       	ldd	r19, Y+6	; 0x06
    38d2:	22 30       	cpi	r18, 0x02	; 2
    38d4:	31 05       	cpc	r19, r1
    38d6:	2c f4       	brge	.+10     	; 0x38e2 <DIO_u8SetPinValue+0x142>
    38d8:	8d 81       	ldd	r24, Y+5	; 0x05
    38da:	9e 81       	ldd	r25, Y+6	; 0x06
    38dc:	00 97       	sbiw	r24, 0x00	; 0
    38de:	61 f0       	breq	.+24     	; 0x38f8 <DIO_u8SetPinValue+0x158>
    38e0:	5b c0       	rjmp	.+182    	; 0x3998 <DIO_u8SetPinValue+0x1f8>
    38e2:	2d 81       	ldd	r18, Y+5	; 0x05
    38e4:	3e 81       	ldd	r19, Y+6	; 0x06
    38e6:	22 30       	cpi	r18, 0x02	; 2
    38e8:	31 05       	cpc	r19, r1
    38ea:	71 f1       	breq	.+92     	; 0x3948 <DIO_u8SetPinValue+0x1a8>
    38ec:	8d 81       	ldd	r24, Y+5	; 0x05
    38ee:	9e 81       	ldd	r25, Y+6	; 0x06
    38f0:	83 30       	cpi	r24, 0x03	; 3
    38f2:	91 05       	cpc	r25, r1
    38f4:	e9 f1       	breq	.+122    	; 0x3970 <DIO_u8SetPinValue+0x1d0>
    38f6:	50 c0       	rjmp	.+160    	; 0x3998 <DIO_u8SetPinValue+0x1f8>
    	        case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
    38f8:	ab e3       	ldi	r26, 0x3B	; 59
    38fa:	b0 e0       	ldi	r27, 0x00	; 0
    38fc:	eb e3       	ldi	r30, 0x3B	; 59
    38fe:	f0 e0       	ldi	r31, 0x00	; 0
    3900:	80 81       	ld	r24, Z
    3902:	48 2f       	mov	r20, r24
    3904:	8b 81       	ldd	r24, Y+3	; 0x03
    3906:	28 2f       	mov	r18, r24
    3908:	30 e0       	ldi	r19, 0x00	; 0
    390a:	81 e0       	ldi	r24, 0x01	; 1
    390c:	90 e0       	ldi	r25, 0x00	; 0
    390e:	02 2e       	mov	r0, r18
    3910:	02 c0       	rjmp	.+4      	; 0x3916 <DIO_u8SetPinValue+0x176>
    3912:	88 0f       	add	r24, r24
    3914:	99 1f       	adc	r25, r25
    3916:	0a 94       	dec	r0
    3918:	e2 f7       	brpl	.-8      	; 0x3912 <DIO_u8SetPinValue+0x172>
    391a:	84 2b       	or	r24, r20
    391c:	8c 93       	st	X, r24
    391e:	41 c0       	rjmp	.+130    	; 0x39a2 <DIO_u8SetPinValue+0x202>
    			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
    3920:	a8 e3       	ldi	r26, 0x38	; 56
    3922:	b0 e0       	ldi	r27, 0x00	; 0
    3924:	e8 e3       	ldi	r30, 0x38	; 56
    3926:	f0 e0       	ldi	r31, 0x00	; 0
    3928:	80 81       	ld	r24, Z
    392a:	48 2f       	mov	r20, r24
    392c:	8b 81       	ldd	r24, Y+3	; 0x03
    392e:	28 2f       	mov	r18, r24
    3930:	30 e0       	ldi	r19, 0x00	; 0
    3932:	81 e0       	ldi	r24, 0x01	; 1
    3934:	90 e0       	ldi	r25, 0x00	; 0
    3936:	02 2e       	mov	r0, r18
    3938:	02 c0       	rjmp	.+4      	; 0x393e <DIO_u8SetPinValue+0x19e>
    393a:	88 0f       	add	r24, r24
    393c:	99 1f       	adc	r25, r25
    393e:	0a 94       	dec	r0
    3940:	e2 f7       	brpl	.-8      	; 0x393a <DIO_u8SetPinValue+0x19a>
    3942:	84 2b       	or	r24, r20
    3944:	8c 93       	st	X, r24
    3946:	2d c0       	rjmp	.+90     	; 0x39a2 <DIO_u8SetPinValue+0x202>
    			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
    3948:	a5 e3       	ldi	r26, 0x35	; 53
    394a:	b0 e0       	ldi	r27, 0x00	; 0
    394c:	e5 e3       	ldi	r30, 0x35	; 53
    394e:	f0 e0       	ldi	r31, 0x00	; 0
    3950:	80 81       	ld	r24, Z
    3952:	48 2f       	mov	r20, r24
    3954:	8b 81       	ldd	r24, Y+3	; 0x03
    3956:	28 2f       	mov	r18, r24
    3958:	30 e0       	ldi	r19, 0x00	; 0
    395a:	81 e0       	ldi	r24, 0x01	; 1
    395c:	90 e0       	ldi	r25, 0x00	; 0
    395e:	02 2e       	mov	r0, r18
    3960:	02 c0       	rjmp	.+4      	; 0x3966 <DIO_u8SetPinValue+0x1c6>
    3962:	88 0f       	add	r24, r24
    3964:	99 1f       	adc	r25, r25
    3966:	0a 94       	dec	r0
    3968:	e2 f7       	brpl	.-8      	; 0x3962 <DIO_u8SetPinValue+0x1c2>
    396a:	84 2b       	or	r24, r20
    396c:	8c 93       	st	X, r24
    396e:	19 c0       	rjmp	.+50     	; 0x39a2 <DIO_u8SetPinValue+0x202>
    			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
    3970:	a2 e3       	ldi	r26, 0x32	; 50
    3972:	b0 e0       	ldi	r27, 0x00	; 0
    3974:	e2 e3       	ldi	r30, 0x32	; 50
    3976:	f0 e0       	ldi	r31, 0x00	; 0
    3978:	80 81       	ld	r24, Z
    397a:	48 2f       	mov	r20, r24
    397c:	8b 81       	ldd	r24, Y+3	; 0x03
    397e:	28 2f       	mov	r18, r24
    3980:	30 e0       	ldi	r19, 0x00	; 0
    3982:	81 e0       	ldi	r24, 0x01	; 1
    3984:	90 e0       	ldi	r25, 0x00	; 0
    3986:	02 2e       	mov	r0, r18
    3988:	02 c0       	rjmp	.+4      	; 0x398e <DIO_u8SetPinValue+0x1ee>
    398a:	88 0f       	add	r24, r24
    398c:	99 1f       	adc	r25, r25
    398e:	0a 94       	dec	r0
    3990:	e2 f7       	brpl	.-8      	; 0x398a <DIO_u8SetPinValue+0x1ea>
    3992:	84 2b       	or	r24, r20
    3994:	8c 93       	st	X, r24
    3996:	05 c0       	rjmp	.+10     	; 0x39a2 <DIO_u8SetPinValue+0x202>
    			default: Local_u8ErrorState=NOK;
    3998:	81 e0       	ldi	r24, 0x01	; 1
    399a:	89 83       	std	Y+1, r24	; 0x01
    399c:	02 c0       	rjmp	.+4      	; 0x39a2 <DIO_u8SetPinValue+0x202>
    	}
    }
    else
    {
    	Local_u8ErrorState=NOK;
    399e:	81 e0       	ldi	r24, 0x01	; 1
    39a0:	89 83       	std	Y+1, r24	; 0x01

    }


    return Local_u8ErrorState;
    39a2:	89 81       	ldd	r24, Y+1	; 0x01

}
    39a4:	28 96       	adiw	r28, 0x08	; 8
    39a6:	0f b6       	in	r0, 0x3f	; 63
    39a8:	f8 94       	cli
    39aa:	de bf       	out	0x3e, r29	; 62
    39ac:	0f be       	out	0x3f, r0	; 63
    39ae:	cd bf       	out	0x3d, r28	; 61
    39b0:	cf 91       	pop	r28
    39b2:	df 91       	pop	r29
    39b4:	08 95       	ret

000039b6 <DIO_u8ReadPinValue>:
uint8 DIO_u8ReadPinValue(uint8 Copy_u8port,uint8 Copy_u8Pin,uint8* Copy_pu8Value)
{
    39b6:	df 93       	push	r29
    39b8:	cf 93       	push	r28
    39ba:	cd b7       	in	r28, 0x3d	; 61
    39bc:	de b7       	in	r29, 0x3e	; 62
    39be:	29 97       	sbiw	r28, 0x09	; 9
    39c0:	0f b6       	in	r0, 0x3f	; 63
    39c2:	f8 94       	cli
    39c4:	de bf       	out	0x3e, r29	; 62
    39c6:	0f be       	out	0x3f, r0	; 63
    39c8:	cd bf       	out	0x3d, r28	; 61
    39ca:	8b 83       	std	Y+3, r24	; 0x03
    39cc:	6c 83       	std	Y+4, r22	; 0x04
    39ce:	5e 83       	std	Y+6, r21	; 0x06
    39d0:	4d 83       	std	Y+5, r20	; 0x05
	 uint8 Local_u8ErrorState=OK;
    39d2:	1a 82       	std	Y+2, r1	; 0x02
	 if(Copy_pu8Value!=NULL)
    39d4:	8d 81       	ldd	r24, Y+5	; 0x05
    39d6:	9e 81       	ldd	r25, Y+6	; 0x06
    39d8:	00 97       	sbiw	r24, 0x00	; 0
    39da:	09 f4       	brne	.+2      	; 0x39de <DIO_u8ReadPinValue+0x28>
    39dc:	72 c0       	rjmp	.+228    	; 0x3ac2 <DIO_u8ReadPinValue+0x10c>
	 {
		 uint8 u8PinValue=0;
    39de:	19 82       	std	Y+1, r1	; 0x01
		 	 switch(Copy_u8port){
    39e0:	8b 81       	ldd	r24, Y+3	; 0x03
    39e2:	28 2f       	mov	r18, r24
    39e4:	30 e0       	ldi	r19, 0x00	; 0
    39e6:	39 87       	std	Y+9, r19	; 0x09
    39e8:	28 87       	std	Y+8, r18	; 0x08
    39ea:	48 85       	ldd	r20, Y+8	; 0x08
    39ec:	59 85       	ldd	r21, Y+9	; 0x09
    39ee:	41 30       	cpi	r20, 0x01	; 1
    39f0:	51 05       	cpc	r21, r1
    39f2:	41 f1       	breq	.+80     	; 0x3a44 <DIO_u8ReadPinValue+0x8e>
    39f4:	88 85       	ldd	r24, Y+8	; 0x08
    39f6:	99 85       	ldd	r25, Y+9	; 0x09
    39f8:	82 30       	cpi	r24, 0x02	; 2
    39fa:	91 05       	cpc	r25, r1
    39fc:	34 f4       	brge	.+12     	; 0x3a0a <DIO_u8ReadPinValue+0x54>
    39fe:	28 85       	ldd	r18, Y+8	; 0x08
    3a00:	39 85       	ldd	r19, Y+9	; 0x09
    3a02:	21 15       	cp	r18, r1
    3a04:	31 05       	cpc	r19, r1
    3a06:	61 f0       	breq	.+24     	; 0x3a20 <DIO_u8ReadPinValue+0x6a>
    3a08:	53 c0       	rjmp	.+166    	; 0x3ab0 <DIO_u8ReadPinValue+0xfa>
    3a0a:	48 85       	ldd	r20, Y+8	; 0x08
    3a0c:	59 85       	ldd	r21, Y+9	; 0x09
    3a0e:	42 30       	cpi	r20, 0x02	; 2
    3a10:	51 05       	cpc	r21, r1
    3a12:	51 f1       	breq	.+84     	; 0x3a68 <DIO_u8ReadPinValue+0xb2>
    3a14:	88 85       	ldd	r24, Y+8	; 0x08
    3a16:	99 85       	ldd	r25, Y+9	; 0x09
    3a18:	83 30       	cpi	r24, 0x03	; 3
    3a1a:	91 05       	cpc	r25, r1
    3a1c:	b9 f1       	breq	.+110    	; 0x3a8c <DIO_u8ReadPinValue+0xd6>
    3a1e:	48 c0       	rjmp	.+144    	; 0x3ab0 <DIO_u8ReadPinValue+0xfa>
		        case DIO_u8PORTA:u8PinValue=GET_BIT(PINA,Copy_u8Pin); break;
    3a20:	e9 e3       	ldi	r30, 0x39	; 57
    3a22:	f0 e0       	ldi	r31, 0x00	; 0
    3a24:	80 81       	ld	r24, Z
    3a26:	28 2f       	mov	r18, r24
    3a28:	30 e0       	ldi	r19, 0x00	; 0
    3a2a:	8c 81       	ldd	r24, Y+4	; 0x04
    3a2c:	88 2f       	mov	r24, r24
    3a2e:	90 e0       	ldi	r25, 0x00	; 0
    3a30:	a9 01       	movw	r20, r18
    3a32:	02 c0       	rjmp	.+4      	; 0x3a38 <DIO_u8ReadPinValue+0x82>
    3a34:	55 95       	asr	r21
    3a36:	47 95       	ror	r20
    3a38:	8a 95       	dec	r24
    3a3a:	e2 f7       	brpl	.-8      	; 0x3a34 <DIO_u8ReadPinValue+0x7e>
    3a3c:	ca 01       	movw	r24, r20
    3a3e:	81 70       	andi	r24, 0x01	; 1
    3a40:	89 83       	std	Y+1, r24	; 0x01
    3a42:	38 c0       	rjmp	.+112    	; 0x3ab4 <DIO_u8ReadPinValue+0xfe>
		        case DIO_u8PORTB:u8PinValue=GET_BIT(PINB,Copy_u8Pin); break;
    3a44:	e6 e3       	ldi	r30, 0x36	; 54
    3a46:	f0 e0       	ldi	r31, 0x00	; 0
    3a48:	80 81       	ld	r24, Z
    3a4a:	28 2f       	mov	r18, r24
    3a4c:	30 e0       	ldi	r19, 0x00	; 0
    3a4e:	8c 81       	ldd	r24, Y+4	; 0x04
    3a50:	88 2f       	mov	r24, r24
    3a52:	90 e0       	ldi	r25, 0x00	; 0
    3a54:	a9 01       	movw	r20, r18
    3a56:	02 c0       	rjmp	.+4      	; 0x3a5c <DIO_u8ReadPinValue+0xa6>
    3a58:	55 95       	asr	r21
    3a5a:	47 95       	ror	r20
    3a5c:	8a 95       	dec	r24
    3a5e:	e2 f7       	brpl	.-8      	; 0x3a58 <DIO_u8ReadPinValue+0xa2>
    3a60:	ca 01       	movw	r24, r20
    3a62:	81 70       	andi	r24, 0x01	; 1
    3a64:	89 83       	std	Y+1, r24	; 0x01
    3a66:	26 c0       	rjmp	.+76     	; 0x3ab4 <DIO_u8ReadPinValue+0xfe>
		        case DIO_u8PORTC:u8PinValue=GET_BIT(PINC,Copy_u8Pin); break;
    3a68:	e3 e3       	ldi	r30, 0x33	; 51
    3a6a:	f0 e0       	ldi	r31, 0x00	; 0
    3a6c:	80 81       	ld	r24, Z
    3a6e:	28 2f       	mov	r18, r24
    3a70:	30 e0       	ldi	r19, 0x00	; 0
    3a72:	8c 81       	ldd	r24, Y+4	; 0x04
    3a74:	88 2f       	mov	r24, r24
    3a76:	90 e0       	ldi	r25, 0x00	; 0
    3a78:	a9 01       	movw	r20, r18
    3a7a:	02 c0       	rjmp	.+4      	; 0x3a80 <DIO_u8ReadPinValue+0xca>
    3a7c:	55 95       	asr	r21
    3a7e:	47 95       	ror	r20
    3a80:	8a 95       	dec	r24
    3a82:	e2 f7       	brpl	.-8      	; 0x3a7c <DIO_u8ReadPinValue+0xc6>
    3a84:	ca 01       	movw	r24, r20
    3a86:	81 70       	andi	r24, 0x01	; 1
    3a88:	89 83       	std	Y+1, r24	; 0x01
    3a8a:	14 c0       	rjmp	.+40     	; 0x3ab4 <DIO_u8ReadPinValue+0xfe>
		        case DIO_u8PORTD:u8PinValue=GET_BIT(PIND,Copy_u8Pin); break;
    3a8c:	e0 e3       	ldi	r30, 0x30	; 48
    3a8e:	f0 e0       	ldi	r31, 0x00	; 0
    3a90:	80 81       	ld	r24, Z
    3a92:	28 2f       	mov	r18, r24
    3a94:	30 e0       	ldi	r19, 0x00	; 0
    3a96:	8c 81       	ldd	r24, Y+4	; 0x04
    3a98:	88 2f       	mov	r24, r24
    3a9a:	90 e0       	ldi	r25, 0x00	; 0
    3a9c:	a9 01       	movw	r20, r18
    3a9e:	02 c0       	rjmp	.+4      	; 0x3aa4 <DIO_u8ReadPinValue+0xee>
    3aa0:	55 95       	asr	r21
    3aa2:	47 95       	ror	r20
    3aa4:	8a 95       	dec	r24
    3aa6:	e2 f7       	brpl	.-8      	; 0x3aa0 <DIO_u8ReadPinValue+0xea>
    3aa8:	ca 01       	movw	r24, r20
    3aaa:	81 70       	andi	r24, 0x01	; 1
    3aac:	89 83       	std	Y+1, r24	; 0x01
    3aae:	02 c0       	rjmp	.+4      	; 0x3ab4 <DIO_u8ReadPinValue+0xfe>
		        default: Local_u8ErrorState=NOK;
    3ab0:	81 e0       	ldi	r24, 0x01	; 1
    3ab2:	8a 83       	std	Y+2, r24	; 0x02
		 	 }
		 	 * Copy_pu8Value =u8PinValue;
    3ab4:	ed 81       	ldd	r30, Y+5	; 0x05
    3ab6:	fe 81       	ldd	r31, Y+6	; 0x06
    3ab8:	89 81       	ldd	r24, Y+1	; 0x01
    3aba:	80 83       	st	Z, r24
		 	 return Local_u8ErrorState;
    3abc:	5a 81       	ldd	r21, Y+2	; 0x02
    3abe:	5f 83       	std	Y+7, r21	; 0x07
    3ac0:	04 c0       	rjmp	.+8      	; 0x3aca <DIO_u8ReadPinValue+0x114>
	 }
	 else
	 {
		 Local_u8ErrorState=NULL_PTR_ERR;
    3ac2:	82 e0       	ldi	r24, 0x02	; 2
    3ac4:	8a 83       	std	Y+2, r24	; 0x02
	 }

	 return Local_u8ErrorState;
    3ac6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ac8:	8f 83       	std	Y+7, r24	; 0x07
    3aca:	8f 81       	ldd	r24, Y+7	; 0x07
}
    3acc:	29 96       	adiw	r28, 0x09	; 9
    3ace:	0f b6       	in	r0, 0x3f	; 63
    3ad0:	f8 94       	cli
    3ad2:	de bf       	out	0x3e, r29	; 62
    3ad4:	0f be       	out	0x3f, r0	; 63
    3ad6:	cd bf       	out	0x3d, r28	; 61
    3ad8:	cf 91       	pop	r28
    3ada:	df 91       	pop	r29
    3adc:	08 95       	ret

00003ade <DIO_u8SetPortDirection>:
uint8 DIO_u8SetPortDirection(uint8 Copy_u8Port, uint8 Copy_u8Direction )
{
    3ade:	df 93       	push	r29
    3ae0:	cf 93       	push	r28
    3ae2:	00 d0       	rcall	.+0      	; 0x3ae4 <DIO_u8SetPortDirection+0x6>
    3ae4:	00 d0       	rcall	.+0      	; 0x3ae6 <DIO_u8SetPortDirection+0x8>
    3ae6:	0f 92       	push	r0
    3ae8:	cd b7       	in	r28, 0x3d	; 61
    3aea:	de b7       	in	r29, 0x3e	; 62
    3aec:	8a 83       	std	Y+2, r24	; 0x02
    3aee:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    3af0:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
    3af2:	8a 81       	ldd	r24, Y+2	; 0x02
    3af4:	28 2f       	mov	r18, r24
    3af6:	30 e0       	ldi	r19, 0x00	; 0
    3af8:	3d 83       	std	Y+5, r19	; 0x05
    3afa:	2c 83       	std	Y+4, r18	; 0x04
    3afc:	8c 81       	ldd	r24, Y+4	; 0x04
    3afe:	9d 81       	ldd	r25, Y+5	; 0x05
    3b00:	81 30       	cpi	r24, 0x01	; 1
    3b02:	91 05       	cpc	r25, r1
    3b04:	d1 f0       	breq	.+52     	; 0x3b3a <DIO_u8SetPortDirection+0x5c>
    3b06:	2c 81       	ldd	r18, Y+4	; 0x04
    3b08:	3d 81       	ldd	r19, Y+5	; 0x05
    3b0a:	22 30       	cpi	r18, 0x02	; 2
    3b0c:	31 05       	cpc	r19, r1
    3b0e:	2c f4       	brge	.+10     	; 0x3b1a <DIO_u8SetPortDirection+0x3c>
    3b10:	8c 81       	ldd	r24, Y+4	; 0x04
    3b12:	9d 81       	ldd	r25, Y+5	; 0x05
    3b14:	00 97       	sbiw	r24, 0x00	; 0
    3b16:	61 f0       	breq	.+24     	; 0x3b30 <DIO_u8SetPortDirection+0x52>
    3b18:	1f c0       	rjmp	.+62     	; 0x3b58 <DIO_u8SetPortDirection+0x7a>
    3b1a:	2c 81       	ldd	r18, Y+4	; 0x04
    3b1c:	3d 81       	ldd	r19, Y+5	; 0x05
    3b1e:	22 30       	cpi	r18, 0x02	; 2
    3b20:	31 05       	cpc	r19, r1
    3b22:	81 f0       	breq	.+32     	; 0x3b44 <DIO_u8SetPortDirection+0x66>
    3b24:	8c 81       	ldd	r24, Y+4	; 0x04
    3b26:	9d 81       	ldd	r25, Y+5	; 0x05
    3b28:	83 30       	cpi	r24, 0x03	; 3
    3b2a:	91 05       	cpc	r25, r1
    3b2c:	81 f0       	breq	.+32     	; 0x3b4e <DIO_u8SetPortDirection+0x70>
    3b2e:	14 c0       	rjmp	.+40     	; 0x3b58 <DIO_u8SetPortDirection+0x7a>
	{
	case DIO_u8PORTA : DDRA = Copy_u8Direction; break;
    3b30:	ea e3       	ldi	r30, 0x3A	; 58
    3b32:	f0 e0       	ldi	r31, 0x00	; 0
    3b34:	8b 81       	ldd	r24, Y+3	; 0x03
    3b36:	80 83       	st	Z, r24
    3b38:	11 c0       	rjmp	.+34     	; 0x3b5c <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTB : DDRB = Copy_u8Direction; break;
    3b3a:	e7 e3       	ldi	r30, 0x37	; 55
    3b3c:	f0 e0       	ldi	r31, 0x00	; 0
    3b3e:	8b 81       	ldd	r24, Y+3	; 0x03
    3b40:	80 83       	st	Z, r24
    3b42:	0c c0       	rjmp	.+24     	; 0x3b5c <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTC : DDRC = Copy_u8Direction; break;
    3b44:	e4 e3       	ldi	r30, 0x34	; 52
    3b46:	f0 e0       	ldi	r31, 0x00	; 0
    3b48:	8b 81       	ldd	r24, Y+3	; 0x03
    3b4a:	80 83       	st	Z, r24
    3b4c:	07 c0       	rjmp	.+14     	; 0x3b5c <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTD : DDRD = Copy_u8Direction; break;
    3b4e:	e1 e3       	ldi	r30, 0x31	; 49
    3b50:	f0 e0       	ldi	r31, 0x00	; 0
    3b52:	8b 81       	ldd	r24, Y+3	; 0x03
    3b54:	80 83       	st	Z, r24
    3b56:	02 c0       	rjmp	.+4      	; 0x3b5c <DIO_u8SetPortDirection+0x7e>
	default : Local_u8ErrorState = NOK; 		break;
    3b58:	81 e0       	ldi	r24, 0x01	; 1
    3b5a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    3b5c:	89 81       	ldd	r24, Y+1	; 0x01
}
    3b5e:	0f 90       	pop	r0
    3b60:	0f 90       	pop	r0
    3b62:	0f 90       	pop	r0
    3b64:	0f 90       	pop	r0
    3b66:	0f 90       	pop	r0
    3b68:	cf 91       	pop	r28
    3b6a:	df 91       	pop	r29
    3b6c:	08 95       	ret

00003b6e <DIO_u8SetPortValue>:

uint8 DIO_u8SetPortValue (uint8 Copy_u8port,uint8 Copy_u8Value )
{
    3b6e:	df 93       	push	r29
    3b70:	cf 93       	push	r28
    3b72:	00 d0       	rcall	.+0      	; 0x3b74 <DIO_u8SetPortValue+0x6>
    3b74:	00 d0       	rcall	.+0      	; 0x3b76 <DIO_u8SetPortValue+0x8>
    3b76:	0f 92       	push	r0
    3b78:	cd b7       	in	r28, 0x3d	; 61
    3b7a:	de b7       	in	r29, 0x3e	; 62
    3b7c:	8a 83       	std	Y+2, r24	; 0x02
    3b7e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState=OK;
    3b80:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8port)
    3b82:	8a 81       	ldd	r24, Y+2	; 0x02
    3b84:	28 2f       	mov	r18, r24
    3b86:	30 e0       	ldi	r19, 0x00	; 0
    3b88:	3d 83       	std	Y+5, r19	; 0x05
    3b8a:	2c 83       	std	Y+4, r18	; 0x04
    3b8c:	8c 81       	ldd	r24, Y+4	; 0x04
    3b8e:	9d 81       	ldd	r25, Y+5	; 0x05
    3b90:	81 30       	cpi	r24, 0x01	; 1
    3b92:	91 05       	cpc	r25, r1
    3b94:	d1 f0       	breq	.+52     	; 0x3bca <DIO_u8SetPortValue+0x5c>
    3b96:	2c 81       	ldd	r18, Y+4	; 0x04
    3b98:	3d 81       	ldd	r19, Y+5	; 0x05
    3b9a:	22 30       	cpi	r18, 0x02	; 2
    3b9c:	31 05       	cpc	r19, r1
    3b9e:	2c f4       	brge	.+10     	; 0x3baa <DIO_u8SetPortValue+0x3c>
    3ba0:	8c 81       	ldd	r24, Y+4	; 0x04
    3ba2:	9d 81       	ldd	r25, Y+5	; 0x05
    3ba4:	00 97       	sbiw	r24, 0x00	; 0
    3ba6:	61 f0       	breq	.+24     	; 0x3bc0 <DIO_u8SetPortValue+0x52>
    3ba8:	1f c0       	rjmp	.+62     	; 0x3be8 <DIO_u8SetPortValue+0x7a>
    3baa:	2c 81       	ldd	r18, Y+4	; 0x04
    3bac:	3d 81       	ldd	r19, Y+5	; 0x05
    3bae:	22 30       	cpi	r18, 0x02	; 2
    3bb0:	31 05       	cpc	r19, r1
    3bb2:	81 f0       	breq	.+32     	; 0x3bd4 <DIO_u8SetPortValue+0x66>
    3bb4:	8c 81       	ldd	r24, Y+4	; 0x04
    3bb6:	9d 81       	ldd	r25, Y+5	; 0x05
    3bb8:	83 30       	cpi	r24, 0x03	; 3
    3bba:	91 05       	cpc	r25, r1
    3bbc:	81 f0       	breq	.+32     	; 0x3bde <DIO_u8SetPortValue+0x70>
    3bbe:	14 c0       	rjmp	.+40     	; 0x3be8 <DIO_u8SetPortValue+0x7a>
	{
	    case DIO_u8PORTA: PORTA = Copy_u8Value;break;
    3bc0:	eb e3       	ldi	r30, 0x3B	; 59
    3bc2:	f0 e0       	ldi	r31, 0x00	; 0
    3bc4:	8b 81       	ldd	r24, Y+3	; 0x03
    3bc6:	80 83       	st	Z, r24
    3bc8:	11 c0       	rjmp	.+34     	; 0x3bec <DIO_u8SetPortValue+0x7e>

	    case DIO_u8PORTB: PORTB = Copy_u8Value;break;
    3bca:	e8 e3       	ldi	r30, 0x38	; 56
    3bcc:	f0 e0       	ldi	r31, 0x00	; 0
    3bce:	8b 81       	ldd	r24, Y+3	; 0x03
    3bd0:	80 83       	st	Z, r24
    3bd2:	0c c0       	rjmp	.+24     	; 0x3bec <DIO_u8SetPortValue+0x7e>

	    case DIO_u8PORTC: PORTC = Copy_u8Value; break;
    3bd4:	e5 e3       	ldi	r30, 0x35	; 53
    3bd6:	f0 e0       	ldi	r31, 0x00	; 0
    3bd8:	8b 81       	ldd	r24, Y+3	; 0x03
    3bda:	80 83       	st	Z, r24
    3bdc:	07 c0       	rjmp	.+14     	; 0x3bec <DIO_u8SetPortValue+0x7e>
	    case DIO_u8PORTD: PORTD = Copy_u8Value; break;
    3bde:	e2 e3       	ldi	r30, 0x32	; 50
    3be0:	f0 e0       	ldi	r31, 0x00	; 0
    3be2:	8b 81       	ldd	r24, Y+3	; 0x03
    3be4:	80 83       	st	Z, r24
    3be6:	02 c0       	rjmp	.+4      	; 0x3bec <DIO_u8SetPortValue+0x7e>
	    default: Local_u8ErrorState = NOK;
    3be8:	81 e0       	ldi	r24, 0x01	; 1
    3bea:	89 83       	std	Y+1, r24	; 0x01
	     }

	     return Local_u8ErrorState;
    3bec:	89 81       	ldd	r24, Y+1	; 0x01
}
    3bee:	0f 90       	pop	r0
    3bf0:	0f 90       	pop	r0
    3bf2:	0f 90       	pop	r0
    3bf4:	0f 90       	pop	r0
    3bf6:	0f 90       	pop	r0
    3bf8:	cf 91       	pop	r28
    3bfa:	df 91       	pop	r29
    3bfc:	08 95       	ret

00003bfe <DIO_u8Toggle>:




uint8 DIO_u8Toggle(uint8 Copy_u8Port, uint8 Copy_u8Pin)
{
    3bfe:	df 93       	push	r29
    3c00:	cf 93       	push	r28
    3c02:	00 d0       	rcall	.+0      	; 0x3c04 <DIO_u8Toggle+0x6>
    3c04:	00 d0       	rcall	.+0      	; 0x3c06 <DIO_u8Toggle+0x8>
    3c06:	0f 92       	push	r0
    3c08:	cd b7       	in	r28, 0x3d	; 61
    3c0a:	de b7       	in	r29, 0x3e	; 62
    3c0c:	8a 83       	std	Y+2, r24	; 0x02
    3c0e:	6b 83       	std	Y+3, r22	; 0x03
	 uint8 Local_u8ErrorState = OK;
    3c10:	19 82       	std	Y+1, r1	; 0x01
if(Copy_u8Pin<=DIO_u8PIN7){
    3c12:	8b 81       	ldd	r24, Y+3	; 0x03
    3c14:	88 30       	cpi	r24, 0x08	; 8
    3c16:	08 f0       	brcs	.+2      	; 0x3c1a <DIO_u8Toggle+0x1c>
    3c18:	72 c0       	rjmp	.+228    	; 0x3cfe <DIO_u8Toggle+0x100>
	    switch (Copy_u8Port)
    3c1a:	8a 81       	ldd	r24, Y+2	; 0x02
    3c1c:	28 2f       	mov	r18, r24
    3c1e:	30 e0       	ldi	r19, 0x00	; 0
    3c20:	3d 83       	std	Y+5, r19	; 0x05
    3c22:	2c 83       	std	Y+4, r18	; 0x04
    3c24:	8c 81       	ldd	r24, Y+4	; 0x04
    3c26:	9d 81       	ldd	r25, Y+5	; 0x05
    3c28:	81 30       	cpi	r24, 0x01	; 1
    3c2a:	91 05       	cpc	r25, r1
    3c2c:	49 f1       	breq	.+82     	; 0x3c80 <DIO_u8Toggle+0x82>
    3c2e:	2c 81       	ldd	r18, Y+4	; 0x04
    3c30:	3d 81       	ldd	r19, Y+5	; 0x05
    3c32:	22 30       	cpi	r18, 0x02	; 2
    3c34:	31 05       	cpc	r19, r1
    3c36:	2c f4       	brge	.+10     	; 0x3c42 <DIO_u8Toggle+0x44>
    3c38:	8c 81       	ldd	r24, Y+4	; 0x04
    3c3a:	9d 81       	ldd	r25, Y+5	; 0x05
    3c3c:	00 97       	sbiw	r24, 0x00	; 0
    3c3e:	61 f0       	breq	.+24     	; 0x3c58 <DIO_u8Toggle+0x5a>
    3c40:	5b c0       	rjmp	.+182    	; 0x3cf8 <DIO_u8Toggle+0xfa>
    3c42:	2c 81       	ldd	r18, Y+4	; 0x04
    3c44:	3d 81       	ldd	r19, Y+5	; 0x05
    3c46:	22 30       	cpi	r18, 0x02	; 2
    3c48:	31 05       	cpc	r19, r1
    3c4a:	71 f1       	breq	.+92     	; 0x3ca8 <DIO_u8Toggle+0xaa>
    3c4c:	8c 81       	ldd	r24, Y+4	; 0x04
    3c4e:	9d 81       	ldd	r25, Y+5	; 0x05
    3c50:	83 30       	cpi	r24, 0x03	; 3
    3c52:	91 05       	cpc	r25, r1
    3c54:	e9 f1       	breq	.+122    	; 0x3cd0 <DIO_u8Toggle+0xd2>
    3c56:	50 c0       	rjmp	.+160    	; 0x3cf8 <DIO_u8Toggle+0xfa>
	    {
	        case DIO_u8PORTA:TOG_BIT(PORTA, Copy_u8Pin);break;
    3c58:	ab e3       	ldi	r26, 0x3B	; 59
    3c5a:	b0 e0       	ldi	r27, 0x00	; 0
    3c5c:	eb e3       	ldi	r30, 0x3B	; 59
    3c5e:	f0 e0       	ldi	r31, 0x00	; 0
    3c60:	80 81       	ld	r24, Z
    3c62:	48 2f       	mov	r20, r24
    3c64:	8b 81       	ldd	r24, Y+3	; 0x03
    3c66:	28 2f       	mov	r18, r24
    3c68:	30 e0       	ldi	r19, 0x00	; 0
    3c6a:	81 e0       	ldi	r24, 0x01	; 1
    3c6c:	90 e0       	ldi	r25, 0x00	; 0
    3c6e:	02 2e       	mov	r0, r18
    3c70:	02 c0       	rjmp	.+4      	; 0x3c76 <DIO_u8Toggle+0x78>
    3c72:	88 0f       	add	r24, r24
    3c74:	99 1f       	adc	r25, r25
    3c76:	0a 94       	dec	r0
    3c78:	e2 f7       	brpl	.-8      	; 0x3c72 <DIO_u8Toggle+0x74>
    3c7a:	84 27       	eor	r24, r20
    3c7c:	8c 93       	st	X, r24
    3c7e:	41 c0       	rjmp	.+130    	; 0x3d02 <DIO_u8Toggle+0x104>

	        case DIO_u8PORTB:TOG_BIT(PORTB, Copy_u8Pin);break;
    3c80:	a8 e3       	ldi	r26, 0x38	; 56
    3c82:	b0 e0       	ldi	r27, 0x00	; 0
    3c84:	e8 e3       	ldi	r30, 0x38	; 56
    3c86:	f0 e0       	ldi	r31, 0x00	; 0
    3c88:	80 81       	ld	r24, Z
    3c8a:	48 2f       	mov	r20, r24
    3c8c:	8b 81       	ldd	r24, Y+3	; 0x03
    3c8e:	28 2f       	mov	r18, r24
    3c90:	30 e0       	ldi	r19, 0x00	; 0
    3c92:	81 e0       	ldi	r24, 0x01	; 1
    3c94:	90 e0       	ldi	r25, 0x00	; 0
    3c96:	02 2e       	mov	r0, r18
    3c98:	02 c0       	rjmp	.+4      	; 0x3c9e <DIO_u8Toggle+0xa0>
    3c9a:	88 0f       	add	r24, r24
    3c9c:	99 1f       	adc	r25, r25
    3c9e:	0a 94       	dec	r0
    3ca0:	e2 f7       	brpl	.-8      	; 0x3c9a <DIO_u8Toggle+0x9c>
    3ca2:	84 27       	eor	r24, r20
    3ca4:	8c 93       	st	X, r24
    3ca6:	2d c0       	rjmp	.+90     	; 0x3d02 <DIO_u8Toggle+0x104>

	        case DIO_u8PORTC:TOG_BIT(PORTC, Copy_u8Pin);break;
    3ca8:	a5 e3       	ldi	r26, 0x35	; 53
    3caa:	b0 e0       	ldi	r27, 0x00	; 0
    3cac:	e5 e3       	ldi	r30, 0x35	; 53
    3cae:	f0 e0       	ldi	r31, 0x00	; 0
    3cb0:	80 81       	ld	r24, Z
    3cb2:	48 2f       	mov	r20, r24
    3cb4:	8b 81       	ldd	r24, Y+3	; 0x03
    3cb6:	28 2f       	mov	r18, r24
    3cb8:	30 e0       	ldi	r19, 0x00	; 0
    3cba:	81 e0       	ldi	r24, 0x01	; 1
    3cbc:	90 e0       	ldi	r25, 0x00	; 0
    3cbe:	02 2e       	mov	r0, r18
    3cc0:	02 c0       	rjmp	.+4      	; 0x3cc6 <DIO_u8Toggle+0xc8>
    3cc2:	88 0f       	add	r24, r24
    3cc4:	99 1f       	adc	r25, r25
    3cc6:	0a 94       	dec	r0
    3cc8:	e2 f7       	brpl	.-8      	; 0x3cc2 <DIO_u8Toggle+0xc4>
    3cca:	84 27       	eor	r24, r20
    3ccc:	8c 93       	st	X, r24
    3cce:	19 c0       	rjmp	.+50     	; 0x3d02 <DIO_u8Toggle+0x104>

	        case DIO_u8PORTD:TOG_BIT(PORTD, Copy_u8Pin);break;
    3cd0:	a2 e3       	ldi	r26, 0x32	; 50
    3cd2:	b0 e0       	ldi	r27, 0x00	; 0
    3cd4:	e2 e3       	ldi	r30, 0x32	; 50
    3cd6:	f0 e0       	ldi	r31, 0x00	; 0
    3cd8:	80 81       	ld	r24, Z
    3cda:	48 2f       	mov	r20, r24
    3cdc:	8b 81       	ldd	r24, Y+3	; 0x03
    3cde:	28 2f       	mov	r18, r24
    3ce0:	30 e0       	ldi	r19, 0x00	; 0
    3ce2:	81 e0       	ldi	r24, 0x01	; 1
    3ce4:	90 e0       	ldi	r25, 0x00	; 0
    3ce6:	02 2e       	mov	r0, r18
    3ce8:	02 c0       	rjmp	.+4      	; 0x3cee <DIO_u8Toggle+0xf0>
    3cea:	88 0f       	add	r24, r24
    3cec:	99 1f       	adc	r25, r25
    3cee:	0a 94       	dec	r0
    3cf0:	e2 f7       	brpl	.-8      	; 0x3cea <DIO_u8Toggle+0xec>
    3cf2:	84 27       	eor	r24, r20
    3cf4:	8c 93       	st	X, r24
    3cf6:	05 c0       	rjmp	.+10     	; 0x3d02 <DIO_u8Toggle+0x104>

	        default:Local_u8ErrorState = NOK;
    3cf8:	81 e0       	ldi	r24, 0x01	; 1
    3cfa:	89 83       	std	Y+1, r24	; 0x01
    3cfc:	02 c0       	rjmp	.+4      	; 0x3d02 <DIO_u8Toggle+0x104>
	    }
}
else
{
	             Local_u8ErrorState = NOK;
    3cfe:	81 e0       	ldi	r24, 0x01	; 1
    3d00:	89 83       	std	Y+1, r24	; 0x01
}

	    return Local_u8ErrorState;
    3d02:	89 81       	ldd	r24, Y+1	; 0x01
}
    3d04:	0f 90       	pop	r0
    3d06:	0f 90       	pop	r0
    3d08:	0f 90       	pop	r0
    3d0a:	0f 90       	pop	r0
    3d0c:	0f 90       	pop	r0
    3d0e:	cf 91       	pop	r28
    3d10:	df 91       	pop	r29
    3d12:	08 95       	ret

00003d14 <PORT_voidInit>:
#include  "PORT_prv.h"
#include "PORT_cfg.h"
#include  "PORT_interface.h"
#include "PORT_reg.h"
void PORT_voidInit(void)
{
    3d14:	df 93       	push	r29
    3d16:	cf 93       	push	r28
    3d18:	cd b7       	in	r28, 0x3d	; 61
    3d1a:	de b7       	in	r29, 0x3e	; 62
	DDRA=PORTA_DIR;
    3d1c:	ea e3       	ldi	r30, 0x3A	; 58
    3d1e:	f0 e0       	ldi	r31, 0x00	; 0
    3d20:	8e ef       	ldi	r24, 0xFE	; 254
    3d22:	80 83       	st	Z, r24
	DDRB=PORTB_DIR;
    3d24:	e7 e3       	ldi	r30, 0x37	; 55
    3d26:	f0 e0       	ldi	r31, 0x00	; 0
    3d28:	8f ef       	ldi	r24, 0xFF	; 255
    3d2a:	80 83       	st	Z, r24
	DDRC=PORTC_DIR;
    3d2c:	e4 e3       	ldi	r30, 0x34	; 52
    3d2e:	f0 e0       	ldi	r31, 0x00	; 0
    3d30:	8f ef       	ldi	r24, 0xFF	; 255
    3d32:	80 83       	st	Z, r24
	DDRD=PORTD_DIR;
    3d34:	e1 e3       	ldi	r30, 0x31	; 49
    3d36:	f0 e0       	ldi	r31, 0x00	; 0
    3d38:	10 82       	st	Z, r1
	
	PORTA=PORTA_INIT_VAL;
    3d3a:	eb e3       	ldi	r30, 0x3B	; 59
    3d3c:	f0 e0       	ldi	r31, 0x00	; 0
    3d3e:	10 82       	st	Z, r1
	PORTB=PORTB_INIT_VAL;
    3d40:	e8 e3       	ldi	r30, 0x38	; 56
    3d42:	f0 e0       	ldi	r31, 0x00	; 0
    3d44:	80 ef       	ldi	r24, 0xF0	; 240
    3d46:	80 83       	st	Z, r24
	PORTC=PORTC_INIT_VAL;
    3d48:	e5 e3       	ldi	r30, 0x35	; 53
    3d4a:	f0 e0       	ldi	r31, 0x00	; 0
    3d4c:	8f ef       	ldi	r24, 0xFF	; 255
    3d4e:	80 83       	st	Z, r24
	PORTD=PORTD_INIT_VAL;
    3d50:	e2 e3       	ldi	r30, 0x32	; 50
    3d52:	f0 e0       	ldi	r31, 0x00	; 0
    3d54:	8c e1       	ldi	r24, 0x1C	; 28
    3d56:	80 83       	st	Z, r24

}
    3d58:	cf 91       	pop	r28
    3d5a:	df 91       	pop	r29
    3d5c:	08 95       	ret

00003d5e <main>:
#include "DIO_interface.h"
#include "CLCD_interface.h"
#include "ADC_interface.h"
#include<util/delay.h>
void main (void)
{
    3d5e:	df 93       	push	r29
    3d60:	cf 93       	push	r28
    3d62:	cd b7       	in	r28, 0x3d	; 61
    3d64:	de b7       	in	r29, 0x3e	; 62
    3d66:	62 97       	sbiw	r28, 0x12	; 18
    3d68:	0f b6       	in	r0, 0x3f	; 63
    3d6a:	f8 94       	cli
    3d6c:	de bf       	out	0x3e, r29	; 62
    3d6e:	0f be       	out	0x3f, r0	; 63
    3d70:	cd bf       	out	0x3d, r28	; 61
	uint16 Local_u16Digital, Local_u16Analog;
PORT_voidInit();
    3d72:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <PORT_voidInit>
CLCD_VoidInit();
    3d76:	0e 94 b0 08 	call	0x1160	; 0x1160 <CLCD_VoidInit>
ADC_voidInit();
    3d7a:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_voidInit>

CLCD_VoidGoToXY(5,0);
    3d7e:	85 e0       	ldi	r24, 0x05	; 5
    3d80:	60 e0       	ldi	r22, 0x00	; 0
    3d82:	0e 94 09 0a 	call	0x1412	; 0x1412 <CLCD_VoidGoToXY>
CLCD_u8SendString("Voltmeter");
    3d86:	87 ea       	ldi	r24, 0xA7	; 167
    3d88:	90 e0       	ldi	r25, 0x00	; 0
    3d8a:	0e 94 4a 09 	call	0x1294	; 0x1294 <CLCD_u8SendString>
    3d8e:	80 e0       	ldi	r24, 0x00	; 0
    3d90:	90 e0       	ldi	r25, 0x00	; 0
    3d92:	aa ef       	ldi	r26, 0xFA	; 250
    3d94:	b3 e4       	ldi	r27, 0x43	; 67
    3d96:	8b 87       	std	Y+11, r24	; 0x0b
    3d98:	9c 87       	std	Y+12, r25	; 0x0c
    3d9a:	ad 87       	std	Y+13, r26	; 0x0d
    3d9c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3da0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3da2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3da4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3da6:	20 e0       	ldi	r18, 0x00	; 0
    3da8:	30 e0       	ldi	r19, 0x00	; 0
    3daa:	4a e7       	ldi	r20, 0x7A	; 122
    3dac:	55 e4       	ldi	r21, 0x45	; 69
    3dae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3db2:	dc 01       	movw	r26, r24
    3db4:	cb 01       	movw	r24, r22
    3db6:	8f 83       	std	Y+7, r24	; 0x07
    3db8:	98 87       	std	Y+8, r25	; 0x08
    3dba:	a9 87       	std	Y+9, r26	; 0x09
    3dbc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3dbe:	6f 81       	ldd	r22, Y+7	; 0x07
    3dc0:	78 85       	ldd	r23, Y+8	; 0x08
    3dc2:	89 85       	ldd	r24, Y+9	; 0x09
    3dc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dc6:	20 e0       	ldi	r18, 0x00	; 0
    3dc8:	30 e0       	ldi	r19, 0x00	; 0
    3dca:	40 e8       	ldi	r20, 0x80	; 128
    3dcc:	5f e3       	ldi	r21, 0x3F	; 63
    3dce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3dd2:	88 23       	and	r24, r24
    3dd4:	2c f4       	brge	.+10     	; 0x3de0 <main+0x82>
		__ticks = 1;
    3dd6:	81 e0       	ldi	r24, 0x01	; 1
    3dd8:	90 e0       	ldi	r25, 0x00	; 0
    3dda:	9e 83       	std	Y+6, r25	; 0x06
    3ddc:	8d 83       	std	Y+5, r24	; 0x05
    3dde:	3f c0       	rjmp	.+126    	; 0x3e5e <main+0x100>
	else if (__tmp > 65535)
    3de0:	6f 81       	ldd	r22, Y+7	; 0x07
    3de2:	78 85       	ldd	r23, Y+8	; 0x08
    3de4:	89 85       	ldd	r24, Y+9	; 0x09
    3de6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3de8:	20 e0       	ldi	r18, 0x00	; 0
    3dea:	3f ef       	ldi	r19, 0xFF	; 255
    3dec:	4f e7       	ldi	r20, 0x7F	; 127
    3dee:	57 e4       	ldi	r21, 0x47	; 71
    3df0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3df4:	18 16       	cp	r1, r24
    3df6:	4c f5       	brge	.+82     	; 0x3e4a <main+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3df8:	6b 85       	ldd	r22, Y+11	; 0x0b
    3dfa:	7c 85       	ldd	r23, Y+12	; 0x0c
    3dfc:	8d 85       	ldd	r24, Y+13	; 0x0d
    3dfe:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e00:	20 e0       	ldi	r18, 0x00	; 0
    3e02:	30 e0       	ldi	r19, 0x00	; 0
    3e04:	40 e2       	ldi	r20, 0x20	; 32
    3e06:	51 e4       	ldi	r21, 0x41	; 65
    3e08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e0c:	dc 01       	movw	r26, r24
    3e0e:	cb 01       	movw	r24, r22
    3e10:	bc 01       	movw	r22, r24
    3e12:	cd 01       	movw	r24, r26
    3e14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e18:	dc 01       	movw	r26, r24
    3e1a:	cb 01       	movw	r24, r22
    3e1c:	9e 83       	std	Y+6, r25	; 0x06
    3e1e:	8d 83       	std	Y+5, r24	; 0x05
    3e20:	0f c0       	rjmp	.+30     	; 0x3e40 <main+0xe2>
    3e22:	80 e9       	ldi	r24, 0x90	; 144
    3e24:	91 e0       	ldi	r25, 0x01	; 1
    3e26:	9c 83       	std	Y+4, r25	; 0x04
    3e28:	8b 83       	std	Y+3, r24	; 0x03
    3e2a:	8b 81       	ldd	r24, Y+3	; 0x03
    3e2c:	9c 81       	ldd	r25, Y+4	; 0x04
    3e2e:	01 97       	sbiw	r24, 0x01	; 1
    3e30:	f1 f7       	brne	.-4      	; 0x3e2e <main+0xd0>
    3e32:	9c 83       	std	Y+4, r25	; 0x04
    3e34:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e36:	8d 81       	ldd	r24, Y+5	; 0x05
    3e38:	9e 81       	ldd	r25, Y+6	; 0x06
    3e3a:	01 97       	sbiw	r24, 0x01	; 1
    3e3c:	9e 83       	std	Y+6, r25	; 0x06
    3e3e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e40:	8d 81       	ldd	r24, Y+5	; 0x05
    3e42:	9e 81       	ldd	r25, Y+6	; 0x06
    3e44:	00 97       	sbiw	r24, 0x00	; 0
    3e46:	69 f7       	brne	.-38     	; 0x3e22 <main+0xc4>
    3e48:	14 c0       	rjmp	.+40     	; 0x3e72 <main+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e4a:	6f 81       	ldd	r22, Y+7	; 0x07
    3e4c:	78 85       	ldd	r23, Y+8	; 0x08
    3e4e:	89 85       	ldd	r24, Y+9	; 0x09
    3e50:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e56:	dc 01       	movw	r26, r24
    3e58:	cb 01       	movw	r24, r22
    3e5a:	9e 83       	std	Y+6, r25	; 0x06
    3e5c:	8d 83       	std	Y+5, r24	; 0x05
    3e5e:	8d 81       	ldd	r24, Y+5	; 0x05
    3e60:	9e 81       	ldd	r25, Y+6	; 0x06
    3e62:	9a 83       	std	Y+2, r25	; 0x02
    3e64:	89 83       	std	Y+1, r24	; 0x01
    3e66:	89 81       	ldd	r24, Y+1	; 0x01
    3e68:	9a 81       	ldd	r25, Y+2	; 0x02
    3e6a:	01 97       	sbiw	r24, 0x01	; 1
    3e6c:	f1 f7       	brne	.-4      	; 0x3e6a <main+0x10c>
    3e6e:	9a 83       	std	Y+2, r25	; 0x02
    3e70:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(500);
CLCD_voidClear();
    3e72:	0e 94 75 0a 	call	0x14ea	; 0x14ea <CLCD_voidClear>



while(1)
{
 ADC_u8StartSingleConversionSync(0,&Local_u16Digital);
    3e76:	9e 01       	movw	r18, r28
    3e78:	2f 5e       	subi	r18, 0xEF	; 239
    3e7a:	3f 4f       	sbci	r19, 0xFF	; 255
    3e7c:	80 e0       	ldi	r24, 0x00	; 0
    3e7e:	b9 01       	movw	r22, r18
    3e80:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <ADC_u8StartSingleConversionSync>
 Local_u16Analog= (uint16) (((uint32)Local_u16Digital * 5000UL) / 256UL);
    3e84:	89 89       	ldd	r24, Y+17	; 0x11
    3e86:	9a 89       	ldd	r25, Y+18	; 0x12
    3e88:	cc 01       	movw	r24, r24
    3e8a:	a0 e0       	ldi	r26, 0x00	; 0
    3e8c:	b0 e0       	ldi	r27, 0x00	; 0
    3e8e:	28 e8       	ldi	r18, 0x88	; 136
    3e90:	33 e1       	ldi	r19, 0x13	; 19
    3e92:	40 e0       	ldi	r20, 0x00	; 0
    3e94:	50 e0       	ldi	r21, 0x00	; 0
    3e96:	bc 01       	movw	r22, r24
    3e98:	cd 01       	movw	r24, r26
    3e9a:	0e 94 69 1f 	call	0x3ed2	; 0x3ed2 <__mulsi3>
    3e9e:	dc 01       	movw	r26, r24
    3ea0:	cb 01       	movw	r24, r22
    3ea2:	89 2f       	mov	r24, r25
    3ea4:	9a 2f       	mov	r25, r26
    3ea6:	ab 2f       	mov	r26, r27
    3ea8:	bb 27       	eor	r27, r27
    3eaa:	98 8b       	std	Y+16, r25	; 0x10
    3eac:	8f 87       	std	Y+15, r24	; 0x0f
 CLCD_VoidGoToXY(0,1);
    3eae:	80 e0       	ldi	r24, 0x00	; 0
    3eb0:	61 e0       	ldi	r22, 0x01	; 1
    3eb2:	0e 94 09 0a 	call	0x1412	; 0x1412 <CLCD_VoidGoToXY>
 CLCD_voidSendNumber(Local_u16Analog);
    3eb6:	8f 85       	ldd	r24, Y+15	; 0x0f
    3eb8:	98 89       	ldd	r25, Y+16	; 0x10
    3eba:	cc 01       	movw	r24, r24
    3ebc:	a0 e0       	ldi	r26, 0x00	; 0
    3ebe:	b0 e0       	ldi	r27, 0x00	; 0
    3ec0:	bc 01       	movw	r22, r24
    3ec2:	cd 01       	movw	r24, r26
    3ec4:	0e 94 7d 09 	call	0x12fa	; 0x12fa <CLCD_voidSendNumber>

CLCD_u8SendString("mV");
    3ec8:	81 eb       	ldi	r24, 0xB1	; 177
    3eca:	90 e0       	ldi	r25, 0x00	; 0
    3ecc:	0e 94 4a 09 	call	0x1294	; 0x1294 <CLCD_u8SendString>
    3ed0:	d2 cf       	rjmp	.-92     	; 0x3e76 <main+0x118>

00003ed2 <__mulsi3>:
    3ed2:	62 9f       	mul	r22, r18
    3ed4:	d0 01       	movw	r26, r0
    3ed6:	73 9f       	mul	r23, r19
    3ed8:	f0 01       	movw	r30, r0
    3eda:	82 9f       	mul	r24, r18
    3edc:	e0 0d       	add	r30, r0
    3ede:	f1 1d       	adc	r31, r1
    3ee0:	64 9f       	mul	r22, r20
    3ee2:	e0 0d       	add	r30, r0
    3ee4:	f1 1d       	adc	r31, r1
    3ee6:	92 9f       	mul	r25, r18
    3ee8:	f0 0d       	add	r31, r0
    3eea:	83 9f       	mul	r24, r19
    3eec:	f0 0d       	add	r31, r0
    3eee:	74 9f       	mul	r23, r20
    3ef0:	f0 0d       	add	r31, r0
    3ef2:	65 9f       	mul	r22, r21
    3ef4:	f0 0d       	add	r31, r0
    3ef6:	99 27       	eor	r25, r25
    3ef8:	72 9f       	mul	r23, r18
    3efa:	b0 0d       	add	r27, r0
    3efc:	e1 1d       	adc	r30, r1
    3efe:	f9 1f       	adc	r31, r25
    3f00:	63 9f       	mul	r22, r19
    3f02:	b0 0d       	add	r27, r0
    3f04:	e1 1d       	adc	r30, r1
    3f06:	f9 1f       	adc	r31, r25
    3f08:	bd 01       	movw	r22, r26
    3f0a:	cf 01       	movw	r24, r30
    3f0c:	11 24       	eor	r1, r1
    3f0e:	08 95       	ret

00003f10 <__udivmodsi4>:
    3f10:	a1 e2       	ldi	r26, 0x21	; 33
    3f12:	1a 2e       	mov	r1, r26
    3f14:	aa 1b       	sub	r26, r26
    3f16:	bb 1b       	sub	r27, r27
    3f18:	fd 01       	movw	r30, r26
    3f1a:	0d c0       	rjmp	.+26     	; 0x3f36 <__udivmodsi4_ep>

00003f1c <__udivmodsi4_loop>:
    3f1c:	aa 1f       	adc	r26, r26
    3f1e:	bb 1f       	adc	r27, r27
    3f20:	ee 1f       	adc	r30, r30
    3f22:	ff 1f       	adc	r31, r31
    3f24:	a2 17       	cp	r26, r18
    3f26:	b3 07       	cpc	r27, r19
    3f28:	e4 07       	cpc	r30, r20
    3f2a:	f5 07       	cpc	r31, r21
    3f2c:	20 f0       	brcs	.+8      	; 0x3f36 <__udivmodsi4_ep>
    3f2e:	a2 1b       	sub	r26, r18
    3f30:	b3 0b       	sbc	r27, r19
    3f32:	e4 0b       	sbc	r30, r20
    3f34:	f5 0b       	sbc	r31, r21

00003f36 <__udivmodsi4_ep>:
    3f36:	66 1f       	adc	r22, r22
    3f38:	77 1f       	adc	r23, r23
    3f3a:	88 1f       	adc	r24, r24
    3f3c:	99 1f       	adc	r25, r25
    3f3e:	1a 94       	dec	r1
    3f40:	69 f7       	brne	.-38     	; 0x3f1c <__udivmodsi4_loop>
    3f42:	60 95       	com	r22
    3f44:	70 95       	com	r23
    3f46:	80 95       	com	r24
    3f48:	90 95       	com	r25
    3f4a:	9b 01       	movw	r18, r22
    3f4c:	ac 01       	movw	r20, r24
    3f4e:	bd 01       	movw	r22, r26
    3f50:	cf 01       	movw	r24, r30
    3f52:	08 95       	ret

00003f54 <__divmodsi4>:
    3f54:	97 fb       	bst	r25, 7
    3f56:	09 2e       	mov	r0, r25
    3f58:	05 26       	eor	r0, r21
    3f5a:	0e d0       	rcall	.+28     	; 0x3f78 <__divmodsi4_neg1>
    3f5c:	57 fd       	sbrc	r21, 7
    3f5e:	04 d0       	rcall	.+8      	; 0x3f68 <__divmodsi4_neg2>
    3f60:	d7 df       	rcall	.-82     	; 0x3f10 <__udivmodsi4>
    3f62:	0a d0       	rcall	.+20     	; 0x3f78 <__divmodsi4_neg1>
    3f64:	00 1c       	adc	r0, r0
    3f66:	38 f4       	brcc	.+14     	; 0x3f76 <__divmodsi4_exit>

00003f68 <__divmodsi4_neg2>:
    3f68:	50 95       	com	r21
    3f6a:	40 95       	com	r20
    3f6c:	30 95       	com	r19
    3f6e:	21 95       	neg	r18
    3f70:	3f 4f       	sbci	r19, 0xFF	; 255
    3f72:	4f 4f       	sbci	r20, 0xFF	; 255
    3f74:	5f 4f       	sbci	r21, 0xFF	; 255

00003f76 <__divmodsi4_exit>:
    3f76:	08 95       	ret

00003f78 <__divmodsi4_neg1>:
    3f78:	f6 f7       	brtc	.-4      	; 0x3f76 <__divmodsi4_exit>
    3f7a:	90 95       	com	r25
    3f7c:	80 95       	com	r24
    3f7e:	70 95       	com	r23
    3f80:	61 95       	neg	r22
    3f82:	7f 4f       	sbci	r23, 0xFF	; 255
    3f84:	8f 4f       	sbci	r24, 0xFF	; 255
    3f86:	9f 4f       	sbci	r25, 0xFF	; 255
    3f88:	08 95       	ret

00003f8a <__prologue_saves__>:
    3f8a:	2f 92       	push	r2
    3f8c:	3f 92       	push	r3
    3f8e:	4f 92       	push	r4
    3f90:	5f 92       	push	r5
    3f92:	6f 92       	push	r6
    3f94:	7f 92       	push	r7
    3f96:	8f 92       	push	r8
    3f98:	9f 92       	push	r9
    3f9a:	af 92       	push	r10
    3f9c:	bf 92       	push	r11
    3f9e:	cf 92       	push	r12
    3fa0:	df 92       	push	r13
    3fa2:	ef 92       	push	r14
    3fa4:	ff 92       	push	r15
    3fa6:	0f 93       	push	r16
    3fa8:	1f 93       	push	r17
    3faa:	cf 93       	push	r28
    3fac:	df 93       	push	r29
    3fae:	cd b7       	in	r28, 0x3d	; 61
    3fb0:	de b7       	in	r29, 0x3e	; 62
    3fb2:	ca 1b       	sub	r28, r26
    3fb4:	db 0b       	sbc	r29, r27
    3fb6:	0f b6       	in	r0, 0x3f	; 63
    3fb8:	f8 94       	cli
    3fba:	de bf       	out	0x3e, r29	; 62
    3fbc:	0f be       	out	0x3f, r0	; 63
    3fbe:	cd bf       	out	0x3d, r28	; 61
    3fc0:	09 94       	ijmp

00003fc2 <__epilogue_restores__>:
    3fc2:	2a 88       	ldd	r2, Y+18	; 0x12
    3fc4:	39 88       	ldd	r3, Y+17	; 0x11
    3fc6:	48 88       	ldd	r4, Y+16	; 0x10
    3fc8:	5f 84       	ldd	r5, Y+15	; 0x0f
    3fca:	6e 84       	ldd	r6, Y+14	; 0x0e
    3fcc:	7d 84       	ldd	r7, Y+13	; 0x0d
    3fce:	8c 84       	ldd	r8, Y+12	; 0x0c
    3fd0:	9b 84       	ldd	r9, Y+11	; 0x0b
    3fd2:	aa 84       	ldd	r10, Y+10	; 0x0a
    3fd4:	b9 84       	ldd	r11, Y+9	; 0x09
    3fd6:	c8 84       	ldd	r12, Y+8	; 0x08
    3fd8:	df 80       	ldd	r13, Y+7	; 0x07
    3fda:	ee 80       	ldd	r14, Y+6	; 0x06
    3fdc:	fd 80       	ldd	r15, Y+5	; 0x05
    3fde:	0c 81       	ldd	r16, Y+4	; 0x04
    3fe0:	1b 81       	ldd	r17, Y+3	; 0x03
    3fe2:	aa 81       	ldd	r26, Y+2	; 0x02
    3fe4:	b9 81       	ldd	r27, Y+1	; 0x01
    3fe6:	ce 0f       	add	r28, r30
    3fe8:	d1 1d       	adc	r29, r1
    3fea:	0f b6       	in	r0, 0x3f	; 63
    3fec:	f8 94       	cli
    3fee:	de bf       	out	0x3e, r29	; 62
    3ff0:	0f be       	out	0x3f, r0	; 63
    3ff2:	cd bf       	out	0x3d, r28	; 61
    3ff4:	ed 01       	movw	r28, r26
    3ff6:	08 95       	ret

00003ff8 <_exit>:
    3ff8:	f8 94       	cli

00003ffa <__stop_program>:
    3ffa:	ff cf       	rjmp	.-2      	; 0x3ffa <__stop_program>
